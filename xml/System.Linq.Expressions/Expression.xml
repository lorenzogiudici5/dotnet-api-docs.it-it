<Type Name="Expression" FullName="System.Linq.Expressions.Expression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bc5fc73f4d181f975b2a4702ba91f867a8124526" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Expression extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.Expression" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Expression" />
  <TypeSignature Language="C++ CLI" Value="public ref class Expression abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="384e1-101">Fornisce la classe base dalla quale derivano le classi che rappresentano i nodi dell'albero delle espressioni.</span>
      <span class="sxs-lookup">
        <span data-stu-id="384e1-101">Provides the base class from which the classes that represent expression tree nodes are derived.</span>
      </span>
      <span data-ttu-id="384e1-102">Contiene anche metodi factory <see langword="static" /> (<see langword="Shared" /> in Visual Basic) per creare i vari di tipi di nodo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="384e1-102">It also contains <see langword="static" /> (<see langword="Shared" /> in Visual Basic) factory methods to create the various node types.</span>
      </span>
      <span data-ttu-id="384e1-103">Questa è una classe <see langword="abstract" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="384e1-103">This is an <see langword="abstract" /> class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-104">Esempio di codice seguente viene illustrato come creare un'espressione di blocco.</span><span class="sxs-lookup"><span data-stu-id="384e1-104">The following code example shows how to create a block expression.</span></span> <span data-ttu-id="384e1-105">L'espressione di blocco è costituita da due <xref:System.Linq.Expressions.MethodCallExpression> oggetti e uno <xref:System.Linq.Expressions.ConstantExpression> oggetto.</span><span class="sxs-lookup"><span data-stu-id="384e1-105">The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-106">Costruisce una nuova istanza di <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-106">Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Expression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="384e1-107">Costruisce una nuova istanza di <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-107">Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression (System.Linq.Expressions.ExpressionType nodeType, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Linq.Expressions.ExpressionType nodeType, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Expression(System::Linq::Expressions::ExpressionType nodeType, Type ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="nodeType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="nodeType">
          <span data-ttu-id="384e1-108">
            <see cref="T:System.Linq.Expressions.ExpressionType" /> da impostare come tipo di nodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-108">The <see cref="T:System.Linq.Expressions.ExpressionType" /> to set as the node type.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-109">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> dell'oggetto <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-109">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of this <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-110">Inizializza una nuova istanza della classe <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-110">Initializes a new instance of the <see cref="T:System.Linq.Expressions.Expression" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-111">Questo costruttore viene chiamato dai costruttori nelle classi derivate.</span><span class="sxs-lookup"><span data-stu-id="384e1-111">This constructor is called from constructors in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">
          <span data-ttu-id="384e1-112">Visitatore con cui visitare questo nodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-112">The visitor to visit this node with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-113">Invia al metodo Visit specifico per questo tipo di nodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-113">Dispatches to the specific visit method for this node type.</span>
          </span>
          <span data-ttu-id="384e1-114">Ad esempio, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> chiama <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-114">For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-115">Risultato della visita di questo nodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-115">The result of visiting this node.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-116">Questa implementazione predefinita per <xref:System.Linq.Expressions.ExpressionType.Extension> chiamate nodi <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span><span class="sxs-lookup"><span data-stu-id="384e1-116">This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span> <span data-ttu-id="384e1-117">Eseguire l'override di questo metodo per chiamare un metodo più specifico in una classe derivata visitatore della <xref:System.Linq.Expressions.ExpressionVisitor> classe.</span><span class="sxs-lookup"><span data-stu-id="384e1-117">Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class.</span></span> <span data-ttu-id="384e1-118">Tuttavia, deve sempre supportare visitatori sconosciuti chiamando <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span><span class="sxs-lookup"><span data-stu-id="384e1-118">However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-119">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di addizione aritmetica che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-119">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Add(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-120">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-120">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-121">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-121">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-122">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di addizione aritmetica che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-122">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-123">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-123">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-124">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-124">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-125">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-125">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-126">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-126">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-127">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-127">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-128">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-128">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-129">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-129">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-130">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-130">Implementing Method</span></span>  
 <span data-ttu-id="384e1-131">Le regole seguenti determinano il metodo di implementazione selezionato per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-131">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-132">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di addizione, la <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-132">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-133">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-133">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-134">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-134">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-135">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-135">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-136">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-136">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-137">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-137">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-138">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-138">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-139">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-139">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-140">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-140">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-141">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-141">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-142">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-142">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-143">Il tipo del nodo è il tipo di risultato dell'operatore di addizione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-143">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="384e1-144">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-144">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-145">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di addizione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-145">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-146">Esempio di codice seguente viene illustrato come creare un'espressione che aggiunge due numeri interi.</span><span class="sxs-lookup"><span data-stu-id="384e1-146">The following code example shows how to create an expression that adds two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#1)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-147">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-147">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-148">L'operatore di addizione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-148">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Add(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-149">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-149">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-150">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-150">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-151">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-151">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-152">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di addizione aritmetica che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-152">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span>
          </span>
          <span data-ttu-id="384e1-153">Il metodo di implementazione può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-153">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-154">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-154">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-155">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-155">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-156">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-156">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-157">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-157">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-158">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-158">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-159">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-159">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-160">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-160">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-161">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-161">Implementing Method</span></span>  
 <span data-ttu-id="384e1-162">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-162">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-163">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-163">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-164">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di addizione, la <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-164">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-165">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-165">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-166">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-166">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-167">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-167">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-168">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-168">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-169">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-169">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-170">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-170">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-171">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-171">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-172">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-172">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-173">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-173">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-174">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-174">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-175">Il tipo del nodo è il tipo di risultato dell'operatore di addizione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-175">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="384e1-176">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-176">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-177">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di addizione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-177">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-178">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-178">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-179">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-179">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-180">
            <paramref name="method" /> è <see langword="null" /> e l'operatore di addizione non è definito per i tipi <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-180">
              <paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-181">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di addizione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-181">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-182">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-182">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-183">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-183">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-184">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di addizione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-184">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-185">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-185">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-186">Esempio di codice seguente viene illustrato come creare un'espressione che aggiunge un valore a una variabile integer e quindi assegna il risultato dell'operazione alla variabile.</span><span class="sxs-lookup"><span data-stu-id="384e1-186">The following code example shows how to create an expression that adds a value to an integer variable and then assigns the result of the operation to the variable.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#18)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-187">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-187">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-188">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-188">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-189">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-189">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-190">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di addizione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-190">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-191">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-191">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-192">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-192">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-193">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-193">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-194">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-194">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-195">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-195">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-196">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di addizione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-196">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-197">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-197">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-198">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di addizione che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-198">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-199">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-199">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-200">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-200">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-201">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di addizione che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-201">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-202">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-202">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-203">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-203">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-204">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-204">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-205">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-205">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-206">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di addizione che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-206">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-207">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-207">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-208">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-208">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-209">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-209">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-210">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-210">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-211">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-211">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-212">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di addizione che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-212">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-213">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-213">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-214">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di addizione aritmetica che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-214">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-215">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-215">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-216">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-216">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-217">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di addizione aritmetica che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-217">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-218">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-218">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-219">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-219">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-220">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-220">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-221">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-221">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-222">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-222">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-223">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-223">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-224">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-224">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-225">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-225">Implementing Method</span></span>  
 <span data-ttu-id="384e1-226">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-226">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-227">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di addizione, la <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-227">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-228">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-228">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-229">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-229">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-230">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-230">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-231">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-231">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-232">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-232">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-233">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-233">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-234">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-234">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-235">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-235">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-236">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-236">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-237">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-237">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-238">Il tipo del nodo è il tipo di risultato dell'operatore di addizione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-238">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="384e1-239">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-239">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-240">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di addizione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-240">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-241">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-241">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-242">L'operatore di addizione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-242">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-243">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-243">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-244">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-244">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-245">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-245">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-246">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di addizione aritmetica che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-246">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span>
          </span>
          <span data-ttu-id="384e1-247">Il metodo di implementazione può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-247">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-248">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-248">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-249">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-249">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-250">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-250">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-251">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-251">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-252">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-252">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-253">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-253">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-254">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-254">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-255">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-255">Implementing Method</span></span>  
 <span data-ttu-id="384e1-256">Il metodo di implementazione per l'operazione viene scelto in base alle regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="384e1-256">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="384e1-257">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-257">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-258">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di addizione, la <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-258">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-259">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-259">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-260">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-260">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-261">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-261">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-262">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-262">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-263">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-263">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-264">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-264">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-265">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-265">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-266">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-266">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-267">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-267">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-268">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-268">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-269">Il tipo del nodo è il tipo di risultato dell'operatore di addizione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-269">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="384e1-270">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-270">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-271">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di addizione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-271">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-272">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-272">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-273">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-273">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-274">
            <paramref name="method" /> è <see langword="null" /> e l'operatore di addizione non è definito per i tipi <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-274">
              <paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="And">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-275">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione <see langword="AND" /> bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-275">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ And(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-276">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-276">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-277">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-277">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-278">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione <see langword="AND" /> bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-278">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-279">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.And" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-279">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-280">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-280">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-281">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-281">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-282">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-282">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-283">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-283">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-284">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-284">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-285">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-285">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-286">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-286">Implementing Method</span></span>  
 <span data-ttu-id="384e1-287">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-287">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-288">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload bit per bit `AND` (operatore), il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-288">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-289">In caso contrario, se `left`. Tipo e `right`. Type sono tipi integrali o booleani, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-289">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-290">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-290">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-291">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-291">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-292">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-292">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-293">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-293">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-294">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-294">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-295">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-295">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-296">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-296">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-297">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-297">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-298">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-298">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-299">Il tipo del nodo è il tipo di risultato degli operatori bit per bit `AND` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-299">The type of the node is the result type of the predefined bitwise `AND` operator.</span></span>  
  
-   <span data-ttu-id="384e1-300">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-300">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-301">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato degli operatori bit per bit `AND` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-301">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-302">Esempio di codice seguente viene illustrato come creare un'espressione che rappresenta un'operazione AND logica su due valori booleani.</span><span class="sxs-lookup"><span data-stu-id="384e1-302">The following code example shows how to create an expression that represents a logical AND operation on two Boolean values.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#2)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-303">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-303">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-304">L'operatore <see langword="AND" /> bit per bit non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-304">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ And(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-305">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-305">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-306">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-306">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-307">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-307">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-308">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione <see langword="AND" /> bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-308">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span>
          </span>
          <span data-ttu-id="384e1-309">Il metodo di implementazione può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-309">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-310">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.And" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-310">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-311">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-311">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-312">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-312">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-313">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-313">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-314">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-314">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-315">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-315">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-316">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-316">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-317">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-317">Implementing Method</span></span>  
 <span data-ttu-id="384e1-318">Il metodo di implementazione per l'operazione viene scelto in base alle regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="384e1-318">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="384e1-319">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-319">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-320">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload bit per bit `AND` (operatore), il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-320">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-321">In caso contrario, se `left`. Tipo e `right`. Type sono tipi integrali o booleani, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-321">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-322">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-322">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-323">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-323">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-324">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-324">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-325">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-325">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-326">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-326">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-327">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-327">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-328">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-328">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-329">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-329">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-330">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-330">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-331">Il tipo del nodo è il tipo di risultato degli operatori bit per bit `AND` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-331">The type of the node is the result type of the predefined bitwise `AND` operator.</span></span>  
  
-   <span data-ttu-id="384e1-332">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-332">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-333">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato degli operatori bit per bit `AND` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-333">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-334">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-334">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-335">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-335">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-336">
            <paramref name="method" /> è <see langword="null" /> e l'operatore bit per bit <see langword="AND" /> non è definito per i tipi <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-336">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AndAlso">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-337">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione <see langword="AND" /> condizionale che valuta il secondo operando solo se il primo operando restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-337">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlso (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAlso(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-338">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-338">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-339">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-339">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-340">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione <see langword="AND" /> condizionale che valuta il secondo operando solo se il primo operando restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-340">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-341">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-341">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-342">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-342">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-343">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-343">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-344">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-344">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-345">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-345">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-346">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-346">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-347">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-347">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-348">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-348">Implementing Method</span></span>  
 <span data-ttu-id="384e1-349">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-349">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-350">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload bit per bit `AND` (operatore), il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-350">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="384e1-351">Condizionale `AND` operatore non può essere sottoposto a overload in c# o [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].</span><span class="sxs-lookup"><span data-stu-id="384e1-351">The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].</span></span> <span data-ttu-id="384e1-352">Tuttavia, condizionale `AND` operatore viene valutato utilizzando bit per bit `AND` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-352">However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator.</span></span> <span data-ttu-id="384e1-353">Di conseguenza, un overload definito dall'utente di bit per bit `AND` operatore può essere il metodo di implementazione per questo tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-353">Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="384e1-354">In caso contrario, se `left`. Tipo e `right`. Type sono tipi booleani, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-354">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-355">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-355">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-356">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-356">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-357">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-357">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-358">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-358">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-359">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-359">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-360">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-360">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-361">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-361">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-362">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-362">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-363">`left`. Tipo e `right`. Tipo sono dello stesso tipo Boolean.</span><span class="sxs-lookup"><span data-stu-id="384e1-363">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="384e1-364">Se `left`. Tipo e `right`. Tipo non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-364">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-365">Il tipo del nodo è il tipo di risultato di condizionale predefinito `AND` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-365">The type of the node is the result type of the predefined conditional `AND` operator.</span></span>  
  
-   <span data-ttu-id="384e1-366">Se `left`. Tipo e `right`. Tipo che ammette valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-366">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-367">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato di condizionale predefinito `AND` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-367">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-368">Esempio di codice seguente viene illustrato come per creare un'espressione che esegue una logica e operazione nel relativo due operandi solo se il primo operando restituisce `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-368">The following code example shows how to create an expression that performs a logical AND operation on its two operands only if the first operand evaluates to `true`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#19)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-369">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-369">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-370">L'operatore <see langword="AND" /> bit per bit non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-370">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="384e1-371">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-371">-or-</span>
          </span>
          <span data-ttu-id="384e1-372">
            <paramref name="left" />.Type e <paramref name="right" />.Type non sono dello stesso tipo Boolean.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-372">
              <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlso (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAlso(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-373">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-373">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-374">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-374">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-375">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-375">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-376">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione <see langword="AND" /> condizionale che valuta il secondo operando solo se il primo operando viene risolto in true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-376">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand is resolved to true.</span>
          </span>
          <span data-ttu-id="384e1-377">Il metodo di implementazione può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-377">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-378">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-378">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-379">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-379">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-380">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-380">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-381">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-381">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-382">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-382">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-383">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-383">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-384">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-384">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-385">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-385">Implementing Method</span></span>  
 <span data-ttu-id="384e1-386">Il metodo di implementazione per l'operazione viene scelto in base alle regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="384e1-386">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="384e1-387">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-387">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-388">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload bit per bit `AND` (operatore), il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-388">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="384e1-389">Condizionale `AND` operatore non può essere sottoposto a overload in c# o [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].</span><span class="sxs-lookup"><span data-stu-id="384e1-389">The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].</span></span> <span data-ttu-id="384e1-390">Tuttavia, condizionale `AND` operatore viene valutato utilizzando bit per bit `AND` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-390">However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator.</span></span> <span data-ttu-id="384e1-391">Di conseguenza, un overload definito dall'utente di bit per bit `AND` operatore può essere il metodo di implementazione per questo tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-391">Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="384e1-392">In caso contrario, se `left`. Tipo e `right`. Type sono tipi booleani, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-392">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-393">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-393">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-394">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-394">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-395">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-395">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-396">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-396">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-397">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-397">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-398">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-398">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-399">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-399">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-400">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-400">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-401">`left`. Tipo e `right`. Tipo sono dello stesso tipo Boolean.</span><span class="sxs-lookup"><span data-stu-id="384e1-401">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="384e1-402">Se `left`. Tipo e `right`. Tipo non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-402">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-403">Il tipo del nodo è il tipo di risultato di condizionale predefinito `AND` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-403">The type of the node is the result type of the predefined conditional `AND` operator.</span></span>  
  
-   <span data-ttu-id="384e1-404">Se `left`. Tipo e `right`. Tipo che ammette valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-404">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-405">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato di condizionale predefinito `AND` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-405">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-406">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-406">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-407">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-407">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-408">
            <paramref name="method" /> è <see langword="null" /> e l'operatore bit per bit <see langword="AND" /> non è definito per i tipi <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-408">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="384e1-409">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-409">-or-</span>
          </span>
          <span data-ttu-id="384e1-410">
            <paramref name="method" /> è <see langword="null" /> e <paramref name="left" />.Type e <paramref name="right" />.Type non sono dello stesso tipo Boolean.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-410">
              <paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AndAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-411">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione AND bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-411">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-412">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-412">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-413">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-413">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-414">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione AND bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-414">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-415">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-415">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-416">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-416">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-417">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-417">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-418">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-418">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-419">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione AND bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-419">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-420">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-420">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-421">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-421">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-422">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-422">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-423">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-423">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-424">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-424">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-425">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione AND bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-425">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-426">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-426">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrayAccess">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-427">Crea un oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> per accedere a una matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-427">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayAccess (array As Expression, indexes As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ ArrayAccess(System::Linq::Expressions::Expression ^ array, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="384e1-428">Espressione che rappresenta la matrice multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-428">An expression that represents the multidimensional array.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="384e1-429">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente le espressioni usate per indicizzare la matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-429">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing expressions used to index the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-430">Crea un oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> per accedere a una matrice multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-430">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access a multidimensional array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-431">Oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-431">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-432">L'espressione che rappresenta la matrice può essere ottenuto utilizzando il <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> metodo, o tramite <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> o <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span><span class="sxs-lookup"><span data-stu-id="384e1-432">The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-433">Esempio di codice seguente viene illustrato come modificare il valore di un elemento in una matrice multidimensionale tramite il `ArrayAccess` metodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-433">The following code example shows how to change the value of an element in a multidimensional array by using the `ArrayAccess` method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#21)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayAccess (array As Expression, ParamArray indexes As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ ArrayAccess(System::Linq::Expressions::Expression ^ array, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="384e1-434">Espressione che rappresenta la matrice da indicizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-434">An expression representing the array to index.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="384e1-435">Matrice contenente le espressioni usate per indicizzare la matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-435">An array that contains expressions used to index the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-436">Crea un oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> per accedere a una matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-436">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-437">Oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-437">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-438">L'espressione che rappresenta la matrice può essere ottenuto utilizzando il <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> metodo, o tramite <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> o <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span><span class="sxs-lookup"><span data-stu-id="384e1-438">The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span></span>  
  
 <span data-ttu-id="384e1-439">Per le matrici multidimensionali, usare il <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-439">For multidimensional arrays, use the <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-440">Esempio di codice seguente viene illustrato come modificare un valore di un elemento di matrice utilizzando la `ArrayAccess` metodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-440">The following code example shows how to change a value of an array element by using the `ArrayAccess` method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#20)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrayIndex">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-441">Crea un oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'applicazione di un operatore di indice di matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-441">Creates an <see cref="T:System.Linq.Expressions.Expression" /> that represents applying an array index operator.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, indexes As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="384e1-442">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-442">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="384e1-443">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-443">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-444">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" />che rappresenta l'applicazione di un operatore di indice di matrice a una matrice con numero di dimensioni maggiore di 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-444">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to an array of rank more than one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-445">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-445">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-446">Ogni elemento di `indexes` deve avere <xref:System.Linq.Expressions.Expression.Type%2A> uguale a <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="384e1-446">Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>.</span></span> <span data-ttu-id="384e1-447">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `array` deve rappresentare un tipo di matrice il cui numero di dimensioni corrisponda al numero di elementi in `indexes`.</span><span class="sxs-lookup"><span data-stu-id="384e1-447">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.</span></span>  
  
 <span data-ttu-id="384e1-448">Se il rango di `array`. Tipo è 1, questo metodo restituisce un <xref:System.Linq.Expressions.BinaryExpression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-448">If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="384e1-449">Il <xref:System.Linq.Expressions.BinaryExpression.Left%2A> è impostata su `array` e <xref:System.Linq.Expressions.BinaryExpression.Right%2A> proprietà è impostata per il singolo elemento `indexes`.</span><span class="sxs-lookup"><span data-stu-id="384e1-449">The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`.</span></span> <span data-ttu-id="384e1-450">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà del <xref:System.Linq.Expressions.BinaryExpression> rappresenta il tipo di elemento di `array`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-450">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.</span></span>  
  
 <span data-ttu-id="384e1-451">Se il rango di `array`. Tipo è più di uno, questo metodo restituisce un <xref:System.Linq.Expressions.MethodCallExpression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-451">If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>.</span></span> <span data-ttu-id="384e1-452">Il <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> è impostata sul <xref:System.Reflection.MethodInfo> che descrive il metodo di istanza pubblico `Get` al tipo rappresentato dal <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `array`.</span><span class="sxs-lookup"><span data-stu-id="384e1-452">The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-453">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> metodo per creare un <xref:System.Linq.Expressions.MethodCallExpression> che rappresenta l'indicizzazione in una matrice bidimensionale.</span><span class="sxs-lookup"><span data-stu-id="384e1-453">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-454">
            <paramref name="array" /> o <paramref name="indexes" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-454">
              <paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-455">
            <paramref name="array" />.Type non rappresenta un tipo matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-455">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
          <span data-ttu-id="384e1-456">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-456">-or-</span>
          </span>
          <span data-ttu-id="384e1-457">Il numero di dimensioni di <paramref name="array" />.Type non corrisponde al numero di elementi in <paramref name="indexes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-457">The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.</span>
          </span>
          <span data-ttu-id="384e1-458">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-458">-or-</span>
          </span>
          <span data-ttu-id="384e1-459">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di uno o più elementi di <paramref name="indexes" /> non rappresenta il tipo <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-459">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, index As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, System::Linq::Expressions::Expression ^ index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="index" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="384e1-460">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-460">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="384e1-461">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-461">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-462">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta l'applicazione di un operatore di indice di matrice a una matrice con numero di dimensioni pari a 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-462">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents applying an array index operator to an array of rank one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-463">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-463">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-464">`index` deve rappresentare un indice di tipo <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="384e1-464">`index` must represent an index of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="384e1-465">Il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.BinaryExpression> è `null`ed entrambi <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> sono impostate su `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-465">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null`, and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span> <span data-ttu-id="384e1-466">Il <xref:System.Linq.Expressions.Expression.Type%2A> è uguale al tipo di elemento di proprietà `array`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-466">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the element type of `array`.Type.</span></span> <span data-ttu-id="384e1-467">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-467">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-468">
            <paramref name="array" /> o <paramref name="index" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-468">
              <paramref name="array" /> or <paramref name="index" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-469">
            <paramref name="array" />.Type non rappresenta un tipo matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-469">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
          <span data-ttu-id="384e1-470">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-470">-or-</span>
          </span>
          <span data-ttu-id="384e1-471">
            <paramref name="array" />.Type rappresenta un tipo matrice il cui numero di dimensioni non è pari a 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-471">
              <paramref name="array" />.Type represents an array type whose rank is not 1.</span>
          </span>
          <span data-ttu-id="384e1-472">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-472">-or-</span>
          </span>
          <span data-ttu-id="384e1-473">
            <paramref name="index" />.Type non rappresenta il tipo <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-473">
              <paramref name="index" />.Type does not represent the <see cref="T:System.Int32" /> type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, ParamArray indexes As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="384e1-474">Matrice di istanze o indici di <see cref="T:System.Linq.Expressions.Expression" /> per l'operazione di indicizzazione delle matrici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-474">An array of <see cref="T:System.Linq.Expressions.Expression" /> instances - indexes for the array index operation.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="384e1-475">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-475">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-476">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta l'applicazione di un operatore di indice di matrice a una matrice multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-476">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to a multidimensional array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-477">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-477">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-478">Ogni elemento di `indexes` deve avere <xref:System.Linq.Expressions.Expression.Type%2A> uguale a <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="384e1-478">Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>.</span></span> <span data-ttu-id="384e1-479">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `array` deve rappresentare un tipo di matrice il cui numero di dimensioni corrisponda al numero di elementi in `indexes`.</span><span class="sxs-lookup"><span data-stu-id="384e1-479">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.</span></span>  
  
 <span data-ttu-id="384e1-480">Se il rango di `array`. Tipo è 1, questo metodo restituisce un <xref:System.Linq.Expressions.BinaryExpression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-480">If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="384e1-481">Il <xref:System.Linq.Expressions.BinaryExpression.Left%2A> è impostata su `array` e <xref:System.Linq.Expressions.BinaryExpression.Right%2A> proprietà è impostata per il singolo elemento `indexes`.</span><span class="sxs-lookup"><span data-stu-id="384e1-481">The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`.</span></span> <span data-ttu-id="384e1-482">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà del <xref:System.Linq.Expressions.BinaryExpression> rappresenta il tipo di elemento di `array`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-482">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.</span></span>  
  
 <span data-ttu-id="384e1-483">Se il rango di `array`. Tipo è più di uno, questo metodo restituisce un <xref:System.Linq.Expressions.MethodCallExpression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-483">If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>.</span></span> <span data-ttu-id="384e1-484">Il <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> è impostata sul <xref:System.Reflection.MethodInfo> che descrive il metodo di istanza pubblico `Get` al tipo rappresentato dal <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `array`.</span><span class="sxs-lookup"><span data-stu-id="384e1-484">The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-485">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> metodo per creare un <xref:System.Linq.Expressions.MethodCallExpression> che rappresenta l'indicizzazione in una matrice bidimensionale.</span><span class="sxs-lookup"><span data-stu-id="384e1-485">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-486">
            <paramref name="array" /> o <paramref name="indexes" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-486">
              <paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-487">
            <paramref name="array" />.Type non rappresenta un tipo matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-487">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
          <span data-ttu-id="384e1-488">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-488">-or-</span>
          </span>
          <span data-ttu-id="384e1-489">Il numero di dimensioni di <paramref name="array" />.Type non corrisponde al numero di elementi in <paramref name="indexes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-489">The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.</span>
          </span>
          <span data-ttu-id="384e1-490">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-490">-or-</span>
          </span>
          <span data-ttu-id="384e1-491">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di uno o più elementi di <paramref name="indexes" /> non rappresenta il tipo <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-491">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayLength">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ArrayLength (System.Linq.Expressions.Expression array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ArrayLength(class System.Linq.Expressions.Expression array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayLength (array As Expression) As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ArrayLength(System::Linq::Expressions::Expression ^ array);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="384e1-492">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-492">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-493">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'espressione per ottenere la lunghezza di una matrice unidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-493">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression for obtaining the length of a one-dimensional array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-494">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> e la cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> è uguale a <paramref name="array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-494">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to <paramref name="array" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-495">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà `array` deve rappresentare un tipo di matrice.</span><span class="sxs-lookup"><span data-stu-id="384e1-495">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type.</span></span>  
  
 <span data-ttu-id="384e1-496">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> è uguale a <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="384e1-496">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is equal to <xref:System.Int32>.</span></span> <span data-ttu-id="384e1-497">Il <xref:System.Linq.Expressions.UnaryExpression.Method%2A> proprietà `null`ed entrambi <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> sono impostate su `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-497">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`, and both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-498">
            <paramref name="array" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-498">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-499">
            <paramref name="array" />.Type non rappresenta un tipo matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-499">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Assign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Assign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Assign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Assign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Assign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-500">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-500">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-501">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-501">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-502">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-502">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-503">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-503">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-504">Il `Assign` espressione copia un valore per i tipi valore e copia un riferimento per i tipi di riferimento.</span><span class="sxs-lookup"><span data-stu-id="384e1-504">The `Assign` expression copies a value for value types, and it copies a reference for reference types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-505">Esempio di codice seguente viene illustrato come creare un'espressione che rappresenta un'operazione di assegnazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-505">The following code example shows how to create an expression that represents an assignment operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#12)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Bind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-506">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberAssignment" /> che rappresenta l'inizializzazione di un membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-506">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberAssignment ^ Bind(System::Reflection::MemberInfo ^ member, System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="384e1-507">Oggetto <see cref="T:System.Reflection.MemberInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-507">A <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="expression">
          <span data-ttu-id="384e1-508">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-508">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-509">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberAssignment" /> che rappresenta l'inizializzazione di un campo o di una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-509">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-510">Oggetto <see cref="T:System.Linq.Expressions.MemberAssignment" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> e <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-510">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-511">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `expression` deve essere assegnabile al tipo rappresentato dal <xref:System.Reflection.FieldInfo.FieldType%2A> o <xref:System.Reflection.PropertyInfo.PropertyType%2A> proprietà `member`.</span><span class="sxs-lookup"><span data-stu-id="384e1-511">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.FieldInfo.FieldType%2A> or <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of `member`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-512">
            <paramref name="member" /> o <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-512">
              <paramref name="member" /> or <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-513">
            <paramref name="member" /> non rappresenta un campo o una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-513">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="384e1-514">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-514">-or-</span>
          </span>
          <span data-ttu-id="384e1-515">La proprietà rappresentata da <paramref name="member" /> non dispone di una funzione di accesso <see langword="set" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-515">The property represented by <paramref name="member" /> does not have a <see langword="set" /> accessor.</span>
          </span>
          <span data-ttu-id="384e1-516">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-516">-or-</span>
          </span>
          <span data-ttu-id="384e1-517">
            <paramref name="expression" />.Type non è assegnabile al tipo del campo o della proprietà rappresentato da <paramref name="member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-517">
              <paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberAssignment ^ Bind(System::Reflection::MethodInfo ^ propertyAccessor, System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="384e1-518">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo della funzione di accesso della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-518">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="expression">
          <span data-ttu-id="384e1-519">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-519">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-520">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberAssignment" /> che rappresenta l'inizializzazione di un membro usando un metodo della funzione di accesso alle proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-520">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-521">Oggetto <see cref="T:System.Linq.Expressions.MemberAssignment" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> è impostata sull'oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà a cui si accede in <paramref name="propertyAccessor" /> e la cui proprietà <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> è impostata su <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-521">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property set to <paramref name="expression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-522">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `expression` deve essere assegnabile al tipo rappresentato dal <xref:System.Reflection.PropertyInfo.PropertyType%2A> proprietà della proprietà accessibile `propertyAccessor`.</span><span class="sxs-lookup"><span data-stu-id="384e1-522">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the property accessed in `propertyAccessor`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-523">
            <paramref name="propertyAccessor" /> o <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-523">
              <paramref name="propertyAccessor" /> or <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-524">
            <paramref name="propertyAccessor" /> non rappresenta un metodo della funzione di accesso della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-524">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="384e1-525">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-525">-or-</span>
          </span>
          <span data-ttu-id="384e1-526">La proprietà a cui accede <paramref name="propertyAccessor" /> non dispone di una funzione di accesso <see langword="set" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-526">The property accessed by <paramref name="propertyAccessor" /> does not have a <see langword="set" /> accessor.</span>
          </span>
          <span data-ttu-id="384e1-527">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-527">-or-</span>
          </span>
          <span data-ttu-id="384e1-528">
            <paramref name="expression" />.Type non è assegnabile al tipo del campo o della proprietà rappresentato da <paramref name="member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-528">
              <paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Block">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-529">Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-529">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (expressions As IEnumerable(Of Expression)) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expressions">
          <span data-ttu-id="384e1-530">Espressioni nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-530">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-531">Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni specificate e non ha variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-531">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-532">Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-532">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-533">Quando l'espressione di blocco viene eseguito, restituisce il valore dell'ultima espressione nel blocco.</span><span class="sxs-lookup"><span data-stu-id="384e1-533">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (ParamArray expressions As Expression()) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expressions">
          <span data-ttu-id="384e1-534">Espressioni nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-534">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-535">Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni specificate e non ha variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-535">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-536">Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-536">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-537">Quando l'espressione di blocco viene eseguito, restituisce il valore dell'ultima espressione nel blocco.</span><span class="sxs-lookup"><span data-stu-id="384e1-537">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-538">Esempio di codice seguente viene illustrato come creare un'espressione di blocco.</span><span class="sxs-lookup"><span data-stu-id="384e1-538">The following code example shows how to create a block expression.</span></span> <span data-ttu-id="384e1-539">L'espressione di blocco è costituita da due <xref:System.Linq.Expressions.MethodCallExpression> oggetti e uno <xref:System.Linq.Expressions.ConstantExpression> oggetto.</span><span class="sxs-lookup"><span data-stu-id="384e1-539">The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (variables As IEnumerable(Of ParameterExpression), expressions As IEnumerable(Of Expression)) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="384e1-540">Variabili nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-540">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="384e1-541">Espressioni nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-541">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-542">Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni e le variabili specificate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-542">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-543">Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-543">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-544">Quando l'espressione di blocco viene eseguito, restituisce il valore dell'ultima espressione nel blocco.</span><span class="sxs-lookup"><span data-stu-id="384e1-544">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-545">Esempio di codice seguente viene illustrato come passare un parametro a un'espressione di blocco e l'elaborazione di questo parametro in un blocco.</span><span class="sxs-lookup"><span data-stu-id="384e1-545">The following code example shows how to pass a parameter to a block expression and process this parameter within a block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#14)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (variables As IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="384e1-546">Variabili nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-546">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="384e1-547">Espressioni nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-547">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-548">Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni e le variabili specificate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-548">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-549">Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-549">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-550">Quando l'espressione di blocco viene eseguito, restituisce il valore dell'ultima espressione nel blocco.</span><span class="sxs-lookup"><span data-stu-id="384e1-550">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="384e1-551">Prima espressione nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-551">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-552">Seconda espressione nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-552">The second expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-553">Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene due espressioni e non dispone di variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-553">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains two expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-554">Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-554">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-555">Quando l'espressione di blocco viene eseguito, restituisce il valore dell'ultima espressione nel blocco.</span><span class="sxs-lookup"><span data-stu-id="384e1-555">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-556">Tipo di risultato del blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-556">The result type of the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="384e1-557">Espressioni nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-557">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-558">Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni specificate, non dispone di variabili e dispone del tipo di risultato specifico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-558">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-559">Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-559">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-560">Tipo di risultato del blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-560">The result type of the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="384e1-561">Espressioni nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-561">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-562">Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni specificate, non dispone di variabili e dispone del tipo di risultato specifico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-562">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-563">Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-563">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="384e1-564">Prima espressione nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-564">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-565">Seconda espressione nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-565">The second expression in the block.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="384e1-566">Terza espressione nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-566">The third expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-567">Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene tre espressioni e non dispone di variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-567">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains three expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-568">Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-568">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-569">Quando l'espressione di blocco viene eseguito, restituisce il valore dell'ultima espressione nel blocco.</span><span class="sxs-lookup"><span data-stu-id="384e1-569">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-570">Tipo di risultato del blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-570">The result type of the block.</span>
          </span>
        </param>
        <param name="variables">
          <span data-ttu-id="384e1-571">Variabili nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-571">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="384e1-572">Espressioni nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-572">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-573">Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni e le variabili specificate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-573">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-574">Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-574">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-575">Tipo di risultato del blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-575">The result type of the block.</span>
          </span>
        </param>
        <param name="variables">
          <span data-ttu-id="384e1-576">Variabili nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-576">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="384e1-577">Espressioni nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-577">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-578">Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene le espressioni e le variabili specificate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-578">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-579">Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-579">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="384e1-580">Prima espressione nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-580">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-581">Seconda espressione nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-581">The second expression in the block.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="384e1-582">Terza espressione nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-582">The third expression in the block.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="384e1-583">Quarta espressione nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-583">The fourth expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-584">Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene quattro espressioni e non dispone di variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-584">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains four expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-585">Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-585">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-586">Quando l'espressione di blocco viene eseguito, restituisce il valore dell'ultima espressione nel blocco.</span><span class="sxs-lookup"><span data-stu-id="384e1-586">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3, System::Linq::Expressions::Expression ^ arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="384e1-587">Prima espressione nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-587">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-588">Seconda espressione nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-588">The second expression in the block.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="384e1-589">Terza espressione nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-589">The third expression in the block.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="384e1-590">Quarta espressione nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-590">The fourth expression in the block.</span>
          </span>
        </param>
        <param name="arg4">
          <span data-ttu-id="384e1-591">Quinta espressione nel blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-591">The fifth expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-592">Crea un oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> che contiene cinque espressioni e non dispone di variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-592">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains five expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-593">Oggetto <see cref="T:System.Linq.Expressions.BlockExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-593">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-594">Quando l'espressione di blocco viene eseguito, restituisce il valore dell'ultima espressione nel blocco.</span><span class="sxs-lookup"><span data-stu-id="384e1-594">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Break">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-595">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione break.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-595">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Break (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-596">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui passerà l'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-596">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-597">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione break.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-597">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-598">Oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Break, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" /> e un valore Null da passare all'etichetta di destinazione al momento del passaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-598">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-599">Nell'esempio seguente viene illustrato come creare un'espressione che contiene un <xref:System.Linq.Expressions.LoopExpression> oggetto che utilizza il <xref:System.Linq.Expressions.Expression.Break%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-599">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LoopExpression> object that uses the <xref:System.Linq.Expressions.Expression.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Break (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-600">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui passerà l'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-600">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="384e1-601">Valore che al momento del passaggio verrà passato all'etichetta associata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-601">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-602">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione break.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-602">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span>
          </span>
          <span data-ttu-id="384e1-603">Il valore passato all'etichetta al momento del passaggio può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-603">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-604">Oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Break, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" /> e <paramref name="value" /> da passare all'etichetta di destinazione al momento del passaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-604">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-605">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui passerà l'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-605">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-606">Oggetto <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-606">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-607">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione break con il tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-607">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-608">Oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Break, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" /> e la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-608">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-609">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui passerà l'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-609">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="384e1-610">Valore che al momento del passaggio verrà passato all'etichetta associata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-610">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-611">Oggetto <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-611">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-612">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione break con il tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-612">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</span>
          </span>
          <span data-ttu-id="384e1-613">Il valore passato all'etichetta al momento del passaggio può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-613">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-614">Oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Break, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" />, la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" /> e <paramref name="value" /> da passare all'etichetta di destinazione al momento del passaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-614">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Call">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-615">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-615">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="384e1-616">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che specifica l'istanza per una chiamata a un metodo di istanza. Passare <see langword="null" /> per un metodo <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-616">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-617">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-617">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-618">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo che non accetta argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-618">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes no arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-619">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-619">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-620">Per rappresentare una chiamata a un `static` (`Shared` in Visual Basic) (metodo), passare `null` per il `instance` parametro quando si chiama questo metodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-620">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method.</span></span>  
  
 <span data-ttu-id="384e1-621">Se `method` rappresenta un metodo di istanza, il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `instance` deve essere assegnabile al tipo dichiarante del metodo rappresentato da `method`.</span><span class="sxs-lookup"><span data-stu-id="384e1-621">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="384e1-622">Il <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MethodCallExpression> è vuoto.</span><span class="sxs-lookup"><span data-stu-id="384e1-622">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty.</span></span> <span data-ttu-id="384e1-623">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è uguale al tipo restituito del metodo rappresentato da `method`.</span><span class="sxs-lookup"><span data-stu-id="384e1-623">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the return type of the method represented by `method`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-624">Esempio di codice seguente viene illustrato come creare un'espressione che chiama un metodo senza argomenti.</span><span class="sxs-lookup"><span data-stu-id="384e1-624">The following code example shows how to create an expression that calls a method without arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#15)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-625">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-625">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-626">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-626">-or-</span>
          </span>
          <span data-ttu-id="384e1-627">
            <paramref name="instance" /> è <see langword="null" /> e <paramref name="method" /> rappresenta un metodo di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-627">
              <paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-628">
            <paramref name="instance" />.Type non è assegnabile al tipo dichiarante del metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-628">
              <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="384e1-629">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-629">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-630">Raccolta di <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta gli argomenti della chiamata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-630">A collection of <see cref="T:System.Linq.Expressions.Expression" /> that represents the call arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-631">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo statico (Shared in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-631">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-632">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-632">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="384e1-633">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-633">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="384e1-634">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il primo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-634">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-635">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata al metodo <see langword="static" /> (<see langword="Shared" /> in Visual Basic) che accetta un argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-635">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that takes one argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-636">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-636">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-637">Nell'esempio seguente viene illustrato come creare un'espressione che richiede un `static` (`Shared` in Visual Basic) metodo che accetta un argomento.</span><span class="sxs-lookup"><span data-stu-id="384e1-637">The following example demonstrates how to create an expression that calls a `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#16)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-638">
            <paramref name="method" /> è null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-638">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="384e1-639">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo <see langword="static" /> (<see langword="Shared" /> in Visual Basic) su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-639">A <see cref="T:System.Reflection.MethodInfo" /> that represents a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-640">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-640">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-641">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo <see langword="static" /> (<see langword="Shared" /> in Visual Basic) con argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-641">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that has arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-642">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-642">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-643">Se `arguments` non `null`, devono essere lo stesso numero di elementi come il numero di parametri per il metodo rappresentato da `method`.</span><span class="sxs-lookup"><span data-stu-id="384e1-643">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="384e1-644">Ogni elemento in `arguments` non deve essere `null` e deve essere assegnabile al parametro corrispondente del `method`, possibilmente dopo *citazione*.</span><span class="sxs-lookup"><span data-stu-id="384e1-644">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="384e1-645">Un elemento racchiuso tra virgolette solo se il parametro del metodo corrispondente è di tipo <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-645">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="384e1-646">Racchiuso tra virgolette l'elemento viene inserito in un <xref:System.Linq.Expressions.ExpressionType.Quote> nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-646">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="384e1-647">Il nodo risultante è un <xref:System.Linq.Expressions.UnaryExpression> cui <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> proprietà è l'elemento di `arguments`.</span><span class="sxs-lookup"><span data-stu-id="384e1-647">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="384e1-648">Il <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MethodCallExpression> è vuoto se `arguments` è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-648">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="384e1-649">In caso contrario, contiene gli stessi elementi `arguments`, alcuni dei quali può essere racchiuso tra virgolette.</span><span class="sxs-lookup"><span data-stu-id="384e1-649">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="384e1-650">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MethodCallExpression> è uguale al tipo restituito del metodo rappresentato da `method`.</span><span class="sxs-lookup"><span data-stu-id="384e1-650">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span> <span data-ttu-id="384e1-651">La proprietà <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-651">The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-652">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-652">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-653">Il numero di elementi in <paramref name="arguments" /> è diverso dal numero dei parametri per il metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-653">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="384e1-654">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-654">-or-</span>
          </span>
          <span data-ttu-id="384e1-655">Uno o più elementi di <paramref name="arguments" /> non sono assegnabili al parametro corrispondente per il metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-655">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="384e1-656">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />. Passare <see langword="null" /> per un metodo <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-656">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-657">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-657">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-658">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-658">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-659">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo che accetta argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-659">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-660">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-660">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-661">Per rappresentare una chiamata a un `static` (`Shared` in Visual Basic) (metodo), passare `null` per il `instance` parametro quando si chiama questo metodo, o chiamare <xref:System.Linq.Expressions.Expression.Call%2A> invece.</span><span class="sxs-lookup"><span data-stu-id="384e1-661">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.</span></span>  
  
 <span data-ttu-id="384e1-662">Se `method` rappresenta un metodo di istanza, il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `instance` deve essere assegnabile al tipo dichiarante del metodo rappresentato da `method`.</span><span class="sxs-lookup"><span data-stu-id="384e1-662">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="384e1-663">Se `arguments` non `null`, devono essere lo stesso numero di elementi come il numero di parametri per il metodo rappresentato da `method`.</span><span class="sxs-lookup"><span data-stu-id="384e1-663">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="384e1-664">Ogni elemento in `arguments` non deve essere `null` e deve essere assegnabile al parametro corrispondente del `method`, possibilmente dopo *citazione*.</span><span class="sxs-lookup"><span data-stu-id="384e1-664">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="384e1-665">Un elemento racchiuso tra virgolette solo se il parametro del metodo corrispondente è di tipo <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-665">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="384e1-666">Racchiuso tra virgolette l'elemento viene inserito in un <xref:System.Linq.Expressions.ExpressionType.Quote> nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-666">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="384e1-667">Il nodo risultante è un <xref:System.Linq.Expressions.UnaryExpression> cui <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> proprietà è l'elemento di `arguments`.</span><span class="sxs-lookup"><span data-stu-id="384e1-667">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="384e1-668">Il <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MethodCallExpression> è vuoto se `arguments` è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-668">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="384e1-669">In caso contrario, contiene gli stessi elementi `arguments`, alcuni dei quali può essere racchiuso tra virgolette.</span><span class="sxs-lookup"><span data-stu-id="384e1-669">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="384e1-670">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MethodCallExpression> è uguale al tipo restituito del metodo rappresentato da `method`.</span><span class="sxs-lookup"><span data-stu-id="384e1-670">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-671">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-671">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-672">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-672">-or-</span>
          </span>
          <span data-ttu-id="384e1-673">
            <paramref name="instance" /> è <see langword="null" /> e <paramref name="method" /> rappresenta un metodo di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-673">
              <paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-674">
            <paramref name="instance" />.Type non è assegnabile al tipo dichiarante del metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-674">
              <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="384e1-675">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-675">-or-</span>
          </span>
          <span data-ttu-id="384e1-676">Il numero di elementi in <paramref name="arguments" /> è diverso dal numero dei parametri per il metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-676">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="384e1-677">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-677">-or-</span>
          </span>
          <span data-ttu-id="384e1-678">Uno o più elementi di <paramref name="arguments" /> non sono assegnabili al parametro corrispondente per il metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-678">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="384e1-679">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che specifica l'istanza per una chiamata a un metodo di istanza. Passare <see langword="null" /> per un metodo <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-679">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-680">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-680">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-681">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-681">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-682">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo che accetta argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-682">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-683">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-683">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-684">Per rappresentare una chiamata a un `static` (`Shared` in Visual Basic) (metodo), passare `null` per il `instance` parametro quando si chiama questo metodo, o chiamare <xref:System.Linq.Expressions.Expression.Call%2A> invece.</span><span class="sxs-lookup"><span data-stu-id="384e1-684">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.</span></span>  
  
 <span data-ttu-id="384e1-685">Se `method` rappresenta un metodo di istanza, il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `instance` deve essere assegnabile al tipo dichiarante del metodo rappresentato da `method`.</span><span class="sxs-lookup"><span data-stu-id="384e1-685">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="384e1-686">Se `arguments` non `null`, devono essere lo stesso numero di elementi come il numero di parametri per il metodo rappresentato da `method`.</span><span class="sxs-lookup"><span data-stu-id="384e1-686">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="384e1-687">Ogni elemento in `arguments` non deve essere `null` e deve essere assegnabile al parametro corrispondente del `method`, possibilmente dopo *citazione*.</span><span class="sxs-lookup"><span data-stu-id="384e1-687">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="384e1-688">Un elemento racchiuso tra virgolette solo se il parametro del metodo corrispondente è di tipo <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-688">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="384e1-689">Racchiuso tra virgolette l'elemento viene inserito in un <xref:System.Linq.Expressions.ExpressionType.Quote> nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-689">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="384e1-690">Il nodo risultante è un <xref:System.Linq.Expressions.UnaryExpression> cui <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> proprietà è l'elemento di `arguments`.</span><span class="sxs-lookup"><span data-stu-id="384e1-690">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="384e1-691">Il <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MethodCallExpression> è vuoto se `arguments` è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-691">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="384e1-692">In caso contrario, contiene gli stessi elementi `arguments`, alcuni dei quali può essere racchiuso tra virgolette.</span><span class="sxs-lookup"><span data-stu-id="384e1-692">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="384e1-693">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MethodCallExpression> è uguale al tipo restituito del metodo rappresentato da `method`.</span><span class="sxs-lookup"><span data-stu-id="384e1-693">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-694">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-694">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-695">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-695">-or-</span>
          </span>
          <span data-ttu-id="384e1-696">
            <paramref name="instance" /> è <see langword="null" /> e <paramref name="method" /> rappresenta un metodo di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-696">
              <paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span>
          </span>
          <span data-ttu-id="384e1-697">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-697">-or-</span>
          </span>
          <span data-ttu-id="384e1-698">
            <paramref name="arguments" /> non è <see langword="null" /> e almeno uno dei relativi elementi è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-698">
              <paramref name="arguments" /> is not <see langword="null" /> and one or more of its elements is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-699">
            <paramref name="instance" />.Type non è assegnabile al tipo dichiarante del metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-699">
              <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="384e1-700">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-700">-or-</span>
          </span>
          <span data-ttu-id="384e1-701">Il numero di elementi in <paramref name="arguments" /> è diverso dal numero dei parametri per il metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-701">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="384e1-702">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-702">-or-</span>
          </span>
          <span data-ttu-id="384e1-703">Uno o più elementi di <paramref name="arguments" /> non sono assegnabili al parametro corrispondente per il metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-703">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="384e1-704">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-704">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="384e1-705">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il primo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-705">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-706">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il secondo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-706">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-707">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo statico che accetta due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-707">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes two arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-708">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-708">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-709">
            <paramref name="method" /> è null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-709">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="384e1-710">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che specifica l'istanza per una chiamata all'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-710">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call.</span>
          </span>
          <span data-ttu-id="384e1-711">Passare Null per un metodo statico (Shared in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-711">(pass null for a static (Shared in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-712">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-712">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="384e1-713">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il primo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-713">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-714">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il secondo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-714">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-715">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo che accetta due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-715">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes two arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-716">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-716">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-717">Esempio di codice seguente viene illustrato come creare un'espressione che chiama un metodo di istanza che dispone di due argomenti.</span><span class="sxs-lookup"><span data-stu-id="384e1-717">The following code example shows how to create an expression that calls an instance method that has two arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#17)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, string methodName, Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::String ^ methodName, cli::array &lt;Type ^&gt; ^ typeArguments, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="384e1-718">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> nel cui valore della proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> verrà cercato un metodo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-718">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> property value will be searched for a specific method.</span>
          </span>
        </param>
        <param name="methodName">
          <span data-ttu-id="384e1-719">Nome del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-719">The name of the method.</span>
          </span>
        </param>
        <param name="typeArguments">
          <span data-ttu-id="384e1-720">Matrice di oggetti <see cref="T:System.Type" /> che specificano i parametri di tipo del metodo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-720">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method.</span>
          </span>
          <span data-ttu-id="384e1-721">Questo argomento deve essere Null quando methodName specifica un metodo non generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-721">This argument should be null when methodName specifies a non-generic method.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-722">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta gli argomenti del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-722">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represents the arguments to the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-723">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo tramite la chiamata al metodo factory appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-723">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-724">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, la cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> è uguale a <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> è impostata sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di istanza specificato e il cui oggetto <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> è impostato sugli argomenti specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-724">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified instance method, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> set to the specified arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-725">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MethodCallExpression> è uguale al tipo restituito del metodo identificato da `methodName`.</span><span class="sxs-lookup"><span data-stu-id="384e1-725">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-726">
            <paramref name="instance" /> o <paramref name="methodName" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-726">
              <paramref name="instance" /> or <paramref name="methodName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-727">Nessun metodo il cui nome è <paramref name="methodName" />, i cui parametri di tipo corrispondono a <paramref name="typeArguments" />e i cui tipi di parametro corrispondono a <paramref name="arguments" /> viene trovato in <paramref name="instance" />.Type o nei relativi tipi di base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-727">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</span>
          </span>
          <span data-ttu-id="384e1-728">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-728">-or-</span>
          </span>
          <span data-ttu-id="384e1-729">Più di un metodo il cui nome è <paramref name="methodName" />, i cui parametri di tipo corrispondono a <paramref name="typeArguments" />e i cui tipi di parametro corrispondono a <paramref name="arguments" /> viene trovato in <paramref name="instance" />.Type o nei relativi tipi di base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-729">More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="384e1-730">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-730">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="384e1-731">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il primo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-731">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-732">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il secondo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-732">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="384e1-733">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il terzo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-733">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-734">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo statico che accetta tre argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-734">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes three arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-735">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-735">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-736">
            <paramref name="method" /> è null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-736">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (Type type, string methodName, Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Type type, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(Type ^ type, System::String ^ methodName, cli::array &lt;Type ^&gt; ^ typeArguments, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-737">Oggetto <see cref="T:System.Type" /> che specifica il tipo che contiene il metodo <see langword="static" /> (<see langword="Shared" /> in Visual Basic) specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-737">The <see cref="T:System.Type" /> that specifies the type that contains the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method.</span>
          </span>
        </param>
        <param name="methodName">
          <span data-ttu-id="384e1-738">Nome del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-738">The name of the method.</span>
          </span>
        </param>
        <param name="typeArguments">
          <span data-ttu-id="384e1-739">Matrice di oggetti <see cref="T:System.Type" /> che specificano i parametri di tipo del metodo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-739">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method.</span>
          </span>
          <span data-ttu-id="384e1-740">Questo argomento deve essere Null quando methodName specifica un metodo non generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-740">This argument should be null when methodName specifies a non-generic method.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-741">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> che rappresentano gli argomenti del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-741">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-742">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo <see langword="static" /> (<see langword="Shared" /> in Visual Basic) tramite la chiamata al metodo factory appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-742">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-743">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, la cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> è impostata sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo <see langword="static" /> (<see langword="Shared" /> in Visual Basic) specificato e la cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> è impostata sugli argomenti specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-743">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method, and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property set to the specified arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-744">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MethodCallExpression> è uguale al tipo restituito del metodo identificato da `methodName`.</span><span class="sxs-lookup"><span data-stu-id="384e1-744">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.</span></span> <span data-ttu-id="384e1-745">La proprietà <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-745">The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-746">
            <paramref name="type" /> o <paramref name="methodName" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-746">
              <paramref name="type" /> or <paramref name="methodName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-747">Nessun metodo il cui nome è <paramref name="methodName" />, i cui parametri di tipo corrispondono a <paramref name="typeArguments" />e i cui tipi di parametro corrispondono a <paramref name="arguments" /> viene trovato in <paramref name="type" /> o nei relativi tipi di base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-747">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</span>
          </span>
          <span data-ttu-id="384e1-748">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-748">-or-</span>
          </span>
          <span data-ttu-id="384e1-749">Più di un metodo il cui nome è <paramref name="methodName" />, i cui parametri di tipo corrispondono a <paramref name="typeArguments" />e i cui tipi di parametro corrispondono a <paramref name="arguments" /> viene trovato in <paramref name="type" /> o nei relativi tipi di base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-749">More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="384e1-750">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che specifica l'istanza per una chiamata all'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-750">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call.</span>
          </span>
          <span data-ttu-id="384e1-751">Passare Null per un metodo statico (Shared in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-751">(pass null for a static (Shared in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-752">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-752">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="384e1-753">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il primo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-753">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-754">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il secondo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-754">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="384e1-755">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il terzo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-755">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-756">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo che accetta tre argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-756">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes three arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-757">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-757">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="384e1-758">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-758">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="384e1-759">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il primo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-759">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-760">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il secondo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-760">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="384e1-761">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il terzo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-761">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="384e1-762">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il quarto argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-762">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-763">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo statico che accetta quattro argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-763">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes four arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-764">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-764">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-765">
            <paramref name="method" /> è null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-765">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3, System::Linq::Expressions::Expression ^ arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="384e1-766">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-766">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="384e1-767">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il primo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-767">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-768">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il secondo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-768">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="384e1-769">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il terzo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-769">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="384e1-770">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il quarto argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-770">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</span>
          </span>
        </param>
        <param name="arg4">
          <span data-ttu-id="384e1-771">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il quinto argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-771">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fifth argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-772">Crea un oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> che rappresenta una chiamata a un metodo statico che accetta cinque argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-772">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes five arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-773">Oggetto <see cref="T:System.Linq.Expressions.MethodCallExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> e <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-773">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-774">
            <paramref name="method" /> è null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-774">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanReduce">
      <MemberSignature Language="C#" Value="public virtual bool CanReduce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReduce" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.CanReduce" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanReduce As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReduce { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-775">Indica che il nodo può essere ridotto a un nodo più semplice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-775">Indicates that the node can be reduced to a simpler node.</span>
          </span>
          <span data-ttu-id="384e1-776">Se restituisce true, è possibile chiamare Reduce() per generare la forma ridotta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-776">If this returns true, Reduce() can be called to produce the reduced form.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="384e1-777">True se il nodo può essere ridotto; in caso contrario, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-777">True if the node can be reduced, otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Catch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-778">Crea un oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresenta un'istruzione catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-778">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Catch (variable As ParameterExpression, body As Expression) As CatchBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable">
          <span data-ttu-id="384e1-779">Oggetto <see cref="T:System.Linq.Expressions.ParameterExpression" /> che rappresenta un riferimento all'oggetto <see cref="T:System.Exception" /> intercettato da questo gestore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-779">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="384e1-780">Corpo dell'istruzione catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-780">The body of the catch statement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-781">Crea un oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresenta un'istruzione catch con un riferimento all'oggetto <see cref="T:System.Exception" /> intercettato per l'uso nel corpo del gestore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-781">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with a reference to the caught <see cref="T:System.Exception" /> object for use in the handler body.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-782">Oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-782">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(Type ^ type, System::Linq::Expressions::Expression ^ body);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-783">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> di <see cref="T:System.Exception" /> che verrà gestito da questo oggetto <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-783">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="384e1-784">Corpo dell'istruzione catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-784">The body of the catch statement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-785">Crea un oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresenta un'istruzione catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-785">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-786">Oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-786">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-787">Il <xref:System.Linq.Expressions.Expression.Type%2A> di <xref:System.Exception> al momento può essere specificato ma nessun riferimento al <xref:System.Exception> oggetto sarà disponibile per l'utilizzo nel <xref:System.Linq.Expressions.CatchBlock>.</span><span class="sxs-lookup"><span data-stu-id="384e1-787">The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> to be caught can be specified but no reference to the <xref:System.Exception> object will be available for use in the <xref:System.Linq.Expressions.CatchBlock>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Catch (variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable">
          <span data-ttu-id="384e1-788">Oggetto <see cref="T:System.Linq.Expressions.ParameterExpression" /> che rappresenta un riferimento all'oggetto <see cref="T:System.Exception" /> intercettato da questo gestore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-788">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="384e1-789">Corpo dell'istruzione catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-789">The body of the catch statement.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="384e1-790">Corpo del filtro <see cref="T:System.Exception" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-790">The body of the <see cref="T:System.Exception" /> filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-791">Crea un oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresenta un'istruzione catch con un filtro <see cref="T:System.Exception" /> e un riferimento all'oggetto <see cref="T:System.Exception" /> intercettato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-791">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter and a reference to the caught <see cref="T:System.Exception" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-792">Oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-792">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(Type ^ type, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-793">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> di <see cref="T:System.Exception" /> che verrà gestito da questo oggetto <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-793">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="384e1-794">Corpo dell'istruzione catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-794">The body of the catch statement.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="384e1-795">Corpo del filtro <see cref="T:System.Exception" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-795">The body of the <see cref="T:System.Exception" /> filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-796">Crea un oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresenta un'istruzione catch con un filtro <see cref="T:System.Exception" /> ma nessun riferimento all'oggetto <see cref="T:System.Exception" /> intercettato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-796">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter but no reference to the caught <see cref="T:System.Exception" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-797">Oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-797">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearDebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo (System.Linq.Expressions.SymbolDocumentInfo document);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression ClearDebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClearDebugInfo (document As SymbolDocumentInfo) As DebugInfoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DebugInfoExpression ^ ClearDebugInfo(System::Linq::Expressions::SymbolDocumentInfo ^ document);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
      </Parameters>
      <Docs>
        <param name="document">
          <span data-ttu-id="384e1-798">Oggetto <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> che rappresenta il file di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-798">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-799">Crea un oggetto <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> per la cancellazione di un punto di sequenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-799">Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearing a sequence point.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-800">Istanza di <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> per la cancellazione di un punto di sequenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-800">An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearning a sequence point.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Coalesce">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-801">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione coalescing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-801">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Coalesce (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Coalesce(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-802">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-802">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-803">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-803">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-804">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione coalescing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-804">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-805">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-805">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-806">Il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.BinaryExpression> è `null` e <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> sono impostate su `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-806">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span> <span data-ttu-id="384e1-807">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è uguale al tipo di risultato dell'operazione coalescing.</span><span class="sxs-lookup"><span data-stu-id="384e1-807">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the result type of the coalescing operation.</span></span> <span data-ttu-id="384e1-808">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-808">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
#### <a name="result-type"></a><span data-ttu-id="384e1-809">Tipo di risultato</span><span class="sxs-lookup"><span data-stu-id="384e1-809">Result Type</span></span>  
 <span data-ttu-id="384e1-810">Le regole seguenti determinano il tipo di risultato:</span><span class="sxs-lookup"><span data-stu-id="384e1-810">The following rules determine the result type:</span></span>  
  
-   <span data-ttu-id="384e1-811">Se `left`. Il tipo rappresenta un tipo nullable e `right`. Il tipo è convertibile in modo implicito al tipo corrispondente non nullable, il tipo di risultato è l'equivalente non nullable di `left`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-811">If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.</span></span>  
  
-   <span data-ttu-id="384e1-812">In caso contrario, se `right`. Il tipo è implicitamente convertibile in `left`. È di tipo, il tipo di risultato `left`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-812">Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.</span></span>  
  
-   <span data-ttu-id="384e1-813">In caso contrario, se l'equivalente non nullable di `left`. Il tipo è implicitamente convertibile in `right`. È di tipo, il tipo di risultato `right`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-813">Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-814">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-814">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-815">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di <paramref name="left" /> non rappresenta un tipo di riferimento o un tipo valore nullable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-815">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-816">
            <paramref name="left" />.Type e <paramref name="right" />.Type non sono convertibili l'uno nell'altro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-816">
              <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Coalesce (left As Expression, right As Expression, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Coalesce(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-817">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-817">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-818">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-818">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-819">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-819">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-820">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione coalescing, data una funzione di conversione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-820">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation, given a conversion function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-821">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-821">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-822">Il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.BinaryExpression> è `null` e <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> sono impostate su `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-822">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span>  
  
 <span data-ttu-id="384e1-823">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.BinaryExpression> è uguale al tipo di risultato dell'operazione coalescing.</span><span class="sxs-lookup"><span data-stu-id="384e1-823">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is equal to the result type of the coalescing operation.</span></span>  
  
 <span data-ttu-id="384e1-824">Le regole seguenti determinano il tipo di risultato:</span><span class="sxs-lookup"><span data-stu-id="384e1-824">The following rules determine the result type:</span></span>  
  
-   <span data-ttu-id="384e1-825">Se `left`. Il tipo rappresenta un tipo nullable e `right`. Il tipo è convertibile in modo implicito al tipo corrispondente non nullable, il tipo di risultato è l'equivalente non nullable di `left`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-825">If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.</span></span>  
  
-   <span data-ttu-id="384e1-826">In caso contrario, se `right`. Il tipo è implicitamente convertibile in `left`. È di tipo, il tipo di risultato `left`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-826">Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.</span></span>  
  
-   <span data-ttu-id="384e1-827">In caso contrario, se l'equivalente non nullable di `left`. Il tipo è implicitamente convertibile in `right`. È di tipo, il tipo di risultato `right`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-827">Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-828">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-828">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-829">
            <paramref name="left" />.Type e <paramref name="right" />.Type non sono convertibili l'uno nell'altro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-829">
              <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</span>
          </span>
          <span data-ttu-id="384e1-830">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-830">-or-</span>
          </span>
          <span data-ttu-id="384e1-831">
            <paramref name="conversion" /> non è <see langword="null" /> e <paramref name="conversion" />.Type è un tipo delegato che non accetta esattamente un argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-831">
              <paramref name="conversion" /> is not <see langword="null" /> and <paramref name="conversion" />.Type is a delegate type that does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-832">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di <paramref name="left" /> non rappresenta un tipo di riferimento o un tipo valore nullable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-832">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</span>
          </span>
          <span data-ttu-id="384e1-833">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-833">-or-</span>
          </span>
          <span data-ttu-id="384e1-834">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di <paramref name="left" /> rappresenta un tipo non assegnabile al tipo di parametro del tipo delegato <paramref name="conversion" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-834">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> represents a type that is not assignable to the parameter type of the delegate type <paramref name="conversion" />.Type.</span>
          </span>
          <span data-ttu-id="384e1-835">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-835">-or-</span>
          </span>
          <span data-ttu-id="384e1-836">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di <paramref name="right" /> è diversa dal tipo restituito del tipo delegato <paramref name="conversion" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-836">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="right" /> is not equal to the return type of the delegate type <paramref name="conversion" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Condition">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-837">Crea un oggetto <see cref="T:System.Linq.Expressions.ConditionalExpression" /> che rappresenta un'istruzione condizionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-837">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Condition (test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ Condition(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="384e1-838">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-838">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="384e1-839">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-839">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <param name="ifFalse">
          <span data-ttu-id="384e1-840">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-840">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-841">Crea un oggetto <see cref="T:System.Linq.Expressions.ConditionalExpression" /> che rappresenta un'istruzione condizionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-841">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-842">Oggetto <see cref="T:System.Linq.Expressions.ConditionalExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> e le cui proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> e <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-842">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-843">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.ConditionalExpression> è uguale al <xref:System.Linq.Expressions.Expression.Type%2A> proprietà `ifTrue`.</span><span class="sxs-lookup"><span data-stu-id="384e1-843">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConditionalExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `ifTrue`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-844">Esempio di codice seguente viene illustrato come creare un'espressione che rappresenta un'istruzione condizionale.</span><span class="sxs-lookup"><span data-stu-id="384e1-844">The following code example shows how to create an expression that represents a conditional statement.</span></span> <span data-ttu-id="384e1-845">Se il primo argomento restituisce `true`, il secondo argomento è eseguito; in caso contrario, viene eseguito il terzo argomento.</span><span class="sxs-lookup"><span data-stu-id="384e1-845">If the first argument evaluates to `true`, the second argument is executed; otherwise, the third argument is executed.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#3)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-846">Il parametro <paramref name="test" />, il parametro <paramref name="ifTrue" /> o il parametro <paramref name="ifFalse" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-846">
              <paramref name="test" /> or <paramref name="ifTrue" /> or <paramref name="ifFalse" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-847">
            <paramref name="test" />.Type non è <see cref="T:System.Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-847">
              <paramref name="test" />.Type is not <see cref="T:System.Boolean" />.</span>
          </span>
          <span data-ttu-id="384e1-848">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-848">-or-</span>
          </span>
          <span data-ttu-id="384e1-849">
            <paramref name="ifTrue" />.Type è diverso da <paramref name="ifFalse" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-849">
              <paramref name="ifTrue" />.Type is not equal to <paramref name="ifFalse" />.Type.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <altmember cref="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ Condition(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="384e1-850">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-850">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="384e1-851">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-851">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <param name="ifFalse">
          <span data-ttu-id="384e1-852">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-852">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-853">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-853">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-854">Crea un oggetto <see cref="T:System.Linq.Expressions.ConditionalExpression" /> che rappresenta un'istruzione condizionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-854">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-855">Oggetto <see cref="T:System.Linq.Expressions.ConditionalExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> e le cui proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> e <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-855">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-856">Questo metodo consente di unificare in modo esplicito il tipo di risultato dell'espressione condizionale nei casi in cui i tipi di `ifTrue` e `ifFalse` espressioni non sono uguali.</span><span class="sxs-lookup"><span data-stu-id="384e1-856">This method allows explicitly unifying the result type of the conditional expression in cases where the types of `ifTrue` and `ifFalse` expressions are not equal.</span></span> <span data-ttu-id="384e1-857">Tipi di entrambi `ifTrue` e `ifFalse` deve essere implicitamente riferimento assegnabile al tipo di risultato.</span><span class="sxs-lookup"><span data-stu-id="384e1-857">Types of both `ifTrue` and `ifFalse` must be implicitly reference assignable to the result type.</span></span> <span data-ttu-id="384e1-858">Il `type` può essere <xref:System.Void>.</span><span class="sxs-lookup"><span data-stu-id="384e1-858">The `type` is allowed to be <xref:System.Void>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Constant">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-859">Crea un oggetto <see cref="T:System.Linq.Expressions.ConstantExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-859">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Constant (value As Object) As ConstantExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConstantExpression ^ Constant(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="384e1-860">Oggetto <see cref="T:System.Object" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-860">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-861">Crea un oggetto <see cref="T:System.Linq.Expressions.ConstantExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-861">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-862">Oggetto <see cref="T:System.Linq.Expressions.ConstantExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> e la cui proprietà <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-862">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-863">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.ConstantExpression> è uguale al tipo di `value`.</span><span class="sxs-lookup"><span data-stu-id="384e1-863">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConstantExpression> is equal to the type of `value`.</span></span> <span data-ttu-id="384e1-864">Se `value` è `null`, <xref:System.Linq.Expressions.Expression.Type%2A> è uguale a <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="384e1-864">If `value` is `null`, <xref:System.Linq.Expressions.Expression.Type%2A> is equal to <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="384e1-865">Per rappresentare `null`, è inoltre possibile utilizzare il <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> (metodo), con cui è possibile specificare in modo esplicito il tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-865">To represent `null`, you can also use the <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> method, with which you can explicitly specify the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-866">Esempio di codice seguente viene illustrato come creare un'espressione che rappresenta un valore costante.</span><span class="sxs-lookup"><span data-stu-id="384e1-866">The following code example shows how to create an expression that represents a constant value.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#4)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConstantExpression ^ Constant(System::Object ^ value, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="384e1-867">Oggetto <see cref="T:System.Object" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-867">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-868">Oggetto <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-868">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-869">Crea un oggetto <see cref="T:System.Linq.Expressions.ConstantExpression" /> le cui proprietà <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> e <see cref="P:System.Linq.Expressions.Expression.Type" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-869">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-870">Oggetto <see cref="T:System.Linq.Expressions.ConstantExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> e le cui proprietà <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> e <see cref="P:System.Linq.Expressions.Expression.Type" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-870">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-871">Questo metodo può essere utile per rappresentare i valori dei tipi nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-871">This method can be useful for representing values of nullable types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-872">Esempio di codice seguente viene illustrato come creare un'espressione che rappresenta una costante di tipo nullable e impostarne il valore su `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-872">The following code example shows how to create an expression that represents a constant of the nullable type and set its value to `null`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#22)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-873">
            <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-873">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-874">
            <paramref name="value" /> non è <see langword="null" /> e <paramref name="type" /> non è assegnabile dal tipo dinamico di <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-874">
              <paramref name="value" /> is not <see langword="null" /> and <paramref name="type" /> is not assignable from the dynamic type of <paramref name="value" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Continue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-875">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione continue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-875">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Continue (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Continue(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-876">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui passerà l'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-876">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-877">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione continue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-877">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-878">Oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Continue, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" /> e un valore Null da passare all'etichetta di destinazione al momento del passaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-878">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-879">Nell'esempio seguente viene illustrato come creare un'espressione di ciclo che utilizza il <xref:System.Linq.Expressions.Expression.Continue%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-879">The following example demonstrates how to create a loop expression that uses the <xref:System.Linq.Expressions.Expression.Continue%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#46)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Continue(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-880">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui passerà l'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-880">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-881">Oggetto <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-881">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-882">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione continue con il tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-882">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-883">Oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Continue, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" />, la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" /> e un valore Null da passare all'etichetta di destinazione al momento del passaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-883">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-884">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di conversione di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-884">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Convert(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-885">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-885">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-886">Oggetto <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-886">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-887">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di conversione di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-887">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-888">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> e <see cref="P:System.Linq.Expressions.Expression.Type" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-888">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-889">Il <xref:System.Linq.Expressions.UnaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> è impostato per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-889">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="384e1-890">La proprietà <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-890">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="384e1-891">Se il nodo è elevato, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-891">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="384e1-892">Altrimenti, è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-892">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-893">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-893">Implementing Method</span></span>  
 <span data-ttu-id="384e1-894">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-894">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-895">Se il valore `expression`. Tipo o `type` è un tipo definito dall'utente che definisce un operatore di conversione implicita o esplicita, il <xref:System.Reflection.MethodInfo> che rappresenta l'operatore è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-895">If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-896">In caso contrario:</span><span class="sxs-lookup"><span data-stu-id="384e1-896">Otherwise:</span></span>  
  
    -   <span data-ttu-id="384e1-897">Se entrambi `expression`. Tipo e `type` rappresentano tipi numerici o booleani, o tipi di enumerazione che ammette valori null o non nullable, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-897">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="384e1-898">Se il valore `expression`. Tipo o `type` è un tipo di riferimento e un esplicita boxing, unboxing, o non esiste conversione di riferimento da `expression`. Tipo di `type`, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-898">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="384e1-899">Elevato o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-899">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-900">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-900">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-901">Se `expression`. Il tipo è assegnabile al tipo di argomento del metodo di implementazione e il tipo restituito del metodo di implementazione è assegnabile a `type`, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-901">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="384e1-902">Se uno o entrambi di `expression`. Tipo o `type` è un tipo di valore nullable e i tipi di valore non nullable corrispondenti sono uguali al tipo di argomento e il tipo restituito del metodo di implementazione, rispettivamente, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-902">If one or both of `expression`.Type or `type` is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="384e1-903">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-903">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-904">Se entrambi `expression`. Tipo e `type` sono non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-904">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="384e1-905">In caso contrario, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-905">Otherwise the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-906">Esempio di codice seguente viene illustrato come creare un'espressione che rappresenta un'operazione di conversione del tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-906">The following code example shows how to create an expression that represents a type convertion operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#23)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-907">
            <paramref name="expression" /> o <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-907">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-908">Nessun operatore di conversione è definito tra <paramref name="expression" />.Type e <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-908">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Convert(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-909">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-909">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-910">Oggetto <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-910">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-911">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-911">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-912">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di conversione per la quale è specificato il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-912">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation for which the implementing method is specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-913">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> e <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-913">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-914">Il <xref:System.Linq.Expressions.UnaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> è impostato per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-914">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="384e1-915">La proprietà <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-915">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="384e1-916">Se il nodo è elevato, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-916">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="384e1-917">Altrimenti, è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-917">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-918">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-918">Implementing Method</span></span>  
 <span data-ttu-id="384e1-919">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-919">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-920">Se il metodo non è `null`, è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-920">If method is not `null`, it is the implementing method.</span></span> <span data-ttu-id="384e1-921">Deve rappresentare un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta un argomento.</span><span class="sxs-lookup"><span data-stu-id="384e1-921">It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
-   <span data-ttu-id="384e1-922">In caso contrario, se il valore `expression`. Tipo o `type` è un tipo definito dall'utente che definisce un operatore di conversione implicita o esplicita, il <xref:System.Reflection.MethodInfo> che rappresenta l'operatore è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-922">Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-923">In caso contrario:</span><span class="sxs-lookup"><span data-stu-id="384e1-923">Otherwise:</span></span>  
  
    -   <span data-ttu-id="384e1-924">Se entrambi `expression`. Tipo e `type` rappresentano tipi numerici o booleani, o tipi di enumerazione che ammette valori null o non nullable, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-924">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="384e1-925">Se il valore `expression`. Tipo o `type` è un tipo di riferimento e un esplicita boxing, unboxing, o non esiste conversione di riferimento da `expression`. Tipo di `type`, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-925">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="384e1-926">Elevato o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-926">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-927">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-927">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-928">Se `expression`. Il tipo è assegnabile al tipo di argomento del metodo di implementazione e il tipo restituito del metodo di implementazione è assegnabile a `type`, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-928">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="384e1-929">Se uno o entrambi di `expression`. Tipo o `type` sono un tipo di valore nullable e i tipi di valore non nullable corrispondenti sono rispettivamente uguali al tipo di argomento e il tipo restituito del metodo di implementazione, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-929">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="384e1-930">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-930">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-931">Se entrambi `expression`. Tipo e `type` sono non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-931">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="384e1-932">In caso contrario, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-932">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-933">
            <paramref name="expression" /> o <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-933">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-934">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) o non accetta esattamente un argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-934">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-935">Nessun operatore di conversione è definito tra <paramref name="expression" />.Type e <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-935">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="384e1-936">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-936">-or-</span>
          </span>
          <span data-ttu-id="384e1-937">
            <paramref name="expression" />.Type non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-937">
              <paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="384e1-938">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-938">-or-</span>
          </span>
          <span data-ttu-id="384e1-939">Il tipo restituito del metodo rappresentato da <paramref name="method" /> non è assegnabile a <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-939">The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="384e1-940">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-940">-or-</span>
          </span>
          <span data-ttu-id="384e1-941">
            <paramref name="expression" />.Type o <paramref name="type" /> è un tipo valore nullable e il tipo valore non nullable corrispondente è diverso dal tipo di argomento o dal tipo restituito, rispettivamente, del metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-941">
              <paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="384e1-942">È stato trovato più di un metodo che corrisponde alla descrizione di <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-942">More than one method that matches the <paramref name="method" /> description was found.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-943">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di conversione che genera un'eccezione in caso di overflow del tipo di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-943">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ConvertChecked(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-944">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-944">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-945">Oggetto <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-945">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-946">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di conversione che genera un'eccezione in caso di overflow del tipo di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-946">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-947">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> e <see cref="P:System.Linq.Expressions.Expression.Type" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-947">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-948">Il <xref:System.Linq.Expressions.UnaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> è impostato per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-948">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="384e1-949">La proprietà <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-949">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="384e1-950">Se il nodo è elevato, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-950">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="384e1-951">Altrimenti, è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-951">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-952">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-952">Implementing Method</span></span>  
 <span data-ttu-id="384e1-953">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-953">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-954">Se il valore `expression`. Tipo o `type` è un tipo definito dall'utente che definisce un operatore di conversione implicita o esplicita, il <xref:System.Reflection.MethodInfo> che rappresenta l'operatore è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-954">If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-955">In caso contrario:</span><span class="sxs-lookup"><span data-stu-id="384e1-955">Otherwise:</span></span>  
  
    -   <span data-ttu-id="384e1-956">Se entrambi `expression`. Tipo e `type` rappresentano tipi numerici o booleani, o tipi di enumerazione che ammette valori null o non nullable, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-956">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="384e1-957">Se il valore `expression`. Tipo o `type` è un tipo di riferimento e un esplicita boxing, unboxing, o non esiste conversione di riferimento da `expression`. Tipo di `type`, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-957">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="384e1-958">Elevato o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-958">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-959">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-959">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-960">Se `expression`. Il tipo è assegnabile al tipo di argomento del metodo di implementazione e il tipo restituito del metodo di implementazione è assegnabile a `type`, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-960">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="384e1-961">Se uno o entrambi di `expression`. Tipo o `type` sono un tipo di valore nullable e i tipi di valore non nullable corrispondenti sono rispettivamente uguali al tipo di argomento e il tipo restituito del metodo di implementazione, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-961">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="384e1-962">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-962">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-963">Se entrambi `expression`. Tipo e `type` sono non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-963">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="384e1-964">In caso contrario, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-964">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-965">
            <paramref name="expression" /> o <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-965">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-966">Nessun operatore di conversione è definito tra <paramref name="expression" />.Type e <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-966">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ConvertChecked(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-967">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-967">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-968">Oggetto <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-968">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-969">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-969">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-970">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di conversione che genera un'eccezione in caso di overflow del tipo di destinazione e per la quale è specificato il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-970">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-971">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> e <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-971">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-972">Il <xref:System.Linq.Expressions.UnaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> è impostato per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-972">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="384e1-973">La proprietà <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-973">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="384e1-974">Se il nodo è elevato, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-974">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="384e1-975">Altrimenti, è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-975">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-976">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-976">Implementing Method</span></span>  
 <span data-ttu-id="384e1-977">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-977">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-978">Se il metodo non è `null`, è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-978">If method is not `null`, it is the implementing method.</span></span> <span data-ttu-id="384e1-979">Deve rappresentare un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta un argomento.</span><span class="sxs-lookup"><span data-stu-id="384e1-979">It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
-   <span data-ttu-id="384e1-980">In caso contrario, se il valore `expression`. Tipo o `type` è un tipo definito dall'utente che definisce un operatore di conversione implicita o esplicita, il <xref:System.Reflection.MethodInfo> che rappresenta l'operatore è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-980">Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-981">In caso contrario:</span><span class="sxs-lookup"><span data-stu-id="384e1-981">Otherwise:</span></span>  
  
    -   <span data-ttu-id="384e1-982">Se entrambi `expression`. Tipo e `type` rappresentano tipi numerici o booleani, o tipi di enumerazione che ammette valori null o non nullable, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-982">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="384e1-983">Se il valore `expression`. Tipo o `type` è un tipo di riferimento e un esplicita boxing, unboxing, o non esiste conversione di riferimento da `expression`. Tipo di `type`, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-983">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="384e1-984">Elevato o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-984">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-985">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-985">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-986">Se `expression`. Il tipo è assegnabile al tipo di argomento del metodo di implementazione e il tipo restituito del metodo di implementazione è assegnabile a `type`, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-986">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="384e1-987">Se uno o entrambi di `expression`. Tipo o `type` sono un tipo di valore nullable e i tipi di valore non nullable corrispondenti sono rispettivamente uguali al tipo di argomento e il tipo restituito del metodo di implementazione, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-987">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="384e1-988">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-988">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-989">Se entrambi `expression`. Tipo e `type` sono non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-989">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="384e1-990">In caso contrario, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-990">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-991">
            <paramref name="expression" /> o <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-991">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-992">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) o non accetta esattamente un argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-992">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-993">Nessun operatore di conversione è definito tra <paramref name="expression" />.Type e <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-993">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="384e1-994">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-994">-or-</span>
          </span>
          <span data-ttu-id="384e1-995">
            <paramref name="expression" />.Type non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-995">
              <paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="384e1-996">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-996">-or-</span>
          </span>
          <span data-ttu-id="384e1-997">Il tipo restituito del metodo rappresentato da <paramref name="method" /> non è assegnabile a <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-997">The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="384e1-998">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-998">-or-</span>
          </span>
          <span data-ttu-id="384e1-999">
            <paramref name="expression" />.Type o <paramref name="type" /> è un tipo valore nullable e il tipo valore non nullable corrispondente è diverso dal tipo di argomento o dal tipo restituito, rispettivamente, del metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-999">
              <paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="384e1-1000">È stato trovato più di un metodo che corrisponde alla descrizione di <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1000">More than one method that matches the <paramref name="method" /> description was found.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression DebugInfo (System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression DebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document, int32 startLine, int32 startColumn, int32 endLine, int32 endColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DebugInfo (document As SymbolDocumentInfo, startLine As Integer, startColumn As Integer, endLine As Integer, endColumn As Integer) As DebugInfoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DebugInfoExpression ^ DebugInfo(System::Linq::Expressions::SymbolDocumentInfo ^ document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
        <Parameter Name="startLine" Type="System.Int32" />
        <Parameter Name="startColumn" Type="System.Int32" />
        <Parameter Name="endLine" Type="System.Int32" />
        <Parameter Name="endColumn" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="document">
          <span data-ttu-id="384e1-1001">Oggetto <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> che rappresenta il file di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1001">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</span>
          </span>
        </param>
        <param name="startLine">
          <span data-ttu-id="384e1-1002">Riga iniziale di questo oggetto <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1002">The start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="384e1-1003">Deve essere maggiore di 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1003">Must be greater than 0.</span>
          </span>
        </param>
        <param name="startColumn">
          <span data-ttu-id="384e1-1004">Colonna iniziale di questo oggetto <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1004">The start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="384e1-1005">Deve essere maggiore di 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1005">Must be greater than 0.</span>
          </span>
        </param>
        <param name="endLine">
          <span data-ttu-id="384e1-1006">Riga finale di questo oggetto <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1006">The end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="384e1-1007">Deve essere maggiore di o uguale alla riga iniziale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1007">Must be greater or equal than the start line.</span>
          </span>
        </param>
        <param name="endColumn">
          <span data-ttu-id="384e1-1008">Colonna finale di questo oggetto <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1008">The end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="384e1-1009">Se la riga finale corrisponde alla riga iniziale, deve essere maggiore di o uguale alla colonna iniziale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1009">If the end line is the same as the start line, it must be greater or equal than the start column.</span>
          </span>
          <span data-ttu-id="384e1-1010">In qualsiasi caso, deve essere maggiore di 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1010">In any case, must be greater than 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1011">Crea un oggetto <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> con l'intervallo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1011">Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> with the specified span.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1012">Istanza di <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1012">An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Decrement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1013">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta il decremento dell'espressione di 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1013">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Decrement(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-1014">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> da decrementare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1014">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1015">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta il decremento dell'espressione di 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1015">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1016">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione decrementata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1016">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1017">Questa espressione è funzionale e non modifica il valore dell'oggetto passato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1017">This expression is functional and does not change the value of the object passed to it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1018">Esempio di codice seguente viene illustrato come creare un'espressione che sottrae 1 da un valore specificato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1018">The following code example shows how to create an expression that substracts 1 from a given value.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#5)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Decrement(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-1019">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> da decrementare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1019">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1020">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1020">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1021">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta il decremento dell'espressione di 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1021">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1022">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione decrementata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1022">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1023">Questa espressione è funzionale e non modifica il valore dell'oggetto passato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1023">This expression is functional and does not change the value of the object passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Default (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Default(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Default(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DefaultExpression ^ Default(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-1024">Oggetto <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1024">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1025">Crea un oggetto <see cref="T:System.Linq.Expressions.DefaultExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> è impostata sul tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1025">Creates a <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1026">Oggetto <see cref="T:System.Linq.Expressions.DefaultExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> e la cui proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> è impostata sul tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1026">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-1027">Esempio di codice seguente viene illustrato come creare un'espressione che rappresenta un valore predefinito per un determinato tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1027">The following code example shows how to create an expression that represents a default vaule for a given type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#6)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Divide">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1028">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di divisione aritmetica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1028">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Divide(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1029">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1029">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1030">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1030">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1031">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di divisione aritmetica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1031">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1032">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1032">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1033">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1033">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1034">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1034">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1035">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1035">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-1036">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1036">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-1037">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1037">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-1038">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1038">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1039">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1039">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1040">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1040">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-1041">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di divisione, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1041">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1042">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1042">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1043">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1043">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1044">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1044">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1045">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1045">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1046">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1046">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1047">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1047">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-1048">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1048">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1049">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-1049">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-1050">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1050">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1051">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1051">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1052">Il tipo del nodo è il tipo di risultato dell'operatore di divisione predefinita.</span><span class="sxs-lookup"><span data-stu-id="384e1-1052">The type of the node is the result type of the predefined division operator.</span></span>  
  
-   <span data-ttu-id="384e1-1053">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1053">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-1054">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di divisione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-1054">The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1055">Esempio di codice riportato di seguito viene illustrato come creare un'espressione che divide il primo argomento dal secondo argomento.</span><span class="sxs-lookup"><span data-stu-id="384e1-1055">The following code example shows how to create an expression that divides divides its first argument by its second argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#7)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1056">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1056">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1057">L'operatore di divisione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1057">The division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Divide(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1058">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1058">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1059">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1059">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1060">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1060">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1061">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di divisione aritmetica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1061">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span>
          </span>
          <span data-ttu-id="384e1-1062">Il metodo di implementazione può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1062">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1063">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1063">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1064">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1064">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1065">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1065">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1066">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1066">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-1067">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1067">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-1068">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1068">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-1069">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1069">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1070">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1070">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1071">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1071">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-1072">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1072">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-1073">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di divisione, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1073">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1074">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1074">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1075">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1075">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1076">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1076">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1077">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1077">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1078">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1078">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1079">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1079">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-1080">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1080">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1081">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-1081">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-1082">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1082">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1083">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1083">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1084">Il tipo del nodo è il tipo di risultato dell'operatore di divisione predefinita.</span><span class="sxs-lookup"><span data-stu-id="384e1-1084">The type of the node is the result type of the predefined division operator.</span></span>  
  
-   <span data-ttu-id="384e1-1085">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1085">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-1086">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di divisione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-1086">The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1087">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1087">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1088">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1088">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1089">
            <paramref name="method" /> è <see langword="null" /> e l'operatore di divisione non è definito per i tipi <paramref name="left" /> .Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1089">
              <paramref name="method" /> is <see langword="null" /> and the division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DivideAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1090">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di divisione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1090">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1091">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1091">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1092">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1092">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1093">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di divisione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1093">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1094">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1094">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1095">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1095">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1096">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1096">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1097">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1097">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1098">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di divisione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1098">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1099">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1099">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1100">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1100">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1101">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1101">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1102">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1102">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-1103">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1103">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1104">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di divisione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1104">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1105">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1105">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1106">Crea <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1106">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arguments As IEnumerable(Of Expression)) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="384e1-1107">Binder di runtime per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1107">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="384e1-1108">Tipo di risultato dell'espressione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1108">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-1109">Argomenti per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1109">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1110">Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1110">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1111">Oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1111">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1112">Il <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> proprietà del risultato verrà dedotto dai tipi di argomenti e specificato il tipo restituito.</span><span class="sxs-lookup"><span data-stu-id="384e1-1112">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="384e1-1113">Binder di runtime per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1113">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="384e1-1114">Tipo di risultato dell'espressione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1114">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="384e1-1115">Primo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1115">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1116">Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1116">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1117">Oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1117">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1118">Il <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> proprietà del risultato verrà dedotto dai tipi di argomenti e specificato il tipo restituito.</span><span class="sxs-lookup"><span data-stu-id="384e1-1118">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, ParamArray arguments As Expression()) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="384e1-1119">Binder di runtime per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1119">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="384e1-1120">Tipo di risultato dell'espressione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1120">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-1121">Argomenti per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1121">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1122">Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1122">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1123">Oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1123">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1124">Il <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> proprietà del risultato verrà dedotto dai tipi di argomenti e specificato il tipo restituito.</span><span class="sxs-lookup"><span data-stu-id="384e1-1124">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="384e1-1125">Binder di runtime per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1125">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="384e1-1126">Tipo di risultato dell'espressione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1126">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="384e1-1127">Primo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1127">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-1128">Secondo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1128">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1129">Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1129">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1130">Oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1130">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1131">Il <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> proprietà del risultato verrà dedotto dai tipi di argomenti e specificato il tipo restituito.</span><span class="sxs-lookup"><span data-stu-id="384e1-1131">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="384e1-1132">Binder di runtime per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1132">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="384e1-1133">Tipo di risultato dell'espressione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1133">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="384e1-1134">Primo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1134">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-1135">Secondo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1135">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="384e1-1136">Terzo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1136">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1137">Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1137">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1138">Oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1138">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1139">Il <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> proprietà del risultato verrà dedotto dai tipi di argomenti e specificato il tipo restituito.</span><span class="sxs-lookup"><span data-stu-id="384e1-1139">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="384e1-1140">Binder di runtime per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1140">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="384e1-1141">Tipo di risultato dell'espressione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1141">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="384e1-1142">Primo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1142">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-1143">Secondo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1143">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="384e1-1144">Terzo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1144">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="384e1-1145">Quarto argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1145">The fourth argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1146">Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1146">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1147">Oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1147">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1148">Il <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> proprietà del risultato verrà dedotto dai tipi di argomenti e specificato il tipo restituito.</span><span class="sxs-lookup"><span data-stu-id="384e1-1148">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ElementInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1149">Crea un oggetto <see cref="T:System.Linq.Expressions.ElementInit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1149">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementInit (addMethod As MethodInfo, arguments As IEnumerable(Of Expression)) As ElementInit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ElementInit ^ ElementInit(System::Reflection::MethodInfo ^ addMethod, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="addMethod">
          <span data-ttu-id="384e1-1150">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1150">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-1151">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1151">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1152">Crea un oggetto <see cref="T:System.Linq.Expressions.ElementInit" />, dato <see cref="T:System.Collections.Generic.IEnumerable`1" /> come secondo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1152">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an <see cref="T:System.Collections.Generic.IEnumerable`1" /> as the second argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1153">Oggetto <see cref="T:System.Linq.Expressions.ElementInit" /> le cui proprietà <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> e <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1153">An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1154">Il `addMethod` parametro deve rappresentare un metodo di istanza denominato "Add" (distinzione tra maiuscole e minuscole).</span><span class="sxs-lookup"><span data-stu-id="384e1-1154">The `addMethod` parameter must represent an instance method named "Add" (case insensitive).</span></span> <span data-ttu-id="384e1-1155">Il metodo add deve avere lo stesso numero di parametri come il numero di elementi in `arguments`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1155">The add method must have the same number of parameters as the number of elements in `arguments`.</span></span> <span data-ttu-id="384e1-1156">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di ogni elemento `arguments` deve essere assegnabile al tipo di parametro corrispondente del metodo add, possibilmente dopo *deve essere racchiuso tra*.</span><span class="sxs-lookup"><span data-stu-id="384e1-1156">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="384e1-1157">Un elemento racchiuso tra virgolette solo se il parametro del metodo corrispondente è di tipo <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1157">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="384e1-1158">Racchiuso tra virgolette l'elemento viene inserito in un <xref:System.Linq.Expressions.ExpressionType.Quote> nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1158">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="384e1-1159">Il nodo risultante è un <xref:System.Linq.Expressions.UnaryExpression> cui <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> proprietà è l'elemento di `arguments`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1159">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1160">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> metodo per creare un <xref:System.Linq.Expressions.ElementInit> che rappresenta una chiamata di <xref:System.Collections.Generic.Dictionary%602.Add%2A> metodo per inizializzare un elemento di una raccolta di dizionario.</span><span class="sxs-lookup"><span data-stu-id="384e1-1160">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1161">
            <paramref name="addMethod" /> o <paramref name="arguments" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1161">
              <paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1162">Il metodo rappresentato da <paramref name="addMethod" /> non è denominato "Add" (senza distinzione tra maiuscole e minuscole).</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1162">The method that <paramref name="addMethod" /> represents is not named "Add" (case insensitive).</span>
          </span>
          <span data-ttu-id="384e1-1163">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1163">-or-</span>
          </span>
          <span data-ttu-id="384e1-1164">Il metodo rappresentato da <paramref name="addMethod" /> non è un metodo di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1164">The method that <paramref name="addMethod" /> represents is not an instance method.</span>
          </span>
          <span data-ttu-id="384e1-1165">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1165">-or-</span>
          </span>
          <span data-ttu-id="384e1-1166">
            <paramref name="arguments" /> non contiene lo stesso numero di elementi dei parametri del metodo rappresentato da <paramref name="addMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1166">
              <paramref name="arguments" /> does not contain the same number of elements as the number of parameters for the method that <paramref name="addMethod" /> represents.</span>
          </span>
          <span data-ttu-id="384e1-1167">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1167">-or-</span>
          </span>
          <span data-ttu-id="384e1-1168">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di uno o più elementi di <paramref name="arguments" /> non può essere assegnata al tipo del parametro corrispondente del metodo rappresentato da <paramref name="addMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1168">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementInit (addMethod As MethodInfo, ParamArray arguments As Expression()) As ElementInit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ElementInit ^ ElementInit(System::Reflection::MethodInfo ^ addMethod, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="addMethod">
          <span data-ttu-id="384e1-1169">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1169">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-1170">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1170">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1171">Crea un oggetto <see cref="T:System.Linq.Expressions.ElementInit" />, data una matrice di valori come secondo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1171">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an array of values as the second argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1172">Oggetto <see cref="T:System.Linq.Expressions.ElementInit" /> le cui proprietà <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> e <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1172">An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1173">Il `addMethod` parametro deve rappresentare un metodo di istanza denominato "Add" (distinzione tra maiuscole e minuscole).</span><span class="sxs-lookup"><span data-stu-id="384e1-1173">The `addMethod` parameter must represent an instance method named "Add" (case insensitive).</span></span> <span data-ttu-id="384e1-1174">Il metodo add deve avere lo stesso numero di parametri come il numero di elementi in `arguments`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1174">The add method must have the same number of parameters as the number of elements in `arguments`.</span></span> <span data-ttu-id="384e1-1175">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di ogni elemento `arguments` deve essere assegnabile al tipo di parametro corrispondente del metodo add, possibilmente dopo *deve essere racchiuso tra*.</span><span class="sxs-lookup"><span data-stu-id="384e1-1175">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="384e1-1176">Un elemento racchiuso tra virgolette solo se il parametro del metodo corrispondente è di tipo <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1176">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="384e1-1177">Racchiuso tra virgolette l'elemento viene inserito in un <xref:System.Linq.Expressions.ExpressionType.Quote> nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1177">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="384e1-1178">Il nodo risultante è un <xref:System.Linq.Expressions.UnaryExpression> cui <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> proprietà è l'elemento di `arguments`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1178">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1179">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> metodo per creare un <xref:System.Linq.Expressions.ElementInit> che rappresenta una chiamata di <xref:System.Collections.Generic.Dictionary%602.Add%2A> metodo per inizializzare un elemento di una raccolta di dizionario.</span><span class="sxs-lookup"><span data-stu-id="384e1-1179">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1180">
            <paramref name="addMethod" /> o <paramref name="arguments" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1180">
              <paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1181">Il metodo che addMethod rappresenta non è denominato "Add" (senza distinzione tra maiuscole e minuscole).</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1181">The method that addMethod represents is not named "Add" (case insensitive).</span>
          </span>
          <span data-ttu-id="384e1-1182">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1182">-or-</span>
          </span>
          <span data-ttu-id="384e1-1183">Il metodo che addMethod rappresenta non è un metodo di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1183">The method that addMethod represents is not an instance method.</span>
          </span>
          <span data-ttu-id="384e1-1184">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1184">-or-</span>
          </span>
          <span data-ttu-id="384e1-1185">Il numero di elementi in arguments è diverso dal numero di parametri del metodo rappresentato da addMethod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1185">arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.</span>
          </span>
          <span data-ttu-id="384e1-1186">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1186">-or-</span>
          </span>
          <span data-ttu-id="384e1-1187">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di uno o più elementi di <paramref name="arguments" /> non può essere assegnata al tipo del parametro corrispondente del metodo rappresentato da <paramref name="addMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1187">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Empty () As DefaultExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DefaultExpression ^ Empty();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1188">Crea un'espressione vuota di tipo <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1188">Creates an empty expression that has <see cref="T:System.Void" /> type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1189">Oggetto <see cref="T:System.Linq.Expressions.DefaultExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> e la cui proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> è impostata su <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1189">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <see cref="T:System.Void" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1190">In cui è prevista un'espressione, ma non è richiesta alcuna azione, è possibile utilizzare un'espressione vuota.</span><span class="sxs-lookup"><span data-stu-id="384e1-1190">An empty expression can be used where an expression is expected but no action is desired.</span></span> <span data-ttu-id="384e1-1191">Ad esempio, è possibile utilizzare un'espressione vuota come ultima espressione in un'espressione di blocco.</span><span class="sxs-lookup"><span data-stu-id="384e1-1191">For example, you can use an empty expression as the last expression in a block expression.</span></span> <span data-ttu-id="384e1-1192">In questo caso, il blocco il valore dell'espressione restituito è void.</span><span class="sxs-lookup"><span data-stu-id="384e1-1192">In this case, the block expression's return value is void.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1193">Esempio di codice seguente viene illustrato come creare un'espressione vuota e aggiungerlo a un'espressione di blocco.</span><span class="sxs-lookup"><span data-stu-id="384e1-1193">The following code example shows how to create an empty expression and add it to a block expression.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#31)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equal">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1194">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto di uguaglianza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1194">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equal (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Equal(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1195">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1195">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1196">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1196">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1197">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto di uguaglianza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1197">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1198">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1198">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1199">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1199">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1200">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1200">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1201">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1201">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="384e1-1202">Altrimenti, è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1202">Otherwise, it is `false`.</span></span> <span data-ttu-id="384e1-1203">La proprietà <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> è sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1203">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="384e1-1204">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1204">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1205">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1205">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1206">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1206">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-1207">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di uguaglianza, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1207">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1208">In caso contrario, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1208">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1209">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1209">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1210">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1210">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1211">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1211">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1212">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1212">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1213">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="384e1-1213">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="384e1-1214">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1214">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1215">Il tipo restituito del metodo di implementazione è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1215">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="384e1-1216">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1216">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1217">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1217">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1218">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1218">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="384e1-1219">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1219">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-1220">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1220">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1221">Esempio di codice seguente viene illustrato come creare un'espressione che controlla se i valori dei due argomenti sono uguali.</span><span class="sxs-lookup"><span data-stu-id="384e1-1221">The following code example shows how to create an expression that checks whether the values of its two arguments are equal.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#8)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1222">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1222">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1223">L'operatore di uguaglianza non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1223">The equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equal (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Equal(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1224">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1224">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1225">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1225">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="384e1-1226">
            <see langword="true" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="true" />; <see langword="false" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1226">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1227">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1227">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1228">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto di uguaglianza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1228">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span>
          </span>
          <span data-ttu-id="384e1-1229">Il metodo di implementazione può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1229">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1230">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1230">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1231">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1231">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1232">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1232">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1233">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> proprietà `true` e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> proprietà è uguale a `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1233">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="384e1-1234">In caso contrario, sono entrambi `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1234">Otherwise, they are both `false`.</span></span> <span data-ttu-id="384e1-1235">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1235">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1236">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1236">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1237">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1237">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-1238">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1238">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1239">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di uguaglianza, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1239">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1240">In caso contrario, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1240">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1241">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1241">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1242">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1242">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1243">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1243">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1244">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1244">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1245">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato; Inoltre, il tipo del nodo è nullable <xref:System.Boolean> se `liftToNull` è `true` o <xref:System.Boolean> se `liftToNull` è `false`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1245">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="384e1-1246">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1246">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1247">Il tipo restituito del metodo di implementazione è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1247">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="384e1-1248">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1248">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1249">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1249">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1250">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1250">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="384e1-1251">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1251">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-1252">Il tipo del nodo è nullable <xref:System.Boolean> se `liftToNull` è `true` o <xref:System.Boolean> se `liftToNull` è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1252">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1253">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1253">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1254">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1254">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1255">
            <paramref name="method" /> è <see langword="null" /> e l'operatore di uguaglianza non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1255">
              <paramref name="method" /> is <see langword="null" /> and the equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExclusiveOr">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1256">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione <see langword="XOR" /> bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1256">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOr (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOr(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1257">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1257">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1258">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1258">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1259">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione <see langword="XOR" /> bit per bit, usando <c>op_ExclusiveOr</c> per i tipi definiti dall'utente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1259">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1260">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1260">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1261">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1261">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1262">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1262">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1263">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1263">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-1264">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1264">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-1265">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1265">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-1266">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1266">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1267">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1267">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1268">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1268">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-1269">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload di `XOR` (operatore), il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1269">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1270">In caso contrario, se `left`. Tipo e `right`. Type sono tipi integrali o booleani, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1270">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1271">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1271">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1272">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1272">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1273">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1273">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1274">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1274">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1275">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1275">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-1276">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1276">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1277">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-1277">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-1278">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1278">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1279">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1279">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1280">Il tipo del nodo è il tipo di risultati predefiniti `XOR` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-1280">The type of the node is the result type of the predefined `XOR` operator.</span></span>  
  
-   <span data-ttu-id="384e1-1281">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1281">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-1282">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato predefiniti `XOR` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-1282">The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1283">Esempio di codice seguente viene illustrato come creare un'espressione che rappresenta l'operazione XOR logica.</span><span class="sxs-lookup"><span data-stu-id="384e1-1283">The following code example shows how to create an expression that represents the logical XOR operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#9)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1284">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1284">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1285">L'operatore <see langword="XOR" /> non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1285">The <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOr (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOr(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1286">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1286">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1287">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1287">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1288">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1288">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1289">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione <see langword="XOR" /> bit per bit, usando <c>op_ExclusiveOr</c> per i tipi definiti dall'utente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1289">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
          <span data-ttu-id="384e1-1290">Il metodo di implementazione può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1290">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1291">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1291">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1292">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1292">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1293">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1293">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1294">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1294">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-1295">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1295">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-1296">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1296">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-1297">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1297">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1298">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1298">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1299">Le regole seguenti determinano il metodo per l'operazione di implementazione selezionato:</span><span class="sxs-lookup"><span data-stu-id="384e1-1299">The following rules determine the chosen implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-1300">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1300">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1301">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload di `XOR` (operatore), il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1301">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1302">In caso contrario, se `left`. Tipo e `right`. Type sono tipi integrali o booleani, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1302">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1303">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1303">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1304">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1304">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1305">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1305">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1306">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1306">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1307">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1307">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-1308">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1308">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1309">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-1309">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-1310">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1310">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1311">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1311">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1312">Il tipo del nodo è il tipo di risultati predefiniti `XOR` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-1312">The type of the node is the result type of the predefined `XOR` operator.</span></span>  
  
-   <span data-ttu-id="384e1-1313">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1313">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-1314">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato predefiniti `XOR` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-1314">The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1315">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1315">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1316">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1316">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1317">
            <paramref name="method" /> è <see langword="null" /> e l'operatore <see langword="XOR" /> non è definito per i tipi <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1317">
              <paramref name="method" /> is <see langword="null" /> and the <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExclusiveOrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1318">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione XOR bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1318">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1319">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1319">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1320">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1320">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1321">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione XOR bit per bit, usando <c>op_ExclusiveOr</c> per i tipi definiti dall'utente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1321">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1322">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1322">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1323">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1323">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1324">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1324">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1325">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1325">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1326">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione XOR bit per bit, usando <c>op_ExclusiveOr</c> per i tipi definiti dall'utente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1326">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1327">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1327">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1328">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1328">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1329">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1329">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1330">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1330">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-1331">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1331">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1332">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione XOR bit per bit, usando <c>op_ExclusiveOr</c> per i tipi definiti dall'utente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1332">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1333">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1333">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Field">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1334">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a un campo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1334">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Reflection.FieldInfo field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, System::Reflection::FieldInfo ^ field);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="field" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-1335">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1335">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span>
          </span>
          <span data-ttu-id="384e1-1336">Per <see langword="static" /> (<see langword="Shared" /> in Visual Basic), <c>expression</c> deve essere <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1336">For <see langword="static" /> (<see langword="Shared" /> in Visual Basic), <c>expression</c> must be <see langword="null" />.</span>
          </span>
        </param>
        <param name="field">
          <span data-ttu-id="384e1-1337">Oggetto <see cref="T:System.Reflection.FieldInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1337">The <see cref="T:System.Reflection.FieldInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1338">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a un campo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1338">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1339">Oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> e <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1339">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1340">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MemberExpression> è uguale al <xref:System.Reflection.FieldInfo.FieldType%2A> proprietà `field`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1340">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of `field`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1341">
            <paramref name="field" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1341">
              <paramref name="field" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-1342">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1342">-or-</span>
          </span>
          <span data-ttu-id="384e1-1343">Il campo rappresentato da <paramref name="field" /> non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) e <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1343">The field represented by <paramref name="field" /> is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1344">
            <paramref name="expression" />.Type non è assegnabile al tipo dichiarante del campo rappresentato da <paramref name="field" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1344">
              <paramref name="expression" />.Type is not assignable to the declaring type of the field represented by <paramref name="field" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, System::String ^ fieldName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-1345">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> contiene un campo denominato <c>fieldName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1345">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a field named <c>fieldName</c>.</span>
          </span>
          <span data-ttu-id="384e1-1346">Può essere Null per i campi statici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1346">This can be null for static fields.</span>
          </span>
        </param>
        <param name="fieldName">
          <span data-ttu-id="384e1-1347">Nome di un campo a cui accedere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1347">The name of a field to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1348">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a un campo, dato il nome del campo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1348">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field given the name of the field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1349">Oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> è impostata su <paramref name="expression" /> e la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> è impostata sull'oggetto <see cref="T:System.Reflection.FieldInfo" /> che rappresenta il campo identificato da <paramref name="fieldName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1349">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.FieldInfo" /> that represents the field denoted by <paramref name="fieldName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1350">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MemberExpression> è uguale al <xref:System.Reflection.FieldInfo.FieldType%2A> proprietà del <xref:System.Reflection.FieldInfo> che rappresenta il campo identificato da `fieldName`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1350">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of the <xref:System.Reflection.FieldInfo> that represents the field denoted by `fieldName`.</span></span>  
  
 <span data-ttu-id="384e1-1351">Questo metodo cerca `expression`. Tipo e ai tipi di base per un campo che contiene il nome `fieldName`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1351">This method searches `expression`.Type and its base types for a field that has the name `fieldName`.</span></span> <span data-ttu-id="384e1-1352">Campi pubblici vengono data la preferenza in campi non pubblici.</span><span class="sxs-lookup"><span data-stu-id="384e1-1352">Public fields are given preference over non-public fields.</span></span> <span data-ttu-id="384e1-1353">Se viene trovato un campo corrispondente, questo metodo passa `expression` e <xref:System.Reflection.FieldInfo> che rappresenta tale campo a <xref:System.Linq.Expressions.Expression.Field%2A>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1353">If a matching field is found, this method passes `expression` and the <xref:System.Reflection.FieldInfo> that represents that field to <xref:System.Linq.Expressions.Expression.Field%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1354">Esempio di codice seguente viene illustrato come creare un'espressione che rappresenta l'accesso a un campo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1354">The following code example shows how to create an expression that represents accessing a field.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#37)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1355">
            <paramref name="expression" /> o <paramref name="fieldName" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1355">
              <paramref name="expression" /> or <paramref name="fieldName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1356">Nessun campo denominato <paramref name="fieldName" /> è definito in <paramref name="expression" />.Type o nei relativi tipi di base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1356">No field named <paramref name="fieldName" /> is defined in <paramref name="expression" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, Type type, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Type type, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::String ^ fieldName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-1357">Oggetto contenitore del campo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1357">The containing object of the field.</span>
          </span>
          <span data-ttu-id="384e1-1358">Può essere Null per i campi statici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1358">This can be null for static fields.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-1359">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> che contiene il campo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1359">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the field.</span>
          </span>
        </param>
        <param name="fieldName">
          <span data-ttu-id="384e1-1360">Campo al quale accedere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1360">The field to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1361">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a un campo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1361">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1362">Oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1362">The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionType">
      <MemberSignature Language="C#" Value="public static Type GetActionType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetActionType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetActionType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetActionType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="384e1-1363">Matrice costituita da zero a sedici oggetti <see cref="T:System.Type" /> che specificano gli argomenti di tipo per il tipo delegato <see langword="System.Action" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1363">An array of up to sixteen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Action" /> delegate type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1364">Crea un oggetto <see cref="T:System.Type" /> che rappresenta un tipo delegato <c>System.Action</c> generico con argomenti tipo specifici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1364">Creates a <see cref="T:System.Type" /> object that represents a generic <c>System.Action</c> delegate type that has specific type arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1365">Tipo di un delegato <c>System.Action</c> con argomenti di tipo specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1365">The type of a <c>System.Action</c> delegate that has the specified type arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1366">Ad esempio, se gli elementi di `typeArgs` rappresentano i tipi di `T1…Tn`, il valore risultante <xref:System.Type> rappresenta il tipo di delegato costruito `System.Action<T1,…,Tn>` in c# o `System.Action(Of T1,…,Tn)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="384e1-1366">As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Action<T1,…,Tn>` in C# or `System.Action(Of T1,…,Tn)` in Visual Basic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1367">
            <paramref name="typeArgs" /> contiene più di sedici elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1367">
              <paramref name="typeArgs" /> contains more than sixteen elements.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1368">
            <paramref name="typeArgs" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1368">
              <paramref name="typeArgs" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDelegateType">
      <MemberSignature Language="C#" Value="public static Type GetDelegateType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetDelegateType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDelegateType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetDelegateType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="384e1-1369">Argomenti tipo del delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1369">The type arguments of the delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1370">Ottiene un oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta un tipo delegato <c>System.Func</c> o <c>System.Action</c> generico con argomenti tipo specifici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1370">Gets a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> or <c>System.Action</c> delegate type that has specific type arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1371">Tipo di delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1371">The delegate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1372">L'ultimo argomento di tipo determina il tipo restituito del delegato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1372">The last type argument determines the return type of the delegate.</span></span> <span data-ttu-id="384e1-1373">Se nessun delegato Func o l'azione è sufficiente, verrà generato un tipo delegato personalizzato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1373">If no Func or Action is large enough, it will generate a custom delegate type.</span></span>  
  
 <span data-ttu-id="384e1-1374">Come con Func, l'ultimo argomento è il tipo restituito.</span><span class="sxs-lookup"><span data-stu-id="384e1-1374">As with Func, the last argument is the return type.</span></span> <span data-ttu-id="384e1-1375">Può essere impostata System. void per produrre un'azione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1375">It can be set to System.Void to produce an Action.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFuncType">
      <MemberSignature Language="C#" Value="public static Type GetFuncType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetFuncType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFuncType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetFuncType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="384e1-1376">Matrice costituita da zero a diciassette oggetti <see cref="T:System.Type" /> che specificano gli argomenti di tipo per il tipo delegato <see langword="System.Func" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1376">An array of one to seventeen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Func" /> delegate type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1377">Crea un oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta un tipo delegato <c>System.Func</c> generico con argomenti tipo specifici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1377">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="384e1-1378">L'ultimo argomento tipo specifica il tipo restituito del delegato creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1378">The last type argument specifies the return type of the created delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1379">Tipo di un delegato <c>System.Func</c> con gli argomenti tipo specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1379">The type of a <c>System.Func</c> delegate that has the specified type arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1380">`typeArgs` deve contenere almeno uno e al massimo diciassette elementi.</span><span class="sxs-lookup"><span data-stu-id="384e1-1380">`typeArgs` must contain at least one and at most seventeen elements.</span></span>  
  
 <span data-ttu-id="384e1-1381">Ad esempio, se gli elementi di `typeArgs` rappresentano i tipi di `T1…Tn`, il valore risultante <xref:System.Type> rappresenta il tipo di delegato costruito `System.Func<T1,…,Tn>` in c# o `System.Func(Of T1,…,Tn)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="384e1-1381">As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Func<T1,…,Tn>` in C# or `System.Func(Of T1,…,Tn)` in Visual Basic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1382">
            <paramref name="typeArgs" /> contiene meno di uno o più di diciassette elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1382">
              <paramref name="typeArgs" /> contains fewer than one or more than seventeen elements.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1383">
            <paramref name="typeArgs" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1383">
              <paramref name="typeArgs" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Goto">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1384">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione "go to".</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1384">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Goto (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-1385">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui passerà l'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1385">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1386">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione "go to".</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1386">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1387">Oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Goto, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata sul valore specificato e un valore Null da passare all'etichetta di destinazione al momento del passaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1387">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-1388">Nell'esempio seguente viene illustrato come creare un'espressione che contiene un <xref:System.Linq.Expressions.GotoExpression> oggetto.</span><span class="sxs-lookup"><span data-stu-id="384e1-1388">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.GotoExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#45)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#45)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Goto (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-1389">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui passerà l'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1389">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="384e1-1390">Valore che al momento del passaggio verrà passato all'etichetta associata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1390">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1391">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione "go to".</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1391">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span>
          </span>
          <span data-ttu-id="384e1-1392">Il valore passato all'etichetta al momento del passaggio può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1392">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1393">Oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Goto, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" /> e <paramref name="value" /> da passare all'etichetta di destinazione al momento del passaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1393">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-1394">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui passerà l'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1394">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-1395">Oggetto <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1395">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1396">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione "go to" con il tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1396">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1397">Oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Goto, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata sul valore specificato, la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" /> e un valore Null da passare all'etichetta di destinazione al momento del passaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1397">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-1398">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui passerà l'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1398">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="384e1-1399">Valore che al momento del passaggio verrà passato all'etichetta associata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1399">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-1400">Oggetto <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1400">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1401">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione "go to" con il tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1401">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</span>
          </span>
          <span data-ttu-id="384e1-1402">Il valore passato all'etichetta al momento del passaggio può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1402">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1403">Oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Goto, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" />, la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" /> e <paramref name="value" /> da passare all'etichetta di destinazione al momento del passaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1403">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GreaterThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1404">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "maggiore di".</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1404">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1405">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1405">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1406">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1406">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1407">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "maggiore di".</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1407">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1408">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1408">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1409">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1409">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1410">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1410">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1411">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1411">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="384e1-1412">Altrimenti, è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1412">Otherwise, it is `false`.</span></span> <span data-ttu-id="384e1-1413">La proprietà <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> è sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1413">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="384e1-1414">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1414">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-1415">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1415">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1416">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1416">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1417">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1417">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-1418">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore "maggiore di", il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1418">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1419">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1419">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1420">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1420">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1421">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1421">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1422">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1422">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1423">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1423">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1424">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="384e1-1424">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="384e1-1425">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1425">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1426">Il tipo restituito del metodo di implementazione è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1426">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="384e1-1427">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1427">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1428">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1428">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1429">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1429">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="384e1-1430">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1430">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-1431">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1431">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1432">Esempio di codice seguente viene illustrato come creare un'espressione che confronta due valori integer.</span><span class="sxs-lookup"><span data-stu-id="384e1-1432">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#10)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1433">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1433">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1434">L'operatore "maggiore di" non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1434">The "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1435">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1435">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1436">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1436">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="384e1-1437">
            <see langword="true" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="true" />; <see langword="false" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1437">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1438">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1438">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1439">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "maggiore di".</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1439">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span>
          </span>
          <span data-ttu-id="384e1-1440">Il metodo di implementazione può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1440">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1441">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1441">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1442">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1442">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1443">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1443">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1444">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> proprietà `true` e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> proprietà è uguale a `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1444">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="384e1-1445">In caso contrario, sono entrambi `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1445">Otherwise, they are both `false`.</span></span> <span data-ttu-id="384e1-1446">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1446">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-1447">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1447">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1448">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1448">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1449">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1449">The following rules determine the implementing method for the operation :</span></span>  
  
-   <span data-ttu-id="384e1-1450">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1450">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1451">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore "maggiore di", il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1451">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1452">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1452">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1453">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1453">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1454">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1454">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1455">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1455">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1456">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1456">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1457">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato; Inoltre, il tipo del nodo è nullable <xref:System.Boolean> se `liftToNull` è `true` o <xref:System.Boolean> se `liftToNull` è `false`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1457">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="384e1-1458">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1458">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1459">Il tipo restituito del metodo di implementazione è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1459">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="384e1-1460">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1460">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1461">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1461">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1462">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1462">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="384e1-1463">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1463">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-1464">Il tipo del nodo è nullable <xref:System.Boolean> se `liftToNull` è `true` o <xref:System.Boolean> se `liftToNull` è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1464">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1465">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1465">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1466">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1466">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1467">
            <paramref name="method" /> è <see langword="null" /> e l'operatore "maggiore di" non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1467">
              <paramref name="method" /> is <see langword="null" /> and the "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1468">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "maggiore o uguale a".</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1468">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1469">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1469">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1470">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1470">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1471">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "maggiore o uguale a".</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1471">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1472">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1472">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1473">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1473">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1474">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1474">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1475">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1475">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="384e1-1476">Altrimenti, è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1476">Otherwise, it is `false`.</span></span> <span data-ttu-id="384e1-1477">La proprietà <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> è sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1477">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="384e1-1478">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1478">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-1479">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1479">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1480">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1480">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1481">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1481">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-1482">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che l'overload dell'operatore "maggiore o uguale a", il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1482">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1483">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1483">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1484">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1484">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1485">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1485">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1486">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1486">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1487">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1487">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1488">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="384e1-1488">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="384e1-1489">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1489">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1490">Il tipo restituito del metodo di implementazione è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1490">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="384e1-1491">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1491">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1492">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1492">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1493">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1493">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="384e1-1494">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1494">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-1495">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1495">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1496">Esempio di codice seguente viene illustrato come creare un'espressione che confronta due valori integer.</span><span class="sxs-lookup"><span data-stu-id="384e1-1496">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#11)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1497">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1497">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1498">L'operatore "maggiore o uguale a" non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1498">The "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1499">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1499">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1500">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1500">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="384e1-1501">
            <see langword="true" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="true" />; <see langword="false" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1501">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1502">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1502">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1503">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "maggiore o uguale a".</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1503">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1504">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1504">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1505">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1505">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1506">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1506">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1507">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> proprietà `true` e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> proprietà è uguale a `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1507">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="384e1-1508">In caso contrario, sono entrambi `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1508">Otherwise, they are both `false`.</span></span> <span data-ttu-id="384e1-1509">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1509">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-1510">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1510">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1511">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1511">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1512">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1512">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-1513">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1513">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1514">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che l'overload dell'operatore "maggiore o uguale a", il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1514">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1515">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1515">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1516">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1516">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1517">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1517">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1518">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1518">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1519">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1519">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1520">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato; Inoltre, il tipo del nodo è nullable <xref:System.Boolean> se `liftToNull` è `true` o <xref:System.Boolean> se `liftToNull` è `false`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1520">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="384e1-1521">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1521">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1522">Il tipo restituito del metodo di implementazione è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1522">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="384e1-1523">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1523">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1524">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1524">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1525">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1525">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="384e1-1526">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1526">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-1527">Il tipo del nodo è nullable <xref:System.Boolean> se `liftToNull` è `true` o <xref:System.Boolean> se `liftToNull` è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1527">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1528">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1528">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1529">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1529">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1530">
            <paramref name="method" /> è <see langword="null" /> e l'operatore "maggiore o uguale a" non è definito per i tipi <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1530">
              <paramref name="method" /> is <see langword="null" /> and the "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IfThen">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThen (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThen(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfThen (test As Expression, ifTrue As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ IfThen(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="384e1-1531">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1531">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="384e1-1532">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1532">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1533">Crea un oggetto <see cref="T:System.Linq.Expressions.ConditionalExpression" /> che rappresenta un blocco condizionale con un'istruzione <see langword="if" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1533">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with an <see langword="if" /> statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1534">Oggetto <see cref="T:System.Linq.Expressions.ConditionalExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> e le cui proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1534">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, properties set to the specified values.</span>
          </span>
          <span data-ttu-id="384e1-1535">La proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> è impostata sull'espressione predefinita e il tipo dell'oggetto <see cref="T:System.Linq.Expressions.ConditionalExpression" /> risultante restituito da questo metodo è <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1535">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property is set to default expression and the type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-1536">Esempio di codice seguente viene illustrato come creare un'espressione che rappresenta un blocco condizionale.</span><span class="sxs-lookup"><span data-stu-id="384e1-1536">The following code example shows how to create an expression that represents a conditional block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#32)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfThenElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThenElse (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThenElse(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfThenElse (test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ IfThenElse(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="384e1-1537">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1537">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="384e1-1538">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1538">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <param name="ifFalse">
          <span data-ttu-id="384e1-1539">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1539">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1540">Crea un oggetto <see cref="T:System.Linq.Expressions.ConditionalExpression" /> che rappresenta un blocco condizionale con le istruzioni <see langword="if" /> e <see langword="else" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1540">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with <see langword="if" /> and <see langword="else" /> statements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1541">Oggetto <see cref="T:System.Linq.Expressions.ConditionalExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> e le cui proprietà <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> e <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1541">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span>
          </span>
          <span data-ttu-id="384e1-1542">Il tipo dell'oggetto <see cref="T:System.Linq.Expressions.ConditionalExpression" /> risultante restituito da questo metodo è <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1542">The type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-1543">Esempio di codice seguente viene illustrato come creare un'espressione che rappresenta un blocco condizionale.</span><span class="sxs-lookup"><span data-stu-id="384e1-1543">The following code example shows how to create an expression that represents a conditional block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#33)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Increment">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1544">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'incremento del valore dell'espressione di 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1544">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Increment(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-1545">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> da incrementare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1545">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1546">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'incremento del valore dell'espressione di 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1546">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1547">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione incrementata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1547">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1548">Questa espressione è funzionale e non modifica il valore dell'oggetto che viene passato al metodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1548">This expression is functional and does not change the value of the object that is passed to it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1549">Esempio di codice seguente viene illustrato come creare un'espressione che rappresenta un'operazione di incremento.</span><span class="sxs-lookup"><span data-stu-id="384e1-1549">The following code example shows how to create an expression that represents an increment operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#24)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Increment(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-1550">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> da incrementare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1550">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1551">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1551">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1552">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'incremento dell'espressione di 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1552">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1553">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione incrementata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1553">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1554">Questa espressione è funzionale e non modifica il valore dell'oggetto che viene passato al metodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1554">This expression is functional and does not change the value of the object that is passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1555">Crea un oggetto <see cref="T:System.Linq.Expressions.InvocationExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1555">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::InvocationExpression ^ Invoke(System::Linq::Expressions::Expression ^ expression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-1556">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il delegato o l'espressione lambda da applicare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1556">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-1557">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> che rappresentano gli argomenti ai quali viene applicato il delegato o l'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1557">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1558">Crea un oggetto <see cref="T:System.Linq.Expressions.InvocationExpression" /> che applica un delegato o un'espressione lambda a un elenco di espressioni di argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1558">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1559">Oggetto <see cref="T:System.Linq.Expressions.InvocationExpression" /> che applica il delegato o l'espressione lambda specificata agli argomenti forniti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1559">An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1560">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.InvocationExpression> rappresenta il tipo restituito del delegato rappresentato da `expression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1560">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.</span></span>  
  
 <span data-ttu-id="384e1-1561">Il <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.InvocationExpression> è vuoto se `arguments` è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1561">The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="384e1-1562">In caso contrario, contiene gli stessi elementi `arguments` tranne che alcune di queste <xref:System.Linq.Expressions.Expression> oggetti possono essere *racchiuso tra virgolette*.</span><span class="sxs-lookup"><span data-stu-id="384e1-1562">Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="384e1-1563">Un elemento racchiuso tra virgolette solo se il parametro corrispondente del delegato rappresentato da `expression` è di tipo <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1563">An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="384e1-1564">Racchiuso tra virgolette l'elemento viene inserito in un <xref:System.Linq.Expressions.ExpressionType.Quote> nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1564">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="384e1-1565">Il nodo risultante è un <xref:System.Linq.Expressions.UnaryExpression> cui <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> proprietà è l'elemento di `arguments`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1565">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1566">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> metodo per creare un <xref:System.Linq.Expressions.InvocationExpression> che rappresenta la chiamata di un'espressione lambda con gli argomenti specificati.</span><span class="sxs-lookup"><span data-stu-id="384e1-1566">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1567">
            <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1567">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1568">
            <paramref name="expression" />.Type non rappresenta un tipo delegato o <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1568">
              <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          </span>
          <span data-ttu-id="384e1-1569">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1569">-or-</span>
          </span>
          <span data-ttu-id="384e1-1570">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="arguments" /> non è assegnabile al tipo del parametro corrispondente del delegato rappresentato da <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1570">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1571">Il numero di elementi in <paramref name="arguments" /> è diverso dal numero di parametri elencato per il delegato rappresentato da <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1571">
              <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::InvocationExpression ^ Invoke(System::Linq::Expressions::Expression ^ expression, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-1572">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta il delegato o l'espressione lambda da applicare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1572">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-1573">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> che rappresentano gli argomenti ai quali viene applicato il delegato o l'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1573">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1574">Crea un oggetto <see cref="T:System.Linq.Expressions.InvocationExpression" /> che applica un delegato o un'espressione lambda a un elenco di espressioni di argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1574">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1575">Oggetto <see cref="T:System.Linq.Expressions.InvocationExpression" /> che applica il delegato o l'espressione lambda specificata agli argomenti forniti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1575">An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1576">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.InvocationExpression> rappresenta il tipo restituito del delegato rappresentato da `expression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1576">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.</span></span>  
  
 <span data-ttu-id="384e1-1577">Il <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.InvocationExpression> è vuoto se `arguments` è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1577">The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="384e1-1578">In caso contrario, contiene gli stessi elementi `arguments` tranne che alcune di queste <xref:System.Linq.Expressions.Expression> oggetti possono essere *racchiuso tra virgolette*.</span><span class="sxs-lookup"><span data-stu-id="384e1-1578">Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="384e1-1579">Un elemento racchiuso tra virgolette solo se il parametro corrispondente del delegato rappresentato da `expression` è di tipo <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1579">An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="384e1-1580">Racchiuso tra virgolette l'elemento viene inserito in un <xref:System.Linq.Expressions.ExpressionType.Quote> nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1580">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="384e1-1581">Il nodo risultante è un <xref:System.Linq.Expressions.UnaryExpression> cui <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> proprietà è l'elemento di `arguments`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1581">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1582">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> metodo per creare un <xref:System.Linq.Expressions.InvocationExpression> che rappresenta la chiamata di un'espressione lambda con gli argomenti specificati.</span><span class="sxs-lookup"><span data-stu-id="384e1-1582">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1583">
            <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1583">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1584">
            <paramref name="expression" />.Type non rappresenta un tipo delegato o <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1584">
              <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          </span>
          <span data-ttu-id="384e1-1585">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1585">-or-</span>
          </span>
          <span data-ttu-id="384e1-1586">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="arguments" /> non è assegnabile al tipo del parametro corrispondente del delegato rappresentato da <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1586">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1587">Il numero di elementi in <paramref name="arguments" /> è diverso dal numero di parametri elencato per il delegato rappresentato da <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1587">
              <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsFalse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1588">Restituisce un valore che indica se l'espressione restituisce false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1588">Returns whether the expression evaluates to false.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsFalse(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-1589">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> da valutare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1589">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1590">Restituisce un valore che indica se l'espressione restituisce false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1590">Returns whether the expression evaluates to false.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1591">Istanza di <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1591">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsFalse(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-1592">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> da valutare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1592">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1593">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1593">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1594">Restituisce un valore che indica se l'espressione restituisce false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1594">Returns whether the expression evaluates to false.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1595">Istanza di <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1595">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsTrue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1596">Restituisce un valore che indica se l'espressione restituisce true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1596">Returns whether the expression evaluates to true.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsTrue(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-1597">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> da valutare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1597">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1598">Restituisce un valore che indica se l'espressione restituisce true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1598">Returns whether the expression evaluates to true.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1599">Istanza di <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1599">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsTrue(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-1600">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> da valutare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1600">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1601">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1601">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1602">Restituisce un valore che indica se l'espressione restituisce true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1602">Returns whether the expression evaluates to true.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1603">Istanza di <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1603">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Label">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1604">Crea un oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> che rappresenta un'etichetta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1604">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label () As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1605">Crea un oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> che rappresenta un'etichetta con tipo void e nessun nome.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1605">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and no name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1606">Nuovo oggetto <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1606">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-1607">Nell'esempio seguente viene illustrato come creare un'espressione che contiene un <xref:System.Linq.Expressions.LabelTarget> oggetto.</span><span class="sxs-lookup"><span data-stu-id="384e1-1607">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LabelTarget> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (target As LabelTarget) As LabelExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelExpression ^ Label(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-1608">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> al quale verrà associato questo oggetto <see cref="T:System.Linq.Expressions.LabelExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1608">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1609">Crea un oggetto <see cref="T:System.Linq.Expressions.LabelExpression" /> che rappresenta un'etichetta senza un valore predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1609">Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label without a default value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1610">Oggetto <see cref="T:System.Linq.Expressions.LabelExpression" /> senza un valore predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1610">A <see cref="T:System.Linq.Expressions.LabelExpression" /> without a default value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (name As String) As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="384e1-1611">Nome dell'etichetta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1611">The name of the label.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1612">Crea un oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> che rappresenta un'etichetta con tipo void e il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1612">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and the given name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1613">Nuovo oggetto <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1613">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-1614">Tipo di valore passato durante il passaggio all'etichetta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1614">The type of value that is passed when jumping to the label.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1615">Crea un oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> che rappresenta un'etichetta con il tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1615">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1616">Nuovo oggetto <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1616">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-1617">Nell'esempio seguente viene illustrato come utilizzare un <xref:System.Linq.Expressions.LabelTarget> oggetto in un'espressione di ciclo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1617">The following example demonstrates how to use a <xref:System.Linq.Expressions.LabelTarget> object in a loop expression.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (target As LabelTarget, defaultValue As Expression) As LabelExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelExpression ^ Label(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ defaultValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="defaultValue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-1618">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> al quale verrà associato questo oggetto <see cref="T:System.Linq.Expressions.LabelExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1618">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</span>
          </span>
        </param>
        <param name="defaultValue">
          <span data-ttu-id="384e1-1619">Valore di questo oggetto <see cref="T:System.Linq.Expressions.LabelExpression" /> quando l'etichetta viene raggiunta tramite il normale flusso di controllo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1619">The value of this <see cref="T:System.Linq.Expressions.LabelExpression" /> when the label is reached through regular control flow.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1620">Crea un oggetto <see cref="T:System.Linq.Expressions.LabelExpression" /> che rappresenta un'etichetta con il valore predefinito specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1620">Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label with the given default value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1621">Oggetto <see cref="T:System.Linq.Expressions.LabelExpression" /> con il valore predefinito specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1621">A <see cref="T:System.Linq.Expressions.LabelExpression" /> with the given default value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(Type ^ type, System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-1622">Tipo di valore passato durante il passaggio all'etichetta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1622">The type of value that is passed when jumping to the label.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="384e1-1623">Nome dell'etichetta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1623">The name of the label.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1624">Crea un oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> che rappresenta un'etichetta con il tipo e il nome specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1624">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type and name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1625">Nuovo oggetto <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1625">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Lambda">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1626">Crea un albero delle espressioni che rappresenta un'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1626">Creates an expression tree that represents a lambda expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="384e1-1627">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1627">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1628">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1628">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1629">Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1629">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1630">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1630">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="384e1-1631">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1631">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1632">Matrice di oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1632">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1633">Crea un oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> costruendo prima un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1633">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1634">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1634">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1635">Il `parameters` parametro non deve avere più di 16 elementi.</span><span class="sxs-lookup"><span data-stu-id="384e1-1635">The `parameters` parameter must not have more than sixteen elements.</span></span>  
  
 <span data-ttu-id="384e1-1636">Gli elementi di `parameters` deve essere uguale a espressioni dei parametri in riferimento `body`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1636">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="384e1-1637">Questo metodo crea un tipo di delegato appropriato da uno del `System.Func` delegati generici.</span><span class="sxs-lookup"><span data-stu-id="384e1-1637">This method constructs an appropriate delegate type from one of the `System.Func` generic delegates.</span></span> <span data-ttu-id="384e1-1638">Il tipo delegato viene quindi passato a uno del <xref:System.Linq.Expressions.ExpressionType.Lambda> metodi factory per creare un <xref:System.Linq.Expressions.LambdaExpression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1638">It then passes the delegate type to one of the <xref:System.Linq.Expressions.ExpressionType.Lambda> factory methods to create a <xref:System.Linq.Expressions.LambdaExpression>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1639">
            <paramref name="body" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1639">
              <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-1640">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1640">-or-</span>
          </span>
          <span data-ttu-id="384e1-1641">Uno o più elementi di <paramref name="parameters" /> sono <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1641">One or more elements of <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1642">
            <paramref name="parameters" /> contiene più di sedici elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1642">
              <paramref name="parameters" /> contains more than sixteen elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="384e1-1643">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1643">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="384e1-1644">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1644">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1645">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1645">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1646">Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1646">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1647">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1647">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="384e1-1648">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1648">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="384e1-1649">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1649">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1650">Matrice contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1650">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1651">Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1651">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1652">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1652">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="384e1-1653">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1653">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="384e1-1654">Nome dell'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1654">The name for the lambda.</span>
          </span>
          <span data-ttu-id="384e1-1655">Usato per la creazione di informazioni di debug.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1655">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1656">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1656">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1657">Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1657">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1658">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1658">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="384e1-1659">Oggetto <see cref="T:System.Type" /> che rappresenta una firma di delegato per l'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1659">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="384e1-1660">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1660">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1661">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1661">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1662">Crea un oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> costruendo prima un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1662">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span>
          </span>
          <span data-ttu-id="384e1-1663">Può essere usato quando il tipo delegato non è noto in fase di compilazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1663">It can be used when the delegate type is not known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1664">Oggetto che rappresenta un'espressione lambda la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1664">An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1665">L'oggetto restituito da questa funzione è di tipo <xref:System.Linq.Expressions.Expression%601>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1665">The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>.</span></span> <span data-ttu-id="384e1-1666">Il <xref:System.Linq.Expressions.LambdaExpression> tipo viene utilizzato per rappresentare l'oggetto restituito perché il tipo concreto dell'espressione lambda non è noto in fase di compilazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1666">The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</span></span>  
  
 <span data-ttu-id="384e1-1667">Il numero di parametri per il tipo del delegato rappresentato da`delegateType` deve uguale alla lunghezza di `parameters`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1667">The number of parameters for the delegate type represented by`delegateType` must equal the length of `parameters`.</span></span>  
  
 <span data-ttu-id="384e1-1668">Gli elementi di `parameters` deve essere uguale a espressioni dei parametri in riferimento `body`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1668">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="384e1-1669">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante è uguale a `delegateType`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1669">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`.</span></span> <span data-ttu-id="384e1-1670">Se `parameters` è `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> proprietà dell'oggetto risultante è una raccolta vuota.</span><span class="sxs-lookup"><span data-stu-id="384e1-1670">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1671">Nell'esempio seguente viene illustrato come creare un'espressione che rappresenta un'espressione lambda che aggiunge 1 per l'argomento passato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1671">The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#42)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1672">
            <paramref name="delegateType" /> o <paramref name="body" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1672">
              <paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-1673">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1673">-or-</span>
          </span>
          <span data-ttu-id="384e1-1674">Uno o più elementi in <paramref name="parameters" /> sono <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1674">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1675">
            <paramref name="delegateType" /> non rappresenta un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1675">
              <paramref name="delegateType" /> does not represent a delegate type.</span>
          </span>
          <span data-ttu-id="384e1-1676">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1676">-or-</span>
          </span>
          <span data-ttu-id="384e1-1677">
            <paramref name="body" />.Type rappresenta un tipo non assegnabile al tipo restituito del tipo delegato rappresentato da <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1677">
              <paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="384e1-1678">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1678">-or-</span>
          </span>
          <span data-ttu-id="384e1-1679">Il numero di elementi in <paramref name="parameters" /> è diverso dal numero di parametri elencato per il tipo delegato rappresentato da <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1679">
              <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="384e1-1680">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1680">-or-</span>
          </span>
          <span data-ttu-id="384e1-1681">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="parameters" /> non è assegnabile dal tipo del parametro corrispondente del tipo di delegato rappresentato da <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1681">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="384e1-1682">Oggetto <see cref="T:System.Type" /> che rappresenta una firma di delegato per l'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1682">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="384e1-1683">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1683">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1684">Matrice di oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1684">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1685">Crea un oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> costruendo prima un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1685">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span>
          </span>
          <span data-ttu-id="384e1-1686">Può essere usato quando il tipo delegato non è noto in fase di compilazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1686">It can be used when the delegate type is not known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1687">Oggetto che rappresenta un'espressione lambda la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1687">An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1688">L'oggetto restituito da questa funzione è di tipo <xref:System.Linq.Expressions.Expression%601>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1688">The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>.</span></span> <span data-ttu-id="384e1-1689">Il <xref:System.Linq.Expressions.LambdaExpression> tipo viene utilizzato per rappresentare l'oggetto restituito perché il tipo concreto dell'espressione lambda non è noto in fase di compilazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1689">The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</span></span>  
  
 <span data-ttu-id="384e1-1690">Il numero di parametri per il tipo del delegato rappresentato da `delegateType` deve uguale alla lunghezza di `parameters`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1690">The number of parameters for the delegate type represented by `delegateType` must equal the length of `parameters`.</span></span>  
  
 <span data-ttu-id="384e1-1691">Gli elementi di `parameters` deve essere uguale a espressioni dei parametri in riferimento `body`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1691">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="384e1-1692">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante è uguale a `delegateType`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1692">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`.</span></span> <span data-ttu-id="384e1-1693">Se `parameters` è `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> proprietà dell'oggetto risultante è una raccolta vuota.</span><span class="sxs-lookup"><span data-stu-id="384e1-1693">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1694">
            <paramref name="delegateType" /> o <paramref name="body" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1694">
              <paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-1695">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1695">-or-</span>
          </span>
          <span data-ttu-id="384e1-1696">Uno o più elementi in <paramref name="parameters" /> sono <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1696">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1697">
            <paramref name="delegateType" /> non rappresenta un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1697">
              <paramref name="delegateType" /> does not represent a delegate type.</span>
          </span>
          <span data-ttu-id="384e1-1698">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1698">-or-</span>
          </span>
          <span data-ttu-id="384e1-1699">
            <paramref name="body" />.Type rappresenta un tipo non assegnabile al tipo restituito del tipo delegato rappresentato da <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1699">
              <paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="384e1-1700">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1700">-or-</span>
          </span>
          <span data-ttu-id="384e1-1701">Il numero di elementi in <paramref name="parameters" /> è diverso dal numero di parametri elencato per il tipo delegato rappresentato da <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1701">
              <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="384e1-1702">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1702">-or-</span>
          </span>
          <span data-ttu-id="384e1-1703">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="parameters" /> non è assegnabile dal tipo del parametro corrispondente del tipo di delegato rappresentato da <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1703">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="384e1-1704">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1704">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="384e1-1705">Nome dell'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1705">The name for the lambda.</span>
          </span>
          <span data-ttu-id="384e1-1706">Usato per la creazione di informazioni di debug.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1706">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="384e1-1707">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1707">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1708">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1708">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1709">Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1709">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1710">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1710">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="384e1-1711">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta la firma del delegato per l'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1711">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="384e1-1712">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1712">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="384e1-1713">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1713">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1714">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1714">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1715">Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1715">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1716">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1716">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="384e1-1717">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta la firma del delegato per l'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1717">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="384e1-1718">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1718">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="384e1-1719">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1719">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1720">Matrice contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1720">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1721">Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1721">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1722">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1722">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="384e1-1723">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta la firma del delegato per l'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1723">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="384e1-1724">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1724">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="384e1-1725">Nome dell'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1725">The name for the lambda.</span>
          </span>
          <span data-ttu-id="384e1-1726">Usato per la creazione di informazioni di debug.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1726">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1727">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1727">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1728">Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1728">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1729">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1729">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="384e1-1730">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta la firma del delegato per l'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1730">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="384e1-1731">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1731">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="384e1-1732">Nome dell'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1732">The name for the lambda.</span>
          </span>
          <span data-ttu-id="384e1-1733">Usato per la creazione di informazioni di debug.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1733">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="384e1-1734">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1734">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1735">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1735">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1736">Crea un oggetto LambdaExpression costruendo prima un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1736">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1737">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a Lambda e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1737">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="384e1-1738">Tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1738">A delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="384e1-1739">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1739">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1740">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1740">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1741">Crea un oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> dove il tipo delegato è noto in fase di compilazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1741">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1742">Oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1742">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1743">Il numero di parametri per il tipo delegato `TDelegate` sia uguale al numero di elementi in `parameters`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1743">The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.</span></span>  
  
 <span data-ttu-id="384e1-1744">Gli elementi di `parameters` deve essere uguale a espressioni dei parametri in riferimento `body`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1744">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="384e1-1745">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante rappresenta il tipo `TDelegate`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1745">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`.</span></span> <span data-ttu-id="384e1-1746">Se `parameters` è `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> proprietà dell'oggetto risultante è una raccolta vuota.</span><span class="sxs-lookup"><span data-stu-id="384e1-1746">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1747">
            <paramref name="body" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1747">
              <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-1748">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1748">-or-</span>
          </span>
          <span data-ttu-id="384e1-1749">Uno o più elementi in <paramref name="parameters" /> sono <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1749">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1750">
            <paramref name="TDelegate" /> non è un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1750">
              <paramref name="TDelegate" /> is not a delegate type.</span>
          </span>
          <span data-ttu-id="384e1-1751">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1751">-or-</span>
          </span>
          <span data-ttu-id="384e1-1752">
            <paramref name="body" />.Type rappresenta un tipo non assegnabile al tipo restituito di <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1752">
              <paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="384e1-1753">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1753">-or-</span>
          </span>
          <span data-ttu-id="384e1-1754">Il numero di elementi in <paramref name="parameters" /> è diverso dal numero di parametri elencato per <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1754">
              <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="384e1-1755">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1755">-or-</span>
          </span>
          <span data-ttu-id="384e1-1756">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="parameters" /> non è assegnabile dal tipo del parametro corrispondente di <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1756">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="384e1-1757">Tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1757">A delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="384e1-1758">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1758">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1759">Matrice di oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1759">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1760">Crea un oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> dove il tipo delegato è noto in fase di compilazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1760">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1761">Oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1761">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1762">Il numero di parametri per il tipo delegato `TDelegate` sia uguale al numero di elementi in `parameters`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1762">The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.</span></span>  
  
 <span data-ttu-id="384e1-1763">Gli elementi di `parameters` deve essere uguale a espressioni dei parametri in riferimento`body`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1763">The elements of `parameters` must be reference equal to the parameter expressions in`body`.</span></span>  
  
 <span data-ttu-id="384e1-1764">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante rappresenta il tipo `TDelegate`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1764">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`.</span></span> <span data-ttu-id="384e1-1765">Se `parameters` è `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> proprietà dell'oggetto risultante è una raccolta vuota.</span><span class="sxs-lookup"><span data-stu-id="384e1-1765">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1766">
            <paramref name="body" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1766">
              <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-1767">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1767">-or-</span>
          </span>
          <span data-ttu-id="384e1-1768">Uno o più elementi in <paramref name="parameters" /> sono <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1768">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1769">
            <paramref name="TDelegate" /> non è un tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1769">
              <paramref name="TDelegate" /> is not a delegate type.</span>
          </span>
          <span data-ttu-id="384e1-1770">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1770">-or-</span>
          </span>
          <span data-ttu-id="384e1-1771">
            <paramref name="body" />.Type rappresenta un tipo non assegnabile al tipo restituito di <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1771">
              <paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="384e1-1772">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1772">-or-</span>
          </span>
          <span data-ttu-id="384e1-1773">Il numero di elementi in <paramref name="parameters" /> è diverso dal numero di parametri elencato per <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1773">
              <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="384e1-1774">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1774">-or-</span>
          </span>
          <span data-ttu-id="384e1-1775">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="parameters" /> non è assegnabile dal tipo del parametro corrispondente di <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1775">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="384e1-1776">Tipo di delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1776">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="384e1-1777">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1777">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="384e1-1778">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1778">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1779">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1779">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1780">Crea un oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> dove il tipo delegato è noto in fase di compilazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1780">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1781">Oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1781">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="384e1-1782">Tipo di delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1782">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="384e1-1783">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1783">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="384e1-1784">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1784">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1785">Matrice contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1785">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1786">Crea un oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> dove il tipo delegato è noto in fase di compilazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1786">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1787">Oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1787">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="384e1-1788">Tipo di delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1788">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="384e1-1789">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1789">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="384e1-1790">Nome dell'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1790">The name of the lambda.</span>
          </span>
          <span data-ttu-id="384e1-1791">Usato per la generazione di informazioni di debug.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1791">Used for generating debugging information.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1792">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1792">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1793">Crea un oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> dove il tipo delegato è noto in fase di compilazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1793">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1794">Oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1794">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="384e1-1795">Tipo di delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1795">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="384e1-1796">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1796">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="384e1-1797">Nome dell'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1797">The name of the lambda.</span>
          </span>
          <span data-ttu-id="384e1-1798">Usato per la generazione di informazioni di debug.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1798">Used for generating debugging info.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="384e1-1799">Oggetto <see cref="T:System.Boolean" /> che indica se l'ottimizzazione della chiamata tail verrà applicata durante la compilazione dell'espressione creata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1799">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="384e1-1800">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1800">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1801">Crea un oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> dove il tipo delegato è noto in fase di compilazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1801">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1802">Oggetto <see cref="T:System.Linq.Expressions.Expression`1" /> la cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> e le cui proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> e <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1802">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LeftShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1803">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di spostamento a sinistra bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1803">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShift (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1804">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1804">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1805">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1805">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1806">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di spostamento a sinistra bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1806">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1807">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1807">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1808">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1808">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1809">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1809">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1810">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1810">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-1811">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1811">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-1812">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1812">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-1813">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1813">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1814">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1814">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1815">Le regole seguenti determinano il metodo di implementazione selezionato per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1815">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-1816">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di spostamento a sinistra, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1816">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1817">In caso contrario, se `left`. Il tipo è un tipo integrale (uno dei <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, o i tipi nullable corrispondenti) e `right`. Il tipo è <xref:System.Int32>, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1817">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1818">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1818">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1819">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1819">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1820">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1820">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1821">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1821">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1822">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1822">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-1823">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1823">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1824">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-1824">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-1825">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1825">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1826">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1826">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1827">Il tipo del nodo è il tipo di risultato dell'operatore di spostamento a sinistra predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-1827">The type of the node is the result type of the predefined left-shift operator.</span></span>  
  
-   <span data-ttu-id="384e1-1828">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1828">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-1829">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di spostamento a sinistra predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-1829">The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1830">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1830">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1831">L'operatore di spostamento a sinistra non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1831">The left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShift (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1832">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1832">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1833">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1833">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1834">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1834">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1835">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di spostamento a sinistra bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1835">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1836">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1836">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1837">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1837">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1838">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1838">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1839">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1839">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-1840">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1840">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-1841">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1841">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-1842">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1842">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1843">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1843">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1844">Le regole seguenti determinano il metodo di implementazione selezionato per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1844">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-1845">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1845">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-1846">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di spostamento a sinistra, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1846">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1847">In caso contrario, se `left`. Il tipo è un tipo integrale (uno dei <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, o i tipi nullable corrispondenti) e `right`. Il tipo è <xref:System.Int32>, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1847">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1848">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1848">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1849">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1849">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1850">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1850">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1851">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1851">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1852">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1852">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-1853">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1853">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1854">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-1854">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-1855">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1855">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1856">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1856">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1857">Il tipo del nodo è il tipo di risultato dell'operatore di spostamento a sinistra predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-1857">The type of the node is the result type of the predefined left-shift operator.</span></span>  
  
-   <span data-ttu-id="384e1-1858">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1858">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-1859">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di spostamento a sinistra predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-1859">The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1860">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1860">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1861">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1861">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1862">
            <paramref name="method" /> è <see langword="null" /> e l'operatore di spostamento a sinistra non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1862">
              <paramref name="method" /> is <see langword="null" /> and the left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LeftShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1863">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di spostamento a sinistra bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1863">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1864">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1864">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1865">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1865">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1866">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di spostamento a sinistra bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1866">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1867">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1867">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1868">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1868">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1869">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1869">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1870">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1870">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1871">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di spostamento a sinistra bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1871">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1872">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1872">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1873">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1873">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1874">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1874">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1875">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1875">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-1876">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1876">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1877">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di spostamento a sinistra bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1877">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1878">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1878">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LessThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1879">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "minore di".</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1879">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1880">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1880">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1881">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1881">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1882">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "minore di".</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1882">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1883">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1883">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1884">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1884">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1885">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1885">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1886">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1886">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="384e1-1887">Altrimenti, è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1887">Otherwise, it is `false`.</span></span> <span data-ttu-id="384e1-1888">La proprietà <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> è sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1888">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="384e1-1889">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1889">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-1890">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1890">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1891">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1891">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1892">Il metodo di implementazione per l'operazione viene scelto in base alle regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="384e1-1892">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="384e1-1893">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore "minore di", il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1893">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1894">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1894">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1895">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1895">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1896">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1896">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1897">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1897">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1898">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1898">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1899">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="384e1-1899">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="384e1-1900">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1900">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1901">Il tipo restituito del metodo di implementazione è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1901">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="384e1-1902">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1902">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1903">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1903">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1904">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1904">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="384e1-1905">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1905">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-1906">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1906">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1907">Esempio di codice seguente viene illustrato come creare un'espressione che confronta due valori integer.</span><span class="sxs-lookup"><span data-stu-id="384e1-1907">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#25)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1908">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1908">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1909">L'operatore "minore di" non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1909">The "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1910">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1910">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1911">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1911">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="384e1-1912">
            <see langword="true" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="true" />; <see langword="false" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1912">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1913">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1913">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1914">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "minore di".</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1914">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1915">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1915">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1916">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1916">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1917">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1917">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1918">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> proprietà `true` e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> proprietà è uguale a `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1918">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="384e1-1919">In caso contrario, sono entrambi `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1919">Otherwise, they are both `false`.</span></span> <span data-ttu-id="384e1-1920">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1920">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-1921">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1921">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1922">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1922">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1923">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1923">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-1924">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1924">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1925">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore "minore di", il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1925">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1926">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1926">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1927">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1927">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1928">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1928">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1929">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1929">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1930">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1930">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1931">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato; Inoltre, il tipo del nodo è nullable <xref:System.Boolean> se `liftToNull` è `true` o <xref:System.Boolean> se `liftToNull` è `false`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1931">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="384e1-1932">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1932">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1933">Il tipo restituito del metodo di implementazione è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1933">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="384e1-1934">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1934">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1935">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1935">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1936">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1936">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="384e1-1937">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1937">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-1938">Il tipo del nodo è nullable <xref:System.Boolean> se `liftToNull` è `true` o <xref:System.Boolean> se `liftToNull` è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1938">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1939">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1939">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-1940">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1940">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1941">
            <paramref name="method" /> è <see langword="null" /> e l'operatore "minore di" non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1941">
              <paramref name="method" /> is <see langword="null" /> and the "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-1942">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "minore o uguale a".</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1942">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1943">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1943">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1944">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1944">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1945">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "minore o uguale a".</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1945">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1946">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1946">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1947">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1947">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1948">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1948">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1949">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1949">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="384e1-1950">Altrimenti, è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1950">Otherwise, it is `false`.</span></span> <span data-ttu-id="384e1-1951">La proprietà <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> è sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1951">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="384e1-1952">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1952">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-1953">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1953">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1954">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1954">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1955">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1955">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-1956">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore "minore o uguale a", il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1956">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1957">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1957">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1958">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1958">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1959">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1959">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1960">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1960">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1961">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1961">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1962">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="384e1-1962">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="384e1-1963">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1963">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1964">Il tipo restituito del metodo di implementazione è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1964">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="384e1-1965">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1965">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1966">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1966">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1967">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1967">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="384e1-1968">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1968">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-1969">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1969">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-1970">Esempio di codice seguente viene illustrato come creare un'espressione che confronta due valori integer.</span><span class="sxs-lookup"><span data-stu-id="384e1-1970">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#26)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-1971">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1971">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-1972">L'operatore "minore o uguale a" non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1972">The "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-1973">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1973">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-1974">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1974">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="384e1-1975">
            <see langword="true" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="true" />; <see langword="false" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1975">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-1976">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1976">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-1977">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto numerico "minore o uguale a".</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1977">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-1978">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-1978">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-1979">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1979">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-1980">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-1980">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-1981">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> proprietà `true` e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> proprietà è uguale a `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1981">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="384e1-1982">In caso contrario, sono entrambi `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1982">Otherwise, they are both `false`.</span></span> <span data-ttu-id="384e1-1983">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1983">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-1984">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1984">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-1985">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-1985">Implementing Method</span></span>  
 <span data-ttu-id="384e1-1986">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-1986">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-1987">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1987">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1988">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore "minore o uguale a", il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1988">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1989">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-1989">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-1990">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-1990">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-1991">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1991">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1992">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1992">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-1993">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1993">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-1994">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato; Inoltre, il tipo del nodo è nullable <xref:System.Boolean> se `liftToNull` è `true` o <xref:System.Boolean> se `liftToNull` è `false`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1994">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="384e1-1995">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-1995">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-1996">Il tipo restituito del metodo di implementazione è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1996">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="384e1-1997">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-1997">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-1998">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-1998">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-1999">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-1999">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="384e1-2000">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2000">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-2001">Il tipo del nodo è nullable <xref:System.Boolean> se `liftToNull` è `true` o <xref:System.Boolean> se `liftToNull` è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2001">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2002">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2002">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2003">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2003">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2004">
            <paramref name="method" /> è <see langword="null" /> e l'operatore "minore o uguale a" non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2004">
              <paramref name="method" /> is <see langword="null" /> and the "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ListBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2005">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberListBinding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2005">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (member As MemberInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MemberInfo ^ member, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="384e1-2006">Oggetto <see cref="T:System.Reflection.MemberInfo" /> che rappresenta un campo o una proprietà su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2006">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="384e1-2007">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2007">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2008">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberListBinding" /> dove il membro è un campo o una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2008">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2009">Oggetto <see cref="T:System.Linq.Expressions.MemberListBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> e <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2009">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2010">
            <paramref name="member" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2010">
              <paramref name="member" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2011">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2011">-or-</span>
          </span>
          <span data-ttu-id="384e1-2012">Uno o più elementi di <paramref name="initializers" /> sono <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2012">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2013">
            <paramref name="member" /> non rappresenta un campo o una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2013">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="384e1-2014">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2014">-or-</span>
          </span>
          <span data-ttu-id="384e1-2015">
            <see cref="P:System.Reflection.FieldInfo.FieldType" /> o <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> del campo o della proprietà che <paramref name="member" /> rappresenta non implementa <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2015">The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (member As MemberInfo, ParamArray initializers As ElementInit()) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MemberInfo ^ member, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="384e1-2016">Oggetto <see cref="T:System.Reflection.MemberInfo" /> che rappresenta un campo o una proprietà su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2016">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="384e1-2017">Matrice di oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2017">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2018">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberListBinding" /> dove il membro è un campo o una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2018">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2019">Oggetto <see cref="T:System.Linq.Expressions.MemberListBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> e <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2019">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2020">
            <paramref name="member" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2020">
              <paramref name="member" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2021">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2021">-or-</span>
          </span>
          <span data-ttu-id="384e1-2022">Uno o più elementi di <paramref name="initializers" /> sono <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2022">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2023">
            <paramref name="member" /> non rappresenta un campo o una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2023">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="384e1-2024">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2024">-or-</span>
          </span>
          <span data-ttu-id="384e1-2025">
            <see cref="P:System.Reflection.FieldInfo.FieldType" /> o <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> del campo o della proprietà che <paramref name="member" /> rappresenta non implementa <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2025">The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (propertyAccessor As MethodInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MethodInfo ^ propertyAccessor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="384e1-2026">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo della funzione di accesso della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2026">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="384e1-2027">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2027">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2028">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberListBinding" /> basato su un metodo della funzione di accesso alle proprietà specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2028">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> based on a specified property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2029">Oggetto <see cref="T:System.Linq.Expressions.MemberListBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> è impostata sull'oggetto <see cref="T:System.Reflection.MemberInfo" /> che rappresenta la proprietà a cui si accede in <paramref name="propertyAccessor" /> e il cui oggetto <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> è popolato con gli elementi di <paramref name="initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2029">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2030">
            <paramref name="propertyAccessor" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2030">
              <paramref name="propertyAccessor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2031">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2031">-or-</span>
          </span>
          <span data-ttu-id="384e1-2032">Uno o più elementi di <paramref name="initializers" /> sono <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2032">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2033">
            <paramref name="propertyAccessor" /> non rappresenta un metodo della funzione di accesso della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2033">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="384e1-2034">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2034">-or-</span>
          </span>
          <span data-ttu-id="384e1-2035">
            <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> della proprietà a cui accede il metodo rappresentato da <paramref name="propertyAccessor" /> non implementa <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2035">The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (propertyAccessor As MethodInfo, ParamArray initializers As ElementInit()) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MethodInfo ^ propertyAccessor, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="384e1-2036">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo della funzione di accesso della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2036">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="384e1-2037">Matrice di oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2037">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2038">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberListBinding" /> basato su un metodo della funzione di accesso alle proprietà specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2038">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object based on a specified property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2039">Oggetto <see cref="T:System.Linq.Expressions.MemberListBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> è impostata sull'oggetto <see cref="T:System.Reflection.MemberInfo" /> che rappresenta la proprietà a cui si accede in <paramref name="propertyAccessor" /> e il cui oggetto <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> è popolato con gli elementi di <paramref name="initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2039">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2040">
            <paramref name="propertyAccessor" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2040">
              <paramref name="propertyAccessor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2041">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2041">-or-</span>
          </span>
          <span data-ttu-id="384e1-2042">Uno o più elementi di <paramref name="initializers" /> sono <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2042">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2043">
            <paramref name="propertyAccessor" /> non rappresenta un metodo della funzione di accesso della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2043">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="384e1-2044">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2044">-or-</span>
          </span>
          <span data-ttu-id="384e1-2045">
            <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> della proprietà a cui accede il metodo rappresentato da <paramref name="propertyAccessor" /> non implementa <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2045">The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ListInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2046">Crea un oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2046">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="384e1-2047">Oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2047">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="384e1-2048">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2048">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2049">Crea un oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> che usa gli oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> specificati per inizializzare una raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2049">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2050">Oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> e le cui proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> e <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2050">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2051">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `newExpression` deve rappresentare un tipo che implementa <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2051">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="384e1-2052">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.ListInitExpression> è uguale a `newExpression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2052">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-2053">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> metodo per creare un <xref:System.Linq.Expressions.ListInitExpression> che rappresenta l'inizializzazione di una nuova istanza di dizionario con due coppie chiave-valore.</span><span class="sxs-lookup"><span data-stu-id="384e1-2053">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2054">
            <paramref name="newExpression" /> o <paramref name="initializers" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2054">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2055">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2055">-or-</span>
          </span>
          <span data-ttu-id="384e1-2056">Uno o più elementi di <paramref name="initializers" /> sono <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2056">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2057">
            <paramref name="newExpression" />.Type non implementa <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2057">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="384e1-2058">Oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2058">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="384e1-2059">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2059">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2060">Crea un oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> che usa un metodo denominato "Add" per aggiungere elementi a una raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2060">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2061">Oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> e la cui proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2061">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2062">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `newExpression` deve rappresentare un tipo che implementa <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2062">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="384e1-2063">Per utilizzare questo overload di <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`. Tipo o il tipo di base deve dichiarare un singolo metodo denominato "Add" (distinzione tra maiuscole e minuscole) che accetta un solo argomento.</span><span class="sxs-lookup"><span data-stu-id="384e1-2063">In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="384e1-2064">Il tipo dell'argomento deve essere assegnabile dal tipo rappresentato dal <xref:System.Linq.Expressions.Expression.Type%2A> proprietà del primo elemento di `initializers`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2064">The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.</span></span>  
  
 <span data-ttu-id="384e1-2065">Il <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> proprietà dell'oggetto restituito <xref:System.Linq.Expressions.ListInitExpression> contiene un elemento di tipo <xref:System.Linq.Expressions.ElementInit> per ogni elemento della `initializers`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2065">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="384e1-2066">Il <xref:System.Linq.Expressions.ElementInit.Arguments%2A> proprietà di ogni elemento di <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> è una raccolta di singleton che contiene l'elemento corrispondente di `initializers`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2066">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="384e1-2067">Il <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> proprietà di ogni elemento di <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> rappresenta il metodo add individuato su `newExpression`. Tipo o il tipo di base.</span><span class="sxs-lookup"><span data-stu-id="384e1-2067">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.</span></span>  
  
 <span data-ttu-id="384e1-2068">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.ListInitExpression> è uguale a `newExpression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2068">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2069">
            <paramref name="newExpression" /> o <paramref name="initializers" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2069">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2070">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2070">-or-</span>
          </span>
          <span data-ttu-id="384e1-2071">Uno o più elementi di <paramref name="initializers" /> sono <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2071">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2072">
            <paramref name="newExpression" />.Type non implementa <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2072">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2073">Non esiste alcun metodo di istanza denominato "Add" (senza distinzione tra maiuscole e minuscole) dichiarato in <paramref name="newExpression" />.Type o nel relativo tipo di base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2073">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="384e1-2074">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2074">-or-</span>
          </span>
          <span data-ttu-id="384e1-2075">Il metodo Add in <paramref name="newExpression" />.Type o nel relativo tipo di base non accetta esattamente un solo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2075">The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.</span>
          </span>
          <span data-ttu-id="384e1-2076">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2076">-or-</span>
          </span>
          <span data-ttu-id="384e1-2077">Il tipo rappresentato dalla proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> del primo elemento di <paramref name="initializers" /> non è assegnabile al tipo di argomento del metodo Add in <paramref name="newExpression" />.Type o nel relativo tipo di base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2077">The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="384e1-2078">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2078">-or-</span>
          </span>
          <span data-ttu-id="384e1-2079">In <paramref name="newExpression" />.Type e/o nel relativo tipo di base sono presenti più metodi denominati "Add" (senza distinzione tra maiuscole e minuscole) compatibili con un solo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2079">More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="384e1-2080">Oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2080">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="384e1-2081">Matrice di oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2081">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2082">Crea un oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> che usa gli oggetti <see cref="T:System.Linq.Expressions.ElementInit" /> specificati per inizializzare una raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2082">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2083">Oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> e le cui proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> e <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2083">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2084">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `newExpression` deve rappresentare un tipo che implementa <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2084">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="384e1-2085">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.ListInitExpression> è uguale a `newExpression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2085">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-2086">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> metodo per creare un <xref:System.Linq.Expressions.ListInitExpression> che rappresenta l'inizializzazione di una nuova istanza di dizionario con due coppie chiave-valore.</span><span class="sxs-lookup"><span data-stu-id="384e1-2086">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2087">
            <paramref name="newExpression" /> o <paramref name="initializers" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2087">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2088">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2088">-or-</span>
          </span>
          <span data-ttu-id="384e1-2089">Uno o più elementi di <paramref name="initializers" /> sono <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2089">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2090">
            <paramref name="newExpression" />.Type non implementa <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2090">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="384e1-2091">Oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2091">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="384e1-2092">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2092">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2093">Crea un oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> che usa un metodo denominato "Add" per aggiungere elementi a una raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2093">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2094">Oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> e la cui proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2094">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2095">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `newExpression` deve rappresentare un tipo che implementa <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2095">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="384e1-2096">Per utilizzare questo overload di <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`. Tipo o il tipo di base deve dichiarare un singolo metodo denominato "Add" (distinzione tra maiuscole e minuscole) che accetta un solo argomento.</span><span class="sxs-lookup"><span data-stu-id="384e1-2096">In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="384e1-2097">Il tipo dell'argomento deve essere assegnabile dal tipo rappresentato dal <xref:System.Linq.Expressions.Expression.Type%2A> proprietà del primo elemento di `initializers`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2097">The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.</span></span>  
  
 <span data-ttu-id="384e1-2098">Il <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> proprietà dell'oggetto restituito <xref:System.Linq.Expressions.ListInitExpression> contiene un elemento di tipo <xref:System.Linq.Expressions.ElementInit> per ogni elemento della `initializers`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2098">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="384e1-2099">Il <xref:System.Linq.Expressions.ElementInit.Arguments%2A> proprietà di ogni elemento di <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> è una raccolta di singleton che contiene l'elemento corrispondente di `initializers`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2099">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="384e1-2100">Il <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> proprietà di ogni elemento di <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> rappresenta il metodo add individuato su `newExpression`. Tipo o il tipo di base.</span><span class="sxs-lookup"><span data-stu-id="384e1-2100">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.</span></span>  
  
 <span data-ttu-id="384e1-2101">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.ListInitExpression> è uguale a `newExpression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2101">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2102">
            <paramref name="newExpression" /> o <paramref name="initializers" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2102">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2103">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2103">-or-</span>
          </span>
          <span data-ttu-id="384e1-2104">Uno o più elementi di <paramref name="initializers" /> sono <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2104">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2105">
            <paramref name="newExpression" />.Type non implementa <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2105">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2106">Non esiste alcun metodo di istanza denominato "Add" (senza distinzione tra maiuscole e minuscole) dichiarato in <paramref name="newExpression" />.Type o nel relativo tipo di base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2106">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="384e1-2107">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2107">-or-</span>
          </span>
          <span data-ttu-id="384e1-2108">Il metodo Add in <paramref name="newExpression" />.Type o nel relativo tipo di base non accetta esattamente un solo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2108">The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.</span>
          </span>
          <span data-ttu-id="384e1-2109">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2109">-or-</span>
          </span>
          <span data-ttu-id="384e1-2110">Il tipo rappresentato dalla proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> del primo elemento di <paramref name="initializers" /> non è assegnabile al tipo di argomento del metodo Add in <paramref name="newExpression" />.Type o nel relativo tipo di base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2110">The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="384e1-2111">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2111">-or-</span>
          </span>
          <span data-ttu-id="384e1-2112">In <paramref name="newExpression" />.Type e/o nel relativo tipo di base sono presenti più metodi denominati "Add" (senza distinzione tra maiuscole e minuscole) compatibili con un solo argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2112">More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Reflection::MethodInfo ^ addMethod, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="384e1-2113">Oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2113">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="addMethod">
          <span data-ttu-id="384e1-2114">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo di istanza denominato "Add" (senza distinzione tra maiuscole e minuscole) che aggiunge un elemento a una raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2114">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method named "Add" (case insensitive), that adds an element to a collection.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="384e1-2115">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2115">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2116">Crea un oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> che usa un metodo specificato per aggiungere elementi a una raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2116">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2117">Oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> e la cui proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2117">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2118">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `newExpression` deve rappresentare un tipo che implementa <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2118">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="384e1-2119">Se `addMethod` è `null`, `newExpression`. Tipo o il tipo di base deve dichiarare un singolo metodo denominato "Add" (distinzione tra maiuscole e minuscole) che accetta un solo argomento.</span><span class="sxs-lookup"><span data-stu-id="384e1-2119">If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="384e1-2120">Se `addMethod` non `null`, deve rappresentare un metodo di istanza denominato "Add" (distinzione tra maiuscole e minuscole) che dispone di esattamente un parametro.</span><span class="sxs-lookup"><span data-stu-id="384e1-2120">If `addMethod` is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</span></span> <span data-ttu-id="384e1-2121">Il tipo rappresentato dal <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di ogni elemento di `initializers` deve essere assegnabile al tipo di argomento del metodo add.</span><span class="sxs-lookup"><span data-stu-id="384e1-2121">The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.</span></span>  
  
 <span data-ttu-id="384e1-2122">Il <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> proprietà dell'oggetto restituito <xref:System.Linq.Expressions.ListInitExpression> contiene un elemento di tipo <xref:System.Linq.Expressions.ElementInit> per ogni elemento della `initializers`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2122">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="384e1-2123">Il <xref:System.Linq.Expressions.ElementInit.Arguments%2A> proprietà di ogni elemento di <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> è una raccolta di singleton che contiene l'elemento corrispondente di `initializers`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2123">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="384e1-2124">Il <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> proprietà di ogni elemento di <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> è uguale a `addMethod`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2124">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.</span></span>  
  
 <span data-ttu-id="384e1-2125">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.ListInitExpression> è uguale a `newExpression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2125">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2126">
            <paramref name="newExpression" /> o <paramref name="initializers" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2126">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2127">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2127">-or-</span>
          </span>
          <span data-ttu-id="384e1-2128">Uno o più elementi di <paramref name="initializers" /> sono <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2128">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2129">
            <paramref name="newExpression" />.Type non implementa <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2129">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
          <span data-ttu-id="384e1-2130">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2130">-or-</span>
          </span>
          <span data-ttu-id="384e1-2131">
            <paramref name="addMethod" /> non è <see langword="null" /> e non rappresenta un metodo di istanza denominato "Add" (senza distinzione tra maiuscole e minuscole) che accetta esattamente un argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2131">
              <paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</span>
          </span>
          <span data-ttu-id="384e1-2132">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2132">-or-</span>
          </span>
          <span data-ttu-id="384e1-2133">
            <paramref name="addMethod" /> non è <see langword="null" /> e il tipo rappresentato dalla proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di uno o più elementi di <paramref name="initializers" /> non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="addMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2133">
              <paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2134">
            <paramref name="addMethod" /> è <see langword="null" /> e non esiste alcun metodo di istanza denominato "Add" che accetta un argomento compatibile con il tipo su <paramref name="newExpression" />.Type o sul relativo tipo di base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2134">
              <paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Reflection::MethodInfo ^ addMethod, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="384e1-2135">Oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2135">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="addMethod">
          <span data-ttu-id="384e1-2136">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo di istanza che accetta un argomento e aggiunge un elemento a una raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2136">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that takes one argument, that adds an element to a collection.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="384e1-2137">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2137">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2138">Crea un oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> che usa un metodo specificato per aggiungere elementi a una raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2138">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2139">Oggetto <see cref="T:System.Linq.Expressions.ListInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> e la cui proprietà <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2139">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2140">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `newExpression` deve rappresentare un tipo che implementa <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2140">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="384e1-2141">Se `addMethod` è `null`, `newExpression`. Tipo o il tipo di base deve dichiarare un singolo metodo denominato "Add" (distinzione tra maiuscole e minuscole) che accetta un solo argomento.</span><span class="sxs-lookup"><span data-stu-id="384e1-2141">If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="384e1-2142">Se `addMethod` non `null`, deve rappresentare un metodo di istanza denominato "Add" (distinzione tra maiuscole e minuscole) che dispone di esattamente un parametro.</span><span class="sxs-lookup"><span data-stu-id="384e1-2142">If `addMethod` is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</span></span> <span data-ttu-id="384e1-2143">Il tipo rappresentato dal <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di ogni elemento di `initializers` deve essere assegnabile al tipo di argomento del metodo add.</span><span class="sxs-lookup"><span data-stu-id="384e1-2143">The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.</span></span>  
  
 <span data-ttu-id="384e1-2144">Il <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> proprietà dell'oggetto restituito <xref:System.Linq.Expressions.ListInitExpression> contiene un elemento di tipo <xref:System.Linq.Expressions.ElementInit> per ogni elemento della `initializers`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2144">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="384e1-2145">Il <xref:System.Linq.Expressions.ElementInit.Arguments%2A> proprietà di ogni elemento di <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> è una raccolta di singleton che contiene l'elemento corrispondente di `initializers`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2145">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="384e1-2146">Il <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> proprietà di ogni elemento di <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> è uguale a `addMethod`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2146">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.</span></span>  
  
 <span data-ttu-id="384e1-2147">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.ListInitExpression> è uguale a `newExpression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2147">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2148">
            <paramref name="newExpression" /> o <paramref name="initializers" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2148">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2149">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2149">-or-</span>
          </span>
          <span data-ttu-id="384e1-2150">Uno o più elementi di <paramref name="initializers" /> sono <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2150">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2151">
            <paramref name="newExpression" />.Type non implementa <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2151">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
          <span data-ttu-id="384e1-2152">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2152">-or-</span>
          </span>
          <span data-ttu-id="384e1-2153">
            <paramref name="addMethod" /> non è <see langword="null" /> e non rappresenta un metodo di istanza denominato "Add" (senza distinzione tra maiuscole e minuscole) che accetta esattamente un argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2153">
              <paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</span>
          </span>
          <span data-ttu-id="384e1-2154">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2154">-or-</span>
          </span>
          <span data-ttu-id="384e1-2155">
            <paramref name="addMethod" /> non è <see langword="null" /> e il tipo rappresentato dalla proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di uno o più elementi di <paramref name="initializers" /> non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="addMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2155">
              <paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2156">
            <paramref name="addMethod" /> è <see langword="null" /> e non esiste alcun metodo di istanza denominato "Add" che accetta un argomento compatibile con il tipo su <paramref name="newExpression" />.Type o sul relativo tipo di base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2156">
              <paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Loop">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2157">Crea un oggetto <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2157">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="384e1-2158">Corpo del ciclo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2158">The body of the loop.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2159">Crea un oggetto <see cref="T:System.Linq.Expressions.LoopExpression" /> con il corpo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2159">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2160">Oggetto <see cref="T:System.Linq.Expressions.LoopExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2160">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression, break As LabelTarget) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::LabelTarget ^ break);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="384e1-2161">Corpo del ciclo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2161">The body of the loop.</span>
          </span>
        </param>
        <param name="break">
          <span data-ttu-id="384e1-2162">Destinazione di interruzione usata dal corpo del ciclo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2162">The break target used by the loop body.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2163">Crea un oggetto <see cref="T:System.Linq.Expressions.LoopExpression" /> con il corpo e la destinazione di interruzione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2163">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body and break target.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2164">Oggetto <see cref="T:System.Linq.Expressions.LoopExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2164">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-2165">Nell'esempio seguente viene illustrato come creare un'espressione di blocco che contiene un <xref:System.Linq.Expressions.LoopExpression> oggetto.</span><span class="sxs-lookup"><span data-stu-id="384e1-2165">The following example demonstrates how to create a block expression that contains a <xref:System.Linq.Expressions.LoopExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break, class System.Linq.Expressions.LabelTarget continue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression, break As LabelTarget, continue As LabelTarget) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::LabelTarget ^ break, System::Linq::Expressions::LabelTarget ^ continue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="continue" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="384e1-2166">Corpo del ciclo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2166">The body of the loop.</span>
          </span>
        </param>
        <param name="break">
          <span data-ttu-id="384e1-2167">Destinazione di interruzione usata dal corpo del ciclo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2167">The break target used by the loop body.</span>
          </span>
        </param>
        <param name="continue">
          <span data-ttu-id="384e1-2168">Destinazione di continuazione usata dal corpo del ciclo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2168">The continue target used by the loop body.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2169">Crea un oggetto <see cref="T:System.Linq.Expressions.LoopExpression" /> con il corpo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2169">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2170">Oggetto <see cref="T:System.Linq.Expressions.LoopExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2170">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeBinary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2171">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> tramite la chiamata al metodo factory appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2171">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> by calling the appropriate factory method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binaryType">
          <span data-ttu-id="384e1-2172">Oggetto <see cref="T:System.Linq.Expressions.ExpressionType" /> che specifica il tipo di operazione binaria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2172">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="384e1-2173">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando sinistro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2173">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2174">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando destro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2174">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2175">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> tramite la chiamata al metodo factory appropriato, dati gli operandi sinistro e destro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2175">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left and right operands, by calling an appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2176">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> risultante dalla chiamata al metodo factory appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2176">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2177">Il `binaryType` parametro determina quali <xref:System.Linq.Expressions.BinaryExpression> metodo factory viene chiamato questo metodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2177">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method calls.</span></span> <span data-ttu-id="384e1-2178">Ad esempio, se `binaryType` è <xref:System.Linq.Expressions.ExpressionType.Subtract>, questo metodo richiama <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2178">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-2179">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29> metodo per creare un <xref:System.Linq.Expressions.BinaryExpression> che rappresenta la sottrazione di un numero da un altro.</span><span class="sxs-lookup"><span data-stu-id="384e1-2179">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29> method to create a <xref:System.Linq.Expressions.BinaryExpression> that represents the subtraction of one number from another.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#8)]
 [!code-vb[System.Linq.Expressions.Expression#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2180">
            <paramref name="binaryType" /> non corrisponde a un nodo di espressione binaria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2180">
              <paramref name="binaryType" /> does not correspond to a binary expression node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2181">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2181">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="binaryType">
          <span data-ttu-id="384e1-2182">Oggetto <see cref="T:System.Linq.Expressions.ExpressionType" /> che specifica il tipo di operazione binaria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2182">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="384e1-2183">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando sinistro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2183">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2184">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando destro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2184">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="384e1-2185">
            <see langword="true" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="true" />; <see langword="false" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2185">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2186">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che specifica il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2186">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2187">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> tramite la chiamata al metodo factory appropriato, dati gli operandi sinistro e destro e il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2187">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand and implementing method, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2188">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> risultante dalla chiamata al metodo factory appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2188">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2189">Il `binaryType` parametro determina quali <xref:System.Linq.Expressions.BinaryExpression> metodo factory chiama questo metodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2189">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call.</span></span> <span data-ttu-id="384e1-2190">Ad esempio, se `binaryType` è <xref:System.Linq.Expressions.ExpressionType.Subtract>, questo metodo richiama <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2190">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span> <span data-ttu-id="384e1-2191">Il `liftToNull` e `method` i parametri vengono ignorati se non dispone di un parametro corrispondente al metodo factory appropriato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2191">The `liftToNull` and `method` parameters are ignored if the appropriate factory method does not have a corresponding parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2192">
            <paramref name="binaryType" /> non corrisponde a un nodo di espressione binaria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2192">
              <paramref name="binaryType" /> does not correspond to a binary expression node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2193">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2193">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="binaryType">
          <span data-ttu-id="384e1-2194">Oggetto <see cref="T:System.Linq.Expressions.ExpressionType" /> che specifica il tipo di operazione binaria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2194">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="384e1-2195">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando sinistro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2195">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2196">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando destro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2196">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="384e1-2197">
            <see langword="true" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="true" />; <see langword="false" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2197">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2198">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che specifica il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2198">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-2199">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> che rappresenta una funzione di conversione di tipi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2199">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.</span>
          </span>
          <span data-ttu-id="384e1-2200">Questo parametro viene usato solo se <c>binaryType</c> è <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> o un'assegnazione composta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2200">This parameter is used only if <c>binaryType</c> is <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> or compound assignment..</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2201">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> tramite la chiamata al metodo factory appropriato, dati gli operandi sinistro e destro, il metodo di implementazione e la funzione di conversione di tipi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2201">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2202">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> risultante dalla chiamata al metodo factory appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2202">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2203">Il `binaryType` parametro determina quali <xref:System.Linq.Expressions.BinaryExpression> metodo factory chiama questo metodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2203">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call.</span></span> <span data-ttu-id="384e1-2204">Ad esempio, se `binaryType` è <xref:System.Linq.Expressions.ExpressionType.Subtract>, questo metodo richiama <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2204">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span> <span data-ttu-id="384e1-2205">Il `liftToNull`, `method` e `conversion` i parametri vengono ignorati se non dispone di un parametro corrispondente al metodo factory appropriato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2205">The `liftToNull`, `method` and `conversion` parameters are ignored if the appropriate factory method does not have a corresponding parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2206">
            <paramref name="binaryType" /> non corrisponde a un nodo di espressione binaria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2206">
              <paramref name="binaryType" /> does not correspond to a binary expression node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2207">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2207">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeCatchBlock">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock MakeCatchBlock (Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock MakeCatchBlock(class System.Type type, class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ MakeCatchBlock(Type ^ type, System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-2208">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> di <see cref="T:System.Exception" /> che verrà gestito da questo oggetto <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2208">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span>
          </span>
        </param>
        <param name="variable">
          <span data-ttu-id="384e1-2209">Oggetto <see cref="T:System.Linq.Expressions.ParameterExpression" /> che rappresenta un riferimento all'oggetto <see cref="T:System.Exception" /> intercettato da questo gestore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2209">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="384e1-2210">Corpo dell'istruzione catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2210">The body of the catch statement.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="384e1-2211">Corpo del filtro <see cref="T:System.Exception" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2211">The body of the <see cref="T:System.Exception" /> filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2212">Crea un oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresenta un'istruzione catch con gli elementi specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2212">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with the specified elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2213">Oggetto <see cref="T:System.Linq.Expressions.CatchBlock" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2213">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2214">`type` deve essere non null e corrisponde al tipo di `variable` (se fornito).</span><span class="sxs-lookup"><span data-stu-id="384e1-2214">`type` must be non-null and match the type of `variable` (if it is supplied).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeDynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2215">Crea <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2215">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arguments As IEnumerable(Of Expression)) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="384e1-2216">Tipo del delegato usato dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2216">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="384e1-2217">Binder di runtime per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2217">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-2218">Argomenti per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2218">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2219">Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2219">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2220">Oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2220">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="384e1-2221">Tipo del delegato usato dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2221">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="384e1-2222">Binder di runtime per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2222">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="384e1-2223">Argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2223">The argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2224">Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato e da un argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2224">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and one argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2225">Oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2225">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, ParamArray arguments As Expression()) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="384e1-2226">Tipo del delegato usato dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2226">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="384e1-2227">Binder di runtime per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2227">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-2228">Argomenti per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2228">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2229">Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2229">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2230">Oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2230">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="384e1-2231">Tipo del delegato usato dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2231">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="384e1-2232">Binder di runtime per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2232">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="384e1-2233">Primo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2233">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-2234">Secondo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2234">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2235">Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato e da due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2235">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and two arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2236">Oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2236">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="384e1-2237">Tipo del delegato usato dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2237">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="384e1-2238">Binder di runtime per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2238">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="384e1-2239">Primo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2239">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-2240">Secondo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2240">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="384e1-2241">Terzo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2241">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2242">Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato e da tre argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2242">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and three arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2243">Oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2243">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="384e1-2244">Tipo del delegato usato dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2244">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="384e1-2245">Binder di runtime per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2245">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="384e1-2246">Primo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2246">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="384e1-2247">Secondo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2247">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="384e1-2248">Terzo argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2248">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="384e1-2249">Quarto argomento per l'operazione dinamica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2249">The fourth argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2250">Crea un oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> che rappresenta un'operazione dinamica associata dall'oggetto <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> specificato e da quattro argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2250">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and four arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2251">Oggetto <see cref="T:System.Linq.Expressions.DynamicExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> e le cui proprietà <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> e <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2251">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGoto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression MakeGoto (System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression MakeGoto(valuetype System.Linq.Expressions.GotoExpressionKind kind, class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ MakeGoto(System::Linq::Expressions::GotoExpressionKind kind, System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="System.Linq.Expressions.GotoExpressionKind" />
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="kind">
          <span data-ttu-id="384e1-2252">Oggetto <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> dell'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2252">The <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="384e1-2253">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui passerà l'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2253">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="384e1-2254">Valore che al momento del passaggio verrà passato all'etichetta associata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2254">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-2255">Oggetto <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2255">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2256">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un passaggio dell'oggetto <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2256">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a jump of the specified <see cref="T:System.Linq.Expressions.GotoExpressionKind" />.</span>
          </span>
          <span data-ttu-id="384e1-2257">Anche il valore passato all'etichetta al momento del passaggio può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2257">The value passed to the label upon jumping can also be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2258">Oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> impostata su <paramref name="kind" />, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" />, la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" /> e con <paramref name="value" /> da passare all'etichetta di destinazione al momento del passaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2258">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to <paramref name="kind" />, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression MakeIndex (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression MakeIndex(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeIndex (instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ MakeIndex(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="384e1-2259">Oggetto a cui appartiene la proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2259">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="384e1-2260">Deve essere Null se la proprietà è <see langword="static" /> (<see langword="shared" /> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2260">It should be null if the property is <see langword="static" /> (<see langword="shared" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="indexer">
          <span data-ttu-id="384e1-2261">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta la proprietà da indicizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2261">An <see cref="T:System.Linq.Expressions.Expression" /> representing the property to index.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-2262">
            <c>IEnumerable&lt;Expression&gt;</c> (<c>IEnumerable (Of Expression)</c> in Visual Basic) contenente gli argomenti che verranno usati per indicizzare la proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2262">An <c>IEnumerable&lt;Expression&gt;</c> (<c>IEnumerable (Of Expression)</c> in Visual Basic) that contains the arguments that will be used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2263">Crea un oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> che rappresenta l'accesso a una proprietà indicizzata in un oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2263">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> that represents accessing an indexed property in an object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2264">Oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2264">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeMemberAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression MakeMemberAccess (System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression MakeMemberAccess(class System.Linq.Expressions.Expression expression, class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ MakeMemberAccess(System::Linq::Expressions::Expression ^ expression, System::Reflection::MemberInfo ^ member);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-2265">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'oggetto a cui appartiene il membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2265">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the object that the member belongs to.</span>
          </span>
          <span data-ttu-id="384e1-2266">Può essere Null per i membri statici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2266">This can be null for static members.</span>
          </span>
        </param>
        <param name="member">
          <span data-ttu-id="384e1-2267">Oggetto <see cref="T:System.Reflection.MemberInfo" /> che descrive il campo o la proprietà a cui accedere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2267">The <see cref="T:System.Reflection.MemberInfo" /> that describes the field or property to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2268">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a un campo o a una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2268">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing either a field or a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2269">Oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> risultante dalla chiamata al metodo factory appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2269">The <see cref="T:System.Linq.Expressions.MemberExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2270">Questo metodo può essere utilizzato per creare un <xref:System.Linq.Expressions.MemberExpression> che rappresenta l'accesso a un campo o una proprietà, a seconda del tipo di `member`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2270">This method can be used to create a <xref:System.Linq.Expressions.MemberExpression> that represents accessing either a field or a property, depending on the type of `member`.</span></span> <span data-ttu-id="384e1-2271">Se `member` è di tipo <xref:System.Reflection.FieldInfo>, questo metodo chiama <xref:System.Linq.Expressions.Expression.Field%2A> per creare il <xref:System.Linq.Expressions.MemberExpression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2271">If `member` is of type <xref:System.Reflection.FieldInfo>, this method calls <xref:System.Linq.Expressions.Expression.Field%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.</span></span> <span data-ttu-id="384e1-2272">Se `member` è di tipo <xref:System.Reflection.PropertyInfo>, questo metodo chiama <xref:System.Linq.Expressions.Expression.Property%2A> per creare il <xref:System.Linq.Expressions.MemberExpression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2272">If `member` is of type <xref:System.Reflection.PropertyInfo>, this method calls <xref:System.Linq.Expressions.Expression.Property%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2273">
            <paramref name="member" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2273">
              <paramref name="member" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2274">
            <paramref name="member" /> non rappresenta un campo o una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2274">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeTry">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression MakeTry (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt; handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression MakeTry(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.Expression fault, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.CatchBlock&gt; handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ MakeTry(Type ^ type, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally, System::Linq::Expressions::Expression ^ fault, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-2275">Tipo di risultato dell'espressione try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2275">The result type of the try expression.</span>
          </span>
          <span data-ttu-id="384e1-2276">Se Null, il corpo e tutti i gestori devono disporre di tipo identico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2276">If null, bodh and all handlers must have identical type.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="384e1-2277">Corpo del blocco try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2277">The body of the try block.</span>
          </span>
        </param>
        <param name="finally">
          <span data-ttu-id="384e1-2278">Corpo del blocco finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2278">The body of the finally block.</span>
          </span>
          <span data-ttu-id="384e1-2279">Passare Null se al blocco try non è associato alcun blocco finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2279">Pass null if the try block has no finally block associated with it.</span>
          </span>
        </param>
        <param name="fault">
          <span data-ttu-id="384e1-2280">Corpo del blocco fault.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2280">The body of the fault block.</span>
          </span>
          <span data-ttu-id="384e1-2281">Passare Null se al blocco try non è associato alcun blocco fault.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2281">Pass null if the try block has no fault block associated with it.</span>
          </span>
        </param>
        <param name="handlers">
          <span data-ttu-id="384e1-2282">Raccolta di espressioni <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresentano le istruzioni catch da associare al blocco try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2282">A collection of <see cref="T:System.Linq.Expressions.CatchBlock" />s representing the catch statements to be associated with the try block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2283">Crea un oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> che rappresenta un blocco try con gli elementi specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2283">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with the specified elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2284">Oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2284">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeUnary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2285">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> tramite la chiamata al metodo factory appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2285">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> by calling the appropriate factory method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ MakeUnary(System::Linq::Expressions::ExpressionType unaryType, System::Linq::Expressions::Expression ^ operand, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="unaryType">
          <span data-ttu-id="384e1-2286">Oggetto <see cref="T:System.Linq.Expressions.ExpressionType" /> che specifica il tipo di operazione unaria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2286">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</span>
          </span>
        </param>
        <param name="operand">
          <span data-ttu-id="384e1-2287">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2287">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-2288">Oggetto <see cref="T:System.Type" /> che specifica il tipo in cui convertire (passare <see langword="null" /> se non applicabile).</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2288">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2289">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> tramite la chiamata al metodo factory appropriato, dato un operando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2289">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2290">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> risultante dalla chiamata al metodo factory appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2290">The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2291">Il `unaryType` parametro determina quali <xref:System.Linq.Expressions.UnaryExpression> metodo factory viene chiamato questo metodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2291">The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls.</span></span> <span data-ttu-id="384e1-2292">Ad esempio, se `unaryType` è uguale a <xref:System.Linq.Expressions.ExpressionType.Convert>, questo metodo richiama <xref:System.Linq.Expressions.Expression.Convert%2A>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2292">For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>.</span></span> <span data-ttu-id="384e1-2293">Il `type`parametro viene ignorato se non si applica al metodo factory che viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2293">The `type`parameter is ignored if it does not apply to the factory method that is called.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2294">
            <paramref name="operand" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2294">
              <paramref name="operand" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2295">
            <paramref name="unaryType" /> non corrisponde a un nodo di espressione unaria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2295">
              <paramref name="unaryType" /> does not correspond to a unary expression node.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ MakeUnary(System::Linq::Expressions::ExpressionType unaryType, System::Linq::Expressions::Expression ^ operand, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="unaryType">
          <span data-ttu-id="384e1-2296">Oggetto <see cref="T:System.Linq.Expressions.ExpressionType" /> che specifica il tipo di operazione unaria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2296">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</span>
          </span>
        </param>
        <param name="operand">
          <span data-ttu-id="384e1-2297">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> che rappresenta l'operando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2297">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-2298">Oggetto <see cref="T:System.Type" /> che specifica il tipo in cui convertire (passare <see langword="null" /> se non applicabile).</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2298">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2299">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2299">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2300">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> tramite la chiamata al metodo factory appropriato, dato un operando e il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2300">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand and implementing method, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2301">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> risultante dalla chiamata al metodo factory appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2301">The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2302">Il `unaryType` parametro determina quali <xref:System.Linq.Expressions.UnaryExpression> metodo factory viene chiamato questo metodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2302">The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls.</span></span> <span data-ttu-id="384e1-2303">Ad esempio, se `unaryType` è uguale a <xref:System.Linq.Expressions.ExpressionType.Convert>, questo metodo richiama <xref:System.Linq.Expressions.Expression.Convert%2A>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2303">For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>.</span></span> <span data-ttu-id="384e1-2304">Il `type` e `method` i parametri vengono ignorati se non si applicano al metodo factory che viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2304">The `type` and `method` parameters are ignored if they do not apply to the factory method that is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2305">
            <paramref name="operand" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2305">
              <paramref name="operand" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2306">
            <paramref name="unaryType" /> non corrisponde a un nodo di espressione unaria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2306">
              <paramref name="unaryType" /> does not correspond to a unary expression node.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2307">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> che rappresenta l'inizializzazione ricorsiva di membri di un membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2307">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (member As MemberInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MemberInfo ^ member, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="384e1-2308">Oggetto <see cref="T:System.Reflection.MemberInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2308">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="384e1-2309">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.MemberBinding" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2309">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2310">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> che rappresenta l'inizializzazione ricorsiva di membri di un campo o una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2310">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2311">Oggetto <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> e <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2311">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2312">Il `member` parametro deve rappresentare un campo o proprietà.</span><span class="sxs-lookup"><span data-stu-id="384e1-2312">The `member` parameter must represent a field or property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2313">
            <paramref name="member" /> o <paramref name="bindings" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2313">
              <paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2314">
            <paramref name="member" /> non rappresenta un campo o una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2314">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="384e1-2315">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2315">-or-</span>
          </span>
          <span data-ttu-id="384e1-2316">La proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> di un elemento di <paramref name="bindings" /> non rappresenta un membro del tipo del campo o della proprietà che <paramref name="member" /> rappresenta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2316">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (member As MemberInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MemberInfo ^ member, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="384e1-2317">Oggetto <see cref="T:System.Reflection.MemberInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2317">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="384e1-2318">Matrice di oggetti <see cref="T:System.Linq.Expressions.MemberBinding" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2318">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2319">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> che rappresenta l'inizializzazione ricorsiva di membri di un campo o una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2319">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2320">Oggetto <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> e <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2320">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2321">Il `member` parametro deve rappresentare un campo o proprietà.</span><span class="sxs-lookup"><span data-stu-id="384e1-2321">The `member` parameter must represent a field or property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2322">
            <paramref name="member" /> o <paramref name="bindings" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2322">
              <paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2323">
            <paramref name="member" /> non rappresenta un campo o una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2323">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="384e1-2324">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2324">-or-</span>
          </span>
          <span data-ttu-id="384e1-2325">La proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> di un elemento di <paramref name="bindings" /> non rappresenta un membro del tipo del campo o della proprietà che <paramref name="member" /> rappresenta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2325">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (propertyAccessor As MethodInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MethodInfo ^ propertyAccessor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="384e1-2326">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo della funzione di accesso della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2326">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="384e1-2327">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.MemberBinding" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2327">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2328">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> che rappresenta l'inizializzazione ricorsiva di membri di un membro a cui si accede usando un metodo della funzione di accesso della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2328">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2329">Oggetto <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> è impostata sull'oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà a cui si accede in <paramref name="propertyAccessor" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2329">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2330">
            <paramref name="propertyAccessor" /> o <paramref name="bindings" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2330">
              <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2331">
            <paramref name="propertyAccessor" /> non rappresenta un metodo della funzione di accesso della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2331">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="384e1-2332">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2332">-or-</span>
          </span>
          <span data-ttu-id="384e1-2333">La proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> di un elemento di <paramref name="bindings" /> non rappresenta un membro del tipo della proprietà a cui si accede con il metodo che <paramref name="propertyAccessor" /> rappresenta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2333">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (propertyAccessor As MethodInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MethodInfo ^ propertyAccessor, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="384e1-2334">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo della funzione di accesso della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2334">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="384e1-2335">Matrice di oggetti <see cref="T:System.Linq.Expressions.MemberBinding" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2335">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2336">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> che rappresenta l'inizializzazione ricorsiva di membri di un membro a cui si accede usando un metodo della funzione di accesso della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2336">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2337">Oggetto <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> è uguale a <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, la cui proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> è impostata sull'oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà a cui si accede in <paramref name="propertyAccessor" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2337">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2338">
            <paramref name="propertyAccessor" /> o <paramref name="bindings" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2338">
              <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2339">
            <paramref name="propertyAccessor" /> non rappresenta un metodo della funzione di accesso della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2339">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="384e1-2340">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2340">-or-</span>
          </span>
          <span data-ttu-id="384e1-2341">La proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> di un elemento di <paramref name="bindings" /> non rappresenta un membro del tipo della proprietà a cui si accede con il metodo che <paramref name="propertyAccessor" /> rappresenta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2341">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2342">Rappresenta un'espressione che crea un nuovo oggetto e inizializza una proprietà dell'oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2342">Represents an expression that creates a new object and initializes a property of the object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberInitExpression ^ MemberInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="384e1-2343">Oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2343">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="384e1-2344">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.MemberBinding" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2344">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2345">Rappresenta un'espressione che crea un nuovo oggetto e inizializza una proprietà dell'oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2345">Represents an expression that creates a new object and initializes a property of the object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2346">Oggetto <see cref="T:System.Linq.Expressions.MemberInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> e <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2346">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2347">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MemberInitExpression> è uguale al <xref:System.Linq.Expressions.Expression.Type%2A> proprietà `newExpression`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2347">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-2348">Nell'esempio seguente viene illustrata un'espressione che crea un nuovo oggetto e Inizializza una proprietà dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="384e1-2348">The following example demonstrates an expression that creates a new object and initializes a property of the object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#40)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2349">
            <paramref name="newExpression" /> o <paramref name="bindings" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2349">
              <paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2350">La proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> di un elemento di <paramref name="bindings" /> non rappresenta un membro del tipo che <paramref name="newExpression" />.Type rappresenta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2350">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberInitExpression ^ MemberInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="384e1-2351">Oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2351">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="384e1-2352">Matrice di oggetti <see cref="T:System.Linq.Expressions.MemberBinding" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2352">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2353">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2353">Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2354">Oggetto <see cref="T:System.Linq.Expressions.MemberInitExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> e <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2354">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2355">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MemberInitExpression> è uguale al <xref:System.Linq.Expressions.Expression.Type%2A> proprietà `newExpression`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2355">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-2356">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29> metodo per creare un <xref:System.Linq.Expressions.MemberInitExpression> che rappresenta l'inizializzazione di due membri di un nuovo oggetto.</span><span class="sxs-lookup"><span data-stu-id="384e1-2356">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29> method to create a <xref:System.Linq.Expressions.MemberInitExpression> that represents the initialization of two members of a new object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#9)]
 [!code-vb[System.Linq.Expressions.Expression#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2357">
            <paramref name="newExpression" /> o <paramref name="bindings" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2357">
              <paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2358">La proprietà <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> di un elemento di <paramref name="bindings" /> non rappresenta un membro del tipo che <paramref name="newExpression" />.Type rappresenta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2358">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Modulo">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2359">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di resto aritmetico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2359">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Modulo (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Modulo(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2360">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2360">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2361">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2361">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2362">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di resto aritmetico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2362">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2363">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2363">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2364">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2364">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-2365">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2365">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-2366">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2366">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-2367">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2367">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-2368">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2368">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-2369">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2369">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-2370">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-2370">Implementing Method</span></span>  
 <span data-ttu-id="384e1-2371">Le regole seguenti determinano il metodo di implementazione selezionato per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2371">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-2372">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore modulo, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2372">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2373">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2373">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-2374">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-2374">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-2375">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2375">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2376">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2376">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-2377">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2377">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2378">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2378">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-2379">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2379">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-2380">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-2380">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-2381">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2381">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2382">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2382">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-2383">Il tipo del nodo è il tipo di risultato dell'operatore modulo predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-2383">The type of the node is the result type of the predefined modulus operator.</span></span>  
  
-   <span data-ttu-id="384e1-2384">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2384">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-2385">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore modulo predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-2385">The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2386">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2386">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2387">L'operatore modulo non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2387">The modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Modulo (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Modulo(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2388">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2388">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2389">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2389">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2390">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2390">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2391">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di resto aritmetico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2391">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2392">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2392">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2393">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2393">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-2394">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2394">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-2395">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2395">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-2396">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2396">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-2397">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2397">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-2398">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2398">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-2399">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-2399">Implementing Method</span></span>  
 <span data-ttu-id="384e1-2400">Il metodo di implementazione per l'operazione viene scelto in base alle regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="384e1-2400">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="384e1-2401">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2401">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-2402">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore modulo, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2402">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2403">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2403">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-2404">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-2404">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-2405">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2405">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2406">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2406">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-2407">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2407">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2408">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2408">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-2409">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2409">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-2410">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-2410">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-2411">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2411">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2412">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2412">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-2413">Il tipo del nodo è il tipo di risultato dell'operatore modulo predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-2413">The type of the node is the result type of the predefined modulus operator.</span></span>  
  
-   <span data-ttu-id="384e1-2414">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2414">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-2415">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore modulo predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-2415">The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2416">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2416">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2417">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2417">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2418">
            <paramref name="method" /> è <see langword="null" /> e l'operatore modulo non è definito per i tipi <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2418">
              <paramref name="method" /> is <see langword="null" /> and the modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ModuloAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2419">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di resto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2419">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2420">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2420">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2421">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2421">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2422">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di resto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2422">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2423">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2423">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2424">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2424">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2425">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2425">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2426">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2426">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2427">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di resto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2427">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2428">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2428">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2429">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2429">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2430">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2430">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2431">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2431">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-2432">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2432">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2433">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di resto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2433">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2434">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2434">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2435">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di moltiplicazione aritmetica che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2435">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Multiply(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2436">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2436">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2437">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2437">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2438">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di moltiplicazione aritmetica che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2438">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2439">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2439">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2440">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2440">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-2441">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2441">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-2442">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2442">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-2443">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2443">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-2444">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2444">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-2445">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2445">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-2446">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-2446">Implementing Method</span></span>  
 <span data-ttu-id="384e1-2447">Le regole seguenti determinano il metodo di implementazione selezionato per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2447">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-2448">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di moltiplicazione, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2448">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2449">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2449">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-2450">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-2450">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-2451">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2451">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2452">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2452">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-2453">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2453">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2454">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2454">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-2455">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2455">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-2456">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-2456">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-2457">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2457">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2458">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2458">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-2459">Il tipo del nodo è il tipo di risultato dell'operatore di moltiplicazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-2459">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="384e1-2460">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2460">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-2461">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di moltiplicazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-2461">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-2462">Esempio di codice seguente viene illustrato come creare un'espressione che moltiplica due valori.</span><span class="sxs-lookup"><span data-stu-id="384e1-2462">The following code example shows how to create an expression that multiplies two values.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#27)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2463">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2463">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2464">L'operatore di moltiplicazione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2464">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Multiply(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2465">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2465">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2466">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2466">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2467">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2467">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2468">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di moltiplicazione aritmetica che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2468">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2469">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2469">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2470">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2470">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-2471">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2471">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-2472">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2472">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-2473">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2473">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-2474">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2474">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-2475">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2475">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-2476">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-2476">Implementing Method</span></span>  
 <span data-ttu-id="384e1-2477">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2477">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-2478">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2478">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-2479">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di moltiplicazione, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2479">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2480">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2480">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-2481">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-2481">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-2482">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2482">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2483">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2483">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-2484">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2484">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2485">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2485">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-2486">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2486">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-2487">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-2487">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-2488">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2488">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2489">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2489">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-2490">Il tipo del nodo è il tipo di risultato dell'operatore di moltiplicazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-2490">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="384e1-2491">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2491">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-2492">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di moltiplicazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-2492">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2493">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2493">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2494">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2494">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2495">
            <paramref name="method" /> è <see langword="null" /> e l'operatore di moltiplicazione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2495">
              <paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2496">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di moltiplicazione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2496">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2497">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2497">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2498">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2498">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2499">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di moltiplicazione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2499">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2500">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2500">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2501">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2501">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2502">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2502">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2503">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2503">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2504">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di moltiplicazione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2504">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2505">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2505">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2506">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2506">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2507">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2507">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2508">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2508">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-2509">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2509">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2510">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di moltiplicazione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2510">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2511">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2511">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2512">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di moltiplicazione che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2512">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2513">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2513">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2514">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2514">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2515">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di moltiplicazione che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2515">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2516">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2516">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2517">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2517">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2518">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2518">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2519">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2519">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2520">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di moltiplicazione che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2520">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2521">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2521">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2522">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2522">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2523">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2523">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2524">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2524">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-2525">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2525">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2526">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di moltiplicazione che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2526">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2527">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2527">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2528">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di moltiplicazione aritmetica che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2528">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2529">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2529">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2530">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2530">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2531">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di moltiplicazione aritmetica che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2531">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2532">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2532">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2533">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2533">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-2534">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2534">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-2535">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2535">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-2536">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2536">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-2537">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2537">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-2538">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2538">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-2539">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-2539">Implementing Method</span></span>  
 <span data-ttu-id="384e1-2540">Le regole seguenti determinano il metodo di implementazione selezionato per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2540">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-2541">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di moltiplicazione, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2541">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2542">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2542">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-2543">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-2543">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-2544">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2544">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2545">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2545">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-2546">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2546">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2547">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2547">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-2548">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2548">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-2549">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-2549">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-2550">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2550">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2551">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2551">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-2552">Il tipo del nodo è il tipo di risultato dell'operatore di moltiplicazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-2552">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="384e1-2553">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2553">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-2554">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di moltiplicazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-2554">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2555">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2555">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2556">L'operatore di moltiplicazione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2556">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2557">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2557">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2558">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2558">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2559">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2559">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2560">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di moltiplicazione aritmetica che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2560">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2561">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2561">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2562">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2562">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-2563">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2563">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-2564">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2564">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-2565">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2565">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-2566">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2566">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-2567">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2567">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-2568">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-2568">Implementing Method</span></span>  
 <span data-ttu-id="384e1-2569">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2569">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-2570">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2570">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-2571">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di moltiplicazione, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2571">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2572">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2572">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-2573">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-2573">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-2574">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2574">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2575">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2575">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-2576">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2576">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2577">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2577">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-2578">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2578">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-2579">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-2579">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-2580">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2580">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2581">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2581">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-2582">Il tipo del nodo è il tipo di risultato dell'operatore di moltiplicazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-2582">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="384e1-2583">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2583">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-2584">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di moltiplicazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-2584">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2585">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2585">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2586">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2586">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2587">
            <paramref name="method" /> è <see langword="null" /> e l'operatore di moltiplicazione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2587">
              <paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Negate">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2588">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di negazione aritmetica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2588">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Negate(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-2589">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2589">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2590">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di negazione aritmetica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2590">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2591">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> e la cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2591">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2592">Il <xref:System.Linq.Expressions.UnaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> è impostato per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2592">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="384e1-2593">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2593">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-2594">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2594">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-2595">In caso contrario, sono false.</span><span class="sxs-lookup"><span data-stu-id="384e1-2595">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-2596">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-2596">Implementing Method</span></span>  
 <span data-ttu-id="384e1-2597">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2597">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-2598">Se `expression`. Tipo è un tipo definito dall'utente che definisce l'operatore meno unario, il <xref:System.Reflection.MethodInfo> che rappresenta l'operatore è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2598">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2599">In caso contrario, se `expression`. Type è un tipo numerico, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2599">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-2600">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-2600">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-2601">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2601">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2602">Se `expression`. Il tipo è assegnabile al tipo di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2602">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-2603">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2603">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2604">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2604">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-2605">`expression`. Tipo è un tipo di valore nullable e il tipo di valore non nullable corrispondente è uguale al tipo di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2605">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-2606">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-2606">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-2607">Se il metodo di implementazione è `null`, il tipo del nodo è `expression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2607">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="384e1-2608">Se `expression`. Tipo non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2608">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-2609">In caso contrario, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2609">Otherwise, the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-2610">Nell'esempio seguente viene illustrato come creare un'espressione che rappresenta un'operazione di negazione aritmetica.</span><span class="sxs-lookup"><span data-stu-id="384e1-2610">The following example demonstrates how to create an expression that represents an arithmetic negation operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#50)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2611">
            <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2611">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2612">L'operatore meno unario non è definito per <paramref name="expression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2612">The unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Negate(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-2613">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2613">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2614">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2614">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2615">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di negazione aritmetica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2615">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2616">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> e <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2616">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2617">Il <xref:System.Linq.Expressions.UnaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> è impostato per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2617">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="384e1-2618">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2618">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-2619">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2619">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-2620">In caso contrario, sono false.</span><span class="sxs-lookup"><span data-stu-id="384e1-2620">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-2621">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-2621">Implementing Method</span></span>  
 <span data-ttu-id="384e1-2622">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2622">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-2623">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta un solo argomento, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2623">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-2624">Se `expression`. Tipo è un tipo definito dall'utente che definisce l'operatore meno unario, il <xref:System.Reflection.MethodInfo> che rappresenta l'operatore è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2624">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2625">In caso contrario, se `expression`. Type è un tipo numerico, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2625">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-2626">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-2626">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-2627">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2627">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2628">Se `expression`. Il tipo è assegnabile al tipo di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2628">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-2629">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2629">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2630">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2630">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-2631">`expression`. Tipo è un tipo di valore nullable e il tipo di valore non nullable corrispondente è uguale al tipo di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2631">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-2632">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-2632">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-2633">Se il metodo di implementazione è `null`, il tipo del nodo è `expression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2633">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="384e1-2634">Se `expression`. Tipo non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2634">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-2635">In caso contrario, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2635">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2636">
            <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2636">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2637">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) o non accetta esattamente un argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2637">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2638">
            <paramref name="method" /> è <see langword="null" /> e l'operatore meno unario non è definito per <paramref name="expression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2638">
              <paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="384e1-2639">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2639">-or-</span>
          </span>
          <span data-ttu-id="384e1-2640">
            <paramref name="expression" />.Type , o il tipo non nullable corrispondente se si tratta di un tipo nullable, non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2640">
              <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NegateChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2641">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di negazione aritmetica che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2641">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ NegateChecked(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-2642">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2642">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2643">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di negazione aritmetica che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2643">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2644">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> e la cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2644">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2645">Il <xref:System.Linq.Expressions.UnaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> è impostato per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2645">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="384e1-2646">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2646">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-2647">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2647">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-2648">In caso contrario, sono false.</span><span class="sxs-lookup"><span data-stu-id="384e1-2648">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-2649">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-2649">Implementing Method</span></span>  
 <span data-ttu-id="384e1-2650">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2650">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-2651">Se `expression`. Tipo è un tipo definito dall'utente che definisce l'operatore meno unario, il <xref:System.Reflection.MethodInfo> che rappresenta l'operatore è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2651">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2652">In caso contrario, se `expression`. Type è un tipo numerico, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2652">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-2653">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-2653">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-2654">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2654">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2655">Se `expression`. Il tipo è assegnabile al tipo di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2655">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-2656">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2656">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2657">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2657">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-2658">`expression`. Tipo è un tipo di valore nullable e il tipo di valore non nullable corrispondente è uguale al tipo di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2658">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-2659">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-2659">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-2660">Se il metodo di implementazione è `null`, il tipo del nodo è `expression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2660">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="384e1-2661">Se `expression`. Tipo non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2661">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-2662">In caso contrario, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2662">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2663">
            <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2663">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2664">L'operatore meno unario non è definito per <paramref name="expression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2664">The unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ NegateChecked(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-2665">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2665">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2666">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2666">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2667">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di negazione aritmetica che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2667">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span>
          </span>
          <span data-ttu-id="384e1-2668">Il metodo di implementazione può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2668">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2669">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> e <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2669">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2670">Il <xref:System.Linq.Expressions.UnaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> è impostato per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2670">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="384e1-2671">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2671">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-2672">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2672">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-2673">In caso contrario, sono false.</span><span class="sxs-lookup"><span data-stu-id="384e1-2673">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-2674">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-2674">Implementing Method</span></span>  
 <span data-ttu-id="384e1-2675">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2675">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-2676">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta un solo argomento, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2676">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-2677">Se `expression`. Tipo è un tipo definito dall'utente che definisce l'operatore meno unario, il <xref:System.Reflection.MethodInfo> che rappresenta l'operatore è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2677">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2678">In caso contrario, se `expression`. Type è un tipo numerico, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2678">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-2679">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-2679">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-2680">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2680">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2681">Se `expression`. Il tipo è assegnabile al tipo di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2681">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-2682">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2682">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2683">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2683">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-2684">`expression`. Tipo è un tipo di valore nullable e il tipo di valore non nullable corrispondente è uguale al tipo di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2684">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-2685">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-2685">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-2686">Se il metodo di implementazione è `null`, il tipo del nodo è `expression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2686">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="384e1-2687">Se `expression`. Tipo non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2687">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-2688">In caso contrario, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2688">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2689">
            <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2689">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2690">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) o non accetta esattamente un argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2690">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2691">
            <paramref name="method" /> è <see langword="null" /> e l'operatore meno unario non è definito per <paramref name="expression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2691">
              <paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="384e1-2692">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2692">-or-</span>
          </span>
          <span data-ttu-id="384e1-2693">
            <paramref name="expression" />.Type , o il tipo non nullable corrispondente se si tratta di un tipo nullable, non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2693">
              <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="New">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2694">Crea un oggetto <see cref="T:System.Linq.Expressions.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2694">Creates a <see cref="T:System.Linq.Expressions.NewExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="384e1-2695">Oggetto <see cref="T:System.Reflection.ConstructorInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2695">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2696">Crea un oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> che rappresenta la chiamata al costruttore specificato che non accetta argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2696">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor that takes no arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2697">Oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.New" /> e la cui proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2697">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2698">Il <xref:System.Linq.Expressions.NewExpression.Arguments%2A> e <xref:System.Linq.Expressions.NewExpression.Members%2A> le proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewExpression> sono insiemi vuoti.</span><span class="sxs-lookup"><span data-stu-id="384e1-2698">The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections.</span></span> <span data-ttu-id="384e1-2699">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà rappresenta il tipo dichiarante del costruttore rappresentato da `constructor`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2699">The <xref:System.Linq.Expressions.Expression.Type%2A> property represents the declaring type of the constructor represented by `constructor`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2700">
            <paramref name="constructor" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2700">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2701">Il costruttore che <paramref name="constructor" /> rappresenta ha almeno un parametro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2701">The constructor that <paramref name="constructor" /> represents has at least one parameter.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-2702">Oggetto <see cref="T:System.Type" /> con un costruttore che non accetta argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2702">A <see cref="T:System.Type" /> that has a constructor that takes no arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2703">Crea un oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> che rappresenta la chiamata al costruttore senza parametri del tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2703">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the parameterless constructor of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2704">Oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.New" /> e la cui proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> è impostata su <see cref="T:System.Reflection.ConstructorInfo" />, che rappresenta il costruttore senza parametri per il tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2704">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the <see cref="T:System.Reflection.ConstructorInfo" /> that represents the constructor without parameters for the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2705">Il `type` parametro deve rappresentare un tipo che ha un costruttore senza parametri.</span><span class="sxs-lookup"><span data-stu-id="384e1-2705">The `type` parameter must represent a type that has a constructor without parameters.</span></span>  
  
 <span data-ttu-id="384e1-2706">Il <xref:System.Linq.Expressions.NewExpression.Arguments%2A> e <xref:System.Linq.Expressions.NewExpression.Members%2A> le proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewExpression> sono insiemi vuoti.</span><span class="sxs-lookup"><span data-stu-id="384e1-2706">The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections.</span></span> <span data-ttu-id="384e1-2707">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è uguale a `type`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2707">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-2708">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.New%28System.Type%29> metodo per creare un <xref:System.Linq.Expressions.NewExpression> che rappresenta la creazione di una nuova istanza di un oggetto dizionario chiamando il costruttore senza parametri.</span><span class="sxs-lookup"><span data-stu-id="384e1-2708">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.New%28System.Type%29> method to create a <xref:System.Linq.Expressions.NewExpression> that represents constructing a new instance of a dictionary object by calling the constructor without parameters.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#10)]
 [!code-vb[System.Linq.Expressions.Expression#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2709">
            <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2709">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2710">Il tipo rappresentato da <paramref name="type" /> non dispone di un costruttore senza parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2710">The type that <paramref name="type" /> represents does not have a constructor without parameters.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression)) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="384e1-2711">Oggetto <see cref="T:System.Reflection.ConstructorInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2711">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-2712">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2712">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2713">Crea un oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> che rappresenta la chiamata al costruttore specificato con gli argomenti specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2713">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2714">Oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.New" /> e le cui proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> e <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2714">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2715">Il `arguments` parametro deve contenere lo stesso numero di elementi come il numero di parametri del costruttore rappresentato da `constructor`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2715">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="384e1-2716">Se `arguments` è `null`, viene considerato vuoto e <xref:System.Linq.Expressions.NewExpression.Arguments%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewExpression> è una raccolta vuota.</span><span class="sxs-lookup"><span data-stu-id="384e1-2716">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="384e1-2717">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewExpression> rappresenta il tipo dichiarante del costruttore rappresentato da `constructor`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2717">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="384e1-2718">Il <xref:System.Linq.Expressions.NewExpression.Members%2A> proprietà è una raccolta vuota.</span><span class="sxs-lookup"><span data-stu-id="384e1-2718">The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2719">
            <paramref name="constructor" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2719">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2720">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2720">-or-</span>
          </span>
          <span data-ttu-id="384e1-2721">Un elemento di <paramref name="arguments" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2721">An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2722">Il numero di elementi in <paramref name="arguments" /> è diverso dal numero di parametri per il costruttore rappresentato da <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2722">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="384e1-2723">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2723">-or-</span>
          </span>
          <span data-ttu-id="384e1-2724">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="arguments" /> non può essere assegnata al tipo del parametro corrispondente del costruttore rappresentato da <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2724">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, ParamArray arguments As Expression()) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="384e1-2725">Oggetto <see cref="T:System.Reflection.ConstructorInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2725">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-2726">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2726">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2727">Crea un oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> che rappresenta la chiamata al costruttore specificato con gli argomenti specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2727">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2728">Oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.New" /> e le cui proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> e <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2728">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2729">Il `arguments` parametro deve contenere lo stesso numero di elementi come il numero di parametri del costruttore rappresentato da `constructor`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2729">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="384e1-2730">Se `arguments` è `null`, viene considerato vuoto e <xref:System.Linq.Expressions.NewExpression.Arguments%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewExpression> è una raccolta vuota.</span><span class="sxs-lookup"><span data-stu-id="384e1-2730">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="384e1-2731">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewExpression> rappresenta il tipo dichiarante del costruttore rappresentato da `constructor`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2731">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="384e1-2732">Il <xref:System.Linq.Expressions.NewExpression.Members%2A> proprietà è una raccolta vuota.</span><span class="sxs-lookup"><span data-stu-id="384e1-2732">The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2733">
            <paramref name="constructor" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2733">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2734">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2734">-or-</span>
          </span>
          <span data-ttu-id="384e1-2735">Un elemento di <paramref name="arguments" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2735">An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2736">La lunghezza di <paramref name="arguments" /> corrisponde al numero di parametri per il costruttore rappresentato da <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2736">The length of <paramref name="arguments" /> does match the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="384e1-2737">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2737">-or-</span>
          </span>
          <span data-ttu-id="384e1-2738">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="arguments" /> non può essere assegnata al tipo del parametro corrispondente del costruttore rappresentato da <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2738">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.MemberInfo&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), members As IEnumerable(Of MemberInfo)) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments, System::Collections::Generic::IEnumerable&lt;System::Reflection::MemberInfo ^&gt; ^ members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="384e1-2739">Oggetto <see cref="T:System.Reflection.ConstructorInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2739">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-2740">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2740">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <param name="members">
          <span data-ttu-id="384e1-2741">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Reflection.MemberInfo" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.NewExpression.Members" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2741">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2742">Crea un oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> che rappresenta la chiamata al costruttore specificato con gli argomenti specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2742">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
          <span data-ttu-id="384e1-2743">I membri che accedono ai campi inizializzati del costruttore sono specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2743">The members that access the constructor initialized fields are specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2744">Oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.New" /> e le cui proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> e <see cref="P:System.Linq.Expressions.NewExpression.Members" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2744">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2745">Il `arguments` parametro deve contenere lo stesso numero di elementi come il numero di parametri del costruttore rappresentato da `constructor`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2745">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="384e1-2746">Se `arguments` è `null`, viene considerato vuoto e <xref:System.Linq.Expressions.NewExpression.Arguments%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewExpression> è una raccolta vuota.</span><span class="sxs-lookup"><span data-stu-id="384e1-2746">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="384e1-2747">Se `members` è `null`, <xref:System.Linq.Expressions.NewExpression.Members%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewExpression> è una raccolta vuota.</span><span class="sxs-lookup"><span data-stu-id="384e1-2747">If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span> <span data-ttu-id="384e1-2748">Se `members` non `null`, devono essere lo stesso numero di elementi come `arguments` e ogni elemento non deve essere `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2748">If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`.</span></span> <span data-ttu-id="384e1-2749">Ogni elemento di `members` deve essere un <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> o <xref:System.Reflection.MethodInfo> che rappresenta un membro di istanza del tipo dichiarante del costruttore rappresentato da `constructor`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2749">Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="384e1-2750">Se rappresenta una proprietà, la proprietà deve avere un `get` della funzione di accesso.</span><span class="sxs-lookup"><span data-stu-id="384e1-2750">If it represents a property, the property must have a `get` accessor.</span></span> <span data-ttu-id="384e1-2751">L'elemento corrispondente di `arguments` per ogni elemento della `members` deve avere un <xref:System.Linq.Expressions.Expression.Type%2A> proprietà che rappresenta un tipo assegnabile al tipo del membro che la `members` elemento rappresenta.</span><span class="sxs-lookup"><span data-stu-id="384e1-2751">The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.</span></span>  
  
 <span data-ttu-id="384e1-2752">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewExpression> rappresenta il tipo dichiarante del costruttore che `constructor` rappresenta.</span><span class="sxs-lookup"><span data-stu-id="384e1-2752">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2753">
            <paramref name="constructor" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2753">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2754">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2754">-or-</span>
          </span>
          <span data-ttu-id="384e1-2755">Un elemento di <paramref name="arguments" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2755">An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2756">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2756">-or-</span>
          </span>
          <span data-ttu-id="384e1-2757">Un elemento di <paramref name="members" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2757">An element of <paramref name="members" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2758">Il numero di elementi in <paramref name="arguments" /> è diverso dal numero di parametri per il costruttore rappresentato da <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2758">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="384e1-2759">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2759">-or-</span>
          </span>
          <span data-ttu-id="384e1-2760">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="arguments" /> non può essere assegnata al tipo del parametro corrispondente del costruttore rappresentato da <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2760">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="384e1-2761">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2761">-or-</span>
          </span>
          <span data-ttu-id="384e1-2762">Il numero di elementi nel parametro <paramref name="members" /> è diverso da quello in <paramref name="arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2762">The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.</span>
          </span>
          <span data-ttu-id="384e1-2763">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2763">-or-</span>
          </span>
          <span data-ttu-id="384e1-2764">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="arguments" /> rappresenta un tipo non assegnabile al tipo del membro rappresentato dall'elemento corrispondente di <paramref name="members" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2764">An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, params System.Reflection.MemberInfo[] members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Reflection.MemberInfo[] members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), ParamArray members As MemberInfo()) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments, ... cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Reflection.MemberInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="384e1-2765">Oggetto <see cref="T:System.Reflection.ConstructorInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2765">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-2766">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2766">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <param name="members">
          <span data-ttu-id="384e1-2767">Matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.NewExpression.Members" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2767">An array of <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2768">Crea un oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> che rappresenta la chiamata al costruttore specificato con gli argomenti specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2768">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
          <span data-ttu-id="384e1-2769">I membri che accedono ai campi inizializzati del costruttore sono specificati come matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2769">The members that access the constructor initialized fields are specified as an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2770">Oggetto <see cref="T:System.Linq.Expressions.NewExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.New" /> e le cui proprietà <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> e <see cref="P:System.Linq.Expressions.NewExpression.Members" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2770">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2771">Il `arguments` parametro deve contenere lo stesso numero di elementi come il numero di parametri del costruttore rappresentato da `constructor`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2771">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="384e1-2772">Se `arguments` è `null`, viene considerato vuoto e <xref:System.Linq.Expressions.NewExpression.Arguments%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewExpression> è una raccolta vuota.</span><span class="sxs-lookup"><span data-stu-id="384e1-2772">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="384e1-2773">Se `members` è `null`, <xref:System.Linq.Expressions.NewExpression.Members%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewExpression> è una raccolta vuota.</span><span class="sxs-lookup"><span data-stu-id="384e1-2773">If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span> <span data-ttu-id="384e1-2774">Se `members` non `null`, devono essere lo stesso numero di elementi come `arguments` e ogni elemento non deve essere `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2774">If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`.</span></span> <span data-ttu-id="384e1-2775">Ogni elemento di `members` deve essere un <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> o <xref:System.Reflection.MethodInfo> che rappresenta un membro di istanza del tipo dichiarante del costruttore rappresentato da `constructor`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2775">Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="384e1-2776">Se rappresenta una proprietà, la proprietà deve essere in grado di recuperare il valore del campo associato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2776">If it represents a property, the property must be able to retrieve the value of the associated field.</span></span> <span data-ttu-id="384e1-2777">L'elemento corrispondente di `arguments` per ogni elemento della `members` deve avere un <xref:System.Linq.Expressions.Expression.Type%2A> proprietà che rappresenta un tipo assegnabile al tipo del membro che la `members` elemento rappresenta.</span><span class="sxs-lookup"><span data-stu-id="384e1-2777">The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.</span></span>  
  
 <span data-ttu-id="384e1-2778">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewExpression> rappresenta il tipo dichiarante del costruttore che `constructor` rappresenta.</span><span class="sxs-lookup"><span data-stu-id="384e1-2778">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2779">
            <paramref name="constructor" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2779">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2780">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2780">-or-</span>
          </span>
          <span data-ttu-id="384e1-2781">Un elemento di <paramref name="arguments" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2781">An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2782">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2782">-or-</span>
          </span>
          <span data-ttu-id="384e1-2783">Un elemento di <paramref name="members" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2783">An element of <paramref name="members" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2784">Il numero di elementi in <paramref name="arguments" /> è diverso dal numero di parametri per il costruttore rappresentato da <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2784">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="384e1-2785">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2785">-or-</span>
          </span>
          <span data-ttu-id="384e1-2786">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="arguments" /> non può essere assegnata al tipo del parametro corrispondente del costruttore rappresentato da <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2786">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="384e1-2787">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2787">-or-</span>
          </span>
          <span data-ttu-id="384e1-2788">Il numero di elementi nel parametro <paramref name="members" /> è diverso da quello in <paramref name="arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2788">The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.</span>
          </span>
          <span data-ttu-id="384e1-2789">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2789">-or-</span>
          </span>
          <span data-ttu-id="384e1-2790">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="arguments" /> rappresenta un tipo non assegnabile al tipo del membro rappresentato dall'elemento corrispondente di <paramref name="members" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2790">An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NewArrayBounds">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2791">Crea un oggetto <see cref="T:System.Linq.Expressions.NewArrayExpression" /> che rappresenta la creazione di una matrice con una classificazione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2791">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayBounds(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ bounds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-2792">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di elemento della matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2792">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="bounds">
          <span data-ttu-id="384e1-2793">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2793">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2794">Crea un oggetto <see cref="T:System.Linq.Expressions.NewArrayExpression" /> che rappresenta la creazione di una matrice con una classificazione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2794">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2795">Oggetto <see cref="T:System.Linq.Expressions.NewArrayExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> e la cui proprietà <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2795">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2796">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewArrayExpression> rappresenta un tipo di matrice la cui priorità è uguale alla lunghezza di `bounds` e il cui tipo di elemento è `type`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2796">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.</span></span>  
  
 <span data-ttu-id="384e1-2797">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di ogni elemento di `bounds` deve rappresentare un tipo integrale.</span><span class="sxs-lookup"><span data-stu-id="384e1-2797">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-2798">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> metodo per creare un albero delle espressioni che rappresenta la creazione di una matrice di stringhe con una classificazione pari a 2.</span><span class="sxs-lookup"><span data-stu-id="384e1-2798">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2799">
            <paramref name="type" /> o <paramref name="bounds" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2799">
              <paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2800">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2800">-or-</span>
          </span>
          <span data-ttu-id="384e1-2801">Un elemento di <paramref name="bounds" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2801">An element of <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2802">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="bounds" /> non rappresenta un tipo integrale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2802">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, params System.Linq.Expressions.Expression[] bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Linq.Expressions.Expression[] bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayBounds(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ bounds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-2803">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di elemento della matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2803">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="bounds">
          <span data-ttu-id="384e1-2804">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2804">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2805">Crea un oggetto <see cref="T:System.Linq.Expressions.NewArrayExpression" /> che rappresenta la creazione di una matrice con una classificazione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2805">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2806">Oggetto <see cref="T:System.Linq.Expressions.NewArrayExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> e la cui proprietà <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2806">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2807">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewArrayExpression> rappresenta un tipo di matrice la cui priorità è uguale alla lunghezza di `bounds` e il cui tipo di elemento è `type`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2807">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.</span></span>  
  
 <span data-ttu-id="384e1-2808">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di ogni elemento di `bounds` deve rappresentare un tipo integrale.</span><span class="sxs-lookup"><span data-stu-id="384e1-2808">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-2809">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> metodo per creare un albero delle espressioni che rappresenta la creazione di una matrice di stringhe con una classificazione pari a 2.</span><span class="sxs-lookup"><span data-stu-id="384e1-2809">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2810">
            <paramref name="type" /> o <paramref name="bounds" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2810">
              <paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2811">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2811">-or-</span>
          </span>
          <span data-ttu-id="384e1-2812">Un elemento di <paramref name="bounds" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2812">An element of <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2813">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="bounds" /> non rappresenta un tipo integrale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2813">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NewArrayInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2814">Crea un oggetto <see cref="T:System.Linq.Expressions.NewArrayExpression" /> che rappresenta la creazione di una matrice unidimensionale e la relativa inizializzazione da un elenco di elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2814">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayInit(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-2815">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di elemento della matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2815">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="384e1-2816">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> contenente gli oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2816">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2817">Crea un oggetto <see cref="T:System.Linq.Expressions.NewArrayExpression" /> che rappresenta la creazione di una matrice unidimensionale e la relativa inizializzazione da un elenco di elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2817">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2818">Oggetto <see cref="T:System.Linq.Expressions.NewArrayExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> e la cui proprietà <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2818">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2819">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di ogni elemento di `initializers` deve rappresentare un tipo assegnabile al tipo rappresentato da `type`, se possibile, dopo essere stata *racchiuso tra virgolette*.</span><span class="sxs-lookup"><span data-stu-id="384e1-2819">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="384e1-2820">Un elemento racchiuso tra virgolette solo se `type` è <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2820">An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="384e1-2821">Racchiuso tra virgolette l'elemento viene inserito in un <xref:System.Linq.Expressions.ExpressionType.Quote> nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2821">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="384e1-2822">Il nodo risultante è un <xref:System.Linq.Expressions.UnaryExpression> cui <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> proprietà è l'elemento di `initializers`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2822">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.</span></span>  
  
 <span data-ttu-id="384e1-2823">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewArrayExpression> rappresenta una matrice di tipo la cui priorità è 1 e il cui tipo di elemento è `type`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2823">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-2824">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> metodo per creare un albero delle espressioni che rappresenta la creazione di una matrice di stringhe unidimensionale che viene inizializzato con un elenco di espressioni stringa.</span><span class="sxs-lookup"><span data-stu-id="384e1-2824">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2825">
            <paramref name="type" /> o <paramref name="initializers" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2825">
              <paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2826">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2826">-or-</span>
          </span>
          <span data-ttu-id="384e1-2827">Un elemento di <paramref name="initializers" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2827">An element of <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2828">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="initializers" /> rappresenta un tipo non assegnabile al tipo rappresentato da <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2828">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type that <paramref name="type" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayInit(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-2829">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di elemento della matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2829">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="384e1-2830">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2830">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2831">Crea un oggetto <see cref="T:System.Linq.Expressions.NewArrayExpression" /> che rappresenta la creazione di una matrice unidimensionale e la relativa inizializzazione da un elenco di elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2831">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2832">Oggetto <see cref="T:System.Linq.Expressions.NewArrayExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> e la cui proprietà <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2832">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2833">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di ogni elemento di `initializers` deve rappresentare un tipo assegnabile al tipo rappresentato da `type`, se possibile, dopo essere stata *racchiuso tra virgolette*.</span><span class="sxs-lookup"><span data-stu-id="384e1-2833">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="384e1-2834">Un elemento racchiuso tra virgolette solo se `type` è <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2834">An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="384e1-2835">Racchiuso tra virgolette l'elemento viene inserito in un <xref:System.Linq.Expressions.ExpressionType.Quote> nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2835">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="384e1-2836">Il nodo risultante è un <xref:System.Linq.Expressions.UnaryExpression> cui <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> proprietà è l'elemento di `initializers`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2836">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.</span></span>  
  
 <span data-ttu-id="384e1-2837">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.NewArrayExpression> rappresenta una matrice di tipo la cui priorità è 1 e il cui tipo di elemento è `type`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2837">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-2838">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> metodo per creare un albero delle espressioni che rappresenta la creazione di una matrice di stringhe unidimensionale che viene inizializzato con un elenco di espressioni stringa.</span><span class="sxs-lookup"><span data-stu-id="384e1-2838">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2839">
            <paramref name="type" /> o <paramref name="initializers" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2839">
              <paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-2840">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2840">-or-</span>
          </span>
          <span data-ttu-id="384e1-2841">Un elemento di <paramref name="initializers" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2841">An element of <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2842">La proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> di un elemento di <paramref name="initializers" /> rappresenta un tipo non assegnabile al tipo <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2842">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type <paramref name="type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Linq::Expressions::ExpressionType NodeType { System::Linq::Expressions::ExpressionType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2843">Ottiene il tipo di nodo di <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2843">Gets the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="384e1-2844">Uno dei valori di <see cref="T:System.Linq.Expressions.ExpressionType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2844">One of the <see cref="T:System.Linq.Expressions.ExpressionType" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2845">Il <xref:System.Linq.Expressions.Expression.NodeType%2A> proprietà fornisce una descrizione più specializzata di un <xref:System.Linq.Expressions.Expression> rispetto al tipo derivato relativo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2845">The <xref:System.Linq.Expressions.Expression.NodeType%2A> property provides a more specialized description of an <xref:System.Linq.Expressions.Expression> than just its derived type.</span></span> <span data-ttu-id="384e1-2846">Ad esempio, un <xref:System.Linq.Expressions.BinaryExpression> può essere utilizzato per rappresentare molti tipi diversi di espressioni binarie, ad esempio un'operazione di divisione o di un'operazione "maggiore di".</span><span class="sxs-lookup"><span data-stu-id="384e1-2846">For example, a <xref:System.Linq.Expressions.BinaryExpression> can be used to represent many different kinds of binary expressions, such as a division operation or a "greater than" operation.</span></span> <span data-ttu-id="384e1-2847">Il <xref:System.Linq.Expressions.Expression.NodeType%2A> proprietà sarebbe descrivono queste espressioni binarie come <xref:System.Linq.Expressions.ExpressionType.Divide> e <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, rispettivamente.</span><span class="sxs-lookup"><span data-stu-id="384e1-2847">The <xref:System.Linq.Expressions.Expression.NodeType%2A> property would describe these binary expressions as <xref:System.Linq.Expressions.ExpressionType.Divide> and <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, respectively.</span></span>  
  
 <span data-ttu-id="384e1-2848">Il tipo CLR statico dell'espressione che il <xref:System.Linq.Expressions.Expression> rappresentato dall'oggetto che rappresenta il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="384e1-2848">The static CLR type of the expression that the <xref:System.Linq.Expressions.Expression> object represents is represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Not">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2849">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di complemento bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2849">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Not(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-2850">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2850">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2851">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di complemento bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2851">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2852">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> e la cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2852">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2853">Il <xref:System.Linq.Expressions.UnaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> è impostato per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2853">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="384e1-2854">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2854">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-2855">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2855">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-2856">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2856">Otherwise, they are `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-2857">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-2857">Implementing Method</span></span>  
 <span data-ttu-id="384e1-2858">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2858">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-2859">Se `expression`. Tipo è un tipo definito dall'utente che definisce l'operatore unario non, il <xref:System.Reflection.MethodInfo> che rappresenta l'operatore è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2859">If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2860">In caso contrario, se `expression`. Type è un tipo numerico o booleano, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2860">Otherwise, if `expression`.Type is a numeric or Boolean type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-2861">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-2861">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-2862">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2862">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2863">Se `expression`. Il tipo è assegnabile al tipo di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2863">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-2864">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2864">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2865">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2865">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-2866">`expression`. Tipo è un tipo di valore nullable e il tipo non nullable corrispondente è uguale al tipo di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2866">`expression`.Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-2867">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-2867">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-2868">Se il metodo di implementazione è `null`, il tipo del nodo è `expression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2868">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="384e1-2869">Se `expression`. Tipo non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2869">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-2870">In caso contrario, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2870">Otherwise, the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-2871">Nell'esempio seguente viene illustrato come creare un'espressione che rappresenta un operatore logico non operazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2871">The following example demonstrates how to create an expression that represents a logical NOT operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#51)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2872">
            <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2872">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2873">L'operatore Not unario non è definito per <paramref name="expression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2873">The unary not operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Not(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-2874">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2874">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2875">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2875">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2876">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione di complemento bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2876">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span>
          </span>
          <span data-ttu-id="384e1-2877">Il metodo di implementazione può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2877">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2878">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> e <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2878">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2879">Il <xref:System.Linq.Expressions.UnaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> è impostato per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2879">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="384e1-2880">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2880">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-2881">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2881">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-2882">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2882">Otherwise, they are `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-2883">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-2883">Implementing Method</span></span>  
 <span data-ttu-id="384e1-2884">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2884">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-2885">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta un solo argomento, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2885">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-2886">Se `expression`. Tipo è un tipo definito dall'utente che definisce l'operatore unario non, il <xref:System.Reflection.MethodInfo> che rappresenta l'operatore è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2886">If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2887">In caso contrario, se `expression`. Type è un tipo numerico, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2887">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-2888">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-2888">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-2889">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2889">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2890">Se `expression`. Il tipo è assegnabile al tipo di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2890">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-2891">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2891">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2892">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2892">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-2893">`expression`. Tipo è un tipo di valore nullable e il tipo di valore non nullable corrispondente è uguale al tipo di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2893">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-2894">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-2894">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-2895">Se il metodo di implementazione è `null`, il tipo del nodo è `expression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2895">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="384e1-2896">Se `expression`. Tipo non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2896">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-2897">In caso contrario, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2897">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2898">
            <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2898">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2899">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) o non accetta esattamente un argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2899">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2900">
            <paramref name="method" /> è <see langword="null" /> e l'operatore Not unario non è definito per <paramref name="expression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2900">
              <paramref name="method" /> is <see langword="null" /> and the unary not operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="384e1-2901">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2901">-or-</span>
          </span>
          <span data-ttu-id="384e1-2902">
            <paramref name="expression" />.Type , o il tipo non nullable corrispondente se si tratta di un tipo nullable, non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2902">
              <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NotEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2903">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto di disuguaglianza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2903">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ NotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2904">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2904">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2905">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2905">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2906">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto di disuguaglianza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2906">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2907">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2907">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2908">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2908">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-2909">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2909">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-2910">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2910">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="384e1-2911">Altrimenti, è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2911">Otherwise, it is `false`.</span></span> <span data-ttu-id="384e1-2912">La proprietà <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> è sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2912">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="384e1-2913">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2913">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-2914">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2914">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-2915">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-2915">Implementing Method</span></span>  
 <span data-ttu-id="384e1-2916">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2916">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-2917">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di disuguaglianza, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2917">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2918">In caso contrario, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2918">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-2919">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-2919">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-2920">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2920">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2921">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2921">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-2922">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2922">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2923">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="384e1-2923">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="384e1-2924">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2924">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-2925">Il tipo restituito del metodo di implementazione è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2925">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="384e1-2926">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2926">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2927">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2927">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-2928">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2928">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="384e1-2929">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2929">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-2930">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2930">The type of the node is <xref:System.Boolean>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2931">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2931">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2932">L'operatore di disuguaglianza non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2932">The inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ NotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2933">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2933">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2934">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2934">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="384e1-2935">
            <see langword="true" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="true" />; <see langword="false" /> per impostare <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> su <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2935">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2936">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2936">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2937">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto di disuguaglianza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2937">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2938">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2938">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2939">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2939">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-2940">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2940">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-2941">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> proprietà `true` e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> proprietà è uguale a `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2941">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="384e1-2942">In caso contrario, sono entrambi `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2942">Otherwise, they are both `false`.</span></span> <span data-ttu-id="384e1-2943">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2943">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-2944">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2944">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-2945">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-2945">Implementing Method</span></span>  
 <span data-ttu-id="384e1-2946">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2946">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-2947">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2947">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2948">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di disuguaglianza, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2948">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2949">In caso contrario, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2949">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-2950">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-2950">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-2951">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2951">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2952">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2952">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-2953">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2953">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2954">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato; Inoltre, il tipo del nodo è nullable <xref:System.Boolean> se `liftToNull` è `true` o <xref:System.Boolean> se `liftToNull` è `false`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2954">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="384e1-2955">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2955">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-2956">Il tipo restituito del metodo di implementazione è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2956">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="384e1-2957">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2957">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2958">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2958">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-2959">Il tipo del nodo è <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-2959">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="384e1-2960">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2960">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-2961">Il tipo del nodo è nullable <xref:System.Boolean> se `liftToNull` è `true` o <xref:System.Boolean> se `liftToNull` è `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2961">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-2962">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2962">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-2963">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2963">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-2964">
            <paramref name="method" /> è <see langword="null" /> e l'operatore di disuguaglianza non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2964">
              <paramref name="method" /> is <see langword="null" /> and the inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OnesComplement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2965">Restituisce l'espressione che rappresenta il complemento a uno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2965">Returns the expression representing the ones complement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ OnesComplement(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-2966">Oggetto <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2966">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2967">Restituisce l'espressione che rappresenta il complemento a uno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2967">Returns the expression representing the ones complement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2968">Istanza di <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2968">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ OnesComplement(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-2969">Oggetto <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2969">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-2970">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2970">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2971">Restituisce l'espressione che rappresenta il complemento a uno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2971">Returns the expression representing the ones complement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2972">Istanza di <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2972">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Or">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-2973">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione <see langword="OR" /> bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2973">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Or (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Or(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-2974">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2974">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-2975">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2975">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-2976">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione <see langword="OR" /> bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2976">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-2977">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-2977">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-2978">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2978">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-2979">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-2979">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-2980">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2980">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-2981">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2981">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-2982">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2982">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-2983">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2983">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-2984">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-2984">Implementing Method</span></span>  
 <span data-ttu-id="384e1-2985">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2985">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-2986">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload bit per bit `OR` (operatore), il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2986">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2987">In caso contrario, se `left`. Tipo e `right`. Type sono tipi integrali o booleani, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-2987">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-2988">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-2988">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-2989">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2989">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2990">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2990">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-2991">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2991">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-2992">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-2992">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-2993">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-2993">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-2994">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-2994">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-2995">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-2995">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-2996">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2996">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-2997">Il tipo del nodo è il tipo di risultato degli operatori bit per bit `OR` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-2997">The type of the node is the result type of the predefined bitwise `OR` operator.</span></span>  
  
-   <span data-ttu-id="384e1-2998">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-2998">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-2999">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato degli operatori bit per bit `OR` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-2999">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-3000">Esempio di codice seguente viene illustrato come creare un'espressione che rappresenta un'operazione con OR logico.</span><span class="sxs-lookup"><span data-stu-id="384e1-3000">The following code example shows how to create an expression that represents a logical OR operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#28)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3001">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3001">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-3002">L'operatore <see langword="OR" /> bit per bit non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3002">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Or (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Or(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3003">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3003">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3004">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3004">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3005">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3005">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3006">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione <see langword="OR" /> bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3006">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3007">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3007">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3008">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3008">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-3009">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3009">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-3010">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3010">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-3011">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3011">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-3012">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3012">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-3013">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3013">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-3014">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-3014">Implementing Method</span></span>  
 <span data-ttu-id="384e1-3015">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3015">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-3016">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3016">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3017">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload bit per bit `OR` (operatore), il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3017">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3018">In caso contrario, se `left`. Tipo e `right`. Type sono tipi integrali o booleani, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3018">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-3019">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-3019">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-3020">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3020">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3021">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3021">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-3022">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3022">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3023">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3023">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-3024">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3024">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-3025">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-3025">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-3026">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3026">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3027">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3027">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-3028">Il tipo del nodo è il tipo di risultato degli operatori bit per bit `OR` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-3028">The type of the node is the result type of the predefined bitwise `OR` operator.</span></span>  
  
-   <span data-ttu-id="384e1-3029">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3029">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-3030">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato degli operatori bit per bit `OR` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-3030">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3031">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3031">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-3032">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3032">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-3033">
            <paramref name="method" /> è <see langword="null" /> e l'operatore bit per bit <see langword="OR" /> non è definito per i tipi <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3033">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3034">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione OR bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3034">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3035">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3035">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3036">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3036">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3037">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione OR bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3037">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3038">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3038">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3039">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3039">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3040">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3040">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3041">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3041">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3042">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione OR bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3042">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3043">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3043">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3044">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3044">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3045">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3045">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3046">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3046">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-3047">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3047">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3048">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione OR bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3048">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3049">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3049">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrElse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3050">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione <see langword="OR" /> condizionale che valuta il secondo operando solo se il primo operatore restituisce <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3050">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operator evaluates to <see langword="false" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElse (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrElse(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3051">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3051">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3052">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3052">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3053">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione <see langword="OR" /> condizionale che valuta il secondo operando solo se il primo operando restituisce <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3053">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3054">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3054">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3055">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3055">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-3056">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3056">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-3057">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3057">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-3058">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3058">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-3059">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3059">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-3060">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3060">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-3061">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-3061">Implementing Method</span></span>  
 <span data-ttu-id="384e1-3062">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3062">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-3063">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload bit per bit `OR` (operatore), il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3063">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="384e1-3064">Condizionale `OR` operatore non può essere sottoposto a overload in c# o [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].</span><span class="sxs-lookup"><span data-stu-id="384e1-3064">The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].</span></span> <span data-ttu-id="384e1-3065">Tuttavia, condizionale `OR` operatore viene valutato utilizzando bit per bit `OR` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-3065">However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator.</span></span> <span data-ttu-id="384e1-3066">Di conseguenza, un overload definito dall'utente di bit per bit `OR` operatore può essere il metodo di implementazione per questo tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3066">Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="384e1-3067">In caso contrario, se `left`. Tipo e `right`. Type sono tipi booleani, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3067">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-3068">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-3068">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-3069">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3069">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3070">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3070">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-3071">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3071">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3072">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3072">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-3073">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3073">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-3074">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-3074">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-3075">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3075">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3076">`left`. Tipo e `right`. Tipo sono dello stesso tipo Boolean.</span><span class="sxs-lookup"><span data-stu-id="384e1-3076">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="384e1-3077">Se `left`. Tipo e `right`. Tipo non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3077">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-3078">Il tipo del nodo è il tipo di risultato di condizionale predefinito `OR` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-3078">The type of the node is the result type of the predefined conditional `OR` operator.</span></span>  
  
-   <span data-ttu-id="384e1-3079">Se `left`. Tipo e `right`. Tipo che ammette valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3079">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-3080">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato di condizionale predefinito `OR` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-3080">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-3081">Esempio di codice seguente viene illustrato come creare un'espressione che rappresenta un operatore logico `OR` operazione che valuta il secondo operando solo se il primo operando restituisce `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3081">The following code example shows how to create an expression that represents a logical `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#29)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3082">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3082">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-3083">L'operatore <see langword="OR" /> bit per bit non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3083">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="384e1-3084">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3084">-or-</span>
          </span>
          <span data-ttu-id="384e1-3085">
            <paramref name="left" />.Type e <paramref name="right" />.Type non sono dello stesso tipo Boolean.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3085">
              <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElse (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrElse(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3086">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3086">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3087">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3087">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3088">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3088">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3089">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione <see langword="OR" /> condizionale che valuta il secondo operando solo se il primo operando restituisce <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3089">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3090">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3090">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3091">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3091">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-3092">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3092">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-3093">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3093">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-3094">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3094">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-3095">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3095">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-3096">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3096">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-3097">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-3097">Implementing Method</span></span>  
 <span data-ttu-id="384e1-3098">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3098">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-3099">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3099">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-3100">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload bit per bit `OR` (operatore), il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3100">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="384e1-3101">Condizionale `OR` operatore non può essere sottoposto a overload in c# o [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].</span><span class="sxs-lookup"><span data-stu-id="384e1-3101">The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].</span></span> <span data-ttu-id="384e1-3102">Tuttavia, condizionale `OR` operatore viene valutato utilizzando bit per bit `OR` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-3102">However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator.</span></span> <span data-ttu-id="384e1-3103">Di conseguenza, un overload definito dall'utente di bit per bit `OR` operatore può essere il metodo di implementazione per questo tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3103">Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="384e1-3104">In caso contrario, se `left`. Tipo e `right`. Type sono tipi booleani, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3104">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-3105">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-3105">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-3106">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3106">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3107">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3107">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-3108">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3108">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3109">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3109">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-3110">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3110">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-3111">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-3111">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-3112">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3112">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3113">`left`. Tipo e `right`. Tipo sono dello stesso tipo Boolean.</span><span class="sxs-lookup"><span data-stu-id="384e1-3113">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="384e1-3114">Se `left`. Tipo e `right`. Tipo non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3114">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-3115">Il tipo del nodo è il tipo di risultato di condizionale predefinito `OR` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-3115">The type of the node is the result type of the predefined conditional `OR` operator.</span></span>  
  
-   <span data-ttu-id="384e1-3116">Se `left`. Tipo e `right`. Tipo che ammette valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3116">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-3117">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato di condizionale predefinito `OR` operatore.</span><span class="sxs-lookup"><span data-stu-id="384e1-3117">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3118">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3118">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-3119">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3119">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-3120">
            <paramref name="method" /> è <see langword="null" /> e l'operatore bit per bit <see langword="OR" /> non è definito per i tipi <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3120">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="384e1-3121">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3121">-or-</span>
          </span>
          <span data-ttu-id="384e1-3122">
            <paramref name="method" /> è <see langword="null" /> e <paramref name="left" />.Type e <paramref name="right" />.Type non sono dello stesso tipo Boolean.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3122">
              <paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parameter">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3123">Crea un nodo <see cref="T:System.Linq.Expressions.ParameterExpression" /> che può essere usato per identificare un parametro o una variabile in un albero delle espressioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3123">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Parameter(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-3124">Tipo di parametro o di variabile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3124">The type of the parameter or variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3125">Crea un nodo <see cref="T:System.Linq.Expressions.ParameterExpression" /> che può essere usato per identificare un parametro o una variabile in un albero delle espressioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3125">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3126">Nodo <see cref="T:System.Linq.Expressions.ParameterExpression" /> con il nome e il tipo specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3126">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-3127">Nell'esempio seguente viene illustrato come creare un <xref:System.Linq.Expressions.MethodCallExpression> che stampa il valore di un <xref:System.Linq.Expressions.ParameterExpression> oggetto.</span><span class="sxs-lookup"><span data-stu-id="384e1-3127">The following example demonstrates how to create a <xref:System.Linq.Expressions.MethodCallExpression> object that prints the value of a <xref:System.Linq.Expressions.ParameterExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#49)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#49)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Parameter(Type ^ type, System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-3128">Tipo di parametro o di variabile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3128">The type of the parameter or variable.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="384e1-3129">Nome del parametro o della variabile, usato solo a scopo di debug o di stampa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3129">The name of the parameter or variable, used for debugging or printing purpose only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3130">Crea un nodo <see cref="T:System.Linq.Expressions.ParameterExpression" /> che può essere usato per identificare un parametro o una variabile in un albero delle espressioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3130">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3131">Oggetto <see cref="T:System.Linq.Expressions.ParameterExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> e le cui proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> e <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3131">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> and <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3132">
            <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3132">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3133">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'assegnazione dell'espressione seguita da un successivo decremento di 1 dell'espressione originale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3133">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostDecrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3134">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3134">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3135">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'assegnazione dell'espressione seguita da un successivo decremento di 1 dell'espressione originale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3135">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3136">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3136">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostDecrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3137">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3137">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3138">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3138">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3139">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'assegnazione dell'espressione seguita da un successivo decremento di 1 dell'espressione originale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3139">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3140">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3140">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3141">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'assegnazione dell'espressione seguita da un successivo incremento di 1 dell'espressione originale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3141">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostIncrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3142">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3142">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3143">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'assegnazione dell'espressione seguita da un successivo incremento di 1 dell'espressione originale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3143">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3144">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3144">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostIncrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3145">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3145">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3146">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3146">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3147">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'assegnazione dell'espressione seguita da un successivo incremento di 1 dell'espressione originale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3147">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3148">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3148">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Power">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3149">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta l'elevamento di un numero a una potenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3149">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Power (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Power(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3150">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3150">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3151">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3151">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3152">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta l'elevamento di un numero a una potenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3152">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3153">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3153">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3154">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3154">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-3155">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3155">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-3156">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3156">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-3157">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3157">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-3158">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3158">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-3159">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3159">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-3160">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-3160">Implementing Method</span></span>  
 <span data-ttu-id="384e1-3161">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3161">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-3162">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di elevamento a potenza, la <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3162">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3163">In caso contrario, se `left`. Tipo e `right`. Type sono entrambi <xref:System.Double>, il metodo di implementazione è <xref:System.Math.Pow%2A>.</span><span class="sxs-lookup"><span data-stu-id="384e1-3163">Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-3164">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-3164">Node Type and Lifted versus Non-Lifted</span></span>  
  
-   <span data-ttu-id="384e1-3165">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3165">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-3166">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3166">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3167">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3167">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-3168">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3168">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-3169">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-3169">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3170">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3170">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-3171">L'operatore di elevamento a potenza non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3171">The exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="384e1-3172">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3172">-or-</span>
          </span>
          <span data-ttu-id="384e1-3173">
            <paramref name="left" />.Type e/o <paramref name="right" />.Type non sono <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3173">
              <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Power (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Power(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3174">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3174">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3175">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3175">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3176">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3176">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3177">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta l'elevamento di un numero a una potenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3177">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3178">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3178">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3179">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3179">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-3180">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3180">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-3181">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3181">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-3182">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3182">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-3183">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3183">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-3184">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3184">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-3185">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-3185">Implementing Method</span></span>  
 <span data-ttu-id="384e1-3186">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3186">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-3187">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3187">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3188">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di elevamento a potenza, la <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3188">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3189">In caso contrario, se `left`. Tipo e `right`. Type sono entrambi <xref:System.Double>, il metodo di implementazione è <xref:System.Math.Pow%2A>.</span><span class="sxs-lookup"><span data-stu-id="384e1-3189">Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-3190">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-3190">Node Type and Lifted versus Non-Lifted</span></span>  
  
-   <span data-ttu-id="384e1-3191">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3191">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-3192">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3192">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3193">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3193">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-3194">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3194">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-3195">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-3195">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3196">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3196">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-3197">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3197">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-3198">
            <paramref name="method" /> è <see langword="null" /> e l'operatore di elevamento a potenza non è definito per i tipi <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3198">
              <paramref name="method" /> is <see langword="null" /> and the exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="384e1-3199">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3199">-or-</span>
          </span>
          <span data-ttu-id="384e1-3200">
            <paramref name="method" /> è <see langword="null" /> e <paramref name="left" />.Type e/o <paramref name="right" />.Type non sono <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3200">
              <paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PowerAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3201">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta l'elevamento di un'espressione a una potenza e l'assegnazione del risultato all'espressione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3201">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3202">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3202">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3203">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3203">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3204">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta l'elevamento di un'espressione a una potenza e l'assegnazione del risultato all'espressione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3204">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3205">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3205">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3206">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3206">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3207">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3207">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3208">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3208">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3209">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta l'elevamento di un'espressione a una potenza e l'assegnazione del risultato all'espressione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3209">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3210">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3210">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3211">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3211">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3212">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3212">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3213">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3213">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-3214">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3214">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3215">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta l'elevamento di un'espressione a una potenza e l'assegnazione del risultato all'espressione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3215">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3216">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3216">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PreDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3217">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che decrementa l'espressione di 1 e assegna di nuovo il risultato all'espressione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3217">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreDecrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3218">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3218">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3219">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che decrementa l'espressione di 1 e assegna di nuovo il risultato all'espressione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3219">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3220">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3220">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreDecrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3221">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3221">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3222">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3222">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3223">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che decrementa l'espressione di 1 e assegna di nuovo il risultato all'espressione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3223">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3224">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3224">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PreIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3225">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che incrementa l'espressione di 1 e assegna di nuovo il risultato all'espressione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3225">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreIncrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3226">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3226">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3227">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che incrementa l'espressione di 1 e assegna di nuovo il risultato all'espressione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3227">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3228">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3228">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreIncrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3229">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> al quale applicare le operazioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3229">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3230">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3230">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3231">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che incrementa l'espressione di 1 e assegna di nuovo il risultato all'espressione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3231">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3232">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'espressione risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3232">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Property">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3233">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3233">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo propertyAccessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ propertyAccessor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3234">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3234">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span>
          </span>
          <span data-ttu-id="384e1-3235">Può essere Null per le proprietà statiche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3235">This can be null for static properties.</span>
          </span>
        </param>
        <param name="propertyAccessor">
          <span data-ttu-id="384e1-3236">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta un metodo della funzione di accesso della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3236">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3237">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a una proprietà tramite un metodo della funzione di accesso alle proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3237">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3238">Oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> è impostata su <paramref name="expression" /> e la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> è impostata su <see cref="T:System.Reflection.PropertyInfo" />, che rappresenta la proprietà a cui si accede in <paramref name="propertyAccessor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3238">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3239">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MemberExpression> è uguale al <xref:System.Reflection.PropertyInfo.PropertyType%2A> proprietà <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span><span class="sxs-lookup"><span data-stu-id="384e1-3239">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span></span>  
  
 <span data-ttu-id="384e1-3240">Se il metodo rappresentato da `propertyAccessor` è `static` (`Shared` in Visual Basic), `expression` può essere `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3240">If the method represented by `propertyAccessor` is `static` (`Shared` in Visual Basic), `expression` can be `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3241">
            <paramref name="propertyAccessor" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3241">
              <paramref name="propertyAccessor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-3242">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3242">-or-</span>
          </span>
          <span data-ttu-id="384e1-3243">Il metodo rappresentato da <paramref name="propertyAccessor" /> non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) e <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3243">The method that <paramref name="propertyAccessor" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-3244">
            <paramref name="expression" />.Type non è assegnabile al tipo dichiarante del metodo rappresentato da <paramref name="propertyAccessor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3244">
              <paramref name="expression" />.Type is not assignable to the declaring type of the method represented by <paramref name="propertyAccessor" />.</span>
          </span>
          <span data-ttu-id="384e1-3245">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3245">-or-</span>
          </span>
          <span data-ttu-id="384e1-3246">Il metodo rappresentato da <paramref name="propertyAccessor" /> non è un metodo della funzione di accesso alle proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3246">The method that <paramref name="propertyAccessor" /> represents is not a property accessor method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.PropertyInfo property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::Reflection::PropertyInfo ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="property" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3247">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3247">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span>
          </span>
          <span data-ttu-id="384e1-3248">Può essere Null per le proprietà statiche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3248">This can be null for static properties.</span>
          </span>
        </param>
        <param name="property">
          <span data-ttu-id="384e1-3249">Oggetto <see cref="T:System.Reflection.PropertyInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3249">The <see cref="T:System.Reflection.PropertyInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3250">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3250">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3251">Oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> e le cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> e <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3251">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3252">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MemberExpression> è uguale al <xref:System.Reflection.PropertyInfo.PropertyType%2A> proprietà <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span><span class="sxs-lookup"><span data-stu-id="384e1-3252">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span></span>  
  
 <span data-ttu-id="384e1-3253">Se la proprietà rappresentata dal `property` è `static` (`Shared` in Visual Basic), `expression` può essere `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3253">If the property represented by `property` is `static` (`Shared` in Visual Basic), `expression` can be `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3254">
            <paramref name="property" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3254">
              <paramref name="property" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="384e1-3255">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3255">-or-</span>
          </span>
          <span data-ttu-id="384e1-3256">La proprietà rappresentata da <paramref name="property" /> non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) e <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3256">The property that <paramref name="property" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-3257">
            <paramref name="expression" />.Type non è assegnabile al tipo dichiarante della proprietà che <paramref name="property" /> rappresenta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3257">
              <paramref name="expression" />.Type is not assignable to the declaring type of the property that <paramref name="property" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::String ^ propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3258">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> contiene una proprietà denominata <c>propertyName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3258">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property named <c>propertyName</c>.</span>
          </span>
          <span data-ttu-id="384e1-3259">Può essere <see langword="null" /> per le proprietà statiche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3259">This can be <see langword="null" /> for static properties.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="384e1-3260">Nome di una proprietà a cui accedere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3260">The name of a property to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3261">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3261">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3262">Oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> è impostata su <paramref name="expression" /> e la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> è impostata su <see cref="T:System.Reflection.PropertyInfo" />, che rappresenta la proprietà identificata da <paramref name="propertyName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3262">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property denoted by <paramref name="propertyName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3263">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MemberExpression> è uguale al <xref:System.Reflection.PropertyInfo.PropertyType%2A> proprietà del <xref:System.Reflection.PropertyInfo> che rappresenta la proprietà identificata da `propertyName`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3263">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the <xref:System.Reflection.PropertyInfo> that represents the property denoted by `propertyName`.</span></span>  
  
 <span data-ttu-id="384e1-3264">Questo metodo cerca `expression`. Tipo e ai tipi di base per una proprietà con il nome `propertyName`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3264">This method searches `expression`.Type and its base types for a property that has the name `propertyName`.</span></span> <span data-ttu-id="384e1-3265">Proprietà pubblica viene data la preferenza rispetto alle proprietà non è pubblica.</span><span class="sxs-lookup"><span data-stu-id="384e1-3265">Public properties are given preference over non-public properties.</span></span> <span data-ttu-id="384e1-3266">Se viene trovata una proprietà corrispondente, questo metodo passa `expression` e <xref:System.Reflection.PropertyInfo> che rappresenta tale proprietà a <xref:System.Linq.Expressions.Expression.Property%2A>.</span><span class="sxs-lookup"><span data-stu-id="384e1-3266">If a matching property is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> that represents that property to <xref:System.Linq.Expressions.Expression.Property%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-3267">Nell'esempio seguente viene illustrato come creare un'espressione che rappresenta l'accesso a una proprietà.</span><span class="sxs-lookup"><span data-stu-id="384e1-3267">The following example shows how to create an expression that represents accessing a property.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#38)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3268">
            <paramref name="expression" /> o <paramref name="propertyName" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3268">
              <paramref name="expression" /> or <paramref name="propertyName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-3269">Nessuna proprietà denominata <paramref name="propertyName" /> è definita in <paramref name="expression" />.Type o nei relativi tipi di base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3269">No property named <paramref name="propertyName" /> is defined in <paramref name="expression" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="384e1-3270">Oggetto a cui appartiene la proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3270">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="384e1-3271">Se la proprietà è statica/condivisa, deve essere Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3271">If the property is static/shared, it must be null.</span>
          </span>
        </param>
        <param name="indexer">
          <span data-ttu-id="384e1-3272">Oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà da indicizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3272">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-3273">Raccolta <see cref="T:System.Collections.Generic.IEnumerable`1" /> di oggetti <see cref="T:System.Linq.Expressions.Expression" /> usati per indicizzare la proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3273">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3274">Crea un oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> che rappresenta l'accesso a una proprietà indicizzata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3274">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3275">Oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3275">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, indexer As PropertyInfo, ParamArray arguments As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="384e1-3276">Oggetto a cui appartiene la proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3276">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="384e1-3277">Se la proprietà è statica/condivisa, deve essere Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3277">If the property is static/shared, it must be null.</span>
          </span>
        </param>
        <param name="indexer">
          <span data-ttu-id="384e1-3278">Oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà da indicizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3278">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-3279">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> usati per indicizzare la proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3279">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3280">Crea un oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> che rappresenta l'accesso a una proprietà indicizzata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3280">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3281">Oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3281">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, string propertyName, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, string propertyName, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, propertyName As String, ParamArray arguments As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::String ^ propertyName, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="384e1-3282">Oggetto a cui appartiene la proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3282">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="384e1-3283">Se la proprietà è statica/condivisa, deve essere Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3283">If the property is static/shared, it must be null.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="384e1-3284">Nome dell'indicizzatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3284">The name of the indexer.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="384e1-3285">Matrice di oggetti <see cref="T:System.Linq.Expressions.Expression" /> usati per indicizzare la proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3285">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3286">Crea un oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> che rappresenta l'accesso a una proprietà indicizzata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3286">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3287">Oggetto <see cref="T:System.Linq.Expressions.IndexExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3287">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, Type type, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Type type, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::String ^ propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3288">Oggetto contenitore della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3288">The containing object of the property.</span>
          </span>
          <span data-ttu-id="384e1-3289">Può essere Null per le proprietà statiche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3289">This can be null for static properties.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-3290">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> che contiene la proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3290">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the property.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="384e1-3291">Proprietà a cui accedere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3291">The property to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3292">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che accede a una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3292">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> accessing a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3293">Oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3293">The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyOrField">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression PropertyOrField (System.Linq.Expressions.Expression expression, string propertyOrFieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression PropertyOrField(class System.Linq.Expressions.Expression expression, string propertyOrFieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ PropertyOrField(System::Linq::Expressions::Expression ^ expression, System::String ^ propertyOrFieldName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyOrFieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3294">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> contiene una proprietà o un campo denominato <c>propertyOrFieldName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3294">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property or field named <c>propertyOrFieldName</c>.</span>
          </span>
          <span data-ttu-id="384e1-3295">Può essere Null per i membri statici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3295">This can be null for static members.</span>
          </span>
        </param>
        <param name="propertyOrFieldName">
          <span data-ttu-id="384e1-3296">Nome di una proprietà o di un campo a cui accedere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3296">The name of a property or field to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3297">Crea un oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> che rappresenta l'accesso a una proprietà o un campo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3297">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property or field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3298">Oggetto <see cref="T:System.Linq.Expressions.MemberExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> è impostata su <paramref name="expression" /> e la cui proprietà <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> è impostata su <see cref="T:System.Reflection.PropertyInfo" /> o su <see cref="T:System.Reflection.FieldInfo" />, che rappresenta la proprietà o il campo identificato da <paramref name="propertyOrFieldName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3298">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> that represents the property or field denoted by <paramref name="propertyOrFieldName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3299">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.MemberExpression> è uguale al <xref:System.Reflection.PropertyInfo.PropertyType%2A> o <xref:System.Reflection.FieldInfo.FieldType%2A> le proprietà del <xref:System.Reflection.PropertyInfo> o <xref:System.Reflection.FieldInfo>, rispettivamente, che rappresenta la proprietà o campo identificato da `propertyOrFieldName`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3299">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> or <xref:System.Reflection.FieldInfo.FieldType%2A> properties of the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo>, respectively, that represents the property or field denoted by `propertyOrFieldName`.</span></span>  
  
 <span data-ttu-id="384e1-3300">Questo metodo cerca `expression`. Tipo e ai tipi di base per una proprietà o campo che contiene il nome `propertyOrFieldName`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3300">This method searches `expression`.Type and its base types for a property or field that has the name `propertyOrFieldName`.</span></span> <span data-ttu-id="384e1-3301">I campi e proprietà pubbliche vengono data la preferenza su campi e proprietà di tipo non pubblico.</span><span class="sxs-lookup"><span data-stu-id="384e1-3301">Public properties and fields are given preference over non-public properties and fields.</span></span> <span data-ttu-id="384e1-3302">Inoltre, le proprietà sono preferite campi.</span><span class="sxs-lookup"><span data-stu-id="384e1-3302">Also, properties are given preference over fields.</span></span> <span data-ttu-id="384e1-3303">Se viene trovato una proprietà o campo corrispondente, questo metodo passa `expression` e <xref:System.Reflection.PropertyInfo> o <xref:System.Reflection.FieldInfo> che rappresenta la proprietà o campo <xref:System.Linq.Expressions.Expression.Property%2A> o <xref:System.Linq.Expressions.Expression.Field%2A>, rispettivamente.</span><span class="sxs-lookup"><span data-stu-id="384e1-3303">If a matching property or field is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo> that represents that property or field to <xref:System.Linq.Expressions.Expression.Property%2A> or <xref:System.Linq.Expressions.Expression.Field%2A>, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-3304">Nell'esempio seguente viene illustrato come creare un'espressione che rappresenta l'accesso a una proprietà o campo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3304">The following example shows how to create an expression that represents accessing a property or field.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#39)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#39)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3305">
            <paramref name="expression" /> o <paramref name="propertyOrFieldName" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3305">
              <paramref name="expression" /> or <paramref name="propertyOrFieldName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-3306">Nessuna proprietà o campo denominato <paramref name="propertyOrFieldName" /> è definito in <paramref name="expression" />.Type o nei relativi tipi di base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3306">No property or field named <paramref name="propertyOrFieldName" /> is defined in <paramref name="expression" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Quote">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Quote (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Quote(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Quote(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3307">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3307">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3308">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'espressione che ha un valore costante di tipo <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3308">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3309">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> e la cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3309">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3310">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> rappresenta il tipo costruito <xref:System.Linq.Expressions.Expression%601>, dove l'argomento di tipo è il tipo rappresentato da `expression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3310">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents the constructed type <xref:System.Linq.Expressions.Expression%601>, where the type argument is the type represented by `expression`.Type.</span></span> <span data-ttu-id="384e1-3311">La proprietà <xref:System.Linq.Expressions.UnaryExpression.Method%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3311">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`.</span></span> <span data-ttu-id="384e1-3312">Entrambi <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3312">Both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3313">
            <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3313">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Reduce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Reduce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Reduce" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Reduce () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Linq::Expressions::Expression ^ Reduce();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3314">Riduce questo nodo a un'espressione più semplice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3314">Reduces this node to a simpler expression.</span>
          </span>
          <span data-ttu-id="384e1-3315">Se CanReduce restituisce true, deve essere restituita un'espressione valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3315">If CanReduce returns true, this should return a valid expression.</span>
          </span>
          <span data-ttu-id="384e1-3316">Questo metodo può restituire un altro nodo che deve essere a sua volta ridotto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3316">This method can return another node which itself must be reduced.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3317">Espressione ridotta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3317">The reduced expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceAndCheck">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceAndCheck ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceAndCheck() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
      <MemberSignature Language="VB.NET" Value="Public Function ReduceAndCheck () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ ReduceAndCheck();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3318">Riduce questo nodo a un'espressione più semplice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3318">Reduces this node to a simpler expression.</span>
          </span>
          <span data-ttu-id="384e1-3319">Se CanReduce restituisce true, deve essere restituita un'espressione valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3319">If CanReduce returns true, this should return a valid expression.</span>
          </span>
          <span data-ttu-id="384e1-3320">Questo metodo può restituire un altro nodo che deve essere a sua volta ridotto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3320">This method can return another node which itself must be reduced.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3321">Espressione ridotta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3321">The reduced expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3322">A differenza di ridurre, questo metodo controlla che il nodo ridotto soddisfi determinate invarianti.</span><span class="sxs-lookup"><span data-stu-id="384e1-3322">Unlike Reduce, this method checks that the reduced node satisfies certain invariants.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceExtensions">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Function ReduceExtensions () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ ReduceExtensions();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3323">Riduce l'espressione a un tipo di nodo noto (diverso da un nodo di estensione) o restituisce solo l'espressione se è già un tipo noto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3323">Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3324">Espressione ridotta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3324">The reduced expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ReferenceEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3325">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3325">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3326">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3326">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3327">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto di uguaglianze di riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3327">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference equality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3328">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3328">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceNotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceNotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceNotEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ReferenceNotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3329">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3329">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3330">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3330">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3331">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un confronto di disuguaglianze di riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3331">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference inequality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3332">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3332">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Rethrow">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3333">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta la rigenerazione di un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3333">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Rethrow () As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Rethrow();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3334">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta la rigenerazione di un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3334">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3335">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta la rigenerazione di un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3335">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Rethrow(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-3336">Nuovo oggetto <see cref="T:System.Type" /> dell'espressione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3336">The new <see cref="T:System.Type" /> of the expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3337">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta la rigenerazione di un'eccezione con un tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3337">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception with a given type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3338">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta la rigenerazione di un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3338">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Return">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3339">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3339">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Return (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-3340">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui passerà l'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3340">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3341">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3341">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3342">Oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Return, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" /> e un valore Null da passare all'etichetta di destinazione al momento del passaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3342">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Return (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-3343">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui passerà l'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3343">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="384e1-3344">Valore che al momento del passaggio verrà passato all'etichetta associata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3344">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3345">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3345">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span>
          </span>
          <span data-ttu-id="384e1-3346">Il valore passato all'etichetta al momento del passaggio può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3346">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3347">Oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Continue, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" /> e <paramref name="value" /> da passare all'etichetta di destinazione al momento del passaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3347">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-3348">Nell'esempio seguente viene illustrato come creare un'espressione che contiene il <xref:System.Linq.Expressions.Expression.Return%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3348">The following example demonstrates how to create an expression that contains the <xref:System.Linq.Expressions.Expression.Return%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-3349">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui passerà l'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3349">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-3350">Oggetto <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3350">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3351">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione return con il tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3351">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3352">Oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Return, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" />, la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" /> e un valore Null da passare all'etichetta al momento del passaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3352">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="384e1-3353">Oggetto <see cref="T:System.Linq.Expressions.LabelTarget" /> a cui passerà l'oggetto <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3353">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="384e1-3354">Valore che al momento del passaggio verrà passato all'etichetta associata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3354">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-3355">Oggetto <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3355">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3356">Crea un oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> che rappresenta un'istruzione return con il tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3356">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</span>
          </span>
          <span data-ttu-id="384e1-3357">Il valore passato all'etichetta al momento del passaggio può essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3357">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3358">Oggetto <see cref="T:System.Linq.Expressions.GotoExpression" /> con la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> uguale a Continue, la proprietà <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> impostata su <paramref name="target" />, la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" /> impostata su <paramref name="type" /> e <paramref name="value" /> da passare all'etichetta di destinazione al momento del passaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3358">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RightShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3359">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di spostamento a destra bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3359">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShift (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3360">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3360">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3361">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3361">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3362">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di spostamento a destra bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3362">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3363">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3363">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3364">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3364">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-3365">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3365">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-3366">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3366">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-3367">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3367">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-3368">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3368">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-3369">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3369">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-3370">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-3370">Implementing Method</span></span>  
 <span data-ttu-id="384e1-3371">Le regole seguenti determinano il metodo di implementazione selezionato per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3371">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-3372">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di spostamento a destra, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3372">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3373">In caso contrario, se `left`. Il tipo è un tipo integrale (uno dei <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, o i tipi nullable corrispondenti) e `right`. Il tipo è <xref:System.Int32>, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3373">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-3374">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-3374">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-3375">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3375">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3376">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3376">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-3377">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3377">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3378">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3378">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-3379">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3379">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-3380">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-3380">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-3381">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3381">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3382">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3382">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-3383">Il tipo del nodo è il tipo di risultato dell'operatore di spostamento a destra predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3383">The type of the node is the result type of the predefined right-shift operator.</span></span>  
  
-   <span data-ttu-id="384e1-3384">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3384">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-3385">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di spostamento a destra predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3385">The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3386">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3386">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-3387">L'operatore di spostamento a destra non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3387">The right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShift (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3388">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3388">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3389">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3389">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3390">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3390">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3391">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di spostamento a destra bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3391">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3392">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3392">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3393">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3393">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-3394">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3394">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-3395">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3395">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-3396">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3396">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-3397">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3397">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-3398">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3398">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-3399">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-3399">Implementing Method</span></span>  
 <span data-ttu-id="384e1-3400">Le regole seguenti determinano il metodo di implementazione selezionato per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3400">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-3401">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3401">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-3402">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di spostamento a destra, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3402">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3403">In caso contrario, se `left`. Il tipo è un tipo integrale (uno dei <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, o i tipi nullable corrispondenti) e `right`. Il tipo è <xref:System.Int32>, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3403">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-3404">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-3404">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-3405">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3405">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3406">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3406">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-3407">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3407">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3408">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3408">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-3409">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3409">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-3410">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-3410">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-3411">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3411">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3412">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3412">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-3413">Il tipo del nodo è il tipo di risultato dell'operatore di spostamento a destra predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3413">The type of the node is the result type of the predefined right-shift operator.</span></span>  
  
-   <span data-ttu-id="384e1-3414">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3414">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-3415">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di spostamento a destra predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3415">The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3416">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3416">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-3417">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3417">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-3418">
            <paramref name="method" /> è <see langword="null" /> e l'operatore di spostamento a destra non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3418">
              <paramref name="method" /> is <see langword="null" /> and the right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RightShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3419">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di spostamento a destra bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3419">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3420">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3420">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3421">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3421">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3422">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di spostamento a destra bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3422">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3423">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3423">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3424">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3424">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3425">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3425">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3426">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3426">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3427">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di spostamento a destra bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3427">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3428">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3428">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3429">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3429">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3430">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3430">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3431">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3431">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-3432">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3432">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3433">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di spostamento a destra bit per bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3433">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3434">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3434">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RuntimeVariables">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3435">Crea un'istanza di <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3435">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RuntimeVariables (variables As IEnumerable(Of ParameterExpression)) As RuntimeVariablesExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::RuntimeVariablesExpression ^ RuntimeVariables(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="384e1-3436">Raccolta di oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3436">A collection of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3437">Crea un'istanza di <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3437">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3438">Istanza di <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> e la cui proprietà <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3438">An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (params System.Linq.Expressions.ParameterExpression[] variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Linq.Expressions.ParameterExpression[] variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RuntimeVariables (ParamArray variables As ParameterExpression()) As RuntimeVariablesExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::RuntimeVariablesExpression ^ RuntimeVariables(... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="384e1-3439">Matrice di oggetti <see cref="T:System.Linq.Expressions.ParameterExpression" /> da usare per popolare la raccolta <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3439">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3440">Crea un'istanza di <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3440">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3441">Istanza di <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> e la cui proprietà <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3441">An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3442">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di sottrazione aritmetica che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3442">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Subtract(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3443">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3443">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3444">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3444">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3445">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di sottrazione aritmetica che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3445">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3446">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3446">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3447">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3447">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-3448">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3448">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-3449">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3449">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-3450">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3450">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-3451">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3451">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-3452">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3452">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-3453">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-3453">Implementing Method</span></span>  
 <span data-ttu-id="384e1-3454">Le regole seguenti determinano il metodo di implementazione selezionato per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3454">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-3455">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di sottrazione, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3455">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3456">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3456">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-3457">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-3457">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-3458">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3458">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3459">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3459">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-3460">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3460">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3461">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3461">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-3462">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3462">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-3463">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-3463">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-3464">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3464">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3465">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3465">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-3466">Il tipo del nodo è il tipo di risultato dell'operatore di sottrazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3466">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="384e1-3467">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3467">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-3468">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di sottrazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3468">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-3469">Esempio di codice seguente viene illustrato come creare un'espressione che esegue l'argomento dal primo argomento.</span><span class="sxs-lookup"><span data-stu-id="384e1-3469">The following code example shows how to create an expression that subtracts the argument from the first argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#30)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3470">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3470">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-3471">L'operatore di sottrazione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3471">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Subtract(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3472">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3472">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3473">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3473">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3474">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3474">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3475">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di sottrazione aritmetica che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3475">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3476">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3476">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3477">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3477">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-3478">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3478">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-3479">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3479">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-3480">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3480">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-3481">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3481">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-3482">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3482">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-3483">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-3483">Implementing Method</span></span>  
 <span data-ttu-id="384e1-3484">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3484">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-3485">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3485">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-3486">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di sottrazione, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3486">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3487">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3487">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-3488">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-3488">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-3489">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3489">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3490">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3490">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-3491">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3491">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3492">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3492">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-3493">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3493">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-3494">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-3494">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-3495">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3495">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3496">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3496">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-3497">Il tipo del nodo è il tipo di risultato dell'operatore di sottrazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3497">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="384e1-3498">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3498">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-3499">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di sottrazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3499">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3500">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3500">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-3501">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3501">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-3502">
            <paramref name="method" /> è <see langword="null" /> e l'operatore di sottrazione non è definito per i tipi <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3502">
              <paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3503">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di sottrazione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3503">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3504">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3504">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3505">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3505">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3506">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di sottrazione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3506">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3507">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3507">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3508">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3508">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3509">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3509">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3510">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3510">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3511">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di sottrazione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3511">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3512">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3512">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3513">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3513">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3514">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3514">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3515">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3515">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-3516">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3516">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3517">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di sottrazione che non ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3517">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3518">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3518">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3519">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di sottrazione che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3519">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3520">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3520">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3521">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3521">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3522">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di sottrazione che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3522">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3523">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3523">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3524">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3524">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3525">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3525">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3526">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3526">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3527">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di sottrazione che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3527">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3528">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3528">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3529">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3529">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3530">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3530">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3531">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3531">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="384e1-3532">Oggetto <see cref="T:System.Linq.Expressions.LambdaExpression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3532">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3533">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di assegnazione di sottrazione che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3533">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3534">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3534">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3535">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di sottrazione aritmetica che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3535">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3536">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3536">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3537">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3537">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3538">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di sottrazione aritmetica che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3538">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3539">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3539">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3540">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3540">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-3541">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3541">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-3542">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3542">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-3543">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3543">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-3544">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3544">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-3545">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3545">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-3546">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-3546">Implementing Method</span></span>  
 <span data-ttu-id="384e1-3547">Le regole seguenti determinano il metodo di implementazione selezionato per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3547">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-3548">Se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di sottrazione, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3548">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3549">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3549">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-3550">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-3550">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-3551">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3551">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3552">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3552">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-3553">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3553">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3554">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3554">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-3555">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3555">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-3556">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-3556">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-3557">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3557">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3558">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3558">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-3559">Il tipo del nodo è il tipo di risultato dell'operatore di sottrazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3559">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="384e1-3560">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3560">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-3561">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di sottrazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3561">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3562">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3562">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-3563">L'operatore di sottrazione non è definito per <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3563">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="384e1-3564">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3564">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="384e1-3565">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3565">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3566">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3566">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3567">Crea un oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> che rappresenta un'operazione di sottrazione aritmetica che ha il controllo dell'overflow.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3567">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3568">Oggetto <see cref="T:System.Linq.Expressions.BinaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> e le cui proprietà <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> e <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3568">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3569">Il valore risultante <xref:System.Linq.Expressions.BinaryExpression> ha il <xref:System.Linq.Expressions.BinaryExpression.Method%2A> impostata per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3569">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="384e1-3570">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3570">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-3571">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3571">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-3572">In caso contrario, sono `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3572">Otherwise, they are `false`.</span></span> <span data-ttu-id="384e1-3573">La proprietà <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3573">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="384e1-3574">Di seguito viene descritto il metodo di implementazione, il tipo di nodo, e se un nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3574">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-3575">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-3575">Implementing Method</span></span>  
 <span data-ttu-id="384e1-3576">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3576">The following rules determine the implementing method for the operation :</span></span>  
  
-   <span data-ttu-id="384e1-3577">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta due argomenti, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3577">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-3578">In caso contrario, se il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà di `left` o `right` rappresenta un tipo definito dall'utente che esegue l'overload dell'operatore di sottrazione, il <xref:System.Reflection.MethodInfo> che rappresenta tale metodo è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3578">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3579">In caso contrario, se `left`. Tipo e `right`. Type sono tipi numerici, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3579">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-3580">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-3580">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-3581">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3581">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3582">Se `left`. Tipo e `right`. Tipo possano essere assegnati ai corrispondenti tipi di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3582">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-3583">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3583">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3584">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3584">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-3585">`left`. Tipo e `right`. Tipo sono entrambi tipi di valore di cui almeno uno è nullable e i tipi non nullable corrispondenti sono uguali ai corrispondenti tipi di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3585">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-3586">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-3586">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-3587">Se il metodo di implementazione è `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3587">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3588">Se `left`. Tipo e `right`. Type sono entrambi non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3588">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-3589">Il tipo del nodo è il tipo di risultato dell'operatore di sottrazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3589">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="384e1-3590">Se `left`. Tipo e `right`. Type sono entrambi i valori null, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3590">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="384e1-3591">Il tipo del nodo è il tipo nullable che corrisponde al tipo di risultato dell'operatore di sottrazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3591">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3592">
            <paramref name="left" /> o <paramref name="right" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3592">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-3593">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) oppure non accetta esattamente due argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3593">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-3594">
            <paramref name="method" /> è <see langword="null" /> e l'operatore di sottrazione non è definito per i tipi <paramref name="left" />.Type e <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3594">
              <paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Switch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3595">Crea <see cref="T:System.Linq.Expressions.SwitchExpression" /> che rappresenta un'istruzione <see langword="switch" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3595">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="384e1-3596">Valore da testare a fronte di ogni case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3596">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="384e1-3597">Set di case per questa espressione switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3597">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3598">Crea un oggetto a <see cref="T:System.Linq.Expressions.SwitchExpression" /> che rappresenta un'istruzione<see langword="switch" /> senza un case predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3598">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement without a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3599">Oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3599">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3600">Tutti <xref:System.Linq.Expressions.SwitchCase> gli oggetti in un <xref:System.Linq.Expressions.SwitchExpression> oggetto deve avere lo stesso tipo, a meno che il <xref:System.Linq.Expressions.SwitchExpression> è di tipo `void`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3600">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="384e1-3601">Ogni <xref:System.Linq.Expressions.SwitchCase> oggetto è implicita `break` istruzione, il che significa che non vi sia alcun passaggio implicito da un'etichetta case a un altro.</span><span class="sxs-lookup"><span data-stu-id="384e1-3601">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
 <span data-ttu-id="384e1-3602">Se `switchValue` non corrisponde ad alcuno dei casi, viene generata alcuna eccezione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3602">If `switchValue` does not match any of the cases, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-3603">Nell'esempio seguente viene illustrato come creare un'espressione che rappresenta un'istruzione swtich che un case predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3603">The following example demonstrates how to create an expression that represents a swtich statement without a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#34)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="384e1-3604">Valore da testare a fronte di ogni case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3604">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="384e1-3605">Risultato dell'opzione se <c>switchValue</c> non corrisponde ad alcun caso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3605">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="384e1-3606">Set di case per questa espressione switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3606">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3607">Crea <see cref="T:System.Linq.Expressions.SwitchExpression" /> che rappresenta un'istruzione <see langword="switch" /> con un caso predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3607">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3608">Oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3608">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3609">Tutti <xref:System.Linq.Expressions.SwitchCase> gli oggetti in un <xref:System.Linq.Expressions.SwitchExpression> oggetto deve avere lo stesso tipo, a meno che il <xref:System.Linq.Expressions.SwitchExpression> è di tipo `void`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3609">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="384e1-3610">Ogni <xref:System.Linq.Expressions.SwitchCase> oggetto è implicita `break` istruzione, il che significa che non vi sia alcun passaggio implicito da un'etichetta case a un altro.</span><span class="sxs-lookup"><span data-stu-id="384e1-3610">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
 <span data-ttu-id="384e1-3611">Se `switchValue` non corrisponde ad alcuno dei casi, nel caso predefinito rappresentato da `defaultBody` viene eseguito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3611">If `switchValue` does not match any of the cases, the default case represented by `defaultBody` is run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-3612">Nell'esempio seguente viene illustrato come creare un'espressione che rappresenta un'istruzione swtich che dispone di un caso predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3612">The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, cases As IEnumerable(Of SwitchCase)) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="384e1-3613">Valore da testare a fronte di ogni case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3613">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="384e1-3614">Risultato dell'opzione se <c>switchValue</c> non corrisponde ad alcun caso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3614">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="384e1-3615">Metodo di confronto di uguaglianze da usare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3615">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="384e1-3616">Set di case per questa espressione switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3616">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3617">Crea <see cref="T:System.Linq.Expressions.SwitchExpression" /> che rappresenta un'istruzione <see langword="switch" /> con un caso predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3617">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3618">Oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3618">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="384e1-3619">Valore da testare a fronte di ogni case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3619">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="384e1-3620">Risultato dell'opzione se <c>switchValue</c> non corrisponde ad alcun caso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3620">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="384e1-3621">Metodo di confronto di uguaglianze da usare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3621">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="384e1-3622">Set di case per questa espressione switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3622">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3623">Crea <see cref="T:System.Linq.Expressions.SwitchExpression" /> che rappresenta un'istruzione <see langword="switch" /> con un caso predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3623">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3624">Oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3624">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(Type ^ type, System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-3625">Tipo di risultato dell'opzione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3625">The result type of the switch.</span>
          </span>
        </param>
        <param name="switchValue">
          <span data-ttu-id="384e1-3626">Valore da testare a fronte di ogni case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3626">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="384e1-3627">Risultato dell'opzione se <c>switchValue</c> non corrisponde ad alcun caso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3627">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="384e1-3628">Metodo di confronto di uguaglianze da usare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3628">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="384e1-3629">Set di case per questa espressione switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3629">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3630">Crea <see cref="T:System.Linq.Expressions.SwitchExpression" /> che rappresenta un'istruzione <see langword="switch" /> con un caso predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3630">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3631">Oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3631">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(Type ^ type, System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-3632">Tipo di risultato dell'opzione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3632">The result type of the switch.</span>
          </span>
        </param>
        <param name="switchValue">
          <span data-ttu-id="384e1-3633">Valore da testare a fronte di ogni case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3633">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="384e1-3634">Risultato dell'opzione se <c>switchValue</c> non corrisponde ad alcun caso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3634">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="384e1-3635">Metodo di confronto di uguaglianze da usare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3635">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="384e1-3636">Set di case per questa espressione switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3636">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3637">Crea un oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" /> che rappresenta un'istruzione <see langword="switch" /> con un case predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3637">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case..</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3638">Oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3638">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SwitchCase">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3639">Crea un oggetto <see cref="T:System.Linq.Expressions.SwitchCase" /> da usare in un oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3639">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchCase (body As Expression, testValues As IEnumerable(Of Expression)) As SwitchCase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchCase ^ SwitchCase(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ testValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="384e1-3640">Corpo del case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3640">The body of the case.</span>
          </span>
        </param>
        <param name="testValues">
          <span data-ttu-id="384e1-3641">Valori di test del case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3641">The test values of the case.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3642">Crea un oggetto <see cref="T:System.Linq.Expressions.SwitchCase" /> da usare in un oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3642">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3643">Oggetto <see cref="T:System.Linq.Expressions.SwitchCase" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3643">The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3644">Tutti <xref:System.Linq.Expressions.SwitchCase> gli oggetti in un <xref:System.Linq.Expressions.SwitchExpression> oggetto deve avere lo stesso tipo, a meno che il <xref:System.Linq.Expressions.SwitchExpression> è di tipo `void`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3644">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="384e1-3645">Ogni <xref:System.Linq.Expressions.SwitchCase> oggetto è implicita `break` istruzione, il che significa che non vi sia alcun passaggio implicito da un'etichetta case a un altro.</span><span class="sxs-lookup"><span data-stu-id="384e1-3645">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-3646">Nell'esempio seguente viene illustrato come creare un'espressione che rappresenta un'istruzione swtich che dispone di un caso predefinito.</span><span class="sxs-lookup"><span data-stu-id="384e1-3646">The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, params System.Linq.Expressions.Expression[] testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression[] testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchCase (body As Expression, ParamArray testValues As Expression()) As SwitchCase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchCase ^ SwitchCase(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ testValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="384e1-3647">Corpo del case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3647">The body of the case.</span>
          </span>
        </param>
        <param name="testValues">
          <span data-ttu-id="384e1-3648">Valori di test del case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3648">The test values of the case.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3649">Crea un oggetto <see cref="T:System.Linq.Expressions.SwitchCase" /> da usare in un oggetto <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3649">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> for use in a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3650">Oggetto <see cref="T:System.Linq.Expressions.SwitchCase" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3650">The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SymbolDocument">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3651">Crea un'istanza di <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3651">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="384e1-3652">Oggetto <see cref="T:System.String" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3652">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3653">Crea un'istanza di <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3653">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3654">Oggetto <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> la cui proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3654">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="384e1-3655">Oggetto <see cref="T:System.String" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3655">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <param name="language">
          <span data-ttu-id="384e1-3656">Oggetto <see cref="T:System.Guid" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3656">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3657">Crea un'istanza di <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3657">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3658">Oggetto <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> con le proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> e <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> impostate sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3658">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> properties set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid, languageVendor As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language, Guid languageVendor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="384e1-3659">Oggetto <see cref="T:System.String" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3659">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <param name="language">
          <span data-ttu-id="384e1-3660">Oggetto <see cref="T:System.Guid" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3660">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span>
          </span>
        </param>
        <param name="languageVendor">
          <span data-ttu-id="384e1-3661">Oggetto <see cref="T:System.Guid" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3661">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3662">Crea un'istanza di <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3662">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3663">Oggetto <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> le cui proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> e <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> sono impostate sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3663">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> properties set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor, valuetype System.Guid documentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid, languageVendor As Guid, documentType As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
        <Parameter Name="documentType" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="384e1-3664">Oggetto <see cref="T:System.String" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3664">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <param name="language">
          <span data-ttu-id="384e1-3665">Oggetto <see cref="T:System.Guid" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3665">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span>
          </span>
        </param>
        <param name="languageVendor">
          <span data-ttu-id="384e1-3666">Oggetto <see cref="T:System.Guid" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3666">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</span>
          </span>
        </param>
        <param name="documentType">
          <span data-ttu-id="384e1-3667">Oggetto <see cref="T:System.Guid" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3667">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3668">Crea un'istanza di <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3668">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3669">Oggetto <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> con le proprietà <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> e <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> impostate sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3669">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> properties set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Throw">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3670">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta la generazione di un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3670">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Throw (value As Expression) As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Throw(System::Linq::Expressions::Expression ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="384e1-3671">Oggetto <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3671">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3672">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta la generazione di un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3672">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3673">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3673">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-3674">Nell'esempio seguente viene illustrato come creare un <xref:System.Linq.Expressions.TryExpression> oggetto che utilizza il <xref:System.Linq.Expressions.Expression.Throw%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3674">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that uses the <xref:System.Linq.Expressions.Expression.Throw%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Throw(System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="384e1-3675">Oggetto <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3675">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-3676">Nuovo oggetto <see cref="T:System.Type" /> dell'espressione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3676">The new <see cref="T:System.Type" /> of the expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3677">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta la generazione di un'eccezione con un tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3677">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception with a given type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3678">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta l'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3678">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3679">Restituisce una rappresentazione testuale di <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3679">Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3680">Rappresentazione testuale di <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3680">A textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatch (System.Linq.Expressions.Expression body, params System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatch(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCatch (body As Expression, ParamArray handlers As CatchBlock()) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryCatch(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="384e1-3681">Corpo del blocco try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3681">The body of the try block.</span>
          </span>
        </param>
        <param name="handlers">
          <span data-ttu-id="384e1-3682">Matrice di zero o più espressioni <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresentano le istruzioni catch da associare al blocco try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3682">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3683">Crea un oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> che rappresenta un blocco try con qualsiasi numero di istruzioni catch e nessun blocco fault o finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3683">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and neither a fault nor finally block.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3684">Oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3684">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-3685">Nell'esempio seguente viene illustrato come creare un <xref:System.Linq.Expressions.TryExpression> oggetto che contiene un'istruzione catch.</span><span class="sxs-lookup"><span data-stu-id="384e1-3685">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatchFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatchFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, params System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatchFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCatchFinally (body As Expression, finally As Expression, ParamArray handlers As CatchBlock()) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryCatchFinally(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally, ... cli::array &lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="384e1-3686">Corpo del blocco try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3686">The body of the try block.</span>
          </span>
        </param>
        <param name="finally">
          <span data-ttu-id="384e1-3687">Corpo del blocco finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3687">The body of the finally block.</span>
          </span>
        </param>
        <param name="handlers">
          <span data-ttu-id="384e1-3688">Matrice di zero o più espressioni <see cref="T:System.Linq.Expressions.CatchBlock" /> che rappresentano le istruzioni catch da associare al blocco try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3688">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3689">Crea un oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> che rappresenta un blocco try con qualsiasi numero di istruzioni catch e un blocco finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3689">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and a finally block.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3690">Oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3690">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="384e1-3691">Nell'esempio seguente viene illustrato come creare un <xref:System.Linq.Expressions.TryExpression> oggetto che contiene un'istruzione catch e un'istruzione finally.</span><span class="sxs-lookup"><span data-stu-id="384e1-3691">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement and a finally statement.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#48)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFault">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFault (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFault(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression fault) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFault (body As Expression, fault As Expression) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryFault(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ fault);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="384e1-3692">Corpo del blocco try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3692">The body of the try block.</span>
          </span>
        </param>
        <param name="fault">
          <span data-ttu-id="384e1-3693">Corpo del blocco fault.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3693">The body of the fault block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3694">Crea un oggetto a <see cref="T:System.Linq.Expressions.TryExpression" /> che rappresenta un blocco try con un blocco fault e nessuna istruzione catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3694">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a fault block and no catch statements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3695">Oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3695">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFinally (body As Expression, finally As Expression) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryFinally(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="384e1-3696">Corpo del blocco try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3696">The body of the try block.</span>
          </span>
        </param>
        <param name="finally">
          <span data-ttu-id="384e1-3697">Corpo del blocco finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3697">The body of the finally block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3698">Crea un oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> che rappresenta un blocco try con un blocco finally e nessuna istruzione catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3698">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a finally block and no catch statements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3699">Oggetto <see cref="T:System.Linq.Expressions.TryExpression" /> creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3699">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetActionType">
      <MemberSignature Language="C#" Value="public static bool TryGetActionType (Type[] typeArgs, out Type actionType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetActionType(class System.Type[] typeArgs, [out] class System.Type&amp; actionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetActionType (typeArgs As Type(), ByRef actionType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetActionType(cli::array &lt;Type ^&gt; ^ typeArgs, [Runtime::InteropServices::Out] Type ^ % actionType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="actionType" Type="System.Type&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="384e1-3700">Matrice di oggetti Type che specificano gli argomenti tipo per il tipo delegato System.Action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3700">An array of Type objects that specify the type arguments for the System.Action delegate type.</span>
          </span>
        </param>
        <param name="actionType">
          <span data-ttu-id="384e1-3701">Quando questo metodo viene restituito, contiene il tipo delegato System.Action generico che dispone di argomenti tipo specifici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3701">When this method returns, contains the generic System.Action delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="384e1-3702">Contiene Null se nessun delegato System.Action generico corrisponde a <c>typeArgs</c>. Questo parametro viene passato non inizializzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3702">Contains null if there is no generic System.Action delegate that matches the <c>typeArgs</c>.This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3703">Crea un oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta un tipo delegato System.Action generico con argomenti di tipo specifici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3703">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Action delegate type that has specific type arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3704">true se il tipo delegato System.Action generico è stato creato per <paramref name="typeArgs" /> specifico; in caso contrario, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3704">true if generic System.Action delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetFuncType">
      <MemberSignature Language="C#" Value="public static bool TryGetFuncType (Type[] typeArgs, out Type funcType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetFuncType(class System.Type[] typeArgs, [out] class System.Type&amp; funcType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetFuncType (typeArgs As Type(), ByRef funcType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetFuncType(cli::array &lt;Type ^&gt; ^ typeArgs, [Runtime::InteropServices::Out] Type ^ % funcType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="funcType" Type="System.Type&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="384e1-3705">Matrice di oggetti Type che specificano gli argomenti tipo per il tipo delegato System.Func.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3705">An array of Type objects that specify the type arguments for the System.Func delegate type.</span>
          </span>
        </param>
        <param name="funcType">
          <span data-ttu-id="384e1-3706">Quando questo metodo viene restituito, contiene il tipo delegato System.Func generico con argomenti tipo specifici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3706">When this method returns, contains the generic System.Func delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="384e1-3707">Contiene Null se nessun delegato System.Func generico corrisponde a <c>typeArgs</c>. Questo parametro viene passato non inizializzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3707">Contains null if there is no generic System.Func delegate that matches the <c>typeArgs</c>.This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3708">Crea un oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> che rappresenta un tipo delegato System.Func generico con argomenti di tipo specifici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3708">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="384e1-3709">L'ultimo argomento tipo specifica il tipo restituito del delegato creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3709">The last type argument specifies the return type of the created delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3710">true se il tipo delegato System.Func generico è stato creato per <paramref name="typeArgs" /> specifico; in caso contrario, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3710">true if generic System.Func delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public virtual Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ Type { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3711">Ottiene il tipo statico dell'espressione rappresentata da <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3711">Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="384e1-3712">
            <see cref="T:System.Type" /> che rappresenta il tipo statico dell'espressione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3712">The <see cref="T:System.Type" /> that represents the static type of the expression.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3713">Il <xref:System.Linq.Expressions.Expression.NodeType%2A> è il tipo del nodo dell'albero dell'espressione, mentre il <xref:System.Linq.Expressions.Expression.Type%2A> rappresenta il tipo common language runtime (CLR) statico dell'espressione che rappresenta il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3713">The <xref:System.Linq.Expressions.Expression.NodeType%2A> is the type of the expression tree node, whereas the <xref:System.Linq.Expressions.Expression.Type%2A> represents the static common language runtime (CLR) type of the expression that the node represents.</span></span> <span data-ttu-id="384e1-3714">Ad esempio, due nodi con tipi di nodo diversi possono avere lo stesso <xref:System.Linq.Expressions.Expression.Type%2A>, come illustrato nell'esempio di codice seguente.</span><span class="sxs-lookup"><span data-stu-id="384e1-3714">For example, two nodes with different node types can have the same <xref:System.Linq.Expressions.Expression.Type%2A>, as shown in the following code example.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#36)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression TypeAs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression TypeAs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ TypeAs(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3715">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3715">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-3716">Oggetto <see cref="T:System.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3716">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3717">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un riferimento esplicito o una conversione boxing in cui viene fornito <see langword="null" /> se la conversione non riesce.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3717">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit reference or boxing conversion where <see langword="null" /> is supplied if the conversion fails.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3718">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> e <see cref="P:System.Linq.Expressions.Expression.Type" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3718">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3719">Il <xref:System.Linq.Expressions.UnaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3719">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is `null`.</span></span> <span data-ttu-id="384e1-3720">Il <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> siano entrambe `false`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3720">The <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> properties are both `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-3721">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29> metodo per creare un <xref:System.Linq.Expressions.UnaryExpression> che rappresenta la conversione di riferimenti di un'espressione integer che non ammette valori null nel tipo integer nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-3721">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.UnaryExpression> that represents the reference conversion of a non-nullable integer expression to the nullable integer type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#11)]
 [!code-vb[System.Linq.Expressions.Expression#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3722">
            <paramref name="expression" /> o <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3722">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TypeEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeEqual (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeEqual(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TypeBinaryExpression ^ TypeEqual(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3723">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3723">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="T:System.Linq.Expressions.Expression" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-3724">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3724">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3725">Crea un oggetto <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> che confronta l'identità del tipo in fase di esecuzione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3725">Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> that compares run-time type identity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3726">Oggetto <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> per il quale la proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> e per il quale le proprietà <see cref="T:System.Linq.Expressions.Expression" /> e <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3726">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> and for which the <see cref="T:System.Linq.Expressions.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeIs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeIs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeIs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TypeBinaryExpression ^ TypeIs(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3727">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3727">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-3728">Oggetto <see cref="P:System.Linq.Expressions.Expression.Type" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3728">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3729">Crea un oggetto <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3729">Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3730">Oggetto <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> per il quale la proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> e per il quale le proprietà <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> e <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3730">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> and for which the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3731">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> rappresenta <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="384e1-3731">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="384e1-3732">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29> metodo per creare un <xref:System.Linq.Expressions.TypeBinaryExpression> che rappresenta un test del tipo di un valore stringa con il <xref:System.Int32> tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3732">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.TypeBinaryExpression> that represents a type test of a string value against the <xref:System.Int32> type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#12)]
 [!code-vb[System.Linq.Expressions.Expression#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3733">
            <paramref name="expression" /> o <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3733">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnaryPlus">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3734">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione con il più unario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3734">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ UnaryPlus(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3735">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3735">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3736">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione con il più unario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3736">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3737">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> e la cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> è impostata sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3737">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3738">Il <xref:System.Linq.Expressions.UnaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> è impostato per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3738">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="384e1-3739">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3739">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-3740">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3740">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-3741">In caso contrario, sono false.</span><span class="sxs-lookup"><span data-stu-id="384e1-3741">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-3742">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-3742">Implementing Method</span></span>  
 <span data-ttu-id="384e1-3743">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3743">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-3744">Se `expression`. Tipo è un tipo definito dall'utente che definisce l'operatore più unario il <xref:System.Reflection.MethodInfo> che rappresenta l'operatore è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3744">If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3745">In caso contrario, se `expression`. Type è un tipo numerico, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3745">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-3746">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-3746">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-3747">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3747">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3748">Se `expression`. Il tipo è assegnabile al tipo di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3748">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-3749">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3749">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3750">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3750">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-3751">`expression`. Tipo è un tipo di valore nullable e il tipo di valore non nullable corrispondente è uguale al tipo di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3751">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-3752">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-3752">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-3753">Se il metodo di implementazione è `null`, il tipo del nodo è `expression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3753">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="384e1-3754">Se `expression`. Tipo non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3754">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-3755">In caso contrario, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3755">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3756">
            <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3756">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-3757">L'operatore più unario non è definito per <paramref name="expression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3757">The unary plus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ UnaryPlus(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3758">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3758">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="384e1-3759">Oggetto <see cref="T:System.Reflection.MethodInfo" /> su cui impostare la proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3759">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3760">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta un'operazione con il più unario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3760">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3761">Oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> la cui proprietà <see cref="P:System.Linq.Expressions.Expression.NodeType" /> è uguale a <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> e le cui proprietà <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> e <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> sono impostate sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3761">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3762">Il <xref:System.Linq.Expressions.UnaryExpression.Method%2A> proprietà dell'oggetto risultante <xref:System.Linq.Expressions.UnaryExpression> è impostato per il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3762">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="384e1-3763">Il <xref:System.Linq.Expressions.Expression.Type%2A> proprietà è impostata per il tipo di nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3763">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="384e1-3764">Se il nodo è elevato, il <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> e <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> siano entrambe `true`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3764">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="384e1-3765">In caso contrario, sono false.</span><span class="sxs-lookup"><span data-stu-id="384e1-3765">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="384e1-3766">Metodo di implementazione</span><span class="sxs-lookup"><span data-stu-id="384e1-3766">Implementing Method</span></span>  
 <span data-ttu-id="384e1-3767">Le regole seguenti determinano il metodo di implementazione per l'operazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3767">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="384e1-3768">Se `method` non `null` e rappresenta un diverso da void, `static` (`Shared` in Visual Basic) metodo che accetta un solo argomento, è il metodo di implementazione per il nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3768">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="384e1-3769">Se `expression`. Tipo è un tipo definito dall'utente che definisce l'operatore più unario il <xref:System.Reflection.MethodInfo> che rappresenta l'operatore è il metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3769">If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3770">In caso contrario, se `expression`. Type è un tipo numerico, il metodo di implementazione è `null`.</span><span class="sxs-lookup"><span data-stu-id="384e1-3770">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="384e1-3771">Tipo di nodo e di eliminazione o Non elevato</span><span class="sxs-lookup"><span data-stu-id="384e1-3771">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="384e1-3772">Se il metodo di implementazione non `null`:</span><span class="sxs-lookup"><span data-stu-id="384e1-3772">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="384e1-3773">Se `expression`. Il tipo è assegnabile al tipo di argomento del metodo di implementazione, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3773">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="384e1-3774">Il tipo del nodo è il tipo restituito del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3774">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="384e1-3775">Se le due condizioni seguenti sono soddisfatti, il nodo è elevato e il tipo del nodo è il tipo nullable che corrisponde al tipo restituito del metodo di implementazione:</span><span class="sxs-lookup"><span data-stu-id="384e1-3775">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="384e1-3776">`expression`. Tipo è un tipo di valore nullable e il tipo di valore non nullable corrispondente è uguale al tipo di argomento del metodo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="384e1-3776">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="384e1-3777">Il tipo restituito del metodo di implementazione è un tipo di valore non nullable.</span><span class="sxs-lookup"><span data-stu-id="384e1-3777">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="384e1-3778">Se il metodo di implementazione è `null`, il tipo del nodo è `expression`. Tipo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3778">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="384e1-3779">Se `expression`. Tipo non nullable, il nodo non è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3779">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="384e1-3780">In caso contrario, il nodo è elevato.</span><span class="sxs-lookup"><span data-stu-id="384e1-3780">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="384e1-3781">
            <paramref name="expression" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3781">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="384e1-3782">
            <paramref name="method" /> non è <see langword="null" /> e il metodo che rappresenta restituisce <see langword="void" />, non è <see langword="static" /> (<see langword="Shared" /> in Visual Basic) o non accetta esattamente un argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3782">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="384e1-3783">
            <paramref name="method" /> è <see langword="null" /> e l'operatore più unario non è definito per <paramref name="expression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3783">
              <paramref name="method" /> is <see langword="null" /> and the unary plus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="384e1-3784">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3784">-or-</span>
          </span>
          <span data-ttu-id="384e1-3785">
            <paramref name="expression" />.Type , o il tipo non nullable corrispondente se si tratta di un tipo nullable, non è assegnabile al tipo di argomento del metodo rappresentato da <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3785">
              <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Unbox (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Unbox(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Unbox(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="384e1-3786">Oggetto <see cref="T:System.Linq.Expressions.Expression" /> di cui eseguire la conversione unboxing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3786">An <see cref="T:System.Linq.Expressions.Expression" /> to unbox.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="384e1-3787">Nuovo oggetto <see cref="T:System.Type" /> dell'espressione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3787">The new <see cref="T:System.Type" /> of the expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3788">Crea un oggetto <see cref="T:System.Linq.Expressions.UnaryExpression" /> che rappresenta una conversione unboxing esplicita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3788">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit unboxing.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3789">Istanza di <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3789">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Variable">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="384e1-3790">Crea un nodo <see cref="T:System.Linq.Expressions.ParameterExpression" /> che può essere usato per identificare un parametro o una variabile in un albero delle espressioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3790">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Variable(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-3791">Tipo di parametro o di variabile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3791">The type of the parameter or variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3792">Crea un nodo <see cref="T:System.Linq.Expressions.ParameterExpression" /> che può essere usato per identificare un parametro o una variabile in un albero delle espressioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3792">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3793">Nodo <see cref="T:System.Linq.Expressions.ParameterExpression" /> con il nome e il tipo specificati</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3793">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Variable(Type ^ type, System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="384e1-3794">Tipo di parametro o di variabile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3794">The type of the parameter or variable.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="384e1-3795">Nome del parametro o della variabile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3795">The name of the parameter or variable.</span>
          </span>
          <span data-ttu-id="384e1-3796">Questo nome viene usato solo a scopo di debug o di stampa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3796">This name is used for debugging or printing purpose only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3797">Crea un nodo <see cref="T:System.Linq.Expressions.ParameterExpression" /> che può essere usato per identificare un parametro o una variabile in un albero delle espressioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3797">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3798">Nodo <see cref="T:System.Linq.Expressions.ParameterExpression" /> con il nome e il tipo specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3798">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitChildren(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">
          <span data-ttu-id="384e1-3799">Istanza di <see cref="T:System.Func`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3799">An instance of <see cref="T:System.Func`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="384e1-3800">Riduce il nodo, quindi chiama il delegato del visitatore sull'espressione ridotta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3800">Reduces the node and then calls the visitor delegate on the reduced expression.</span>
          </span>
          <span data-ttu-id="384e1-3801">Se il nodo non è riducibile, il metodo genera un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3801">The method throws an exception if the node is not reducible.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="384e1-3802">Espressione visitata o espressione che deve sostituirla nell'albero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="384e1-3802">The expression being visited, or an expression which should replace it in the tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="384e1-3803">Eseguire l'override di questo metodo per fornire la logica per esplorare i figli del nodo.</span><span class="sxs-lookup"><span data-stu-id="384e1-3803">Override this method to provide logic to walk the node's children.</span></span> <span data-ttu-id="384e1-3804">Un'implementazione tipica chiamerà visitatore. Visitare su ciascuno dei relativi elementi figlio e, se uno di essi cambiano, deve restituire una nuova copia di se stesso con gli elementi figlio modificati.</span><span class="sxs-lookup"><span data-stu-id="384e1-3804">A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>