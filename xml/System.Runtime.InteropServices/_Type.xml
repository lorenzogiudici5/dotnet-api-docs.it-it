<Type Name="_Type" FullName="System.Runtime.InteropServices._Type">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cc2b0f07d8ee0e9b19c53fc77505b2790109ce2b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39878391" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface _Type" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract _Type" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices._Type" />
  <TypeSignature Language="VB.NET" Value="Public Interface _Type" />
  <TypeSignature Language="C++ CLI" Value="public interface class _Type" />
  <TypeSignature Language="F#" Value="type _Type = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.CLSCompliant(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.Guid("BCA8B44D-AAD6-3A86-8AB7-03349F4F2DA2")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.TypeLibImportClass(typeof(System.Type))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="faeb3-101">Espone i membri pubblici dell'oggetto<see cref="T:System.Type" /> a codice non gestito.</span>
      <span class="sxs-lookup">
        <span data-stu-id="faeb3-101">Exposes the public members of the <see cref="T:System.Type" /> class to the unmanaged code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-102">Questa interfaccia consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-102">This interface is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-103">Questa interfaccia preserva l'ordine vtable il <xref:System.Type?displayProperty=nameWithType> membri accessibili dagli oggetti COM non gestiti della classe.</span><span class="sxs-lookup"><span data-stu-id="faeb3-103">This interface preserves the vtable order of the <xref:System.Type?displayProperty=nameWithType> class members that can be accessed by unmanaged COM objects.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Runtime.InteropServices._Type.Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-104">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.Assembly" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-104">Provides COM objects with version-independent access to the <see cref="P:System.Type.Assembly" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-105">Istanza di <see cref="T:System.Reflection.Assembly" /> che descrive l'assembly contenente il tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-105">An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-106">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-106">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-107">Il <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property get il <xref:System.Reflection.Assembly> in cui è dichiarato il tipo.</span><span class="sxs-lookup"><span data-stu-id="faeb3-107">The <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property gets the <xref:System.Reflection.Assembly> in which the type is declared.</span></span> <span data-ttu-id="faeb3-108">Per i tipi generici, questa proprietà ottiene il <xref:System.Reflection.Assembly> in cui è definito il tipo generico.</span><span class="sxs-lookup"><span data-stu-id="faeb3-108">For generic types, this property gets the <xref:System.Reflection.Assembly> in which the generic type is defined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Runtime.InteropServices._Type.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-109">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-109">Provides COM objects with version-independent access to the <see cref="P:System.Type.AssemblyQualifiedName" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-110">Nome di assembly completo dell'oggetto <see cref="T:System.Type" />, con il nome dell'assembly da cui è stato caricato <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-110">The assembly-qualified name of the <see cref="T:System.Type" />, including the name of the assembly from which the <see cref="T:System.Type" /> was loaded.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-111">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-111">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-112">Il <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> proprietà ottiene il nome qualificato dall'assembly del <xref:System.Type>, incluso il nome dell'assembly da cui il <xref:System.Type> è stato caricato.</span><span class="sxs-lookup"><span data-stu-id="faeb3-112">The <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> property gets the assembly-qualified name of the <xref:System.Type>, including the name of the assembly from which the <xref:System.Type> was loaded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.TypeAttributes" Usage="System.Runtime.InteropServices._Type.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-113">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.Attributes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-113">Provides COM objects with version-independent access to the <see cref="P:System.Type.Attributes" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-114">Oggetto <see cref="T:System.Reflection.TypeAttributes" /> che rappresenta il set di attributi di <see cref="T:System.Type" />, a meno che <see cref="T:System.Type" /> non rappresenti un parametro di tipo generico. In tal caso, il valore non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-114">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-115">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-115">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-116">Il <xref:System.Type.Attributes%2A?displayProperty=nameWithType> proprietà ottiene gli attributi associati di <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-116">The <xref:System.Type.Attributes%2A?displayProperty=nameWithType> property gets the attributes associated with the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Runtime.InteropServices._Type.BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-117">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.BaseType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-117">Provides COM objects with version-independent access to the <see cref="P:System.Type.BaseType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-118">
            <see cref="T:System.Type" /> da cui il <see cref="T:System.Type" /> corrente eredita direttamente o <see langword="null" /> se il <see langword="Type" /> corrente rappresenta la classe <see cref="T:System.Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-118">The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-119">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-119">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-120">Il <xref:System.Type.BaseType%2A?displayProperty=nameWithType> proprietà ottiene il tipo da cui corrente <xref:System.Type> eredita direttamente.</span><span class="sxs-lookup"><span data-stu-id="faeb3-120">The <xref:System.Type.BaseType%2A?displayProperty=nameWithType> property gets the type from which the current <xref:System.Type> directly inherits.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Runtime.InteropServices._Type.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-121">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.DeclaringType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-121">Provides COM objects with version-independent access to the <see cref="P:System.Type.DeclaringType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-122">Oggetto <see cref="T:System.Type" /> per la classe che dichiara questo membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-122">The <see cref="T:System.Type" /> object for the class that declares this member.</span>
          </span>
          <span data-ttu-id="faeb3-123">Se il tipo è annidato, tale proprietà restituisce il tipo di inclusione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-123">If the type is a nested type, this property returns the enclosing type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-124">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-124">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-125">Il <xref:System.Type.DeclaringType%2A?displayProperty=nameWithType> proprietà ottiene la classe che dichiara questo membro.</span><span class="sxs-lookup"><span data-stu-id="faeb3-125">The <xref:System.Type.DeclaringType%2A?displayProperty=nameWithType> property gets the class that declares this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-126">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.Equals" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-126">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.Equals" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-127">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-127">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-128">Il <xref:System.Type.Equals%2A?displayProperty=nameWithType> metodo determina se il tipo di sistema sottostante dell'oggetto corrente <xref:System.Type> corrisponde al tipo di sistema sottostante dell'oggetto specificato <xref:System.Object> o <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-128">The <xref:System.Type.Equals%2A?displayProperty=nameWithType> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Object> or <xref:System.Type>.</span></span>  
  
 <span data-ttu-id="faeb3-129">.</span><span class="sxs-lookup"><span data-stu-id="faeb3-129">.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : obj -&gt; bool" Usage="_Type.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="faeb3-130">
            <see cref="T:System.Object" /> il cui tipo di sistema sottostante deve essere confrontato con quello del <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-130">The <see cref="T:System.Object" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-131">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.Equals(System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-131">Provides COM objects with version-independent access to the <see cref="M:System.Type.Equals(System.Object)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-132">
            <see langword="true" /> se il tipo di sistema sottostante di <paramref name="o" /> coincide con il tipo di sistema sottostante del <see cref="T:System.Type" /> corrente. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-132">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-133">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-133">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-134">Il <xref:System.Type.Equals%2A?displayProperty=nameWithType> metodo determina se il tipo di sistema sottostante dell'oggetto corrente <xref:System.Type> corrisponde al tipo di sistema sottostante dell'oggetto specificato <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-134">The <xref:System.Type.Equals%2A?displayProperty=nameWithType> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.Equals(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (o As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(Type ^ o);" />
      <MemberSignature Language="F#" Value="abstract member Equals : Type -&gt; bool" Usage="_Type.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="faeb3-135">
            <see cref="T:System.Type" /> il cui tipo di sistema sottostante deve essere confrontato con quello del <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-135">The <see cref="T:System.Type" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-136">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.Equals(System.Type)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-136">Provides COM objects with version-independent access to the <see cref="M:System.Type.Equals(System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-137">
            <see langword="true" /> se il tipo di sistema sottostante di <paramref name="o" /> coincide con il tipo di sistema sottostante del <see cref="T:System.Type" /> corrente. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-137">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-138">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-138">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-139">Il <xref:System.Type.Equals%2A?displayProperty=nameWithType> metodo determina se il tipo di sistema sottostante dell'oggetto corrente <xref:System.Type> corrisponde al tipo di sistema sottostante dell'oggetto specificato <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-139">The <xref:System.Type.Equals%2A?displayProperty=nameWithType> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindInterfaces (filter As TypeFilter, filterCriteria As Object) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ FindInterfaces(System::Reflection::TypeFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]" Usage="_Type.FindInterfaces (filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filter">
          <span data-ttu-id="faeb3-140">Delegato <see cref="T:System.Reflection.TypeFilter" /> che confronta le interfacce con <c>filterCriteria</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-140">The <see cref="T:System.Reflection.TypeFilter" /> delegate that compares the interfaces against <c>filterCriteria</c>.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="faeb3-141">Criteri di ricerca che determinano se un'interfaccia deve essere inclusa nella matrice restituita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-141">The search criteria that determines whether an interface should be included in the returned array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-142">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-142">Provides COM objects with version-independent access to the <see cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-143">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta un elenco filtrato di interfacce implementate o ereditate dal <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-143">An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="faeb3-144">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-144">-or-</span>
          </span>
          <span data-ttu-id="faeb3-145">Matrice vuota di tipo <see cref="T:System.Type" />, se interfacce corrispondenti al filtro non vengono implementate o ereditate dal <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-145">An empty array of type <see cref="T:System.Type" />, if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-146">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-146">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-147">Il <xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType> metodo restituisce una matrice di <xref:System.Type> gli oggetti che rappresentano un elenco filtrato di interfacce implementate o ereditate dall'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-147">The <xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType> method returns an array of <xref:System.Type> objects representing a filtered list of interfaces implemented or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindMembers (memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ FindMembers(System::Reflection::MemberTypes memberType, System::Reflection::BindingFlags bindingAttr, System::Reflection::MemberFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]" Usage="_Type.FindMembers (memberType, bindingAttr, filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="memberType">
          <span data-ttu-id="faeb3-148">Oggetto <see langword="MemberTypes" /> che indica il tipo di membro da cercare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-148">A <see langword="MemberTypes" /> object indicating the type of member to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-149">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-149">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-150">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-150">-or-</span>
          </span>
          <span data-ttu-id="faeb3-151">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-151">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="faeb3-152">Delegato che esegue il confronto e restituisce <see langword="true" /> se il membro in esame corrisponde a <c>filterCriteria</c>, in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-152">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <c>filterCriteria</c> and <see langword="false" /> otherwise.</span>
          </span>
          <span data-ttu-id="faeb3-153">È possibile usare i delegati <see langword="FilterAttribute" />, <see langword="FilterName" /> e <see langword="FilterNameIgnoreCase" /> forniti da questa classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-153">You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class.</span>
          </span>
          <span data-ttu-id="faeb3-154">Come criteri di ricerca, il primo usa i campi di <see langword="FieldAttributes" />, <see langword="MethodAttributes" /> e <see langword="MethodImplAttributes" /> e gli altri due delegati usano gli oggetti <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-154">The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="faeb3-155">Criteri di ricerca che determinano se un membro viene restituito nella matrice di oggetti <see langword="MemberInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-155">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</span>
          </span>
          <span data-ttu-id="faeb3-156">I campi di <see langword="FieldAttributes" />, <see langword="MethodAttributes" /> e <see langword="MethodImplAttributes" /> possono essere usati assieme al delegato <see langword="FilterAttribute" /> fornito da questa classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-156">The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-157">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-157">Provides COM objects with version-independent access to the <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-158">Matrice filtrata di oggetti <see cref="T:System.Reflection.MemberInfo" /> del tipo di membro specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-158">A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          </span>
          <span data-ttu-id="faeb3-159">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-159">-or-</span>
          </span>
          <span data-ttu-id="faeb3-160">Matrice vuota di tipo <see cref="T:System.Reflection.MemberInfo" />, se l'oggetto <see cref="T:System.Type" /> corrente non dispone di membri del tipo <paramref name="memberType" /> corrispondenti ai criteri del filtro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-160">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-161">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-161">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-162">Il <xref:System.Type.FindMembers%2A?displayProperty=nameWithType> metodo restituisce una matrice filtrata di <xref:System.Reflection.MemberInfo> gli oggetti del tipo di membro specificato.</span><span class="sxs-lookup"><span data-stu-id="faeb3-162">The <xref:System.Type.FindMembers%2A?displayProperty=nameWithType> method returns a filtered array of <xref:System.Reflection.MemberInfo> objects of the specified member type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.FullName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Runtime.InteropServices._Type.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-163">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.FullName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-163">Provides COM objects with version-independent access to the <see cref="P:System.Type.FullName" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-164">Stringa contenente il nome completo della classe <see cref="T:System.Type" />, incluso lo spazio dei nomi di <see cref="T:System.Type" />, ma non l'assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-164">A string containing the fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" /> but not the assembly.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-165">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-165">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-166">Il <xref:System.Type.FullName%2A?displayProperty=nameWithType> proprietà ottiene il nome completo del <xref:System.Type>, incluso lo spazio dei nomi di <xref:System.Type> ma non l'assembly.</span><span class="sxs-lookup"><span data-stu-id="faeb3-166">The <xref:System.Type.FullName%2A?displayProperty=nameWithType> property gets the fully qualified name of the <xref:System.Type>, including the namespace of the <xref:System.Type> but not the assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetArrayRank();" />
      <MemberSignature Language="F#" Value="abstract member GetArrayRank : unit -&gt; int" Usage="_Type.GetArrayRank " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-167">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetArrayRank" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-167">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetArrayRank" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-168">
            <see cref="T:System.Int32" /> che contiene il numero di dimensioni dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-168">An <see cref="T:System.Int32" /> containing the number of dimensions in the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-169">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-169">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-170">Il <xref:System.Type.GetArrayRank%2A?displayProperty=nameWithType> metodo ottiene il numero di dimensioni in un <xref:System.Array>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-170">The <xref:System.Type.GetArrayRank%2A?displayProperty=nameWithType> method gets the number of dimensions in an <xref:System.Array>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-171">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.GetConstructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-171">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetConstructor" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-172">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-172">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-173">Il <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> metodo ottiene un costruttore specifico dell'istanza corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-173">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method gets a specific constructor of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (types As Type()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::ConstructorInfo ^ GetConstructor(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo" Usage="_Type.GetConstructor types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types">
          <span data-ttu-id="faeb3-174">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano il numero, l'ordine e il tipo dei parametri per il costruttore desiderato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-174">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.</span>
          </span>
          <span data-ttu-id="faeb3-175">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-175">-or-</span>
          </span>
          <span data-ttu-id="faeb3-176">Matrice vuota di oggetti <see cref="T:System.Type" /> per ottenere un costruttore che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-176">An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="faeb3-177">Tale matrice vuota viene fornita dal campo <see langword="static" /><see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-177">Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-178">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetConstructor(System.Type[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-178">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Type[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-179">Oggetto <see cref="T:System.Reflection.ConstructorInfo" /> che rappresenta il costruttore dell'istanza pubblica i cui parametri corrispondono ai tipi nella matrice del tipo di parametro, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-179">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-180">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-180">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-181">Il <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> metodo cerca un costruttore di istanza pubblica i cui parametri corrispondono ai tipi nella matrice specificata.</span><span class="sxs-lookup"><span data-stu-id="faeb3-181">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method searches for a public instance constructor whose parameters match the types in the specified array.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="_Type.GetConstructor (bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-182">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-182">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-183">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-183">-or-</span>
          </span>
          <span data-ttu-id="faeb3-184">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-184">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="faeb3-185">Oggetto <see cref="T:System.Reflection.Binder" /> che definisce una serie di proprietà e consente l'associazione, che può implicare la selezione di un metodo di overload, l'assegnazione forzata dei tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-185">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="faeb3-186">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-186">-or-</span>
          </span>
          <span data-ttu-id="faeb3-187">
            <see langword="null" />, per utilizzare <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-187">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="faeb3-188">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta numero, ordine e tipo dei parametri relativi al costruttore da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-188">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="faeb3-189">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-189">-or-</span>
          </span>
          <span data-ttu-id="faeb3-190">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero Type[] types = new Type[0]) per ottenere un costruttore che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-190">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="faeb3-191">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-191">-or-</span>
          </span>
          <span data-ttu-id="faeb3-192">
            <see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-192">
              <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="faeb3-193">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresentano gli attributi associati all'elemento corrispondente nella matrice del tipo di parametro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-193">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array.</span>
          </span>
          <span data-ttu-id="faeb3-194">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-194">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-195">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-195">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-196">Oggetto <see cref="T:System.Reflection.ConstructorInfo" /> che rappresenta il costruttore corrispondente ai requisiti specificati, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-196">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-197">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-197">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-198">Il <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> metodo cerca un costruttore i cui parametri corrispondono ai modificatori, usando i vincoli di binding specificati e i tipi di argomento specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-198">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="_Type.GetConstructor (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-199">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-199">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-200">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-200">-or-</span>
          </span>
          <span data-ttu-id="faeb3-201">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-201">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="faeb3-202">Oggetto <see cref="T:System.Reflection.Binder" /> che definisce una serie di proprietà e consente l'associazione, che può implicare la selezione di un metodo di overload, l'assegnazione forzata dei tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-202">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="faeb3-203">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-203">-or-</span>
          </span>
          <span data-ttu-id="faeb3-204">
            <see langword="null" />, per utilizzare <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-204">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="faeb3-205">Oggetto <see cref="T:System.Reflection.CallingConventions" /> che specifica l'insieme di regole da utilizzare per l'ordine e il layout degli argomenti, la modalità di passaggio del valore restituito, i registri utilizzati per gli argomenti e la pulizia dello stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-205">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="faeb3-206">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta numero, ordine e tipo dei parametri relativi al costruttore da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-206">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="faeb3-207">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-207">-or-</span>
          </span>
          <span data-ttu-id="faeb3-208">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero Type[] types = new Type[0]) per ottenere un costruttore che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-208">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="faeb3-209">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresenta gli attributi associati all'elemento corrispondente nella matrice <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-209">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="faeb3-210">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-210">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-211">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-211">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-212">Oggetto <see cref="T:System.Reflection.ConstructorInfo" /> che rappresenta il costruttore corrispondente ai requisiti specificati, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-212">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-213">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-213">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-214">Il <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> metodo cerca un costruttore i cui parametri corrispondono ai modificatori, usando i vincoli di binding specificati e la convenzione di chiamata specificata e i tipi di argomento specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-214">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructors">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-215">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.GetConstructors" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-215">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetConstructors" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-216">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-216">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-217">Il <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> metodo ottiene i costruttori della classe corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-217">The <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> method gets the constructors of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors () As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors();" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]" Usage="_Type.GetConstructors " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-218">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetConstructors" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-218">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructors" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-219">Matrice di oggetti <see cref="T:System.Reflection.ConstructorInfo" /> che rappresentano tutti i costruttori di istanza pubblici definiti per l'oggetto <see cref="T:System.Type" /> corrente, senza l'inizializzatore di tipo (costruttore statico).</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-219">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor).</span>
          </span>
          <span data-ttu-id="faeb3-220">Se per la classe <see cref="T:System.Type" /> corrente non sono definiti costruttori di istanza pubblici o se la classe <see cref="T:System.Type" /> corrente rappresenta un parametro di tipo di una definizione di metodo o tipo generico, viene restituita una matrice vuota di tipo <see cref="T:System.Reflection.ConstructorInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-220">If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter of a generic type or method definition, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-221">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-221">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-222">Il <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> metodo restituisce tutti i costruttori pubblici definiti per l'oggetto <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-222">The <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> method returns all the public constructors defined for the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="_Type.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-223">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-223">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-224">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-224">-or-</span>
          </span>
          <span data-ttu-id="faeb3-225">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-225">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-226">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-226">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-227">Matrice di oggetti <see cref="T:System.Reflection.ConstructorInfo" /> che rappresentano tutti i costruttori definiti per l'oggetto <see cref="T:System.Type" /> corrente corrispondente ai vincoli di binding specificati, compreso l'inizializzatore di tipo, se definito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-227">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined.</span>
          </span>
          <span data-ttu-id="faeb3-228">Restituisce una matrice vuota di tipo <see cref="T:System.Reflection.ConstructorInfo" /> se per la classe<see cref="T:System.Type" /> corrente non sono definiti costruttori, se nessuno dei costruttori definiti corrisponde ai vincoli di associazione o se la classe <see cref="T:System.Type" /> corrente rappresenta un parametro di tipo di una definizione di metodo o tipo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-228">Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter of a generic type or method definition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-229">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-229">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-230">Il <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> metodo cerca i costruttori definiti per l'oggetto <xref:System.Type>, usando l'oggetto <xref:System.Reflection.BindingFlags>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-230">The <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> method searches for the constructors defined for the current <xref:System.Type>, using the specified <xref:System.Reflection.BindingFlags>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-231">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-231">Provides COM objects with version-independent access to the <see cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-232">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-232">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-233">Il <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> metodo restituisce tutti gli attributi applicati a questo membro.</span><span class="sxs-lookup"><span data-stu-id="faeb3-233">The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> method returns all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : bool -&gt; obj[]" Usage="_Type.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="faeb3-234">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-234">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-235">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-235">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-236">Matrice degli attributi personalizzati applicati a questo membro o matrice con zero (0) elementi se non è stato applicato alcun attributo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-236">An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-237">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-237">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-238">Il <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> metodo restituisce tutti gli attributi applicati a questo membro.</span><span class="sxs-lookup"><span data-stu-id="faeb3-238">The <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> method returns all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : Type * bool -&gt; obj[]" Usage="_Type.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="faeb3-239">Tipo di attributo da cercare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-239">The type of attribute to search for.</span>
          </span>
          <span data-ttu-id="faeb3-240">Vengono restituiti solo gli attributi assegnabili a questo tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-240">Only attributes that are assignable to this type are returned.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="faeb3-241">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-241">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-242">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-242">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-243">Matrice degli attributi personalizzati applicati a questo membro o matrice con zero (0) elementi se non è stato applicato alcun attributo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-243">An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-244">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-244">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-245">Il <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> metodo restituisce tutti gli attributi applicati a questo membro.</span><span class="sxs-lookup"><span data-stu-id="faeb3-245">The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> method returns all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetDefaultMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDefaultMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetDefaultMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetDefaultMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-246">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetDefaultMembers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-246">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetDefaultMembers" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-247">Matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano tutti i membri predefiniti dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-247">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="faeb3-248">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-248">-or-</span>
          </span>
          <span data-ttu-id="faeb3-249">Matrice vuota di tipo <see cref="T:System.Reflection.MemberInfo" />, se per l'oggetto <see cref="T:System.Type" /> corrente non esistono membri predefiniti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-249">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-250">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-250">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-251">Il <xref:System.Type.GetDefaultMembers%2A?displayProperty=nameWithType> metodo cerca i membri definiti per l'oggetto <xref:System.Type> cui <xref:System.Reflection.DefaultMemberAttribute> è impostata.</span><span class="sxs-lookup"><span data-stu-id="faeb3-251">The <xref:System.Type.GetDefaultMembers%2A?displayProperty=nameWithType> method searches for the members defined for the current <xref:System.Type> whose <xref:System.Reflection.DefaultMemberAttribute> is set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="abstract member GetElementType : unit -&gt; Type" Usage="_Type.GetElementType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-252">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetElementType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-252">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetElementType" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-253">
            <see cref="T:System.Type" /> dell'oggetto incluso o a cui fa riferimento la matrice, il puntatore o il tipo di riferimento corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-253">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</span>
          </span>
          <span data-ttu-id="faeb3-254">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-254">-or-</span>
          </span>
          <span data-ttu-id="faeb3-255">
            <see langword="null" /> se la classe <see cref="T:System.Type" /> corrente non è una matrice o un puntatore, se non viene passata per riferimento oppure se rappresenta un tipo generico o un parametro di tipo di una definizione di metodo o tipo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-255">
              <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter of a generic type or method definition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-256">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-256">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-257">Il <xref:System.Type.GetElementType%2A?displayProperty=nameWithType> restituzione del metodo di <xref:System.Type> dell'oggetto incluso o a cui fa riferimento il tipo di matrice, puntatore o riferimento corrente.</span><span class="sxs-lookup"><span data-stu-id="faeb3-257">The <xref:System.Type.GetElementType%2A?displayProperty=nameWithType> method returns the <xref:System.Type> of the object encompassed or referred to by the current array, pointer or reference type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvent">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-258">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.GetEvent" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-258">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetEvent" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-259">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-259">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-260">Il <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> metodo recupera un evento specifico dichiarato o ereditato dall'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-260">The <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method gets a specific event declared or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::EventInfo ^ GetEvent(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string -&gt; System.Reflection.EventInfo" Usage="_Type.GetEvent name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-261">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-261">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-262">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-262">-or-</span>
          </span>
          <span data-ttu-id="faeb3-263">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-263">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-264">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetEvent(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-264">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvent(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-265">Matrice di oggetti <see cref="T:System.Reflection.EventInfo" /> che rappresentano tutti gli eventi dichiarati o ereditati dalla classe <see cref="T:System.Type" /> corrente e che corrispondono ai vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-265">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="faeb3-266">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-266">-or-</span>
          </span>
          <span data-ttu-id="faeb3-267">Matrice vuota di tipo <see cref="T:System.Reflection.EventInfo" />, se l'oggetto <see cref="T:System.Type" /> corrente non dispone di eventi oppure se nessuno degli eventi corrisponde ai vincoli di binding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-267">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-268">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-268">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-269">Il <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> metodo cerca gli eventi dichiarati o ereditati dall'oggetto corrente <xref:System.Type>, usando i vincoli di binding specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-269">The <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method searches for events that are declared or inherited by the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="_Type.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-270">Classe <see cref="T:System.String" /> contenente il nome di un evento che viene dichiarato o ereditato dalla classe <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-270">The <see cref="T:System.String" /> containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-271">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-271">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-272">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-272">-or-</span>
          </span>
          <span data-ttu-id="faeb3-273">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-273">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-274">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-274">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-275">Oggetto <see cref="T:System.Reflection.EventInfo" /> che rappresenta l'evento specificato dichiarato o ereditato dalla classe <see cref="T:System.Type" /> corrente, se disponibile; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-275">The <see cref="T:System.Reflection.EventInfo" /> object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-276">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-276">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-277">Il <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> restituzione del metodo di <xref:System.Reflection.EventInfo> oggetto che rappresenta l'evento specificato, usando i vincoli di binding specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-277">The <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method returns the <xref:System.Reflection.EventInfo> object representing the specified event, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-278">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.GetEvents" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-278">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetEvents" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-279">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-279">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-280">Il <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> metodo ottiene gli eventi dichiarati o ereditati dall'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-280">The <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> method gets the events that are declared or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="_Type.GetEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-281">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetEvents" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-281">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvents" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-282">Matrice di oggetti <see cref="T:System.Reflection.EventInfo" /> che rappresentano tutti gli eventi pubblici dichiarati o ereditati dalla classe <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-282">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="faeb3-283">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-283">-or-</span>
          </span>
          <span data-ttu-id="faeb3-284">Matrice vuota di tipo <see cref="T:System.Reflection.EventInfo" />, se per l'oggetto <see cref="T:System.Type" /> corrente non esistono eventi pubblici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-284">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-285">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-285">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-286">Il <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> metodo restituisce tutti gli eventi pubblici dichiarati o ereditati dall'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-286">The <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> method returns all the public events that are declared or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="_Type.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-287">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-287">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-288">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-288">-or-</span>
          </span>
          <span data-ttu-id="faeb3-289">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-289">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-290">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-290">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-291">Matrice di oggetti <see cref="T:System.Reflection.EventInfo" /> che rappresentano tutti gli eventi dichiarati o ereditati dalla classe <see cref="T:System.Type" /> corrente e che corrispondono ai vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-291">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="faeb3-292">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-292">-or-</span>
          </span>
          <span data-ttu-id="faeb3-293">Matrice vuota di tipo <see cref="T:System.Reflection.EventInfo" />, se l'oggetto <see cref="T:System.Type" /> corrente non dispone di eventi oppure se nessuno degli eventi corrisponde ai vincoli di binding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-293">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-294">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-294">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-295">Il <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> metodo cerca gli eventi dichiarati o ereditati dall'oggetto corrente <xref:System.Type>, usando i vincoli di binding specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-295">The <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> method searches for events that are declared or inherited by the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-296">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.GetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-296">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetField" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-297">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-297">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-298">Il <xref:System.Type.GetField%2A?displayProperty=nameWithType> metodo ottiene un campo specifico dell'istanza corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-298">The <xref:System.Type.GetField%2A?displayProperty=nameWithType> method gets a specific field of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::FieldInfo ^ GetField(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string -&gt; System.Reflection.FieldInfo" Usage="_Type.GetField name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-299">
            <see cref="T:System.String" /> contenente il nome del campo di dati da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-299">The <see cref="T:System.String" /> containing the name of the data field to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-300">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetField(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-300">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetField(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-301">Oggetto <see cref="T:System.Reflection.FieldInfo" /> che rappresenta il campo pubblico con il nome specificato, se disponibile. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-301">A <see cref="T:System.Reflection.FieldInfo" /> object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-302">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-302">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-303">Il <xref:System.Type.GetField%2A?displayProperty=nameWithType> metodo cerca il campo pubblico con il nome specificato.</span><span class="sxs-lookup"><span data-stu-id="faeb3-303">The <xref:System.Type.GetField%2A?displayProperty=nameWithType> method searches for the public field with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="_Type.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-304">
            <see cref="T:System.String" /> contenente il nome del campo di dati da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-304">The <see cref="T:System.String" /> containing the name of the data field to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-305">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-305">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-306">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-306">-or-</span>
          </span>
          <span data-ttu-id="faeb3-307">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-307">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-308">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-308">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-309">Oggetto <see cref="T:System.Reflection.FieldInfo" /> che rappresenta il campo corrispondente ai requisiti specificati, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-309">A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-310">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-310">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-311">Il <xref:System.Type.GetField%2A?displayProperty=nameWithType> metodo cerca il campo specificato, usando i vincoli di binding specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-311">The <xref:System.Type.GetField%2A?displayProperty=nameWithType> method searches for the specified field, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFields">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-312">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.GetFields" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-312">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetFields" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-313">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-313">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-314">Il <xref:System.Type.GetFields%2A?displayProperty=nameWithType> metodo ottiene un campo specifico dell'istanza corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-314">The <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method gets a specific field of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields () As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields();" />
      <MemberSignature Language="F#" Value="abstract member GetFields : unit -&gt; System.Reflection.FieldInfo[]" Usage="_Type.GetFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-315">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetFields" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-315">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetFields" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-316">Matrice di oggetti <see cref="T:System.Reflection.FieldInfo" /> che rappresentano tutti i campi pubblici definiti per l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-316">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="faeb3-317">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-317">-or-</span>
          </span>
          <span data-ttu-id="faeb3-318">Matrice vuota di tipo <see cref="T:System.Reflection.FieldInfo" />, se non è definito alcun campo pubblico per l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-318">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-319">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-319">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-320">Il <xref:System.Type.GetFields%2A?displayProperty=nameWithType> metodo restituisce tutti i campi pubblici dell'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-320">The <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method returns all the public fields of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="_Type.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-321">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-321">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-322">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-322">-or-</span>
          </span>
          <span data-ttu-id="faeb3-323">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-323">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-324">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-324">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-325">Matrice di oggetti <see cref="T:System.Reflection.FieldInfo" /> che rappresentano tutti i campi definiti per l'oggetto <see cref="T:System.Type" /> corrente corrispondente ai vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-325">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="faeb3-326">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-326">-or-</span>
          </span>
          <span data-ttu-id="faeb3-327">Matrice vuota di tipo <see cref="T:System.Reflection.FieldInfo" />, se non è definito alcun campo per l'oggetto <see cref="T:System.Type" /> corrente oppure se nessuno dei campi definiti corrisponde ai vincoli di binding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-327">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-328">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-328">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-329">Il <xref:System.Type.GetFields%2A?displayProperty=nameWithType> metodo cerca i campi definiti per l'oggetto <xref:System.Type>, usando i vincoli di binding specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-329">The <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method searches for the fields defined for the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode();" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : unit -&gt; int" Usage="_Type.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-330">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetHashCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-330">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetHashCode" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-331">
            <see cref="T:System.Int32" /> contenente il codice hash dell'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-331">An <see cref="T:System.Int32" /> containing the hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-332">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-332">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-333">Metodo <xref:System.Type.GetHashCode%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-333">The <xref:System.Type.GetHashCode%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIDsOfNames">
      <MemberSignature Language="C#" Value="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId);" />
      <MemberSignature Language="F#" Value="abstract member GetIDsOfNames :  * nativeint * uint32 * uint32 * nativeint -&gt; unit" Usage="_Type.GetIDsOfNames (riid, rgszNames, cNames, lcid, rgDispId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="faeb3-334">Riservato per utilizzi futuri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-334">Reserved for future use.</span>
          </span>
          <span data-ttu-id="faeb3-335">Deve essere IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-335">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="faeb3-336">Matrice di nomi passata di cui eseguire il mapping.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-336">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="faeb3-337">Conteggio dei nomi di cui eseguire il mapping.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-337">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="faeb3-338">Contesto delle impostazioni locali in cui interpretare i nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-338">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="faeb3-339">Matrice allocata dal chiamante che riceve gli ID corrispondenti ai nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-339">Caller-allocated array that receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-340">Esegue il mapping di un set di nomi a un set corrispondente di ID dispatch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-340">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-341">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-341">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="faeb3-342">Per altre informazioni sulle `IDispatch::GetIDsOfNames`, consultare la MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="faeb3-342">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInterface">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-343">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.GetInterface" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-343">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetInterface" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-344">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-344">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-345">Il <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> metodo ottiene un'interfaccia specifica implementata o ereditata dall'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-345">The <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> method gets a specific interface implemented or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterface(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetInterface(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string -&gt; Type" Usage="_Type.GetInterface name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-346">
            <see cref="T:System.String" /> contenente il nome dell'interfaccia da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-346">The <see cref="T:System.String" /> containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="faeb3-347">Per le interfacce generiche, si tratta del nome alterato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-347">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-348">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetInterface(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-348">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterface(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-349">Oggetto <see cref="T:System.Type" /> che rappresenta l'interfaccia con il nome specificato, implementata o ereditata dal <see cref="T:System.Type" /> corrente, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-349">A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-350">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-350">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-351">Il <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> metodo cerca l'interfaccia con il nome specificato...</span><span class="sxs-lookup"><span data-stu-id="faeb3-351">The <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> method searches for the interface with the specified name..</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string * bool -&gt; Type" Usage="_Type.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-352">
            <see cref="T:System.String" /> contenente il nome dell'interfaccia da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-352">The <see cref="T:System.String" /> containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="faeb3-353">Per le interfacce generiche, si tratta del nome alterato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-353">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="faeb3-354">
            <see langword="true" /> per eseguire una ricerca di <c>name</c> senza fare distinzione tra maiuscole e minuscole.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-354">
              <see langword="true" /> to perform a case-insensitive search for <c>name</c>.</span>
          </span>
          <span data-ttu-id="faeb3-355">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-355">-or-</span>
          </span>
          <span data-ttu-id="faeb3-356">
            <see langword="false" /> per eseguire una ricerca di <c>name</c> facendo distinzione tra maiuscole e minuscole.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-356">
              <see langword="false" /> to perform a case-sensitive search for <c>name</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-357">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-357">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-358">Oggetto <see cref="T:System.Type" /> che rappresenta l'interfaccia con il nome specificato, implementata o ereditata dal <see cref="T:System.Type" /> corrente, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-358">A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-359">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-359">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-360">Il <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> metodo cercherà l'interfaccia specificata, che specifica se eseguire una ricerca tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="faeb3-360">The <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> method searches for the specified interface, specifying whether to do a case-sensitive search.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="_Type.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="faeb3-361">
            <see cref="T:System.Type" /> dell'interfaccia da cui recuperare un mapping.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-361">The <see cref="T:System.Type" /> of the interface of which to retrieve a mapping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-362">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetInterfaceMap(System.Type)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-362">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterfaceMap(System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-363">Oggetto <see cref="T:System.Reflection.InterfaceMapping" /> che rappresenta il mapping di interfaccia per <paramref name="interfaceType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-363">An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for <paramref name="interfaceType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-364">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-364">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-365">Il <xref:System.Type.GetInterfaceMap%2A?displayProperty=nameWithType> metodo restituisce un mapping di interfaccia per il tipo di interfaccia specificato.</span><span class="sxs-lookup"><span data-stu-id="faeb3-365">The <xref:System.Type.GetInterfaceMap%2A?displayProperty=nameWithType> method returns an interface mapping for the specified interface type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaces : unit -&gt; Type[]" Usage="_Type.GetInterfaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-366">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetInterfaces" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-366">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterfaces" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-367">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano tutte le interfacce implementate o ereditate dall'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-367">An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="faeb3-368">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-368">-or-</span>
          </span>
          <span data-ttu-id="faeb3-369">Matrice vuota di tipo <see cref="T:System.Type" />, se non vengono implementate o ereditate interfacce dall'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-369">An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-370">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-370">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-371">Il <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType> metodo ottiene tutte le interfacce implementate o ereditate dall'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-371">The <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType> method gets all the interfaces implemented or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-372">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.GetMember" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-372">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMember" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-373">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-373">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-374">Il <xref:System.Type.GetMember%2A?displayProperty=nameWithType> metodo ottiene i membri specificati dell'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-374">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method gets the specified members of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-375">
            <see cref="T:System.String" /> contenente il nome del membro pubblico da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-375">The <see cref="T:System.String" /> containing the name of the public members to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-376">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetMember(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-376">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-377">Matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano i membri pubblici con il nome specificato, se presenti; in caso contrario, matrice vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-377">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-378">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-378">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-379">Il <xref:System.Type.GetMember%2A?displayProperty=nameWithType> metodo cerca i membri pubblici con il nome specificato.</span><span class="sxs-lookup"><span data-stu-id="faeb3-379">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method searches for the public members with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMember (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-380">
            <see cref="T:System.String" /> contenente il nome dei membri da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-380">The <see cref="T:System.String" /> containing the name of the members to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-381">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-381">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-382">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-382">-or-</span>
          </span>
          <span data-ttu-id="faeb3-383">Zero, per restituire una matrice vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-383">Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-384">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-384">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-385">Matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano i membri pubblici con il nome specificato, se presenti; in caso contrario, matrice vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-385">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-386">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-386">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-387">Il <xref:System.Type.GetMember%2A?displayProperty=nameWithType> cerca i membri specificati, usando i vincoli di binding specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-387">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method searches for the specified members, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-388">
            <see cref="T:System.String" /> contenente il nome dei membri da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-388">The <see cref="T:System.String" /> containing the name of the members to get.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="faeb3-389">Valore <see cref="T:System.Reflection.MemberTypes" /> da cercare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-389">The <see cref="T:System.Reflection.MemberTypes" /> value to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-390">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-390">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-391">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-391">-or-</span>
          </span>
          <span data-ttu-id="faeb3-392">Zero, per restituire una matrice vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-392">Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-393">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-393">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-394">Matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano i membri pubblici con il nome specificato, se presenti; in caso contrario, matrice vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-394">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-395">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-395">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-396">Il <xref:System.Type.GetMember%2A?displayProperty=nameWithType> cerca i membri specificati del tipo di membro specificato, usando i vincoli di binding specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-396">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method searches for the specified members of the specified member type, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMembers">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-397">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.GetMembers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-397">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMembers" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-398">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-398">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-399">Il <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> metodo ottiene i membri (proprietà, metodi, campi, eventi e così via) dell'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-399">The <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method gets the members (properties, methods, fields, events, and so on) of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-400">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetMembers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-400">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMembers" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-401">Matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano tutti i membri pubblici dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-401">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="faeb3-402">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-402">-or-</span>
          </span>
          <span data-ttu-id="faeb3-403">Matrice vuota di tipo <see cref="T:System.Reflection.MemberInfo" />, se per l'oggetto <see cref="T:System.Type" /> corrente non esistono membri pubblici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-403">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-404">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-404">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-405">Il <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> metodo restituisce tutti i membri pubblici dell'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-405">The <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method returns all the public members of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-406">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-406">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-407">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-407">-or-</span>
          </span>
          <span data-ttu-id="faeb3-408">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-408">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-409">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetMembers(System.Reflection.BindingFlags)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-409">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMembers(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-410">Matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano tutti i membri definiti per l'oggetto <see cref="T:System.Type" /> corrente corrispondenti ai vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-410">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="faeb3-411">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-411">-or-</span>
          </span>
          <span data-ttu-id="faeb3-412">Matrice vuota di tipo <see cref="T:System.Reflection.MemberInfo" />, se non vi sono membri definiti per l'oggetto <see cref="T:System.Type" /> corrente oppure se nessuno dei membri definiti corrisponde ai vincoli di binding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-412">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-413">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-413">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-414">Il <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> metodo cerca i membri definiti per l'oggetto <xref:System.Type>, usando i vincoli di binding specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-414">The <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method searches for the members defined for the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-415">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.GetMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-415">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMethod" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-416">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-416">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-417">Metodo <xref:System.Type.GetMethod%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-417">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-418">
            <see cref="T:System.String" /> contenente il nome del metodo pubblico da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-418">The <see cref="T:System.String" /> containing the name of the public method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-419">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetMethod(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-419">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-420">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo pubblico con il nome specificato, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-420">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-421">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-421">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-422">Il <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> metodo cerca il metodo pubblico con il nome specificato...</span><span class="sxs-lookup"><span data-stu-id="faeb3-422">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the public method with the specified name..</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-423">
            <see cref="T:System.String" /> contenente il nome del metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-423">The <see cref="T:System.String" /> containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-424">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-424">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-425">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-425">-or-</span>
          </span>
          <span data-ttu-id="faeb3-426">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-426">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-427">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-427">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-428">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo corrispondente ai requisiti specificati, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-428">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-429">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-429">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-430">Il <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> metodo cerca il metodo specificato, usando i vincoli di binding specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-430">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified method, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-431">
            <see cref="T:System.String" /> contenente il nome del metodo pubblico da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-431">The <see cref="T:System.String" /> containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="faeb3-432">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi al metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-432">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="faeb3-433">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-433">-or-</span>
          </span>
          <span data-ttu-id="faeb3-434">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero, Type[] types = new Type[0]) per ottenere un metodo che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-434">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-435">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetMethod(System.String,System.Type[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-435">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Type[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-436">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo pubblico i cui parametri corrispondono ai tipi di argomenti specificati, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-436">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-437">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-437">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-438">Il <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> metodo cerca il metodo pubblico specificato i cui parametri corrispondono ai tipi di argomento specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-438">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified public method whose parameters match the specified argument types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-439">
            <see cref="T:System.String" /> contenente il nome del metodo pubblico da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-439">The <see cref="T:System.String" /> containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="faeb3-440">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi al metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-440">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="faeb3-441">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-441">-or-</span>
          </span>
          <span data-ttu-id="faeb3-442">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero, Type[] types = new Type[0]) per ottenere un metodo che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-442">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="faeb3-443">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresenta gli attributi associati all'elemento corrispondente nella matrice <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-443">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="faeb3-444">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-444">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-445">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-445">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-446">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo pubblico corrispondente ai requisiti specificati, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-446">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-447">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-447">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-448">Il <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> metodo cerca il metodo pubblico specificato i cui parametri corrispondono ai modificatori e i tipi di argomento specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-448">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified public method whose parameters match the specified argument types and modifiers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-449">
            <see cref="T:System.String" /> contenente il nome del metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-449">The <see cref="T:System.String" /> containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-450">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-450">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-451">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-451">-or-</span>
          </span>
          <span data-ttu-id="faeb3-452">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-452">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="faeb3-453">Oggetto <see cref="T:System.Reflection.Binder" /> che definisce una serie di proprietà e consente l'associazione, che può implicare la selezione di un metodo di overload, l'assegnazione forzata dei tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-453">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="faeb3-454">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-454">-or-</span>
          </span>
          <span data-ttu-id="faeb3-455">
            <see langword="null" />, per utilizzare <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-455">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="faeb3-456">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi al metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-456">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="faeb3-457">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-457">-or-</span>
          </span>
          <span data-ttu-id="faeb3-458">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero, Type[] types = new Type[0]) per ottenere un metodo che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-458">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="faeb3-459">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresenta gli attributi associati all'elemento corrispondente nella matrice <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-459">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="faeb3-460">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-460">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-461">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-461">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-462">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo corrispondente ai requisiti specificati, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-462">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-463">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-463">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-464">Il <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> metodo cerca il metodo specificato i cui parametri corrispondono ai modificatori, usando i vincoli di binding specificati e i tipi di argomento specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-464">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-465">
            <see cref="T:System.String" /> contenente il nome del metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-465">The <see cref="T:System.String" /> containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-466">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-466">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-467">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-467">-or-</span>
          </span>
          <span data-ttu-id="faeb3-468">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-468">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="faeb3-469">Oggetto <see cref="T:System.Reflection.Binder" /> che definisce una serie di proprietà e consente l'associazione, che può implicare la selezione di un metodo di overload, l'assegnazione forzata dei tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-469">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="faeb3-470">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-470">-or-</span>
          </span>
          <span data-ttu-id="faeb3-471">
            <see langword="null" />, per utilizzare <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-471">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="faeb3-472">Oggetto <see cref="T:System.Reflection.CallingConventions" /> che specifica l'insieme di regole da utilizzare per la disposizione e il layout degli argomenti, la modalità di passaggio del valore restituito, i registri utilizzati per gli argomenti e la pulizia dello stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-472">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="faeb3-473">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi al metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-473">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="faeb3-474">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-474">-or-</span>
          </span>
          <span data-ttu-id="faeb3-475">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero, Type[] types = new Type[0]) per ottenere un metodo che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-475">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="faeb3-476">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresenta gli attributi associati all'elemento corrispondente nella matrice <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-476">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="faeb3-477">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-477">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-478">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-478">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-479">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo corrispondente ai requisiti specificati, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-479">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-480">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-480">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-481">Il <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> metodo cerca il metodo specificato i cui parametri corrispondono ai modificatori, usando i vincoli di binding specificati e la convenzione di chiamata specificata e i tipi di argomento specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-481">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-482">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.GetMethods" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-482">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMethods" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-483">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-483">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-484">Il <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> metodo ottiene i metodi dell'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-484">The <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method gets the methods of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods();" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="_Type.GetMethods " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-485">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetMethods" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-485">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethods" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-486">Matrice di oggetti <see cref="T:System.Reflection.MethodInfo" /> che rappresentano tutti i metodi pubblici definiti per l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-486">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="faeb3-487">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-487">-or-</span>
          </span>
          <span data-ttu-id="faeb3-488">Matrice vuota di tipo <see cref="T:System.Reflection.MethodInfo" />, se non sono definiti metodi pubblici per l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-488">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-489">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-489">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-490">Il <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> metodo restituisce tutti i metodi pubblici dell'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-490">The <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method returns all the public methods of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="_Type.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-491">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-491">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-492">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-492">-or-</span>
          </span>
          <span data-ttu-id="faeb3-493">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-493">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-494">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-494">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-495">Matrice di oggetti <see cref="T:System.Reflection.MethodInfo" /> che rappresentano tutti i metodi definiti per l'oggetto <see cref="T:System.Type" /> corrente, corrispondente ai vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-495">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="faeb3-496">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-496">-or-</span>
          </span>
          <span data-ttu-id="faeb3-497">Matrice vuota di tipo <see cref="T:System.Reflection.MethodInfo" />, se non è definito alcun metodo per l'oggetto <see cref="T:System.Type" /> corrente oppure se nessuno dei metodi definiti corrisponde ai vincoli di binding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-497">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-498">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-498">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-499">Il <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> metodo cerca i metodi definiti per l'oggetto <xref:System.Type>, usando i vincoli di binding specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-499">The <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method searches for the methods defined for the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-500">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.GetNestedType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-500">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetNestedType" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-501">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-501">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-502">Il <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> metodo ottiene un tipo specifico annidato all'interno dell'oggetto <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-502">The <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> method gets a specific type nested within the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetNestedType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string -&gt; Type" Usage="_Type.GetNestedType name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-503">Stringa che contiene il nome del tipo annidato da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-503">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-504">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetNestedType(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-504">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedType(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-505">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo annidato pubblico con il nome specificato, se disponibile; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-505">A <see cref="T:System.Type" /> object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-506">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-506">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-507">Il <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> metodo cerca il tipo annidato pubblico con il nome specificato.</span><span class="sxs-lookup"><span data-stu-id="faeb3-507">The <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> method searches for the public nested type with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="_Type.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-508">Stringa che contiene il nome del tipo annidato da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-508">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-509">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-509">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-510">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-510">-or-</span>
          </span>
          <span data-ttu-id="faeb3-511">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-511">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-512">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-512">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-513">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo annidato corrispondente ai requisiti specificati, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-513">A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-514">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-514">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-515">Il <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> metodo cerca il tipo annidato specificato, usando i vincoli di binding specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-515">The <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> method searches for the specified nested type, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedTypes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-516">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.GetNestedTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-516">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetNestedTypes" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-517">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-517">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-518">Il <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> metodo ottiene i tipi annidati all'interno dell'oggetto <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-518">The <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> method gets the types nested within the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ GetNestedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : unit -&gt; Type[]" Usage="_Type.GetNestedTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-519">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetNestedTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-519">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedTypes" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-520">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano tutti i tipi annidati nel <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-520">An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="faeb3-521">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-521">-or-</span>
          </span>
          <span data-ttu-id="faeb3-522">Matrice vuota di tipo <see cref="T:System.Type" />, se nessun tipo è annidato all'interno del <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-522">An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-523">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-523">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-524">Il <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> metodo restituisce tutti i tipi annidati all'interno dell'oggetto <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-524">The <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> method returns all the types nested within the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="_Type.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-525">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-525">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-526">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-526">-or-</span>
          </span>
          <span data-ttu-id="faeb3-527">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-527">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-528">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" /> e cerca i tipi annidati all'interno della classe <see cref="T:System.Type" /> corrente, utilizzando i vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-528">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" /> method, and searches for the types nested within the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-529">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano tutti i tipi annidati all'interno del <see cref="T:System.Type" /> corrente, che corrisponde ai vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-529">An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="faeb3-530">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-530">-or-</span>
          </span>
          <span data-ttu-id="faeb3-531">Matrice vuota di tipo <see cref="T:System.Type" />, se non è presente alcun tipo annidato all'interno del <see cref="T:System.Type" /> corrente oppure se nessuno dei tipi annidati corrisponde ai vincoli di associazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-531">An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-532">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-532">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperties">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-533">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.GetProperties" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-533">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetProperties" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-534">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-534">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-535">Il <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> metodo ottiene le proprietà dell'oggetto corrente <xref:System.Type>...</span><span class="sxs-lookup"><span data-stu-id="faeb3-535">The <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method gets the properties of the current <xref:System.Type>..</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties () As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties();" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : unit -&gt; System.Reflection.PropertyInfo[]" Usage="_Type.GetProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-536">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetProperties" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-536">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperties" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-537">Matrice di oggetti <see cref="T:System.Reflection.PropertyInfo" /> che rappresentano tutte le proprietà pubbliche dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-537">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="faeb3-538">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-538">-or-</span>
          </span>
          <span data-ttu-id="faeb3-539">Matrice vuota di tipo <see cref="T:System.Reflection.PropertyInfo" />, se l'oggetto <see cref="T:System.Type" /> corrente non possiede delle proprietà pubbliche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-539">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-540">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-540">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-541">Il <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> metodo restituisce tutte le proprietà pubbliche dell'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-541">The <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method returns all the public properties of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="_Type.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-542">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-542">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-543">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-543">-or-</span>
          </span>
          <span data-ttu-id="faeb3-544">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-544">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-545">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-545">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-546">Matrice di oggetti <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta tutte le proprietà dell'oggetto <see cref="T:System.Type" /> corrente corrispondenti ai vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-546">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="faeb3-547">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-547">-or-</span>
          </span>
          <span data-ttu-id="faeb3-548">Matrice vuota di tipo <see cref="T:System.Reflection.PropertyInfo" />, se l'oggetto <see cref="T:System.Type" /> corrente non dispone di proprietà oppure se nessuna delle proprietà corrisponde ai vincoli di binding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-548">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-549">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-549">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-550">Il <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> metodo cerca le proprietà dell'oggetto corrente <xref:System.Type>, usando i vincoli di binding specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-550">The <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method searches for the properties of the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-551">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.GetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-551">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetProperty" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-552">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-552">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-553">Il <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> metodo ottiene una proprietà specifica dell'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-553">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method gets a specific property of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-554">
            <see cref="T:System.String" /> contenente il nome della proprietà pubblica da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-554">The <see cref="T:System.String" /> containing the name of the public property to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-555">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetProperty(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-555">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-556">Oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà pubblica con il nome specificato, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-556">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-557">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-557">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-558">Il <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> metodo cerca la proprietà pubblica con il nome specificato.</span><span class="sxs-lookup"><span data-stu-id="faeb3-558">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the public property with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-559">
            <see cref="T:System.String" /> contenente il nome della proprietà da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-559">The <see cref="T:System.String" /> containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-560">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-560">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-561">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-561">-or-</span>
          </span>
          <span data-ttu-id="faeb3-562">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-562">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-563">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-563">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-564">Oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà corrispondente ai requisiti specificati, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-564">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-565">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-565">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-566">Il <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> metodo cerca la proprietà specificata, utilizzando vincoli di binding specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-566">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified property, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, returnType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-567">
            <see cref="T:System.String" /> contenente il nome della proprietà pubblica da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-567">The <see cref="T:System.String" /> containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="faeb3-568">Tipo restituito della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-568">The return type of the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-569">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetProperty(System.String,System.Type)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-569">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-570">Oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà pubblica con il nome specificato, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-570">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-571">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-571">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-572">Il <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> metodo cerca la proprietà pubblica con il nome specificato e il tipo restituito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-572">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the public property with the specified name and return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-573">
            <see cref="T:System.String" /> contenente il nome della proprietà pubblica da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-573">The <see cref="T:System.String" /> containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="faeb3-574">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi alla proprietà indicizzata da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-574">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="faeb3-575">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-575">-or-</span>
          </span>
          <span data-ttu-id="faeb3-576">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero, Type[] types = new Type[0]) per ottenere una proprietà non indicizzata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-576">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-577">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetProperty(System.String,System.Type[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-577">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-578">Oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà pubblica i cui parametri corrispondono ai tipi di argomenti specificati, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-578">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-579">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-579">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-580">Il <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> metodo cerca la proprietà pubblica specificata i cui parametri corrispondono ai tipi di argomento specificati...</span><span class="sxs-lookup"><span data-stu-id="faeb3-580">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified public property whose parameters match the specified argument types..</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, returnType, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-581">
            <see cref="T:System.String" /> contenente il nome della proprietà pubblica da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-581">The <see cref="T:System.String" /> containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="faeb3-582">Tipo restituito della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-582">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="faeb3-583">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi alla proprietà indicizzata da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-583">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="faeb3-584">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-584">-or-</span>
          </span>
          <span data-ttu-id="faeb3-585">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero, Type[] types = new Type[0]) per ottenere una proprietà non indicizzata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-585">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-586">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-586">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-587">Oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà pubblica i cui parametri corrispondono ai tipi di argomenti specificati, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-587">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-588">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-588">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-589">Il <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> metodo cerca la proprietà pubblica specificata i cui parametri corrispondono ai tipi di argomento specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-589">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified public property whose parameters match the specified argument types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-590">
            <see cref="T:System.String" /> contenente il nome della proprietà pubblica da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-590">The <see cref="T:System.String" /> containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="faeb3-591">Tipo restituito della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-591">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="faeb3-592">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi alla proprietà indicizzata da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-592">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="faeb3-593">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-593">-or-</span>
          </span>
          <span data-ttu-id="faeb3-594">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero, Type[] types = new Type[0]) per ottenere una proprietà non indicizzata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-594">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="faeb3-595">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresenta gli attributi associati all'elemento corrispondente nella matrice <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-595">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="faeb3-596">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-596">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-597">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-597">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-598">Oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà pubblica corrispondente ai requisiti specificati, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-598">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-599">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-599">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-600">Il <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> metodo cerca la proprietà pubblica specificata i cui parametri corrispondono ai modificatori e i tipi di argomento specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-600">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified public property whose parameters match the specified argument types and modifiers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-601">
            <see cref="T:System.String" /> contenente il nome della proprietà da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-601">The <see cref="T:System.String" /> containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="faeb3-602">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-602">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-603">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-603">-or-</span>
          </span>
          <span data-ttu-id="faeb3-604">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-604">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="faeb3-605">Oggetto <see cref="T:System.Reflection.Binder" /> che definisce una serie di proprietà e consente l'associazione, che può implicare la selezione di un metodo di overload, l'assegnazione forzata dei tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-605">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="faeb3-606">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-606">-or-</span>
          </span>
          <span data-ttu-id="faeb3-607">
            <see langword="null" />, per utilizzare <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-607">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="faeb3-608">Tipo restituito della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-608">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="faeb3-609">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi alla proprietà indicizzata da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-609">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="faeb3-610">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-610">-or-</span>
          </span>
          <span data-ttu-id="faeb3-611">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero, Type[] types = new Type[0]) per ottenere una proprietà non indicizzata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-611">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="faeb3-612">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresenta gli attributi associati all'elemento corrispondente nella matrice <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-612">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="faeb3-613">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-613">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-614">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-614">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-615">Oggetto <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta la proprietà corrispondente ai requisiti specificati, se è stato trovato. In caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-615">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-616">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-616">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-617">Il <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> metodo cerca la proprietà specificata i cui parametri corrispondono ai modificatori, usando i vincoli di binding specificati e i tipi di argomento specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-617">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetType();" />
      <MemberSignature Language="F#" Value="abstract member GetType : unit -&gt; Type" Usage="_Type.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-618">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.GetType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-618">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetType" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-619">Oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-619">The current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-620">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-620">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-621">Il <xref:System.Type.GetType%2A?displayProperty=nameWithType> metodo ottiene l'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-621">The <xref:System.Type.GetType%2A?displayProperty=nameWithType> method gets the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfo">
      <MemberSignature Language="C#" Value="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeInfo : uint32 * uint32 * nativeint -&gt; unit" Usage="_Type.GetTypeInfo (iTInfo, lcid, ppTInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="faeb3-622">Informazioni sul tipo da restituire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-622">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="faeb3-623">Identificatore delle impostazioni locali per le informazioni sul tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-623">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="faeb3-624">Riceve un puntatore all'oggetto relativo alle informazioni sul tipo richiesto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-624">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-625">Recupera le informazioni sul tipo relative a un oggetto che può quindi essere usato per ottenere informazioni sul tipo relative a un'interfaccia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-625">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-626">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-626">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="faeb3-627">Per altre informazioni sulle `IDispatch::GetTypeInfo`, consultare la MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="faeb3-627">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfoCount">
      <MemberSignature Language="C#" Value="public void GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetTypeInfoCount (ByRef pcTInfo As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeInfoCount :  -&gt; unit" Usage="_Type.GetTypeInfoCount pcTInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="faeb3-628">Punta a una posizione che riceve il numero di interfacce di informazioni sul tipo fornite dall'oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-628">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-629">Recupera il numero delle interfacce di informazioni sul tipo fornite da un oggetto (0 o 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-629">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-630">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-630">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="faeb3-631">Per altre informazioni sulle `IDispatch::GetTypeInfoCount`, consultare la MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="faeb3-631">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.GUID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Runtime.InteropServices._Type.GUID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-632">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.GUID" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-632">Provides COM objects with version-independent access to the <see cref="P:System.Type.GUID" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-633">GUID associato all'oggetto <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-633">The GUID associated with the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-634">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-634">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-635">Il <xref:System.Type.GUID%2A?displayProperty=nameWithType> proprietà ottiene il GUID associato il <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-635">The <xref:System.Type.GUID%2A?displayProperty=nameWithType> property gets the GUID associated with the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.HasElementType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElementType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElementType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasElementType : bool" Usage="System.Runtime.InteropServices._Type.HasElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-636">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.HasElementType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-636">Provides COM objects with version-independent access to the <see cref="P:System.Type.HasElementType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-637">
            <see langword="true" /> se <see cref="T:System.Type" /> è una matrice, un puntatore oppure è passato per riferimento; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-637">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-638">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-638">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-639">Proprietà <xref:System.Type.HasElementType%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="faeb3-639">The <xref:System.Type.HasElementType%2A?displayProperty=nameWithType> property</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : uint32 *  * uint32 * int16 * nativeint * nativeint * nativeint * nativeint -&gt; unit" Usage="_Type.Invoke (dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="faeb3-640">Identifica il membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-640">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="faeb3-641">Riservato per utilizzi futuri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-641">Reserved for future use.</span>
          </span>
          <span data-ttu-id="faeb3-642">Deve essere IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-642">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="faeb3-643">Contesto di impostazioni locali all'interno del quale devono essere interpretati gli argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-643">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="faeb3-644">Flag che descrivono il contesto della chiamata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-644">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="faeb3-645">Puntatore a una struttura contenente una matrice di argomenti, una matrice di DISPID per argomenti denominati e i conteggi del numero di elementi nelle matrici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-645">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="faeb3-646">Puntatore alla posizione in cui deve essere archiviato il risultato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-646">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="faeb3-647">Puntatore a una struttura contenente informazioni sull'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-647">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="faeb3-648">Indice del primo argomento che contiene un errore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-648">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-649">Fornisce l'accesso a proprietà e metodi esposti da un oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-649">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-650">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-650">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="faeb3-651">Per altre informazioni sulle `IDispatch::Invoke`, consultare la MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="faeb3-651">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-652">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="Overload:System.Type.InvokeMember" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-652">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.InvokeMember" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-653">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-653">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-654">Il <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> metodo richiama un membro specifico dell'istanza corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-654">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes a specific member of the current <xref:System.Type>.</span></span>  
  
 <span data-ttu-id="faeb3-655">.</span><span class="sxs-lookup"><span data-stu-id="faeb3-655">.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj" Usage="_Type.InvokeMember (name, invokeAttr, binder, target, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-656">
            <see cref="T:System.String" /> contenente il nome del costruttore, del metodo, della proprietà o del membro del campo da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-656">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="faeb3-657">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-657">-or-</span>
          </span>
          <span data-ttu-id="faeb3-658">Stringa vuota ("") per richiamare il membro predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-658">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="faeb3-659">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-659">-or-</span>
          </span>
          <span data-ttu-id="faeb3-660">Per i membri IDispatch, stringa che rappresenta il valore di DispID, ad esempio "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-660">For IDispatch members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="faeb3-661">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-661">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-662">L'accesso può essere uno dei <see langword="BindingFlags" />, ad esempio <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> e così via.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-662">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="faeb3-663">Il tipo di ricerca non deve essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-663">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="faeb3-664">Se il tipo di ricerca viene omesso, verranno applicati <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-664">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="faeb3-665">Oggetto <see cref="T:System.Reflection.Binder" /> che definisce una serie di proprietà e consente l'associazione, che può implicare la selezione di un metodo di overload, l'assegnazione forzata dei tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-665">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="faeb3-666">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-666">-or-</span>
          </span>
          <span data-ttu-id="faeb3-667">
            <see langword="null" />, per utilizzare <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-667">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="faeb3-668">
            <see cref="T:System.Object" /> su cui richiamare il membro specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-668">The <see cref="T:System.Object" /> on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="faeb3-669">Matrice che contiene gli argomenti da passare al membro da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-669">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-670">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-670">Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-671">Oggetto <see cref="T:System.Object" /> che rappresenta il valore restituito del membro richiamato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-671">An <see cref="T:System.Object" /> representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-672">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-672">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-673">Il <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> metodo richiama il membro specificato, usando i vincoli di associazione e associando l'elenco di argomenti specificato specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-673">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes the specified member, using the specified binding constraints and matching the specified argument list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="_Type.InvokeMember (name, invokeAttr, binder, target, args, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-674">
            <see cref="T:System.String" /> contenente il nome del costruttore, del metodo, della proprietà o del membro del campo da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-674">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="faeb3-675">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-675">-or-</span>
          </span>
          <span data-ttu-id="faeb3-676">Stringa vuota ("") per richiamare il membro predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-676">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="faeb3-677">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-677">-or-</span>
          </span>
          <span data-ttu-id="faeb3-678">Per i membri IDispatch, stringa che rappresenta il valore di DispID, ad esempio "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-678">For IDispatch members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="faeb3-679">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-679">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-680">L'accesso può essere uno dei <see langword="BindingFlags" />, ad esempio <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> e così via.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-680">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="faeb3-681">Il tipo di ricerca non deve essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-681">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="faeb3-682">Se il tipo di ricerca viene omesso, verranno applicati <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-682">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="faeb3-683">Oggetto <see cref="T:System.Reflection.Binder" /> che definisce una serie di proprietà e consente l'associazione, che può implicare la selezione di un metodo di overload, l'assegnazione forzata dei tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-683">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="faeb3-684">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-684">-or-</span>
          </span>
          <span data-ttu-id="faeb3-685">
            <see langword="null" />, per utilizzare <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-685">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="faeb3-686">
            <see cref="T:System.Object" /> su cui richiamare il membro specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-686">The <see cref="T:System.Object" /> on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="faeb3-687">Matrice che contiene gli argomenti da passare al membro da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-687">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="faeb3-688">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che rappresenta le impostazioni locali da usare, che possono essere necessarie per conversioni specifiche delle impostazioni locali, ad esempio la conversione di un valore numerico da String a Double.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-688">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span>
          </span>
          <span data-ttu-id="faeb3-689">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-689">-or-</span>
          </span>
          <span data-ttu-id="faeb3-690">
            <see langword="null" /> per utilizzare il valore <see cref="T:System.Globalization.CultureInfo" /> del thread corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-690">
              <see langword="null" /> to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-691">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-691">Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-692">Oggetto <see cref="T:System.Object" /> che rappresenta il valore restituito del membro richiamato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-692">An <see cref="T:System.Object" /> representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-693">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-693">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-694">Il <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> metodo richiama il membro specificato, usando i vincoli di associazione e l'elenco di argomenti specificato e alle impostazioni cultura specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-694">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="_Type.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="faeb3-695">
            <see cref="T:System.String" /> contenente il nome del costruttore, del metodo, della proprietà o del membro del campo da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-695">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="faeb3-696">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-696">-or-</span>
          </span>
          <span data-ttu-id="faeb3-697">Stringa vuota ("") per richiamare il membro predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-697">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="faeb3-698">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-698">-or-</span>
          </span>
          <span data-ttu-id="faeb3-699">Per i membri IDispatch, stringa che rappresenta il valore di DispID, ad esempio "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-699">For IDispatch members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="faeb3-700">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-700">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="faeb3-701">L'accesso può essere uno dei <see langword="BindingFlags" />, ad esempio <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> e così via.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-701">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="faeb3-702">Il tipo di ricerca non deve essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-702">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="faeb3-703">Se il tipo di ricerca viene omesso, verranno applicati <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-703">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="faeb3-704">Oggetto <see cref="T:System.Reflection.Binder" /> che definisce una serie di proprietà e consente l'associazione, che può implicare la selezione di un metodo di overload, l'assegnazione forzata dei tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-704">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="faeb3-705">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-705">-or-</span>
          </span>
          <span data-ttu-id="faeb3-706">
            <see langword="null" />, per utilizzare <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-706">
              <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="faeb3-707">
            <see cref="T:System.Object" /> su cui richiamare il membro specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-707">The <see cref="T:System.Object" /> on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="faeb3-708">Matrice che contiene gli argomenti da passare al membro da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-708">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="faeb3-709">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresentano gli attributi associati all'elemento corrispondente nella matrice <c>args</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-709">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>args</c> array.</span>
          </span>
          <span data-ttu-id="faeb3-710">Gli attributi associati di un parametro sono archiviati nella firma digitale del membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-710">A parameter's associated attributes are stored in the member's signature.</span>
          </span>
          <span data-ttu-id="faeb3-711">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-711">The default binder does not process this parameter.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="faeb3-712">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che rappresenta le impostazioni locali da usare, che possono essere necessarie per conversioni specifiche delle impostazioni locali, ad esempio la conversione di un valore numerico da String a Double.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-712">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span>
          </span>
          <span data-ttu-id="faeb3-713">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-713">-or-</span>
          </span>
          <span data-ttu-id="faeb3-714">
            <see langword="null" /> per utilizzare il valore <see cref="T:System.Globalization.CultureInfo" /> del thread corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-714">
              <see langword="null" /> to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <param name="namedParameters">
          <span data-ttu-id="faeb3-715">Matrice contenente i nomi dei parametri a cui sono passati i valori della matrice <c>args</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-715">An array containing the names of the parameters to which the values in the <c>args</c> array are passed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-716">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-716">Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-717">Oggetto <see cref="T:System.Object" /> che rappresenta il valore restituito del membro richiamato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-717">An <see cref="T:System.Object" /> representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-718">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-718">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-719">Il <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> metodo richiama il membro specificato, usando i vincoli di associazione e l'elenco di argomenti specificato, i modificatori e le impostazioni cultura corrispondenti specificati.</span><span class="sxs-lookup"><span data-stu-id="faeb3-719">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers, and culture.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAbstract : bool" Usage="System.Runtime.InteropServices._Type.IsAbstract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-720">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsAbstract" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-720">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAbstract" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-721">
            <see langword="true" /> se il <see cref="T:System.Type" /> è astratto. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-721">
              <see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-722">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-722">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-723">Il <xref:System.Type.IsAbstract%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> è astratto e deve essere sottoposto a override.</span><span class="sxs-lookup"><span data-stu-id="faeb3-723">The <xref:System.Type.IsAbstract%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is abstract and must be overridden.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAnsiClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnsiClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnsiClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnsiClass : bool" Usage="System.Runtime.InteropServices._Type.IsAnsiClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-724">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsAnsiClass" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-724">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAnsiClass" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-725">
            <see langword="true" /> se l'attributo di formato della stringa <see langword="AnsiClass" /> è selezionato per <see cref="T:System.Type" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-725">
              <see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-726">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-726">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-727">Il <xref:System.Type.IsAnsiClass%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se la stringa di formato attributo `AnsiClass` sia selezionata per il <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-727">The <xref:System.Type.IsAnsiClass%2A?displayProperty=nameWithType> property gets a value indicating whether the string format attribute `AnsiClass` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Runtime.InteropServices._Type.IsArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-728">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsArray" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-728">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsArray" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-729">
            <see langword="true" /> se <see cref="T:System.Type" /> è una matrice. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-729">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-730">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-730">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-731">Il <xref:System.Type.IsArray%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> è una matrice.</span><span class="sxs-lookup"><span data-stu-id="faeb3-731">The <xref:System.Type.IsArray%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is an array.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAssignableFrom(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsAssignableFrom : Type -&gt; bool" Usage="_Type.IsAssignableFrom c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="faeb3-732">Oggetto <see cref="T:System.Type" /> da confrontare con l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-732">The <see cref="T:System.Type" /> to compare with the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-733">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.IsAssignableFrom(System.Type)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-733">Provides COM objects with version-independent access to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-734">
            <see langword="true" /> se <paramref name="c" /> e l'oggetto <see cref="T:System.Type" /> corrente rappresentano lo stesso tipo, se l'oggetto <see cref="T:System.Type" /> corrente è incluso nella gerarchia di ereditarietà di <paramref name="c" />, se l'oggetto <see cref="T:System.Type" /> corrente è un'interfaccia implementata da <paramref name="c" /> oppure se <paramref name="c" /> è un parametro di tipo generico e l'oggetto <see cref="T:System.Type" /> corrente rappresenta uno dei vincoli di <paramref name="c" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-734">
              <see langword="true" /> if <paramref name="c" /> and the current <see cref="T:System.Type" /> represent the same type, or if the current <see cref="T:System.Type" /> is in the inheritance hierarchy of <paramref name="c" />, or if the current <see cref="T:System.Type" /> is an interface that <paramref name="c" /> implements, or if <paramref name="c" /> is a generic type parameter and the current <see cref="T:System.Type" /> represents one of the constraints of <paramref name="c" />.</span>
          </span>
          <span data-ttu-id="faeb3-735">
            <see langword="false" /> se non viene soddisfatta nessuna di queste condizioni oppure se <paramref name="c" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-735">
              <see langword="false" /> if none of these conditions are the case, or if <paramref name="c" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-736">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-736">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAutoClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoClass : bool" Usage="System.Runtime.InteropServices._Type.IsAutoClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-737">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsAutoClass" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-737">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAutoClass" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-738">
            <see langword="true" /> se l'attributo di formato della stringa <see langword="AutoClass" /> è selezionato per <see cref="T:System.Type" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-738">
              <see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-739">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-739">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-740">Il <xref:System.Type.IsAutoClass%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se la stringa di formato attributo `AutoClass` sia selezionata per il <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-740">The <xref:System.Type.IsAutoClass%2A?displayProperty=nameWithType> property gets a value indicating whether the string format attribute `AutoClass` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAutoLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoLayout : bool" Usage="System.Runtime.InteropServices._Type.IsAutoLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-741">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsAutoLayout" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-741">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAutoLayout" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-742">
            <see langword="true" /> se l'attributo di layout della classe <see langword="AutoLayout" /> è selezionato per <see cref="T:System.Type" />. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-742">
              <see langword="true" /> if the class layout attribute <see langword="AutoLayout" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-743">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-743">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-744">Il <xref:System.Type.IsAutoLayout%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se l'attributo di layout della classe `AutoLayout` sia selezionata per il <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-744">The <xref:System.Type.IsAutoLayout%2A?displayProperty=nameWithType> property gets a value indicating whether the class layout attribute `AutoLayout` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRef : bool" Usage="System.Runtime.InteropServices._Type.IsByRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-745">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsByRef" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-745">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsByRef" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-746">
            <see langword="true" /> se <see cref="T:System.Type" /> viene passato per riferimento. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-746">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-747">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-747">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-748">Il <xref:System.Type.IsByRef%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> viene passato per riferimento.</span><span class="sxs-lookup"><span data-stu-id="faeb3-748">The <xref:System.Type.IsByRef%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is passed by reference.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool" Usage="System.Runtime.InteropServices._Type.IsClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-749">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsClass" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-749">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsClass" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-750">
            <see langword="true" /> se il <see cref="T:System.Type" /> è una classe. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-750">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-751">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-751">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-752">Il <xref:System.Type.IsClass%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> una classe; vale a dire, non un tipo di valore o un'interfaccia.</span><span class="sxs-lookup"><span data-stu-id="faeb3-752">The <xref:System.Type.IsClass%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a class; that is, not a value type or interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsCOMObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCOMObject As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCOMObject { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCOMObject : bool" Usage="System.Runtime.InteropServices._Type.IsCOMObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-753">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsCOMObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-753">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsCOMObject" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-754">
            <see langword="true" /> se <see cref="T:System.Type" /> è un oggetto COM; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-754">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-755">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-755">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-756">Il <xref:System.Type.IsCOMObject%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> è un oggetto COM.</span><span class="sxs-lookup"><span data-stu-id="faeb3-756">The <xref:System.Type.IsCOMObject%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a COM object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsContextful" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsContextful As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsContextful { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContextful : bool" Usage="System.Runtime.InteropServices._Type.IsContextful" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-757">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsContextful" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-757">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsContextful" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-758">
            <see langword="true" /> se <see cref="T:System.Type" /> può essere contenuto in un contesto; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-758">
              <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-759">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-759">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-760">Il <xref:System.Type.IsContextful%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> possono essere ospitati in un contesto.</span><span class="sxs-lookup"><span data-stu-id="faeb3-760">The <xref:System.Type.IsContextful%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> can be hosted in a context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member IsDefined : Type * bool -&gt; bool" Usage="_Type.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="faeb3-761">Oggetto <see langword="Type" /> a cui vengono applicati gli attributi personalizzati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-761">The <see langword="Type" /> object to which the custom attributes are applied.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="faeb3-762">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-762">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-763">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-763">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-764">
            <see langword="true" /> se una o più istanze di <paramref name="attributeType" /> sono applicate al membro; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-764">
              <see langword="true" /> if one or more instance of <paramref name="attributeType" /> is applied to this member; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-765">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-765">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-766">Il <xref:System.Reflection.MemberInfo.IsDefined%2A?displayProperty=nameWithType> metodo indica se uno o più istanze di `attributeType` viene applicata a questo membro.</span><span class="sxs-lookup"><span data-stu-id="faeb3-766">The <xref:System.Reflection.MemberInfo.IsDefined%2A?displayProperty=nameWithType> method indicates whether one or more instance of `attributeType` is applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnum { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool" Usage="System.Runtime.InteropServices._Type.IsEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-767">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsEnum" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-767">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsEnum" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-768">
            <see langword="true" /> se l'oggetto <see cref="T:System.Type" /> corrente è un'enumerazione; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-768">
              <see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-769">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-769">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-770">Il <xref:System.Type.IsEnum%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se l'oggetto corrente <xref:System.Type> rappresenta un'enumerazione.</span><span class="sxs-lookup"><span data-stu-id="faeb3-770">The <xref:System.Type.IsEnum%2A?displayProperty=nameWithType> property gets a value indicating whether the current <xref:System.Type> represents an enumeration.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsExplicitLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExplicitLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExplicitLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExplicitLayout : bool" Usage="System.Runtime.InteropServices._Type.IsExplicitLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-771">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsExplicitLayout" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-771">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsExplicitLayout" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-772">
            <see langword="true" /> se l'attributo di layout della classe <see langword="ExplicitLayout" /> è selezionato per <see cref="T:System.Type" />. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-772">
              <see langword="true" /> if the class layout attribute <see langword="ExplicitLayout" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-773">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-773">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-774">Il <xref:System.Type.IsExplicitLayout%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se l'attributo di layout della classe `ExplicitLayout` sia selezionata per il <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-774">The <xref:System.Type.IsExplicitLayout%2A?displayProperty=nameWithType> property gets a value indicating whether the class layout attribute `ExplicitLayout` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsImport" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImport As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImport { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsImport : bool" Usage="System.Runtime.InteropServices._Type.IsImport" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-775">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsImport" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-775">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsImport" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-776">
            <see langword="true" /> se <see cref="T:System.Type" /> dispone di <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-776">
              <see langword="true" /> if the <see cref="T:System.Type" /> has <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-777">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-777">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-778">Il <xref:System.Type.IsImport%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> ha <xref:System.Runtime.InteropServices.ComImportAttribute>, che indica che è stata importata da una libreria dei tipi COM.</span><span class="sxs-lookup"><span data-stu-id="faeb3-778">The <xref:System.Type.IsImport%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> has <xref:System.Runtime.InteropServices.ComImportAttribute>, indicating that it was imported from a COM type library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInstanceOfType (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInstanceOfType(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="abstract member IsInstanceOfType : obj -&gt; bool" Usage="_Type.IsInstanceOfType o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="faeb3-779">Oggetto da confrontare con l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-779">The object to compare with the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-780">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.IsInstanceOfType(System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-780">Provides COM objects with version-independent access to the <see cref="M:System.Type.IsInstanceOfType(System.Object)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-781">
            <see langword="true" /> se l'oggetto <see cref="T:System.Type" /> corrente è incluso nella gerarchia di ereditarietà dell'oggetto rappresentato da <paramref name="o" /> oppure se l'oggetto <see cref="T:System.Type" /> corrente è un'interfaccia supportata da <paramref name="o" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-781">
              <see langword="true" /> if the current <see cref="T:System.Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see cref="T:System.Type" /> is an interface that <paramref name="o" /> supports.</span>
          </span>
          <span data-ttu-id="faeb3-782">
            <see langword="false" /> se non viene soddisfatta nessuna di queste condizioni, se <paramref name="o" /> è <see langword="null" /> oppure se l'oggetto <see cref="T:System.Type" /> corrente è un tipo generico aperto, ovvero la proprietà <see cref="P:System.Type.ContainsGenericParameters" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-782">
              <see langword="false" /> if neither of these conditions is the case, or if <paramref name="o" /> is <see langword="null" />, or if the current <see cref="T:System.Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-783">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-783">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-784">Il <xref:System.Type.IsInstanceOfType%2A?displayProperty=nameWithType> metodo determina se l'oggetto specificato è un'istanza dell'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-784">The <xref:System.Type.IsInstanceOfType%2A?displayProperty=nameWithType> method determines whether the specified object is an instance of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool" Usage="System.Runtime.InteropServices._Type.IsInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-785">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsInterface" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-785">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsInterface" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-786">
            <see langword="true" /> se <see cref="T:System.Type" /> è un'interfaccia; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-786">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-787">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-787">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-788">Il <xref:System.Type.IsInterface%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> è un'interfaccia; ovvero, non una classe o un tipo di valore.</span><span class="sxs-lookup"><span data-stu-id="faeb3-788">The <xref:System.Type.IsInterface%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is an interface; that is, not a class or a value type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsLayoutSequential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLayoutSequential As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLayoutSequential { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLayoutSequential : bool" Usage="System.Runtime.InteropServices._Type.IsLayoutSequential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-789">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsLayoutSequential" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-789">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsLayoutSequential" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-790">
            <see langword="true" /> se l'attributo di layout della classe <see langword="SequentialLayout" /> è selezionato per <see cref="T:System.Type" />. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-790">
              <see langword="true" /> if the class layout attribute <see langword="SequentialLayout" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-791">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-791">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-792">Il <xref:System.Type.IsLayoutSequential%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se l'attributo di layout della classe `SequentialLayout` sia selezionata per il <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-792">The <xref:System.Type.IsLayoutSequential%2A?displayProperty=nameWithType> property gets a value indicating whether the class layout attribute `SequentialLayout` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsMarshalByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarshalByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarshalByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarshalByRef : bool" Usage="System.Runtime.InteropServices._Type.IsMarshalByRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-793">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsMarshalByRef" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-793">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsMarshalByRef" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-794">
            <see langword="true" /> se <see cref="T:System.Type" /> viene sottoposto a marshalling per riferimento; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-794">
              <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-795">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-795">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-796">Il <xref:System.Type.IsMarshalByRef%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il tipo è sottoposto a marshalling per riferimento.</span><span class="sxs-lookup"><span data-stu-id="faeb3-796">The <xref:System.Type.IsMarshalByRef%2A?displayProperty=nameWithType> property gets a value indicating whether the Type is marshaled by reference.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedAssembly : bool" Usage="System.Runtime.InteropServices._Type.IsNestedAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-797">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsNestedAssembly" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-797">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedAssembly" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-798">
            <see langword="true" /> se <see cref="T:System.Type" /> è annidato e visibile soltanto all'interno dell'assembly; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-798">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-799">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-799">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-800">Il <xref:System.Type.IsNestedAssembly%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> è annidato e visibile soltanto all'interno dello stesso assembly.</span><span class="sxs-lookup"><span data-stu-id="faeb3-800">The <xref:System.Type.IsNestedAssembly%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only within its own assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamANDAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamANDAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamANDAssem : bool" Usage="System.Runtime.InteropServices._Type.IsNestedFamANDAssem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-801">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsNestedFamANDAssem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-801">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamANDAssem" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-802">
            <see langword="true" /> se <see cref="T:System.Type" /> è annidato e visibile soltanto alle classi della stessa famiglia e dello stesso assembly. In caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-802">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-803">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-803">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-804">Il <xref:System.Type.IsNestedFamANDAssem%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> è annidate e visibile soltanto alle classi della stessa famiglia e il proprio assembly.</span><span class="sxs-lookup"><span data-stu-id="faeb3-804">The <xref:System.Type.IsNestedFamANDAssem%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only to classes that belong to both its own family and its own assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamily : bool" Usage="System.Runtime.InteropServices._Type.IsNestedFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-805">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsNestedFamily" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-805">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamily" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-806">
            <see langword="true" /> se <see cref="T:System.Type" /> è annidato e visibile solo all'interno della famiglia; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-806">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-807">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-807">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-808">Il <xref:System.Type.IsNestedFamily%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> è annidato e visibile soltanto all'interno della stessa famiglia.</span><span class="sxs-lookup"><span data-stu-id="faeb3-808">The <xref:System.Type.IsNestedFamily%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only within its own family.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedFamORAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamORAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamORAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamORAssem : bool" Usage="System.Runtime.InteropServices._Type.IsNestedFamORAssem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-809">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsNestedFamORAssem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-809">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamORAssem" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-810">
            <see langword="true" /> se <see cref="T:System.Type" /> è annidato e visibile solo alle classi della stessa famiglia o dello stesso assembly; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-810">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-811">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-811">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-812">Il <xref:System.Type.IsNestedFamORAssem%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> è annidato e visibile soltanto alle classi che appartengono alla stessa famiglia o dello stesso assembly.</span><span class="sxs-lookup"><span data-stu-id="faeb3-812">The <xref:System.Type.IsNestedFamORAssem%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only to classes that belong to either its own family or to its own assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPrivate : bool" Usage="System.Runtime.InteropServices._Type.IsNestedPrivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-813">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsNestedPrivate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-813">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedPrivate" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-814">
            <see langword="true" /> se <see cref="T:System.Type" /> è annidato e dichiarato privato; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-814">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-815">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-815">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-816">Il <xref:System.Type.IsNestedPrivate%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> è annidato e dichiarato privato.</span><span class="sxs-lookup"><span data-stu-id="faeb3-816">The <xref:System.Type.IsNestedPrivate%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and declared private.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPublic : bool" Usage="System.Runtime.InteropServices._Type.IsNestedPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-817">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsNestedPublic" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-817">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedPublic" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-818">
            <see langword="true" /> se la classe è annidata e dichiarata pubblica. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-818">
              <see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-819">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-819">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-820">Il <xref:System.Type.IsNestedPublic%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se una classe è annidata e dichiarata pubblica.</span><span class="sxs-lookup"><span data-stu-id="faeb3-820">The <xref:System.Type.IsNestedPublic%2A?displayProperty=nameWithType> property gets a value indicating whether a class is nested and declared public.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNotPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotPublic : bool" Usage="System.Runtime.InteropServices._Type.IsNotPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-821">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsNotPublic" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-821">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNotPublic" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-822">
            <see langword="true" /> se il <see cref="T:System.Type" /> di primo livello non è dichiarato pubblico; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-822">
              <see langword="true" /> if the top-level <see cref="T:System.Type" /> is not declared public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-823">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-823">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-824">Il <xref:System.Type.IsNotPublic%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il primo livello <xref:System.Type> non è dichiarato pubblico.</span><span class="sxs-lookup"><span data-stu-id="faeb3-824">The <xref:System.Type.IsNotPublic%2A?displayProperty=nameWithType> property gets a value indicating whether the top-level <xref:System.Type> is not declared public.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPointer : bool" Usage="System.Runtime.InteropServices._Type.IsPointer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-825">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsPointer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-825">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPointer" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-826">
            <see langword="true" /> se <see cref="T:System.Type" /> è un puntatore. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-826">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-827">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-827">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-828">Il <xref:System.Type.IsPointer%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> è un puntatore.</span><span class="sxs-lookup"><span data-stu-id="faeb3-828">The <xref:System.Type.IsPointer%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a pointer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsPrimitive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimitive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrimitive : bool" Usage="System.Runtime.InteropServices._Type.IsPrimitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-829">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsPrimitive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-829">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPrimitive" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-830">
            <see langword="true" /> se <see cref="T:System.Type" /> è uno dei tipi primitivi. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-830">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-831">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-831">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-832">Il <xref:System.Type.IsPrimitive%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> è uno dei tipi primitivi.</span><span class="sxs-lookup"><span data-stu-id="faeb3-832">The <xref:System.Type.IsPrimitive%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is one of the primitive types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Runtime.InteropServices._Type.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-833">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsPublic" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-833">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPublic" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-834">
            <see langword="true" /> se il <see cref="T:System.Type" /> di primo livello è dichiarato pubblico; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-834">
              <see langword="true" /> if the top-level <see cref="T:System.Type" /> is declared public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-835">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-835">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-836">Il <xref:System.Type.IsPublic%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il primo livello <xref:System.Type> è dichiarato pubblico.</span><span class="sxs-lookup"><span data-stu-id="faeb3-836">The <xref:System.Type.IsPublic%2A?displayProperty=nameWithType> property gets a value indicating whether the top-level <xref:System.Type> is declared public.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Runtime.InteropServices._Type.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-837">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsSealed" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-837">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSealed" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-838">
            <see langword="true" /> se <see cref="T:System.Type" /> è dichiarato sealed; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-838">
              <see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-839">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-839">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-840">Il <xref:System.Type.IsSealed%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> è dichiarato sealed.</span><span class="sxs-lookup"><span data-stu-id="faeb3-840">The <xref:System.Type.IsSealed%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is declared sealed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSerializable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSerializable : bool" Usage="System.Runtime.InteropServices._Type.IsSerializable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-841">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsSerializable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-841">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSerializable" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-842">
            <see langword="true" /> se <see cref="T:System.Type" /> è serializzabile; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-842">
              <see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-843">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-843">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-844">Il <xref:System.Type.IsSerializable%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> è serializzabile.</span><span class="sxs-lookup"><span data-stu-id="faeb3-844">The <xref:System.Type.IsSerializable%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is serializable.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Runtime.InteropServices._Type.IsSpecialName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-845">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsSpecialName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-845">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSpecialName" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-846">
            <see langword="true" /> se <see cref="T:System.Type" /> dispone di un nome che richiede una gestione speciale. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-846">
              <see langword="true" /> if the <see cref="T:System.Type" /> has a name that requires special handling; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-847">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-847">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-848">Il <xref:System.Type.IsSpecialName%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> ha un nome che richiede una gestione speciale.</span><span class="sxs-lookup"><span data-stu-id="faeb3-848">The <xref:System.Type.IsSpecialName%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> has a name that requires special handling.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSubclassOf(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsSubclassOf : Type -&gt; bool" Usage="_Type.IsSubclassOf c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="faeb3-849">Oggetto <see cref="T:System.Type" /> da confrontare con l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-849">The <see cref="T:System.Type" /> to compare with the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="faeb3-850">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.IsSubclassOf(System.Type)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-850">Provides COM objects with version-independent access to the <see cref="M:System.Type.IsSubclassOf(System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-851">
            <see langword="true" /> se il <see cref="T:System.Type" /> rappresentato dal parametro <paramref name="c" /> e il <see cref="T:System.Type" /> corrente rappresentano classi e se la classe rappresentata dal <see cref="T:System.Type" /> corrente deriva dalla classe rappresentata da <paramref name="c" />. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-851">
              <see langword="true" /> if the <see cref="T:System.Type" /> represented by the <paramref name="c" /> parameter and the current <see cref="T:System.Type" /> represent classes, and the class represented by the current <see cref="T:System.Type" /> derives from the class represented by <paramref name="c" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="faeb3-852">Questo metodo restituisce anche <see langword="false" /> se <paramref name="c" /> e il <see cref="T:System.Type" /> corrente rappresentano la stessa classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-852">This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see cref="T:System.Type" /> represent the same class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-853">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-853">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-854">Il <xref:System.Type.IsSubclassOf%2A?displayProperty=nameWithType> metodo determina se la classe rappresentata dall'oggetto corrente <xref:System.Type> deriva dalla classe rappresentata dall'oggetto specificato <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-854">The <xref:System.Type.IsSubclassOf%2A?displayProperty=nameWithType> method determines whether the class represented by the current <xref:System.Type> derives from the class represented by the specified <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsUnicodeClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnicodeClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnicodeClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnicodeClass : bool" Usage="System.Runtime.InteropServices._Type.IsUnicodeClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-855">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsUnicodeClass" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-855">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsUnicodeClass" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-856">
            <see langword="true" /> se l'attributo di formato della stringa <see langword="UnicodeClass" /> è selezionato per <see cref="T:System.Type" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-856">
              <see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-857">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-857">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-858">Il <xref:System.Type.IsUnicodeClass%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se la stringa di formato attributo `UnicodeClass` sia selezionata per il <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-858">The <xref:System.Type.IsUnicodeClass%2A?displayProperty=nameWithType> property gets a value indicating whether the string format attribute `UnicodeClass` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueType : bool" Usage="System.Runtime.InteropServices._Type.IsValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-859">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.IsValueType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-859">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsValueType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-860">
            <see langword="true" /> se <see cref="T:System.Type" /> è un tipo di valore. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-860">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-861">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-861">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-862">Il <xref:System.Type.IsValueType%2A?displayProperty=nameWithType> proprietà ottiene un valore che indica se il <xref:System.Type> è un tipo valore.</span><span class="sxs-lookup"><span data-stu-id="faeb3-862">The <xref:System.Type.IsValueType%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a value type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Runtime.InteropServices._Type.MemberType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-863">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.MemberType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-863">Provides COM objects with version-independent access to the <see cref="P:System.Type.MemberType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-864">Valore <see cref="T:System.Reflection.MemberTypes" /> che indica che questo membro è un tipo o un tipo annidato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-864">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-865">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-865">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-866">Il <xref:System.Type.MemberType%2A?displayProperty=nameWithType> property get un <xref:System.Reflection.MemberTypes> valore che indica che questo membro è un tipo o un tipo annidato.</span><span class="sxs-lookup"><span data-stu-id="faeb3-866">The <xref:System.Type.MemberType%2A?displayProperty=nameWithType> property gets a <xref:System.Reflection.MemberTypes> value indicating that this member is a type or a nested type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Module" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Runtime.InteropServices._Type.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-867">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.Module" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-867">Provides COM objects with version-independent access to the <see cref="P:System.Type.Module" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-868">Nome del modulo in cui è definito il <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-868">The name of the module in which the current <see cref="T:System.Type" /> is defined.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-869">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-869">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-870">Il <xref:System.Type.Module%2A?displayProperty=nameWithType> proprietà ottiene il modulo (DLL) in cui l'oggetto corrente <xref:System.Type> è definito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-870">The <xref:System.Type.Module%2A?displayProperty=nameWithType> property gets the module (the DLL) in which the current <xref:System.Type> is defined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Runtime.InteropServices._Type.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-871">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Reflection.MemberInfo.Name" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-871">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.Name" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-872">Nome di <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-872">The name of the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-873">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-873">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-874">Il <xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType> proprietà ottiene il nome del <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-874">The <xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType> property gets the name of the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Runtime.InteropServices._Type.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-875">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.Namespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-875">Provides COM objects with version-independent access to the <see cref="P:System.Type.Namespace" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-876">Spazio dei nomi di <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-876">The namespace of the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-877">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-877">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-878">Il <xref:System.Type.Namespace%2A?displayProperty=nameWithType> proprietà ottiene lo spazio dei nomi di <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-878">The <xref:System.Type.Namespace%2A?displayProperty=nameWithType> property gets the namespace of the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Runtime.InteropServices._Type.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-879">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.ReflectedType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-879">Provides COM objects with version-independent access to the <see cref="P:System.Type.ReflectedType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-880">Oggetto <see cref="T:System.Type" /> tramite il quale è stato ottenuto questo oggetto <see cref="T:System.Reflection.MemberInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-880">The <see cref="T:System.Type" /> object through which this <see cref="T:System.Reflection.MemberInfo" /> object was obtained.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-881">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-881">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-882">Il <xref:System.Type.ReflectedType%2A?displayProperty=nameWithType> proprietà ottiene l'oggetto classe usato per ottenere questo membro.</span><span class="sxs-lookup"><span data-stu-id="faeb3-882">The <xref:System.Type.ReflectedType%2A?displayProperty=nameWithType> property gets the class object that was used to obtain this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string" Usage="_Type.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-883">Fornisce oggetti COM con accesso indipendente dalla versione al metodo <see cref="M:System.Type.ToString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-883">Provides COM objects with version-independent access to the <see cref="M:System.Type.ToString" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="faeb3-884">Oggetto <see cref="T:System.String" /> che rappresenta il nome dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-884">A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-885">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-885">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-886">Il <xref:System.Type.ToString%2A?displayProperty=nameWithType> metodo restituisce il nome dell'istanza corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-886">The <xref:System.Type.ToString%2A?displayProperty=nameWithType> method returns the name of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Runtime.InteropServices._Type.TypeHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-887">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.TypeHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-887">Provides COM objects with version-independent access to the <see cref="P:System.Type.TypeHandle" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-888">Handle per l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-888">The handle for the current <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-889">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-889">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-890">Il <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> proprietà ottiene l'handle per l'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-890">The <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> property gets the handle for the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.TypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeInitializer As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::ConstructorInfo ^ TypeInitializer { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeInitializer : System.Reflection.ConstructorInfo" Usage="System.Runtime.InteropServices._Type.TypeInitializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-891">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.TypeInitializer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-891">Provides COM objects with version-independent access to the <see cref="P:System.Type.TypeInitializer" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-892">
            <see cref="T:System.Reflection.ConstructorInfo" /> contenente il nome del costruttore della classe per il <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-892">A <see cref="T:System.Reflection.ConstructorInfo" /> containing the name of the class constructor for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-893">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-893">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-894">Il <xref:System.Type.TypeInitializer%2A?displayProperty=nameWithType> proprietà ottiene l'inizializzatore per il <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="faeb3-894">The <xref:System.Type.TypeInitializer%2A?displayProperty=nameWithType> property gets the initializer for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Runtime.InteropServices._Type.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="faeb3-895">Fornisce oggetti COM con accesso indipendente dalla versione alla proprietà <see cref="P:System.Type.UnderlyingSystemType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-895">Provides COM objects with version-independent access to the <see cref="P:System.Type.UnderlyingSystemType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="faeb3-896">Tipo di sistema sottostante per l'oggetto <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="faeb3-896">The underlying system type for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="faeb3-897">Questa proprietà consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamata da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="faeb3-897">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="faeb3-898">Il <xref:System.Type.UnderlyingSystemType%2A?displayProperty=nameWithType> proprietà indica il tipo fornito da common language runtime che rappresenta questo tipo.</span><span class="sxs-lookup"><span data-stu-id="faeb3-898">The <xref:System.Type.UnderlyingSystemType%2A?displayProperty=nameWithType> property indicates the type provided by the common language runtime that represents this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>