<Type Name="StructLayoutAttribute" FullName="System.Runtime.InteropServices.StructLayoutAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5c013f727d35629f5f33cae31ca99e26047e93da" />
    <Meta Name="ms.sourcegitcommit" Value="6f3d3181d9ca22a1ab46a7f61f3ee152f2b844ea" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/27/2018" />
    <Meta Name="ms.locfileid" Value="50174558" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class StructLayoutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StructLayoutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.StructLayoutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StructLayoutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class StructLayoutAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type StructLayoutAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Consente di controllare il layout fisico dei campi dati di una classe o una struttura in memoria.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile applicare l'attributo alle classi o strutture.  
  
 Common language runtime controlla il layout fisico dei campi dati di una classe o struttura in memoria gestita. Tuttavia, se si desidera passare il tipo al codice non gestito, è possibile usare il <xref:System.Runtime.InteropServices.StructLayoutAttribute> attributo per controllare il layout del tipo non gestito. Usare l'attributo con <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> per forzare i membri devono essere disposti in sequenza in ordine vengono visualizzati. Per i tipi copiabili da blt, <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> controlla sia il layout nella memoria gestita e il layout nella memoria non gestita. Per i tipi non copiabili da blt, controlla il layout quando la classe o struttura viene effettuato il marshalling a codice non gestito, ma non controlla il layout nella memoria gestita. Usare l'attributo con <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> per controllare l'esatta posizione di ogni membro dati. Ciò influisce sul layout gestito e, per i tipi sia copiabile da blt e non copiabili da blt. Usando <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> richiede l'uso di <xref:System.Runtime.InteropServices.FieldOffsetAttribute> attributo per indicare la posizione di ogni campo all'interno del tipo.  
  
 I compilatori c#, Visual Basic e C++ si applicano le <xref:System.Runtime.InteropServices.LayoutKind.Sequential> valore layout alle strutture per impostazione predefinita. Per le classi, è necessario applicare il <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> valore in modo esplicito. Il [Tlbimp.exe (tipo di libreria utilità di importazione)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) si applica anche il <xref:System.Runtime.InteropServices.StructLayoutAttribute> attributo, ma si applica sempre la <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> valore quando si importa una libreria dei tipi.  
  
   
  
## Examples  
 L'esempio seguente illustra una dichiarazione gestita della `GetSystemTime` funzione e definisce `MySystemTime` classe <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> layout. `GetSystemTime` Ottiene l'ora di sistema e viene stampato nella console.  
  
 [!code-cpp[StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/StructLayoutAttribute/CPP/structlayoutattribute.cpp#1)]
 [!code-csharp[StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/StructLayoutAttribute/CS/structlayoutattribute.cs#1)]
 [!code-vb[StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StructLayoutAttribute/VB/structlayoutattribute.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe (utilità di importazione della libreria dei tipi)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (short layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (layoutKind As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(short layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : int16 -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="layoutKind">Intero a 16 bit che rappresenta uno dei valori <see cref="T:System.Runtime.InteropServices.LayoutKind" /> che specifica come disporre la classe o la struttura.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> con il membro di enumerazione <see cref="T:System.Runtime.InteropServices.LayoutKind" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore accetta un valore integer a 16 bit sottostante che rappresenta ogni <xref:System.Runtime.InteropServices.LayoutKind> membro di enumerazione. Il [Tlbimp.exe (tipo di libreria utilità di importazione)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) utilizza questo costruttore.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
        <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe (utilità di importazione della libreria dei tipi)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.InteropServices.LayoutKind layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(System::Runtime::InteropServices::LayoutKind layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : System.Runtime.InteropServices.LayoutKind -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Runtime.InteropServices.LayoutKind" />
      </Parameters>
      <Docs>
        <param name="layoutKind">Uno dei valori di enumerazione che specifica come disporre la classe o la struttura.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> con il membro di enumerazione <see cref="T:System.Runtime.InteropServices.LayoutKind" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per codice leggibile che è meno soggetto a errori, utilizzare sempre questo costruttore.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica se effettuare il marshalling dei campi dati di stringa all'interno della classe come <see langword="LPWSTR" /> o <see langword="LPSTR" /> per impostazione predefinita.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il `CharSet` campo è impostato su <xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType>, tutti gli argomenti della stringa vengono convertiti in caratteri Unicode (`LPWSTR`) prima che vengano passati per l'implementazione non gestita. Se il campo è impostato su <xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType>, le stringhe vengono convertite in stringhe ANSI (`LPSTR`). Se il `CharSet` campo è impostato su <xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType>, la conversione è dipendente dalla piattaforma (ANSI in Windows 98 e Windows Me e Unicode nelle versioni successive).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public int Pack;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Pack" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberSignature Language="VB.NET" Value="Public Pack As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Pack;" />
      <MemberSignature Language="F#" Value="val mutable Pack : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Controlla l'allineamento dei campi dati di una classe o una struttura nella memoria.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> campo consente di controllare l'allineamento dei campi del tipo in memoria.  Influisce su entrambe <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> e <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>. Per impostazione predefinita, il valore è 0, che indica il valore predefinito di compressione delle dimensioni per la piattaforma corrente. Il valore di <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> deve essere 0, 1, 2, 4, 8, 16, 32, 64 o 128:  
  
 I campi di un'istanza del tipo sono allineati in base alle regole seguenti:  
  
-   L'allineamento del tipo è la dimensione del relativo elemento più grande (1, 2, 4, 8, byte e così via,) o la compressione specificata dimensioni, qualunque sia il minore.  
  
-   Ogni campo deve essere allineati con i campi di base alle proprie dimensioni (1, 2, 4, 8, byte e così via,) o l'allineamento del tipo, qualunque sia il minore.  Poiché l'allineamento predefinito del tipo è la dimensione del relativo elemento più grande, che è maggiore o uguale a tutte le altre lunghezze di campo, di solito significa che i campi sono allineati in base alle dimensioni. Ad esempio, anche se il campo più grande in un tipo è un intero a 64 bit (8 byte) o il campo di tipo Pack è impostata su 8 <xref:System.Byte> campi siano allineate sui limiti di 1 byte, <xref:System.Int16> campi siano allineate sui limiti di 2 byte, e <xref:System.Int32> campi siano allineate sui limiti di 4 byte.  
  
-   Viene aggiunta la spaziatura tra i campi da soddisfare i requisiti di allineamento.  
  
 Ad esempio, si consideri la struttura seguente, costituito da due <xref:System.Byte> i campi e una <xref:System.Int32> campo, quando viene usato con vari valori per il <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> campo.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex0.cs#1)]  
  
> [!IMPORTANT]
>  Per una corretta compilazione degli esempi in c#, è necessario specificare il `/unsafe` opzione del compilatore.  
  
 Se si specifica la dimensione di compressione predefinita, la dimensione della struttura è di 8 byte. I due byte occupa i primi due byte di memoria, poiché byte devono essere allineati su limiti di 1 byte. Poiché l'allineamento predefinito del tipo è 4 byte, ovvero la dimensione massima dei campi dell'oggetto, `i3`, esistono due byte di riempimento aggiungendo il campo di tipo integer.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex1.cs#2)]  
  
 Se <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> è impostato su 2, la dimensione della struttura è 6 byte. Come prima, i due byte occupa i primi due byte di memoria. Poiché i campi ora siano allineate sui limiti di 2 byte, non è senza spaziatura interna tra il secondo byte e il valore integer.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex2.cs#3)]  
  
 Se <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> è impostato su 4, la dimensione della struttura è lo stesso come nel caso predefinito, l'allineamento del tipo in cui è stato definito per la dimensione del relativo campo più grande, `i3`, ovvero 4.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex3.cs#4)]  
  
 Se <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> è impostata su 8, la dimensione della struttura è l'ancora stesso come il valore predefinito nel caso, poiché il `i3` campo viene allineato in un limite di 4 byte, che è minore di sul limite di 8 byte specificato in base al campo di Pack.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex4.cs#5)]  
  
 Per richiedere un altro esempio, si consideri la struttura seguente, che è costituito da campi a due byte, il campo di un intero con segno a 32 bit, una matrice di byte a elemento singolo e un valore decimale. Con l'impostazione predefinita la dimensione di compressione, la dimensione della struttura è byte di 28. I due byte occupa i primi due byte di memoria, seguito da due byte di riempimento, seguita dal numero intero. Di seguito è riportata la matrice a un byte, seguita da tre byte di riempimento. Infine, il <xref:System.Decimal> campo, d5, consente di allineare in un limite di 4 byte perché un valore decimale è costituita da quattro <xref:System.Int32> campi, in modo relativo allineamento è basato sulle dimensioni delle più grandi dei relativi campi e non sulle dimensioni del <xref:System.Decimal> struttura nel suo complesso.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex5.cs#6)]  
  
 Se <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> è impostato su 2, la dimensione della struttura è 24 byte. In confronto all'allineamento predefinito, i due byte di spaziatura interna tra i due byte e il valore integer sono state rimosse perché l'allineamento del tipo è a questo punto 4 anziché 2. E i tre byte di spaziatura interna dopo `a4` sono state sostituite da un byte di riempimento, poiché `d5` ora consente di allineare in un limite di 2 byte anziché un limite di 4 byte.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex6.cs#7)]  
  
 Se <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> è impostata su 8, la dimensione della struttura è uguale a quello nel caso predefinito, perché tutti i requisiti di allineamento in questa struttura sono minore di 8.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex7.cs#8)]  
  
 Il <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> campo viene frequentemente utilizzato quando vengono esportate strutture durante il disco e rete le operazioni di scrittura. Il campo viene spesso utilizzato platform invoke e operazioni di interoperabilità.  
  
 In alcuni casi, il campo viene usato per ridurre i requisiti di memoria che produce una dimensione di compressione più stretta. Tuttavia, questo tipo di utilizzo richiede un'attenta considerazione dei vincoli di componenti hardware effettivi e può influire negativamente sulle prestazioni.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Size" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberSignature Language="VB.NET" Value="Public Size As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Size;" />
      <MemberSignature Language="F#" Value="val mutable Size : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica le dimensioni assolute della classe o della struttura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo campo deve essere uguale o maggiore della dimensione totale, espressa in byte, dei membri della classe o struttura. Questo campo è destinato principalmente ai writer di compilatori che desiderano estendere la memoria occupata da una struttura per l'accesso diretto, non gestito. Ad esempio, è possibile usare questo campo quando si lavora con le unioni che non sono rappresentate direttamente nei metadati.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.LayoutKind Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.LayoutKind Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As LayoutKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::LayoutKind Value { System::Runtime::InteropServices::LayoutKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : System.Runtime.InteropServices.LayoutKind" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.LayoutKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il valore <see cref="T:System.Runtime.InteropServices.LayoutKind" /> che specifica come è disposta la classe o la struttura.</summary>
        <value>Uno dei valori di enumerazione che specifica come è disposta la classe o la struttura.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>