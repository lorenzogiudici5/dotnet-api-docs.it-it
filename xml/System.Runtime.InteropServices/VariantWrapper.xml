<Type Name="VariantWrapper" FullName="System.Runtime.InteropServices.VariantWrapper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3739f0425913dce797ff68bfadc593b35900fd9c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36537188" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class VariantWrapper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit VariantWrapper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.VariantWrapper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VariantWrapper" />
  <TypeSignature Language="C++ CLI" Value="public ref class VariantWrapper sealed" />
  <TypeSignature Language="F#" Value="type VariantWrapper = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Esegue il marshalling dei dati di tipo <see langword="VT_VARIANT | VT_BYREF" /> dal codice gestito al codice non gestito. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo scopo della <xref:System.Runtime.InteropServices.VariantWrapper> consiste nell'aggiungere un livello di riferimento indiretto durante il marshalling di un tipo gestito per il corrispondente `VARIANT` tipo.  
  
 È possibile utilizzare questa classe per eseguire il wrapping di un' <xref:System.Object> che il marshalling di interoperabilità passa come `VT_VARIANT | VT_BYREF`. Nelle versioni 1.0 e 1.1 di .NET Framework, non è possibile effettuare il marshalling di dati variant di tipo `VT_VARIANT | VT_BYREF` a codice non gestito. Il marshalling di interoperabilità passata una variante del tipo gestito (ad esempio `VT_BSTR | VT_BYREF` per <xref:System.String>, o `VT_I4 | VT_BYREF` per <xref:System.Int32>), ma non `VT_VARIANT | VT_BYREF`.  
  
 Uno dei vantaggi dell'utilizzo `VT_VARIANT | VT_BYREF` tipi variant è che il tipo di dati può essere modificato durante una chiamata al metodo. Ad esempio, è possibile passare un `VT_VARIANT | VT_BYREF` tipo variant che contiene una `VT_BSTR` e ottenere restituito un variant contenente una `VT_I4` dopo una chiamata al metodo. Poiché il marshalling di interoperabilità COM non ha modo di sapere quando passare `VT_BSTR | VT_BYREF` e quando passare `VT_VARIANT | VT_BYREF`, che fa riferimento a una variabile variant contenente una `BSTR` per i parametri dichiarati come `VARIANT *`, è possibile indicare il gestore di marshalling usando <xref:System.Runtime.InteropServices.VariantWrapper>.  
  
 Si noti che l'associazione anticipata non è supportato. è possibile utilizzare <xref:System.Runtime.InteropServices.VariantWrapper> solo quando si chiama <xref:System.Type.InvokeMember%2A> o con un'interfaccia solo Dispatch chiamato in una modalità di associazione anticipata. Nel linguaggio c#, è necessario utilizzare anche il `ref` (parola chiave) per specificare `ByRef` semantica per qualsiasi parametro di tipo <xref:System.Runtime.InteropServices.VariantWrapper>. In Visual Basic `ByRef` semantica viene aggiunti automaticamente per ogni chiamata ad associazione tardiva implicita. Si noti inoltre che l'annidamento <xref:System.Runtime.InteropServices.VariantWrapper> oggetti e matrici di <xref:System.Runtime.InteropServices.VariantWrapper> oggetti non è supportata.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Runtime.InteropServices.VariantWrapper> classe per eseguire il wrapping di un <xref:System.Object> che il marshalling di interoperabilità passa come `VT_VARIANT | VT_BYREF`.  
  
 [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VariantWrapper (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VariantWrapper(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.VariantWrapper : obj -&gt; System.Runtime.InteropServices.VariantWrapper" Usage="new System.Runtime.InteropServices.VariantWrapper obj" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto di cui eseguire il marshalling.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> per il parametro <see cref="T:System.Object" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Runtime.InteropServices.VariantWrapper> classe per eseguire il wrapping di un <xref:System.Object> che il marshalling di interoperabilità passa come `VT_VARIANT | VT_BYREF`.  
  
 [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WrappedObject">
      <MemberSignature Language="C#" Value="public object WrappedObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object WrappedObject" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WrappedObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ WrappedObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WrappedObject : obj" Usage="System.Runtime.InteropServices.VariantWrapper.WrappedObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto incluso dall'oggetto <see cref="T:System.Runtime.InteropServices.VariantWrapper" />.</summary>
        <value>Oggetto incluso dall'oggetto <see cref="T:System.Runtime.InteropServices.VariantWrapper" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>