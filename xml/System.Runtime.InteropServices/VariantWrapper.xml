<Type Name="VariantWrapper" FullName="System.Runtime.InteropServices.VariantWrapper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ecfb69a5fa120f1925c972714ae1fb6f3b399dc9" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52225441" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class VariantWrapper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit VariantWrapper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.VariantWrapper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VariantWrapper" />
  <TypeSignature Language="C++ CLI" Value="public ref class VariantWrapper sealed" />
  <TypeSignature Language="F#" Value="type VariantWrapper = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2">
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netcore-2.2">
      <AttributeName>System.Obsolete("VariantWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1baa9-101">Esegue il marshalling dei dati di tipo <see langword="VT_VARIANT | VT_BYREF" /> dal codice gestito al codice non gestito.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1baa9-101">Marshals data of type <see langword="VT_VARIANT | VT_BYREF" /> from managed to unmanaged code.</span>
      </span>
      <span data-ttu-id="1baa9-102">Questa classe non può essere ereditata.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1baa9-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1baa9-103">Lo scopo della <xref:System.Runtime.InteropServices.VariantWrapper> consiste nell'aggiungere un livello di riferimento indiretto durante il marshalling di un tipo gestito corrispondente `VARIANT` tipo.</span><span class="sxs-lookup"><span data-stu-id="1baa9-103">The purpose of <xref:System.Runtime.InteropServices.VariantWrapper> is to add one level of indirection when marshaling a managed type to the corresponding `VARIANT` type.</span></span>  
  
 <span data-ttu-id="1baa9-104">È possibile utilizzare questa classe per eseguire il wrapping di un' <xref:System.Object> che passa il marshalling di interoperabilità come `VT_VARIANT | VT_BYREF`.</span><span class="sxs-lookup"><span data-stu-id="1baa9-104">You can use this class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.</span></span> <span data-ttu-id="1baa9-105">Nelle versioni 1.0 e 1.1 di .NET Framework, non è stato possibile effettuare il marshalling di dati variant di tipo `VT_VARIANT | VT_BYREF` a codice non gestito.</span><span class="sxs-lookup"><span data-stu-id="1baa9-105">In versions 1.0 and 1.1 of the .NET Framework, it was not possible to marshal variant data of type `VT_VARIANT | VT_BYREF` to unmanaged code.</span></span> <span data-ttu-id="1baa9-106">Il marshalling di interoperabilità passato una variante del tipo gestito (ad esempio, `VT_BSTR | VT_BYREF` per <xref:System.String>, o `VT_I4 | VT_BYREF` per <xref:System.Int32>), ma non `VT_VARIANT | VT_BYREF`.</span><span class="sxs-lookup"><span data-stu-id="1baa9-106">The interop marshaler passed a variant of the managed type (for example, `VT_BSTR | VT_BYREF` for <xref:System.String>, or `VT_I4 | VT_BYREF` for <xref:System.Int32>), but not `VT_VARIANT | VT_BYREF`.</span></span>  
  
 <span data-ttu-id="1baa9-107">Un vantaggio dell'utilizzo `VT_VARIANT | VT_BYREF` tipi variant è che il tipo di dati può essere modificato durante una chiamata al metodo.</span><span class="sxs-lookup"><span data-stu-id="1baa9-107">One advantage of using `VT_VARIANT | VT_BYREF` variant types is that the type of data can be changed during a method call.</span></span> <span data-ttu-id="1baa9-108">Ad esempio, è possibile passare un `VT_VARIANT | VT_BYREF` tipo variant che contiene un `VT_BSTR` e get ha restituita una variante che contiene un `VT_I4` dopo una chiamata al metodo.</span><span class="sxs-lookup"><span data-stu-id="1baa9-108">For example, you can pass a `VT_VARIANT | VT_BYREF` variant type that contains a `VT_BSTR` and get a variant returned that contains a `VT_I4` after a method call.</span></span> <span data-ttu-id="1baa9-109">Poiché il marshalling di interoperabilità COM non ha modo di sapere quando passare `VT_BSTR | VT_BYREF` e quando passare `VT_VARIANT | VT_BYREF`, che punta a un variant contenente una `BSTR` per i parametri dichiarati come `VARIANT *`, è possibile indicare al gestore di marshalling usando <xref:System.Runtime.InteropServices.VariantWrapper>.</span><span class="sxs-lookup"><span data-stu-id="1baa9-109">Because the COM interop marshaler has no way of knowing when to pass `VT_BSTR | VT_BYREF` and when to pass `VT_VARIANT | VT_BYREF`, which points to a variant that contains a `BSTR` for parameters declared as `VARIANT *`, you can instruct the marshaler by using <xref:System.Runtime.InteropServices.VariantWrapper>.</span></span>  
  
 <span data-ttu-id="1baa9-110">Si noti che l'associazione anticipata non è supportata; è possibile usare <xref:System.Runtime.InteropServices.VariantWrapper> solo quando si chiama <xref:System.Type.InvokeMember%2A> o con un'interfaccia solo Dispatch chiamato in una modalità di associazione anticipata.</span><span class="sxs-lookup"><span data-stu-id="1baa9-110">Note that early binding is not supported; you can use <xref:System.Runtime.InteropServices.VariantWrapper> only when calling <xref:System.Type.InvokeMember%2A> or with a Dispatch-only interface called in an early bound fashion.</span></span> <span data-ttu-id="1baa9-111">In c#, è necessario usare anche il `ref` parola chiave per specificare `ByRef` semantica per qualsiasi parametro di tipo <xref:System.Runtime.InteropServices.VariantWrapper>.</span><span class="sxs-lookup"><span data-stu-id="1baa9-111">In C#, you must also use the `ref` keyword to specify `ByRef` semantics for any parameter of type <xref:System.Runtime.InteropServices.VariantWrapper>.</span></span> <span data-ttu-id="1baa9-112">In Visual Basic `ByRef` semantica viene aggiunti automaticamente per ogni chiamata ad associazione tardiva implicita.</span><span class="sxs-lookup"><span data-stu-id="1baa9-112">In Visual Basic, `ByRef` semantics are added automatically for every implicit late binding call.</span></span> <span data-ttu-id="1baa9-113">Si noti inoltre che l'annidamento <xref:System.Runtime.InteropServices.VariantWrapper> gli oggetti e matrici di <xref:System.Runtime.InteropServices.VariantWrapper> oggetti non è supportato.</span><span class="sxs-lookup"><span data-stu-id="1baa9-113">Also note that nesting <xref:System.Runtime.InteropServices.VariantWrapper> objects and arrays of <xref:System.Runtime.InteropServices.VariantWrapper> objects is not supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1baa9-114">Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Runtime.InteropServices.VariantWrapper> classe per eseguire il wrapping di un' <xref:System.Object> che il marshalling di interoperabilità viene passata come `VT_VARIANT | VT_BYREF`.</span><span class="sxs-lookup"><span data-stu-id="1baa9-114">The following code example demonstrates how to use the <xref:System.Runtime.InteropServices.VariantWrapper> class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VariantWrapper (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VariantWrapper(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.VariantWrapper : obj -&gt; System.Runtime.InteropServices.VariantWrapper" Usage="new System.Runtime.InteropServices.VariantWrapper obj" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="1baa9-115">Oggetto di cui eseguire il marshalling.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1baa9-115">The object to marshal.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1baa9-116">Inizializza una nuova istanza della classe <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> per il parametro <see cref="T:System.Object" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1baa9-116">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> class for the specified <see cref="T:System.Object" /> parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1baa9-117">Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Runtime.InteropServices.VariantWrapper> classe per eseguire il wrapping di un' <xref:System.Object> che il marshalling di interoperabilità viene passata come `VT_VARIANT | VT_BYREF`.</span><span class="sxs-lookup"><span data-stu-id="1baa9-117">The following code example demonstrates how to use the <xref:System.Runtime.InteropServices.VariantWrapper> class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WrappedObject">
      <MemberSignature Language="C#" Value="public object WrappedObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object WrappedObject" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WrappedObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ WrappedObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WrappedObject : obj" Usage="System.Runtime.InteropServices.VariantWrapper.WrappedObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1baa9-118">Ottiene l'oggetto incluso dall'oggetto <see cref="T:System.Runtime.InteropServices.VariantWrapper" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1baa9-118">Gets the object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1baa9-119">Oggetto incluso dall'oggetto <see cref="T:System.Runtime.InteropServices.VariantWrapper" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1baa9-119">The object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>