<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="VariantWrapper.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5756043660b69b0075e319179d9908a02a325c276.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">756043660b69b0075e319179d9908a02a325c276</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>Marshals data of type <ph id="ph1">&lt;see langword="VT_VARIANT | VT_BYREF" /&gt;</ph> from managed to unmanaged code.</source>
          <target state="translated">Esegue il marshalling dei dati di tipo <ph id="ph1">&lt;see langword="VT_VARIANT | VT_BYREF" /&gt;</ph> dal codice gestito al codice non gestito.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>This class cannot be inherited.</source>
          <target state="translated">Questa classe non può essere ereditata.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>The purpose of <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> is to add one level of indirection when marshaling a managed type to the corresponding <ph id="ph2">`VARIANT`</ph> type.</source>
          <target state="translated">Lo scopo di <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> consiste nell'aggiungere un livello di riferimento indiretto durante il marshalling di un tipo gestito per il corrispondente <ph id="ph2">`VARIANT`</ph> tipo.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>You can use this class to wrap an <ph id="ph1">&lt;xref:System.Object&gt;</ph> that the interop marshaler passes as <ph id="ph2">`VT_VARIANT | VT_BYREF`</ph>.</source>
          <target state="translated">È possibile utilizzare questa classe per eseguire il wrapping di un <ph id="ph1">&lt;xref:System.Object&gt;</ph> che il marshalling di interoperabilità viene passata come <ph id="ph2">`VT_VARIANT | VT_BYREF`</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>In versions 1.0 and 1.1 of the .NET Framework, it was not possible to marshal variant data of type <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> to unmanaged code.</source>
          <target state="translated">Nelle versioni 1.0 e 1.1 di .NET Framework, non è stato possibile effettuare il marshalling di dati variant di tipo <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> a codice non gestito.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>The interop marshaler passed a variant of the managed type (for example, <ph id="ph1">`VT_BSTR | VT_BYREF`</ph> for <ph id="ph2">&lt;xref:System.String&gt;</ph>, or <ph id="ph3">`VT_I4 | VT_BYREF`</ph> for <ph id="ph4">&lt;xref:System.Int32&gt;</ph>), but not <ph id="ph5">`VT_VARIANT | VT_BYREF`</ph>.</source>
          <target state="translated">Il marshalling di interoperabilità passato una variante del tipo gestito (ad esempio, <ph id="ph1">`VT_BSTR | VT_BYREF`</ph> per <ph id="ph2">&lt;xref:System.String&gt;</ph>, o <ph id="ph3">`VT_I4 | VT_BYREF`</ph> per <ph id="ph4">&lt;xref:System.Int32&gt;</ph>), ma non <ph id="ph5">`VT_VARIANT | VT_BYREF`</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>One advantage of using <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> variant types is that the type of data can be changed during a method call.</source>
          <target state="translated">Un vantaggio dell'utilizzo <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> tipi variant è che il tipo di dati può essere modificato durante una chiamata al metodo.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>For example, you can pass a <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> variant type that contains a <ph id="ph2">`VT_BSTR`</ph> and get a variant returned that contains a <ph id="ph3">`VT_I4`</ph> after a method call.</source>
          <target state="translated">Ad esempio, è possibile passare un <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> tipo variant contenente una <ph id="ph2">`VT_BSTR`</ph> e ottenere restituito un variant contenente una <ph id="ph3">`VT_I4`</ph> dopo una chiamata al metodo.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>Because the COM interop marshaler has no way of knowing when to pass <ph id="ph1">`VT_BSTR | VT_BYREF`</ph> and when to pass <ph id="ph2">`VT_VARIANT | VT_BYREF`</ph>, which points to a variant that contains a <ph id="ph3">`BSTR`</ph> for parameters declared as <ph id="ph4">`VARIANT *`</ph>, you can instruct the marshaler by using <ph id="ph5">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph>.</source>
          <target state="translated">Poiché il marshalling di interoperabilità COM non ha modo di sapere quando passare <ph id="ph1">`VT_BSTR | VT_BYREF`</ph> e quando passare <ph id="ph2">`VT_VARIANT | VT_BYREF`</ph>, che fa riferimento a una variabile variant contenente una <ph id="ph3">`BSTR`</ph> per i parametri dichiarati come <ph id="ph4">`VARIANT *`</ph>, è possibile indicare il gestore di marshalling usando <ph id="ph5">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>Note that early binding is not supported; you can use <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> only when calling <ph id="ph2">&lt;xref:System.Type.InvokeMember%2A&gt;</ph> or with a Dispatch-only interface called in an early bound fashion.</source>
          <target state="translated">Si noti che l'associazione anticipata non è supportato. è possibile utilizzare <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> solo quando si chiama <ph id="ph2">&lt;xref:System.Type.InvokeMember%2A&gt;</ph> o con un'interfaccia solo Dispatch chiamato in una modalità di associazione anticipata.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>In C#, you must also use the <ph id="ph1">`ref`</ph> keyword to specify <ph id="ph2">`ByRef`</ph> semantics for any parameter of type <ph id="ph3">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph>.</source>
          <target state="translated">In c#, è necessario utilizzare anche il <ph id="ph1">`ref`</ph> (parola chiave) per specificare <ph id="ph2">`ByRef`</ph> semantica per qualsiasi parametro di tipo <ph id="ph3">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>In Visual Basic, <ph id="ph1">`ByRef`</ph> semantics are added automatically for every implicit late binding call.</source>
          <target state="translated">In Visual Basic <ph id="ph1">`ByRef`</ph> semantica viene aggiunti automaticamente per ogni chiamata ad associazione tardiva implicita.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>Also note that nesting <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> objects and arrays of <ph id="ph2">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> objects is not supported.</source>
          <target state="translated">Si noti inoltre che l'annidamento <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> oggetti e matrici di <ph id="ph2">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> oggetti non è supportata.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> class to wrap an <ph id="ph2">&lt;xref:System.Object&gt;</ph> that the interop marshaler passes as <ph id="ph3">`VT_VARIANT | VT_BYREF`</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare il <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> classe per eseguire il wrapping di un <ph id="ph2">&lt;xref:System.Object&gt;</ph> che il marshalling di interoperabilità viene passata come <ph id="ph3">`VT_VARIANT | VT_BYREF`</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
          <source>The object to marshal.</source>
          <target state="translated">Oggetto di cui eseguire il marshalling.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.VariantWrapper" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> parameter.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.VariantWrapper" /&gt;</ph> per il parametro <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> class to wrap an <ph id="ph2">&lt;xref:System.Object&gt;</ph> that the interop marshaler passes as <ph id="ph3">`VT_VARIANT | VT_BYREF`</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare il <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> classe per eseguire il wrapping di un <ph id="ph2">&lt;xref:System.Object&gt;</ph> che il marshalling di interoperabilità viene passata come <ph id="ph3">`VT_VARIANT | VT_BYREF`</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
          <source>Gets the object wrapped by the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.VariantWrapper" /&gt;</ph> object.</source>
          <target state="translated">Ottiene l'oggetto incluso dall'oggetto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.VariantWrapper" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
          <source>The object wrapped by the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.VariantWrapper" /&gt;</ph> object.</source>
          <target state="translated">Oggetto incluso dall'oggetto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.VariantWrapper" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>