<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="39f080201b9247188e6562c5fd981137ce4f6fec" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36538231" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type ICustomMarshaler = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornisce wrapper personalizzati per la gestione delle chiamate a metodi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un gestore di marshalling fornisce un ponte tra le funzionalità delle vecchie e nuove interfacce. Marshalling personalizzato offre i vantaggi seguenti:  
  
-   Consente le applicazioni client che sono state progettate per funzionare con un'interfaccia precedente a funzionano anche con i server che implementano una nuova interfaccia.  
  
-   Consente alle applicazioni client di progettati per funzionare con una nuova interfaccia funzionano con i server che implementano un'interfaccia precedente.  
  
 Se si dispone di un'interfaccia che introduce il comportamento di marshalling diverso o per il modello COM (Component Object) che viene esposto in modo diverso, è possibile progettare un gestore di marshalling personalizzato anziché utilizzare il marshalling di interoperabilità. Utilizzando un gestore di marshalling personalizzato, è possibile ridurre al minimo la distinzione tra componenti COM esistenti e nuovi componenti di .NET Framework.  
  
 Ad esempio, si supponga che si sta sviluppando un'interfaccia gestita denominata `INew`. Quando questa interfaccia è esposto a COM tramite un standard COM callable wrapper (CCW), con gli stessi metodi dell'interfaccia gestita e utilizza le regole di marshalling incorporate il marshalling di interoperabilità. Ora si supponga che un'interfaccia COM nota `IOld` già fornisce la stessa funzionalità come il `INew` interfaccia. Progettando un gestore di marshalling personalizzato, è possibile fornire un'implementazione non gestita di `IOld` che delega semplicemente le chiamate per l'implementazione gestita del `INew` interfaccia. Pertanto, il gestore di marshalling personalizzato funge da ponte tra le interfacce gestite e non gestite.  
  
> [!NOTE]
>  Gestori di marshalling personalizzati non vengono richiamati quando viene chiamato da codice gestito a codice non gestito in un'interfaccia solo dispatch.  
  
## <a name="defining-the-marshaling-type"></a>Definizione del tipo di marshalling  
 Prima di poter compilare un gestore di marshalling personalizzato, è necessario definire le interfacce gestite e sarà possibile effettuare il marshalling. Queste interfacce in genere eseguono la stessa funzione, ma vengono esposte in modo diverso per gli oggetti gestiti e non gestiti.  
  
 Un compilatore gestito genera un'interfaccia gestita dai metadati e l'interfaccia risulta è simile a qualsiasi altra interfaccia gestita. Nell'esempio seguente viene illustrato una tipico interfaccia.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 Definire il tipo non gestito in Strumentazione gestione Windows (IDL, Interface Definition Language) e lo si compila con il compilatore Microsoft Interface Definition Language (MIDL). Si definiscono l'interfaccia all'interno di un'istruzione di libreria e assegnarla un ID di interfaccia con l'attributo dell'identificatore univoco universale (UUID), come illustrato nell'esempio seguente.  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 Il compilatore MIDL produce diversi file di output. Se l'interfaccia è definita in old. idl, il file di output Old_i. c verrà definita una `const` variabile con l'identificatore di interfaccia (IID) dell'interfaccia, come illustrato nell'esempio seguente.  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 Il file old. h viene inoltre generato da MIDL. Contiene una definizione di C++ dell'interfaccia che può essere incluso nel codice sorgente C++.  
  
## <a name="implementing-the-icustommarshaler-interface"></a>Implementazione dell'interfaccia ICustomMarshaler  
 Il gestore di marshalling personalizzato deve implementare il <xref:System.Runtime.InteropServices.ICustomMarshaler> interfaccia per fornire i wrapper appropriati al runtime.  
  
 Il codice c# seguente consente di visualizzare l'interfaccia di base che deve essere implementata da tutti i gestori di marshalling personalizzati.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 Il <xref:System.Runtime.InteropServices.ICustomMarshaler> interfaccia include metodi che forniscono supporto per la conversione, il supporto di pulizia e informazioni sui dati di cui effettuare il marshalling.  
  
|Tipo di operazione|Metodo ICustomMarshaler|Descrizione|  
|-----------------------|-----------------------------|-----------------|  
|Conversione (da nativo a codice gestito)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|Effettua il marshalling di un puntatore ai dati nativi in un oggetto gestito. Questo metodo restituisce un runtime callable wrapper personalizzato (RCW) che può effettuare il marshalling l'interfaccia non gestita che viene passato come argomento. Il gestore di marshalling deve restituire un'istanza dell'oggetto RCW personalizzato per quel tipo.|  
|Conversione (da codice gestito a nativo)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|Effettua il marshalling di un oggetto gestito in un puntatore a dati nativi. Questo metodo restituisce un personalizzati COM callable wrapper (CCW) che può effettuare il marshalling dell'interfaccia gestita che viene passato come argomento. Il gestore di marshalling deve restituire un'istanza dell'oggetto CCW personalizzato per quel tipo.|  
|Pulizia (di codice nativo)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|Abilita il gestore di marshalling pulire i dati nativi (CCW) restituito dal <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> metodo.|  
|Pulizia (del codice gestito)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|Abilita il gestore di marshalling pulire i dati gestiti (RCW) restituito dal <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> metodo.|  
|Informazioni (codice nativo)|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|Restituisce le dimensioni dei dati da cui effettuare il marshalling non gestiti.|  
  
### <a name="conversion"></a>Conversione  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 Effettua il marshalling di un puntatore ai dati nativi in un oggetto gestito. Questo metodo restituisce un runtime callable wrapper personalizzato (RCW) che può effettuare il marshalling l'interfaccia non gestita che viene passato come argomento. Il gestore di marshalling deve restituire un'istanza dell'oggetto RCW personalizzato per quel tipo.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 Effettua il marshalling di un oggetto gestito in un puntatore a dati nativi. Questo metodo restituisce un personalizzati COM callable wrapper (CCW) che può effettuare il marshalling dell'interfaccia gestita che viene passato come argomento. Il gestore di marshalling deve restituire un'istanza dell'oggetto CCW personalizzato per quel tipo.  
  
### <a name="cleanup"></a>Pulizia  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 Abilita il gestore di marshalling pulire i dati nativi (CCW) restituito dal <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> metodo.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 Abilita il gestore di marshalling pulire i dati gestiti (RCW) restituito dal <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> metodo.  
  
### <a name="size-information"></a>Informazioni sulle dimensioni  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 Restituisce le dimensioni dei dati da cui effettuare il marshalling non gestiti.  
  
## <a name="implementing-the-getinstance-method"></a>Implementazione del metodo GetInstance  
 Oltre all'implementazione di <xref:System.Runtime.InteropServices.ICustomMarshaler> interfaccia, i gestori di marshalling personalizzati deve implementare un `static` metodo chiamato `GetInstance` che accetta un <xref:System.String> come parametro e presenta un tipo restituito di <xref:System.Runtime.InteropServices.ICustomMarshaler>. Ciò `static` metodo viene chiamato dal livello di interoperabilità COM di common language runtime per creare un'istanza del gestore di marshalling personalizzato. La stringa che viene passata a `GetInstance` un cookie che il metodo può utilizzare per personalizzare il gestore di marshalling personalizzato restituito.  
  
```  
static ICustomMarshaler *GetInstance(String *pstrCookie);  
```  
  
## <a name="applying-marshalasattribute"></a>Applicazione di MarshalAsAttribute  
 Per utilizzare un gestore di marshalling personalizzato, è necessario applicare il <xref:System.Runtime.InteropServices.MarshalAsAttribute> attributo per il parametro o il campo che viene sottoposto a marshalling.  
  
 È necessario passare anche il <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> valore di enumerazione per il <xref:System.Runtime.InteropServices.MarshalAsAttribute> costruttore. Inoltre, è necessario specificare il <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> campo con uno dei seguenti parametri denominati:  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> (obbligatorio): il nome qualificato dall'assembly del gestore di marshalling personalizzato. Il nome deve includere lo spazio dei nomi e la classe del gestore di marshalling personalizzato. Se il gestore di marshalling personalizzato non è definito nell'assembly in che viene usato, è necessario specificare il nome dell'assembly in cui è definito.  
  
    > [!NOTE]
    >  È possibile usare il <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> campo anziché il <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> campo. <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> accetta un tipo che è più facile da specificare.  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> (facoltativo): un cookie che viene passato al gestore di marshalling personalizzato. È possibile utilizzare i cookie per fornire informazioni aggiuntive per il gestore di marshalling. Ad esempio, se il gestore di marshalling stesso viene usato per specificare un numero di funzioni wrapper, il cookie identifica un wrapper specifico. Il cookie viene passato per il `GetInstance` metodo del gestore di marshalling.  
  
 Il <xref:System.Runtime.InteropServices.MarshalAsAttribute> il gestore di marshalling personalizzato che identifica in modo è possibile attivare il wrapper appropriato. Servizio di interoperabilità di common language runtime quindi esamina l'attributo e crea il tempo di gestore di marshalling personalizzato prima di argomento (parametro o campo) deve essere sottoposto a marshalling.  
  
 Il runtime chiama quindi il <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> e <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> metodi del gestore di marshalling personalizzato per attivare il wrapper corretto per gestire la chiamata.  
  
## <a name="using-a-custom-marshaler"></a>Utilizzando un gestore di marshalling personalizzato  
 Una volta completato il gestore di marshalling personalizzato, è possibile utilizzare come wrapper personalizzato per un particolare tipo. Nell'esempio seguente viene illustrata la definizione del `IUserData` dell'interfaccia gestita:  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 Nell'esempio seguente, il `IUserData` interfaccia utilizza il `NewOldMarshaler` gestore di marshalling personalizzato per consentire alle applicazioni client non gestito passare un `IOld` interfaccia per il `DoSomeStuff` metodo. La descrizione gestita del `DoSomeStuff` metodo accetta un `INew` interfaccia, come illustrato nell'esempio precedente, mentre la versione non gestita del `DoSomeStuff` accetta un `IOld` puntatore a interfaccia, come illustrato nell'esempio seguente.  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 La libreria dei tipi generata esportando la definizione gestita del `IUserData` restituisce la definizione non gestita illustrata in questo esempio invece di definizione dello standard. Il <xref:System.Runtime.InteropServices.MarshalAsAttribute> attributo applicato per il `INew` argomento nella definizione gestita del `DoSomeStuff` metodo indica che l'argomento viene utilizzato un gestore di marshalling personalizzato, come illustrato nell'esempio seguente.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 Negli esempi precedenti, il primo parametro fornito per il <xref:System.Runtime.InteropServices.MarshalAsAttribute> attributo è il <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> valore di enumerazione `UnmanagedType.CustomMarshaler`.  
  
 Il secondo parametro è il <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> campo, che fornisce il nome qualificato dall'assembly del gestore di marshalling personalizzato. Questo nome è costituito dallo spazio dei nomi e la classe del gestore di marshalling personalizzato (`MarshalType="MyCompany.NewOldMarshaler"`).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit" Usage="iCustomMarshaler.CleanUpManagedData ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">L'oggetto gestito da distruggere.</param>
        <summary>Esegue la necessaria eliminazione dei dati gestiti quando non sono più necessari.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit" Usage="iCustomMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Puntatore ai dati non gestiti da distruggere.</param>
        <summary>Esegue la necessaria eliminazione dei dati non gestiti quando non sono più necessari.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int" Usage="iCustomMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce le dimensioni dei dati nativi di cui eseguire il marshalling.</summary>
        <returns>Dimensioni dei dati nativi, in byte.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint" Usage="iCustomMarshaler.MarshalManagedToNative ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">L'oggetto gestito da convertire.</param>
        <summary>Converte i dati gestiti in dati non gestiti.</summary>
        <returns>Puntatore alla visualizzazione COM dell'oggetto gestito.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj" Usage="iCustomMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Puntatore ai dati non gestiti da trasformare.</param>
        <summary>Converte i dati non gestiti in dati gestiti.</summary>
        <returns>Oggetto che rappresenta la visualizzazione gestita dei dati COM.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>