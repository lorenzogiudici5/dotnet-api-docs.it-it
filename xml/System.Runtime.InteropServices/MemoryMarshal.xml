<Type Name="MemoryMarshal" FullName="System.Runtime.InteropServices.MemoryMarshal">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="081c61ea90612c8fde40af8e49e7e3af04bca95a" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52733902" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class MemoryMarshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MemoryMarshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.MemoryMarshal" />
  <TypeSignature Language="VB.NET" Value="Public Class MemoryMarshal" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryMarshal abstract sealed" />
  <TypeSignature Language="F#" Value="type MemoryMarshal = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="3f999-101">Fornisce metodi per l'interoperabilità con <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" /> e <see cref="T:System.ReadOnlySpan`1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3f999-101">Provides methods to interoperate with <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />,  <see cref="T:System.Span`1" />, and  <see cref="T:System.ReadOnlySpan`1" />.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;byte&gt; AsBytes&lt;T&gt; (ReadOnlySpan&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As ReadOnlySpan(Of T)) As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static ReadOnlySpan&lt;System::Byte&gt; AsBytes(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; ReadOnlySpan&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-102">Il tipo di elementi nell'intervallo di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-102">The type of items in the read-only span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="3f999-103">Sezione di origine da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-103">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-104">Esegue il cast di un oggetto <see cref="T:System.ReadOnlySpan`1" /> di un tipo primitivo, <paramref name="T" />, in un oggetto <see langword="ReadOnlySpan&lt;Byte&gt;" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-104">Casts a <see cref="T:System.ReadOnlySpan`1" /> of one primitive type, <paramref name="T" />, to a <see langword="ReadOnlySpan&lt;Byte&gt;" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-105">Intervallo di sola lettura di tipo <see cref="T:System.Byte" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-105">A read-only span of type <see cref="T:System.Byte" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="3f999-106">`T` non può contenere puntatori o riferimenti.</span><span class="sxs-lookup"><span data-stu-id="3f999-106">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="3f999-107">`T` viene controllata in fase di esecuzione per mantenere l'indipendenza dai tipi.</span><span class="sxs-lookup"><span data-stu-id="3f999-107">`T` is checked at runtime in order to preserve type safety.</span></span>  

      ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f999-108">
            <paramref name="T" /> contiene riferimenti o puntatori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-108">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3f999-109">La proprietà <see cref="P:System.ReadOnlySpan`1.Length" /> del nuovo oggetto <see cref="T:System.ReadOnlySpan`1" /> supererebbe <see cref="F:System.Int32.MaxValue" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-109">The <see cref="P:System.ReadOnlySpan`1.Length" /> property of the new <see cref="T:System.ReadOnlySpan`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;byte&gt; AsBytes&lt;T&gt; (Span&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As Span(Of T)) As Span(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static Span&lt;System::Byte&gt; AsBytes(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : Span&lt;'T (requires 'T : struct)&gt; -&gt; Span&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-110">Il tipo di elementi nel controllo span.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-110">The type of items in the span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="3f999-111">Sezione di origine da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-111">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-112">Esegue il cast di un oggetto <see cref="T:System.Span`1" /> di un tipo primitivo, <paramref name="T" />, in un oggetto <see langword="Span&lt;Byte&gt;" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-112">Casts a <see cref="T:System.Span`1" /> of one primitive type, <paramref name="T" />, to a <see langword="Span&lt;Byte&gt;" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-113">Intervallo di tipo <see cref="T:System.Byte" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-113">A span of type <see cref="T:System.Byte" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="3f999-114">`T` non può contenere puntatori o riferimenti.</span><span class="sxs-lookup"><span data-stu-id="3f999-114">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="3f999-115">`T` viene controllata in fase di esecuzione per mantenere l'indipendenza dai tipi.</span><span class="sxs-lookup"><span data-stu-id="3f999-115">`T` is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f999-116">
            <paramref name="T" /> contiene riferimenti o puntatori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-116">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3f999-117">La proprietà <see cref="P:System.Span`1.Length" /> del nuovo oggetto <see cref="T:System.Span`1" /> supererebbe <see cref="F:System.Int32.MaxValue" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-117">The <see cref="P:System.Span`1.Length" /> property of the new <see cref="T:System.Span`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsMemory(Of T) (memory As ReadOnlyMemory(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; AsMemory(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ReadOnlyMemory&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.AsMemory memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-118">Il tipo di elementi nel buffer di memoria di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-118">The type of items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="3f999-119">Buffer di memoria di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-119">The read-only memory buffer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-120">Crea un'istanza di <see cref="T:System.Memory`1" /> da un oggetto <see cref="T:System.ReadOnlyMemory`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-120">Creates a <see cref="T:System.Memory`1" /> instance from a <see cref="T:System.ReadOnlyMemory`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-121">Blocco di memoria che rappresenta la stessa memoria di <see cref="T:System.ReadOnlyMemory`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-121">A memory block that represetns the same memory as the <see cref="T:System.ReadOnlyMemory`1" /> .</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="3f999-122">Questo metodo deve essere utilizzato con estrema cautela.</span><span class="sxs-lookup"><span data-stu-id="3f999-122">This method must be used with extreme caution.</span></span> <span data-ttu-id="3f999-123"><xref:System.ReadOnlyMemory%601> viene utilizzato per rappresentare i dati non modificabili e altri memoria che non deve essere scritto.</span><span class="sxs-lookup"><span data-stu-id="3f999-123"><xref:System.ReadOnlyMemory%601> is used to represent immutable data and other memory that is not meant to be written to.</span></span> <span data-ttu-id="3f999-124"><xref:System.Memory%601> le istanze create da questo metodo non devono essere scritta per.</span><span class="sxs-lookup"><span data-stu-id="3f999-124"><xref:System.Memory%601> instances created by this method should not be written to.</span></span> <span data-ttu-id="3f999-125">Lo scopo di questo metodo consiste nel consentire le variabili tipizzate come <xref:System.Memory%601> ma utilizzate solo per la lettura per archiviare un <xref:System.ReadOnlyMemory%601>.</span><span class="sxs-lookup"><span data-stu-id="3f999-125">The purpose of this method is to allow variables typed as <xref:System.Memory%601> but only used for reading to store a <xref:System.ReadOnlyMemory%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (ReadOnlySpan&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.ReadOnlySpan`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As ReadOnlySpan(Of TFrom)) As ReadOnlySpan(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static ReadOnlySpan&lt;TTo&gt; Cast(ReadOnlySpan&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : ReadOnlySpan&lt;'From (requires 'From : struct)&gt; -&gt; ReadOnlySpan&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom">
          <span data-ttu-id="3f999-126">Tipo di intervallo di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-126">The type of the source span.</span>
          </span>
        </typeparam>
        <typeparam name="TTo">
          <span data-ttu-id="3f999-127">Tipo di intervallo di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-127">The type of the target span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="3f999-128">Sezione di origine da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-128">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-129">Esegue il cast di un intervallo di sola lettura di un tipo primitivo in un intervallo di sola lettura di un altro tipo primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-129">Casts a read-only span of one primitive type to a read-only span of another primitive type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-130">Intervallo di sola lettura convertito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-130">The converted read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="3f999-131">Né `TFrom` né `TTo` possono contenere puntatori o riferimenti.</span><span class="sxs-lookup"><span data-stu-id="3f999-131">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="3f999-132">`TFrom` e `TTo` vengono controllati per mantenere l'indipendenza dai tipi in fase di esecuzione.</span><span class="sxs-lookup"><span data-stu-id="3f999-132">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="3f999-133">Questo metodo è supportato solo sulle piattaforme che supportano l'accesso alla memoria non allineati o quando è un blocco di memoria è allineato con altri mezzi.</span><span class="sxs-lookup"><span data-stu-id="3f999-133">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f999-134">
            <paramref name="TFrom" /> o <paramref name="TTo" /> contiene riferimenti o puntatori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-134">
              <paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (Span&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.Span`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As Span(Of TFrom)) As Span(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static Span&lt;TTo&gt; Cast(Span&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : Span&lt;'From (requires 'From : struct)&gt; -&gt; Span&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom">
          <span data-ttu-id="3f999-135">Tipo di intervallo di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-135">The type of the source span.</span>
          </span>
        </typeparam>
        <typeparam name="TTo">
          <span data-ttu-id="3f999-136">Tipo di intervallo di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-136">The type of the target span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="3f999-137">Sezione di origine da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-137">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-138">Esegue il cast di un intervallo di un tipo primitivo in un intervallo di un altro tipo primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-138">Casts a span of one primitive type to a span of another primitive type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-139">Intervallo convertito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-139">The converted span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="3f999-140">Né `TFrom` né `TTo` possono contenere puntatori o riferimenti.</span><span class="sxs-lookup"><span data-stu-id="3f999-140">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="3f999-141">`TFrom` e `TTo` vengono controllati per mantenere l'indipendenza dai tipi in fase di esecuzione.</span><span class="sxs-lookup"><span data-stu-id="3f999-141">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="3f999-142">Si verifica il cast in un contesto non verificato.</span><span class="sxs-lookup"><span data-stu-id="3f999-142">The cast occurs in an unchecked context.</span></span> <span data-ttu-id="3f999-143">Se l'intervallo di `TTo` è minore dell'intervallo di `TFrom`, può verificarsi una perdita di dati.</span><span class="sxs-lookup"><span data-stu-id="3f999-143">If the range of `TTo` is less than the range of `TFrom`, data loss can occur.</span></span> <span data-ttu-id="3f999-144">Ad esempio, se `TFrom` viene <xref:System.Int64>, uno del `ReadOnlySpan<Int32>` values è 0x100001111110F0F, e `TTo` è <xref:System.Int32>, il valore risultante è 11110F0F.</span><span class="sxs-lookup"><span data-stu-id="3f999-144">For example, if `TFrom` is <xref:System.Int64>, one of the `ReadOnlySpan<Int32>` values is 0x100001111110F0F, and `TTo` is <xref:System.Int32>, the resulting value is 11110F0F.</span></span>

<span data-ttu-id="3f999-145">Questo metodo è supportato solo sulle piattaforme che supportano l'accesso alla memoria non allineati o quando è un blocco di memoria è allineato con altri mezzi.</span><span class="sxs-lookup"><span data-stu-id="3f999-145">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f999-146">
            <paramref name="TFrom" /> o <paramref name="TTo" /> contiene riferimenti o puntatori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-146">
              <paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromPinnedArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; CreateFromPinnedArray&lt;T&gt; (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; CreateFromPinnedArray&lt;T&gt;(!!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromPinnedArray(Of T) (array As T(), start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; CreateFromPinnedArray(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="static member CreateFromPinnedArray : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray (array, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-147">Tipo della matrice</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-147">The type of the array.</span>
          </span>
        </typeparam>
        <param name="array">
          <span data-ttu-id="3f999-148">Matrice di origine già bloccata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-148">The pre-pinned source array.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="3f999-149">Indice di <paramref name="array" /> da cui iniziare il blocco di memoria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-149">The index of <paramref name="array" /> at which to begin the memory block.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3f999-150">Numero di elementi da includere nel blocco di memoria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-150">The number of items to include in the memory block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-151">Crea un nuovo buffer di memoria sulla parte della matrice di destinazione già bloccata che inizia in corrispondenza dell'indice <paramref name="start" /> ed è costituita da elementi <paramref name="length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-151">Creates a new memory buffer over the portion of the pre-pinned target array beginning at the <paramref name="start" /> index and consisting of <paramref name="length" /> items.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-152">Blocco di memoria sugli elementi specificati di <paramref name="array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-152">A block of memory over the specified elements of <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="3f999-153">Se <paramref name="array" /> è <see langword="null" /> o se <paramref name="start" /> e <paramref name="length" /> sono 0, il metodo restituisce un'istanza <see cref="T:System.Memory`1" /> di zero <see cref="System.Memory`1.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-153">If <paramref name="array" /> is <see langword="null" />, or if <paramref name="start" /> and <paramref name="length" /> are 0, the method returns a <see cref="T:System.Memory`1" /> instance of <see cref="System.Memory`1.Length" /> zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="3f999-154">La matrice deve essere bloccata già prima di questo metodo viene chiamato e tale matrice non deve essere rimosso durante la <xref:System.Memory%601> buffer restituito è ancora in uso.</span><span class="sxs-lookup"><span data-stu-id="3f999-154">The array must already be pinned before this method is called, and that array must not be unpinned while the <xref:System.Memory%601> buffer that it returns is still in use.</span></span> <span data-ttu-id="3f999-155">Chiama questo metodo in una matrice sbloccata può comportare un danneggiamento della memoria.</span><span class="sxs-lookup"><span data-stu-id="3f999-155">Calling this method on an unpinned array could result in memory corruption.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException">
          <span data-ttu-id="3f999-156">
            <paramref name="array" /> è covariante e il tipo di <paramref name="array" /> non è esattamente <paramref name="T[]" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-156">
              <paramref name="array" /> is covariant, and the type of <paramref name="array" /> is not exactly <paramref name="T[]" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f999-157">
            <paramref name="start" /> o l'indice finale non è compreso nell'intervallo tra 0 e <see cref="P:System.Array.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-157">The <paramref name="start" /> or the end index is not in the range of 0 to <see cref="P:System.Array.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReadOnlySpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; CreateReadOnlySpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateReadOnlySpan(Of T) (ByRef reference As T, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateReadOnlySpan :  * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-158">Il tipo degli elementi di dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-158">The type of the data items.</span>
          </span>
        </typeparam>
        <param name="reference">
          <span data-ttu-id="3f999-159">Riferimento ai dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-159">A reference to data.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3f999-160">Numero di elementi <paramref name="T" /> contenuti in <paramref name="reference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-160">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-161">Crea un nuovo intervallo di sola lettura su una parte di un normale oggetto gestito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-161">Creates a new read-only span over a portion of a regular managed object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-162">Intervallo di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-162">A read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="3f999-163">Questo metodo può essere utile se parte di un oggetto gestito rappresenta una matrice fissa.</span><span class="sxs-lookup"><span data-stu-id="3f999-163">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="3f999-164">Questo metodo deve essere utilizzato con cautela.</span><span class="sxs-lookup"><span data-stu-id="3f999-164">This method should be used with caution.</span></span> <span data-ttu-id="3f999-165">Può essere pericoloso perché il `length` argomento non è selezionato.</span><span class="sxs-lookup"><span data-stu-id="3f999-165">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="3f999-166">Inoltre, la durata dell'intervallo restituito non viene convalidata per garantire la protezione da linguaggi compatibili con intervallo.</span><span class="sxs-lookup"><span data-stu-id="3f999-166">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; CreateSpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; CreateSpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpan(Of T) (ByRef reference As T, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Span&lt;T&gt; CreateSpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateSpan :  * int -&gt; Span&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateSpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-167">Il tipo degli elementi di dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-167">The type of the data items.</span>
          </span>
        </typeparam>
        <param name="reference">
          <span data-ttu-id="3f999-168">Riferimento ai dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-168">A reference to data.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3f999-169">Numero di elementi <paramref name="T" /> contenuti in <paramref name="reference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-169">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-170">Crea un nuovo intervallo su una parte di un normale oggetto gestito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-170">Creates a new span over a portion of a regular managed object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-171">Intervallo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-171">A span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="3f999-172">Questo metodo può essere utile se parte di un oggetto gestito rappresenta una matrice fissa.</span><span class="sxs-lookup"><span data-stu-id="3f999-172">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="3f999-173">Questo metodo deve essere utilizzato con cautela.</span><span class="sxs-lookup"><span data-stu-id="3f999-173">This method should be used with caution.</span></span> <span data-ttu-id="3f999-174">Può essere pericoloso perché il `length` argomento non è selezionato.</span><span class="sxs-lookup"><span data-stu-id="3f999-174">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="3f999-175">Inoltre, la durata dell'intervallo restituito non viene convalidata per garantire la protezione da linguaggi compatibili con intervallo.</span><span class="sxs-lookup"><span data-stu-id="3f999-175">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetReference&lt;T&gt; (ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As ReadOnlySpan(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : ReadOnlySpan&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-176">Il tipo di elementi nel controllo span.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-176">The type of items in the span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="3f999-177">Intervallo di sola lettura da cui viene recuperato il riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-177">The read-only span from which the reference is retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-178">Restituisce un riferimento all'elemento dell'intervallo di sola lettura in corrispondenza dell'indice 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-178">Returns a reference to the element of the read-only span at index 0.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-179">Riferimento all'elemento in corrispondenza dell'indice 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-179">A reference to the element at index 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="3f999-180">Se l'intervallo di sola lettura è vuoto, questo metodo restituisce un riferimento al percorso in cui l'elemento in corrispondenza dell'indice 0 sarebbe stato archiviato.</span><span class="sxs-lookup"><span data-stu-id="3f999-180">If the read-only span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="3f999-181">Tale riferimento può o potrebbe non essere `null`.</span><span class="sxs-lookup"><span data-stu-id="3f999-181">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="3f999-182">Il riferimento restituito può essere utilizzato per l'aggiunta, ma non si deve mai essere dereferenziato.</span><span class="sxs-lookup"><span data-stu-id="3f999-182">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetReference&lt;T&gt; (Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As Span(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : Span&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-183">Il tipo di elementi nel controllo span.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-183">The type of items in the span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="3f999-184">Intervallo da cui viene recuperato il riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-184">The span from which the reference is retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-185">Restituisce un riferimento all'elemento dell'intervallo in corrispondenza dell'indice 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-185">Returns a reference to the element of the span at index 0.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-186">Riferimento all'elemento in corrispondenza dell'indice 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-186">A reference to the element at index 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="3f999-187">Se l'intervallo è vuoto, questo metodo restituisce un riferimento al percorso in cui l'elemento in corrispondenza dell'indice 0 sarebbe stato archiviato.</span><span class="sxs-lookup"><span data-stu-id="3f999-187">If the span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="3f999-188">Tale riferimento può o potrebbe non essere `null`.</span><span class="sxs-lookup"><span data-stu-id="3f999-188">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="3f999-189">Il riferimento restituito può essere utilizzato per l'aggiunta, ma non si deve mai essere dereferenziato.</span><span class="sxs-lookup"><span data-stu-id="3f999-189">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read(Of T As Structure) (source As ReadOnlySpan(Of Byte)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T Read(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member Read : ReadOnlySpan&lt;byte&gt; -&gt; 'T (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Read source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-190">Il tipo dell'elemento da recuperare dall'intervallo di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-190">The type of the item to retrieve from the read-only span.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3f999-191">Intervallo di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-191">A read-only span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-192">Legge una struttura di tipo</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-192">Reads a structure of type</span>
          </span>
          <param name="T" />
          <span data-ttu-id="3f999-193">da un intervallo di sola lettura di byte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-193">out of a read-only span of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-194">Struttura recuperata dall'intervallo di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-194">The structure retrieved from the read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="3f999-195">`T` non può contenere puntatori o riferimenti.</span><span class="sxs-lookup"><span data-stu-id="3f999-195">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="3f999-196">' Opzione è selezionata in fase di esecuzione per mantenere l'indipendenza dai tipi.</span><span class="sxs-lookup"><span data-stu-id="3f999-196">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f999-197">
            <paramref name="T" /> contiene riferimenti o puntatori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-197">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f999-198">
            <paramref name="source" /> è minore di <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-198">
              <paramref name="source" /> is smaller than <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToEnumerable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; ToEnumerable&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; ToEnumerable&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToEnumerable(Of T) (memory As ReadOnlyMemory(Of T)) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ ToEnumerable(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member ToEnumerable : ReadOnlyMemory&lt;'T&gt; -&gt; seq&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.ToEnumerable memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-199">Il tipo degli elementi nel buffer di memoria di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-199">The type of the items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="3f999-200">Buffer di memoria di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-200">A read-only memory buffer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-201">Crea una vista <see cref="T:System.Collections.Generic.IEnumerable`1" /> del buffer di memoria di sola lettura specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-201">Creates an <see cref="T:System.Collections.Generic.IEnumerable`1" /> view of the given read-only memory buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-202">Vista enumerabile di <paramref name="memory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-202">An enumerable view of <paramref name="memory" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="3f999-203">Questo metodo consente a un buffer di memoria di sola lettura da utilizzare per le API esistenti che richiedono un parametro di tipo <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="3f999-203">This method allows a read-only memory buffer to be used in existing APIs that require a parameter of type <xref:System.Collections.Generic.IEnumerable%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetArray&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, out ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetArray&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] valuetype System.ArraySegment`1&lt;!!T&gt;&amp; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetArray(Of T) (memory As ReadOnlyMemory(Of T), ByRef segment As ArraySegment(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryGetArray(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] ArraySegment&lt;T&gt; % segment);" />
      <MemberSignature Language="F#" Value="static member TryGetArray : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetArray (memory, segment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-204">Il tipo di elementi nel buffer di memoria di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-204">The type of items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="3f999-205">Buffer di memoria di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-205">A read-only memory buffer.</span>
          </span>
        </param>
        <param name="segment">
          <span data-ttu-id="3f999-206">Quando termina, questo metodo contiene il segmento di matrice recuperato dal buffer di memoria di sola lettura sottostante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-206">When this method returns, contains the array segment retrieved from the underlying read-only memory buffer.</span>
          </span>
          <span data-ttu-id="3f999-207">Se il metodo non riesce, restituisce un segmento di matrice predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-207">If the method fails, the method returns a default array segment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-208">Prova a ottenere un segmento di matrice dal buffer di memoria sottostante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-208">Tries to get an array segment from the underlying memory buffer.</span>
          </span>
          <span data-ttu-id="3f999-209">Il valore restituito indica l'esito positivo dell'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-209">The return value indicates the success of the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-210">
            <see langword="true" /> se la chiamata al metodo riesce; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-210">
              <see langword="true" /> if the method call succeeds; <see langword="false" /> otherwise.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-211">Il tipo degli elementi nel buffer di memoria di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-211">The type of the items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <typeparam name="TManager">
          <span data-ttu-id="3f999-212">Il tipo del <see cref="T:System.Buffers.MemoryManager`1" /> da recuperare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-212">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="3f999-213">Buffer di memoria di sola lettura per cui ottenere il gestore di memoria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-213">The read-only memory buffer for which to get the memory manager.</span>
          </span>
        </param>
        <param name="manager">
          <span data-ttu-id="3f999-214">Quando il metodo termina, il gestore di <paramref name="memory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-214">When the method returns, the manager of <paramref name="memory" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-215">Tenta di recuperare un <see cref="T:System.Buffers.MemoryManager`1" /> dal buffer di memoria di sola lettura sottostante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-215">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" /> from the underlying read-only memory buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-216">
            <see langword="true" /> se il metodo ha recuperato il gestore di memoria; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-216">
              <see langword="true" /> if the method retrieved the memory manager; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager, out int start, out int length) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  *  *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-217">Il tipo degli elementi nel buffer di memoria di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-217">The type of the items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <typeparam name="TManager">
          <span data-ttu-id="3f999-218">Il tipo del <see cref="T:System.Buffers.MemoryManager`1" /> da recuperare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-218">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="3f999-219">Buffer di memoria di sola lettura per cui ottenere il gestore di memoria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-219">The read-only memory buffer for which to get the memory manager.</span>
          </span>
        </param>
        <param name="manager">
          <span data-ttu-id="3f999-220">Quando il metodo termina, il gestore di <paramref name="memory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-220">When the method returns, the manager of <paramref name="memory" />.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="3f999-221">Quando il metodo termina, offset dall'inizio di <paramref name="manager" /> rappresentato da <paramref name="memory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-221">When the method returns, the offset from the start of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3f999-222">Quando il metodo termina, lunghezza di <paramref name="manager" /> rappresentato da <paramref name="memory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-222">When the method returns, the length of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-223">Tenta di recuperare un <see cref="T:System.Buffers.MemoryManager`1" />, l'indice iniziale e la lunghezza dal buffer di memoria di sola lettura sottostante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-223">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" />, start index, and length from the underlying read-only memory buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-224">
            <see langword="true" /> se il metodo è riuscito; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-224">
              <see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetString">
      <MemberSignature Language="C#" Value="public static bool TryGetString (ReadOnlyMemory&lt;char&gt; memory, out string text, out int start, out int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetString(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory, [out] string&amp; text, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetString (memory As ReadOnlyMemory(Of Char), ByRef text As String, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetString(ReadOnlyMemory&lt;char&gt; memory, [Runtime::InteropServices::Out] System::String ^ % text, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetString : ReadOnlyMemory&lt;char&gt; *  *  *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetString (memory, text, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="text" Type="System.String" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memory">
          <span data-ttu-id="3f999-225">Memoria di sola lettura che contiene un blocco di caratteri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-225">Read-only memory containing a block of characters.</span>
          </span>
        </param>
        <param name="text">
          <span data-ttu-id="3f999-226">Quando il metodo termina, stringa contenuta nel buffer di memoria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-226">When the method returns, the string contained in the memory buffer.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="3f999-227">Posizione iniziale in <paramref name="text" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-227">The starting location in <paramref name="text" />.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3f999-228">Numero di caratteri in <paramref name="text" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-228">The number of characters in <paramref name="text" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-229">Prova a ottenere la stringa sottostante da un <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-229">Tries to get the underlying string from a <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-230">
            <see langword="true" /> se il metodo recupera correttamente la stringa sottostante; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-230">
              <see langword="true" /> if the method successfully retrieves the underlying string; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRead&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source, out T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRead&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRead(Of T As Structure) (source As ReadOnlySpan(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryRead(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryRead : ReadOnlySpan&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryRead (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-231">Tipo di struttura da recuperare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-231">The type of the structure to retrieve.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3f999-232">Intervallo di sola lettura di byte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-232">A read-only span of bytes.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="3f999-233">Quando il metodo termina, istanza di <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-233">When the method returns, an instance of <paramref name="T" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-234">Tenta di leggere una struttura di tipo <paramref name="T" /> da un intervallo di sola lettura di byte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-234">Tries to read a structure of type <paramref name="T" /> from a read-only span of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-235">
            <see langword="true" /> se il metodo riesce a recuperare un'istanza della struttura; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-235">
              <see langword="true" /> if the method succeeds in retrieving an instance of the structure; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="3f999-236">`T` non può contenere puntatori o riferimenti.</span><span class="sxs-lookup"><span data-stu-id="3f999-236">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="3f999-237">' Opzione è selezionata in fase di esecuzione per mantenere l'indipendenza dai tipi.</span><span class="sxs-lookup"><span data-stu-id="3f999-237">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f999-238">
            <paramref name="T" /> contiene riferimenti o puntatori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-238">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryWrite&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryWrite&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWrite&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWrite(Of T As Structure) (destination As Span(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryWrite(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member TryWrite : Span&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryWrite (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-239">Il tipo della struttura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-239">The type of the structure.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="3f999-240">Intervallo di byte per contenere la struttura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-240">The span of bytes to contain the structure.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="3f999-241">Struttura da scrivere nell'intervallo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-241">The structure to be written to the span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-242">Tenta di scrivere una struttura di tipo <paramref name="T" /> in un intervallo di byte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-242">Tries to writes a structure of type <paramref name="T" /> into a span of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3f999-243">
            <see langword="true" /> se l'operazione di scrittura ha esito positivo; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-243">
              <see langword="true" /> if the write operation succeeded; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="3f999-244">Il metodo restituisce <see langword="false" /> se l'intervallo è troppo piccolo per contenere <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-244">The method returns <see langword="false" /> if the span is too small to contain <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="3f999-245">`T` non può contenere puntatori o riferimenti.</span><span class="sxs-lookup"><span data-stu-id="3f999-245">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="3f999-246">' Opzione è selezionata in fase di esecuzione per mantenere l'indipendenza dai tipi.</span><span class="sxs-lookup"><span data-stu-id="3f999-246">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f999-247">
            <paramref name="TFrom" /> o <paramref name="TTo" /> contiene riferimenti o puntatori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-247">
              <paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write(Of T As Structure) (destination As Span(Of Byte), ByRef value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static void Write(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member Write : Span&lt;byte&gt; *  -&gt; unit (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Write (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3f999-248">Il tipo della struttura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-248">The type of the structure.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="3f999-249">Intervallo di byte per contenere la struttura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-249">The span of bytes to contain the structure.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="3f999-250">Struttura da scrivere nell'intervallo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-250">The structure to be written to the span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3f999-251">Scrive una struttura di tipo <paramref name="T" /> in un intervallo di byte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-251">Writes a structure of type <paramref name="T" /> into a span of bytes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="3f999-252">`T` non può contenere puntatori o riferimenti.</span><span class="sxs-lookup"><span data-stu-id="3f999-252">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="3f999-253">' Opzione è selezionata in fase di esecuzione per mantenere l'indipendenza dai tipi.</span><span class="sxs-lookup"><span data-stu-id="3f999-253">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3f999-254">
            <paramref name="T" /> contiene riferimenti o puntatori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-254">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3f999-255">
            <paramref name="destination" /> è troppo piccolo per contenere <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3f999-255">
              <paramref name="destination" /> is too small to contain <paramref name="value" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>