<Type Name="ImmutableInterlocked" FullName="System.Collections.Immutable.ImmutableInterlocked">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="36a0f09473ecf1654fb623621605a6bbea372285" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36644649" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ImmutableInterlocked" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ImmutableInterlocked extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableInterlocked" />
  <TypeSignature Language="VB.NET" Value="Public Class ImmutableInterlocked" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImmutableInterlocked abstract sealed" />
  <TypeSignature Language="F#" Value="type ImmutableInterlocked = class" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="49c12-101">Contiene meccanismi di scambio con interlock per le raccolte non modificabili.</span>
      <span class="sxs-lookup">
        <span data-stu-id="49c12-101">Contains interlocked exchange mechanisms for immutable collections.</span>
      </span>
      <span data-ttu-id="49c12-102">**Pacchetto NuGet**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">informazioni sulle raccolte non modificabili e su come installarle</see>)</span>
      <span class="sxs-lookup">
        <span data-stu-id="49c12-102">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">about immutable collections and how to install</see>)</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
    <threadsafe>
      <span data-ttu-id="49c12-103">Questo tipo è thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="49c12-103">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="AddOrUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue AddOrUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TValue&gt; addValueFactory, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue AddOrUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`2&lt;!!TKey, !!TValue&gt; addValueFactory, class System.Func`3&lt;!!TKey, !!TValue, !!TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddOrUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, addValueFactory As Func(Of TKey, TValue), updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue AddOrUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TValue&gt; ^ addValueFactory, Func&lt;TKey, TValue, TValue&gt; ^ updateValueFactory);" />
      <MemberSignature Language="F#" Value="static member AddOrUpdate :  * 'Key * Func&lt;'Key, 'Value&gt; * Func&lt;'Key, 'Value, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate (location, key, addValueFactory, updateValueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="location">
          <span data-ttu-id="49c12-104">Variabile o campo da aggiornare in modo atomico se l'oggetto specificato non è presente nel dizionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-104">The variable or field to atomically update if the specified  is not in the dictionary.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="49c12-105">Chiave per il valore da aggiungere o aggiornare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-105">The key for the value to add or update.</span>
          </span>
        </param>
        <param name="addValueFactory">
          <span data-ttu-id="49c12-106">Funzione che riceve la chiave e restituisce un nuovo valore da aggiungere al dizionario quando non esiste alcun valore in precedenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-106">The function that receives the key and returns a new value to add to the dictionary when no value previously exists.</span>
          </span>
        </param>
        <param name="updateValueFactory">
          <span data-ttu-id="49c12-107">Funzione che riceve la chiave e il valore precedente e restituisce il nuovo valore con cui aggiornare il dizionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-107">The function that receives the key and prior value and returns the new value with which to update the dictionary.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-108">Ottiene il valore da un dizionario dopo averlo aggiunto o avere aggiornato una voce esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-108">Obtains the value from a dictionary after having added it or updated an existing entry.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49c12-109">Valore aggiunto o modificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-109">The added or updated value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue AddOrUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue addValue, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue AddOrUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue addValue, class System.Func`3&lt;!!TKey, !!TValue, !!TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddOrUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, addValue As TValue, updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue AddOrUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue addValue, Func&lt;TKey, TValue, TValue&gt; ^ updateValueFactory);" />
      <MemberSignature Language="F#" Value="static member AddOrUpdate :  * 'Key * 'Value * Func&lt;'Key, 'Value, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate (location, key, addValue, updateValueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValue" Type="TValue" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="location">
          <span data-ttu-id="49c12-110">Variabile o campo da aggiornare in modo atomico se l'oggetto specificato non è presente nel dizionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-110">The variable or field to atomically update if the specified  is not in the dictionary.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="49c12-111">Chiave per il valore da aggiungere o aggiornare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-111">The key for the value to add or update.</span>
          </span>
        </param>
        <param name="addValue">
          <span data-ttu-id="49c12-112">Valore da usare se non esiste alcun valore precedente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-112">The value to use if no previous value exists.</span>
          </span>
        </param>
        <param name="updateValueFactory">
          <span data-ttu-id="49c12-113">Funzione che riceve la chiave e il valore precedente e restituisce il nuovo valore con cui aggiornare il dizionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-113">The function that receives the key and prior value and returns the new value with which to update the dictionary.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-114">Ottiene il valore da un dizionario dopo averlo aggiunto o avere aggiornato una voce esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-114">Obtains the value from a dictionary after having added it or updated an existing entry.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49c12-115">Valore aggiunto o modificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-115">The added or updated value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enqueue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Enqueue&lt;T&gt; (ref System.Collections.Immutable.ImmutableQueue&lt;T&gt; location, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enqueue&lt;T&gt;(class System.Collections.Immutable.ImmutableQueue`1&lt;!!T&gt;&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enqueue(Of T) (ByRef location As ImmutableQueue(Of T), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Enqueue(System::Collections::Immutable::ImmutableQueue&lt;T&gt; ^ % location, T value);" />
      <MemberSignature Language="F#" Value="static member Enqueue :  * 'T -&gt; unit" Usage="System.Collections.Immutable.ImmutableInterlocked.Enqueue (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableQueue&lt;T&gt;&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="49c12-116">Tipo di elementi contenuti nella raccolta</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-116">The type of items contained in the collection</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="49c12-117">Variabile o campo da aggiornare in modo atomico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-117">The variable or field to atomically update.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="49c12-118">Valore da accodare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-118">The value to enqueue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-119">Accoda in modo atomico un elemento alla fine di una coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-119">Atomically enqueues an element to the end of a queue.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TValue&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`2&lt;!!TKey, !!TValue&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, valueFactory As Func(Of TKey, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TValue&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd :  * 'Key * Func&lt;'Key, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="49c12-120">Tipo di chiavi contenute nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-120">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="49c12-121">Tipo di valori contenuti nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-121">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="49c12-122">Variabile o campo da aggiornare in modo atomico se l'oggetto specificato non è presente nel dizionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-122">The variable or field to atomically update if the specified  is not in the dictionary.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="49c12-123">Chiave per il valore da recuperare o aggiungere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-123">The key for the value to retrieve or add.</span>
          </span>
        </param>
        <param name="valueFactory">
          <span data-ttu-id="49c12-124">Funzione da eseguire per ottenere il valore da inserire nel dizionario se la chiave non viene trovata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-124">The function to execute to obtain the value to insert into the dictionary if the key is not found.</span>
          </span>
          <span data-ttu-id="49c12-125">Questo delegato non verrà richiamato più di una volta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-125">This delegate will not be invoked more than once.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-126">Ottiene il valore per la chiave specificata dal dizionario o aggiunge un nuovo valore al dizionario, se la chiave non viene trovata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-126">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49c12-127">Valore in corrispondenza della chiave specificata o <paramref name="valueFactory" /> se la chiave non è presente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-127">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, value As TValue) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd :  * 'Key * 'Value -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="49c12-128">Tipo di chiavi contenute nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-128">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="49c12-129">Tipo di valori contenuti nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-129">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="49c12-130">Variabile o campo da aggiornare in modo atomico se la chiave specificata non è presente nel dizionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-130">The variable or field to atomically update if the specified key is not in the dictionary.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="49c12-131">Chiave per il valore da ottenere o aggiungere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-131">The key for the value to get or add.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="49c12-132">Valore da aggiungere al dizionario se la chiave non viene trovata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-132">The value to add to the dictionary the key is not found.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-133">Ottiene il valore per la chiave specificata dal dizionario o aggiunge un nuovo valore al dizionario, se la chiave non viene trovata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-133">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49c12-134">Valore in corrispondenza della chiave specificata o <paramref name="valueFactory" /> se la chiave non è presente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-134">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue,TArg&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue,TArg&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TArg,TValue&gt; valueFactory, TArg factoryArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue, TArg&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`3&lt;!!TKey, !!TArg, !!TValue&gt; valueFactory, !!TArg factoryArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue, TArg) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, valueFactory As Func(Of TKey, TArg, TValue), factoryArgument As TArg) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue, typename TArg&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TArg, TValue&gt; ^ valueFactory, TArg factoryArgument);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd :  * 'Key * Func&lt;'Key, 'Arg, 'Value&gt; * 'Arg -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, valueFactory, factoryArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
        <TypeParameter Name="TArg" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TArg,TValue&gt;" />
        <Parameter Name="factoryArgument" Type="TArg" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="49c12-135">Tipo di chiavi contenute nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-135">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="49c12-136">Tipo di valori contenuti nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-136">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TArg">To be added.</typeparam>
        <param name="location">
          <span data-ttu-id="49c12-137">Variabile o campo da aggiornare se l'oggetto specificato non è presente nel dizionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-137">The variable or field to update if the specified is not in the dictionary.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="49c12-138">Chiave per il valore da recuperare o aggiungere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-138">The key for the value to retrieve or add.</span>
          </span>
        </param>
        <param name="valueFactory">
          <span data-ttu-id="49c12-139">Funzione da eseguire per ottenere il valore da inserire nel dizionario se la chiave non viene trovata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-139">The function to execute to obtain the value to insert into the dictionary if the key is not found.</span>
          </span>
        </param>
        <param name="factoryArgument">
          <span data-ttu-id="49c12-140">Argomento da passare alla factory del valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-140">The argument to pass to the value factory.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-141">Ottiene il valore per la chiave specificata dal dizionario o aggiunge un nuovo valore al dizionario, se la chiave non viene trovata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-141">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49c12-142">Valore in corrispondenza della chiave specificata o <paramref name="valueFactory" /> se la chiave non è presente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-142">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedCompareExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; InterlockedCompareExchange&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value, System.Collections.Immutable.ImmutableArray&lt;T&gt; comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; InterlockedCompareExchange&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedCompareExchange(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T), comparand As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Immutable::ImmutableArray&lt;T&gt; InterlockedCompareExchange(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value, System::Collections::Immutable::ImmutableArray&lt;T&gt; comparand);" />
      <MemberSignature Language="F#" Value="static member InterlockedCompareExchange :  * System.Collections.Immutable.ImmutableArray&lt;'T&gt; * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange (location, value, comparand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
        <Parameter Name="comparand" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="49c12-143">Tipo di elemento memorizzato dalla matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-143">The type of element stored by the array.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="49c12-144">Destinazione il cui valore viene confrontato con <c>comparand</c> ed eventualmente sostituito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-144">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="49c12-145">Valore che sostituisce il valore di destinazione se il confronto rileva l'uguaglianza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-145">The value that replaces the destination value if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="49c12-146">Valore confrontato con il valore in corrispondenza di <c>location</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-146">The value that is compared to the value at <c>location</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-147">Consente di confrontare due matrici non modificabili per verificarne l'uguaglianza; in caso affermativo, una delle matrici viene sostituita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-147">Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49c12-148">Valore originale in <paramref name="location" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-148">The original value in <paramref name="location" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; InterlockedExchange&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; InterlockedExchange&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedExchange(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Immutable::ImmutableArray&lt;T&gt; InterlockedExchange(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member InterlockedExchange :  * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="49c12-149">Tipo di elemento memorizzato dalla matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-149">The type of element stored by the array.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="49c12-150">Matrice da impostare sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-150">The array to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="49c12-151">Valore su cui è impostato il parametro <c>location</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-151">The value to which the <c>location</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-152">Imposta una matrice sulla matrice specificata e restituisce un riferimento alla matrice originale, come operazione atomica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-152">Sets an array to the specified array and returns a reference to the original array, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49c12-153">Valore originale di <paramref name="location" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-153">The original value of <paramref name="location" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedInitialize&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool InterlockedInitialize&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InterlockedInitialize&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedInitialize(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool InterlockedInitialize(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member InterlockedInitialize :  * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="49c12-154">Tipo di elemento memorizzato dalla matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-154">The type of element stored by the array.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="49c12-155">Matrice da impostare sul valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-155">The array to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="49c12-156">Valore su cui è impostato il parametro <c>location</c>, se non è inizializzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-156">The value to which the <c>location</c> parameter is set, if it’s not initialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-157">Imposta una matrice sulla matrice specificata, se la matrice non è stata inizializzata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-157">Sets an array to the specified array if the array has not been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49c12-158">
            <see langword="true" /> se alla matrice è stato assegnato il valore specificato; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-158">
              <see langword="true" /> if the array was assigned the specified value;  otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Push&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Push&lt;T&gt; (ref System.Collections.Immutable.ImmutableStack&lt;T&gt; location, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Push&lt;T&gt;(class System.Collections.Immutable.ImmutableStack`1&lt;!!T&gt;&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Push(Of T) (ByRef location As ImmutableStack(Of T), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Push(System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ % location, T value);" />
      <MemberSignature Language="F#" Value="static member Push :  * 'T -&gt; unit" Usage="System.Collections.Immutable.ImmutableInterlocked.Push (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableStack&lt;T&gt;&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="49c12-159">Tipo di elementi nello stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-159">The type of items in the stack.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="49c12-160">Stack da aggiornare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-160">The stack to update.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="49c12-161">Valore da inserire nello stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-161">The value to push on the stack.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-162">Inserisce un nuovo elemento nello stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-162">Pushes a new element onto the stack.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="static member TryAdd :  * 'Key * 'Value -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryAdd (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="49c12-163">Tipo di chiavi contenute nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-163">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="49c12-164">Tipo di valori contenuti nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-164">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="49c12-165">Dizionario da aggiornare con la chiave e il valore specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-165">The dictionary to update with the specified key and value.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="49c12-166">Chiave da aggiungere, se non è già definita nel dizionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-166">The key to add, if is not already defined in the dictionary.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="49c12-167">Il valore da aggiungere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-167">The value to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-168">Aggiunge la chiave e il valore specificati al dizionario se la chiave non è presente nel dizionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-168">Adds the specified key and value to the dictionary if the key is not in the dictionary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49c12-169">
            <see langword="true" /> se la chiave non è presente nel dizionario; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-169">
              <see langword="true" /> if the key is not in the dictionary; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDequeue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryDequeue&lt;T&gt; (ref System.Collections.Immutable.ImmutableQueue&lt;T&gt; location, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDequeue&lt;T&gt;(class System.Collections.Immutable.ImmutableQueue`1&lt;!!T&gt;&amp; location, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDequeue(Of T) (ByRef location As ImmutableQueue(Of T), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryDequeue(System::Collections::Immutable::ImmutableQueue&lt;T&gt; ^ % location, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryDequeue :  *  -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryDequeue (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableQueue&lt;T&gt;&amp;" RefType="ref" />
        <Parameter Name="value" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="49c12-170">Tipo di elementi nella coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-170">The type of items in the queue.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="49c12-171">Variabile o campo da aggiornare in modo atomico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-171">The variable or field to atomically update.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="49c12-172">Impostato sul valore all'inizio della coda, se la coda non è vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-172">Set to the value from the head of the queue, if the queue not empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-173">Rimuove in modo atomico e restituisce l'elemento specificato all'inizio della coda, se la coda non è vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-173">Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49c12-174">
            <see langword="true" /> se la coda non è vuota e l'elemento head viene rimosso; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-174">
              <see langword="true" /> if the queue is not empty and the head element is removed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryPop&lt;T&gt; (ref System.Collections.Immutable.ImmutableStack&lt;T&gt; location, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryPop&lt;T&gt;(class System.Collections.Immutable.ImmutableStack`1&lt;!!T&gt;&amp; location, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryPop(Of T) (ByRef location As ImmutableStack(Of T), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryPop(System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ % location, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryPop :  *  -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryPop (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableStack&lt;T&gt;&amp;" RefType="ref" />
        <Parameter Name="value" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="49c12-175">Tipo di elementi nello stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-175">The type of items in the stack.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="49c12-176">Stack da aggiornare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-176">The stack to update.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="49c12-177">Riceve il valore rimosso dallo stack, se lo stack non è vuoto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-177">Receives the value removed from the stack, if the stack is not empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-178">Rimuove un elemento all'inizio dello stack, se è presente un elemento da rimuovere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-178">Removes an element from the top of the stack, if there is an element to remove.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49c12-179">
            <see langword="true" /> se un elemento viene rimosso dallo stack; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-179">
              <see langword="true" /> if an element is removed from the stack; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRemove&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRemove&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRemove&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, [out] !!TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRemove(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryRemove(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="static member TryRemove :  * 'Key *  -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryRemove (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="49c12-180">Tipo di chiavi contenute nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-180">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="49c12-181">Tipo di valori contenuti nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-181">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="49c12-182">Dizionario da aggiornare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-182">The dictionary to update.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="49c12-183">Chiave da rimuovere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-183">The key to remove.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="49c12-184">Riceve il valore dell'elemento rimosso, se il dizionario non è vuoto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-184">Receives the value of the removed item, if the dictionary is not empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-185">Rimuove l'elemento con la chiave specificata, se la chiave è presente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-185">Removes the element with the specified key, if the key exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49c12-186">
            <see langword="true" /> se la chiave viene trovata e rimossa; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-186">
              <see langword="true" /> if the key was found and removed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue newValue, TValue comparisonValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue newValue, !!TValue comparisonValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, newValue As TValue, comparisonValue As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue newValue, TValue comparisonValue);" />
      <MemberSignature Language="F#" Value="static member TryUpdate :  * 'Key * 'Value * 'Value -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryUpdate (location, key, newValue, comparisonValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="newValue" Type="TValue" />
        <Parameter Name="comparisonValue" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="49c12-187">Tipo di chiavi contenute nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-187">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="49c12-188">Tipo di valori contenuti nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-188">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="49c12-189">Dizionario da aggiornare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-189">The dictionary to update.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="49c12-190">Chiave da aggiornare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-190">The key to update.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="49c12-191">Nuovo valore da impostare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-191">The new value to set.</span>
          </span>
        </param>
        <param name="comparisonValue">
          <span data-ttu-id="49c12-192">Valore corrente per <c>key</c> affinché l'aggiornamento venga eseguito correttamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-192">The current value for <c>key</c> in order for the update to succeed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-193">Imposta la chiave specificata sul valore specificato se la chiave specificata è già impostata su un valore specifico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-193">Sets the specified key to the specified value if the specified key already is set to a specific value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49c12-194">
            <see langword="true" /> se <paramref name="key" /> e <paramref name="comparisonValue" /> sono presenti nel dizionario e il confronto è stato aggiornato in <paramref name="newValue" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-194">
              <see langword="true" /> if <paramref name="key" /> and <paramref name="comparisonValue" /> are present in the dictionary and comparison was updated to <paramref name="newValue" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Update&lt;T&gt; (ref T location, Func&lt;T,T&gt; transformer) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Update&lt;class T&gt;(!!T&amp; location, class System.Func`2&lt;!!T, !!T&gt; transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Update(Of T As Class) (ByRef location As T, transformer As Func(Of T, T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static bool Update(T % location, Func&lt;T, T&gt; ^ transformer);" />
      <MemberSignature Language="F#" Value="static member Update :  * Func&lt;'T, 'T (requires 'T : null and 'T : null)&gt; -&gt; bool (requires 'T : null)" Usage="System.Collections.Immutable.ImmutableInterlocked.Update (location, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T&amp;" RefType="ref" />
        <Parameter Name="transformer" Type="System.Func&lt;T,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="49c12-195">Il tipo di dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-195">The type of data.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="49c12-196">Variabile o campo da modificare, accessibile da più thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-196">The variable or field to be changed, which may be accessed by multiple threads.</span>
          </span>
        </param>
        <param name="transformer">
          <span data-ttu-id="49c12-197">Funzione che modifica il valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-197">A function that mutates the value.</span>
          </span>
          <span data-ttu-id="49c12-198">Questa funzione deve essere priva di effetti collaterali poiché può essere eseguita più volte quando si verificano race condition con altri thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-198">This function should be side-effect free,              as it may run multiple times when races occur with other threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-199">Modifica un valore sul posto con la semantica di transazione bloccante ottimistica tramite una funzione di trasformazione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-199">Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.</span>
          </span>
          <span data-ttu-id="49c12-200">La trasformazione viene ritentata il numero di volte necessario per prevalere sulla race condition bloccante ottimistica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-200">The transformation is retried as many times as necessary to win the optimistic locking race.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49c12-201">
            <c>true</c> se il valore di location viene modificato applicando il risultato della funzione <paramref name="transformer" />; <c>false</c> se il valore di location rimane lo stesso perché l'ultima chiamata di <paramref name="transformer" /> ha restituito il valore esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-201">
              <c>true</c> if the location's value is changed by applying the result of the              <paramref name="transformer" /> function;             <c>false</c> if the location's value remained the same because the last              invocation of <paramref name="transformer" /> returned the existing value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update&lt;T,TArg&gt;">
      <MemberSignature Language="C#" Value="public static bool Update&lt;T,TArg&gt; (ref T location, Func&lt;T,TArg,T&gt; transformer, TArg transformerArgument) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Update&lt;class T, TArg&gt;(!!T&amp; location, class System.Func`3&lt;!!T, !!TArg, !!T&gt; transformer, !!TArg transformerArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Update(Of T As Class, TArg As Class) (ByRef location As T, transformer As Func(Of T, TArg, T), transformerArgument As TArg) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TArg&gt;&#xA; where T : class static bool Update(T % location, Func&lt;T, TArg, T&gt; ^ transformer, TArg transformerArgument);" />
      <MemberSignature Language="F#" Value="static member Update :  * Func&lt;'T, 'Arg, 'T (requires 'T : null and 'T : null)&gt; * 'Arg -&gt; bool (requires 'T : null)" Usage="System.Collections.Immutable.ImmutableInterlocked.Update (location, transformer, transformerArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TArg" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T&amp;" RefType="ref" />
        <Parameter Name="transformer" Type="System.Func&lt;T,TArg,T&gt;" />
        <Parameter Name="transformerArgument" Type="TArg" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="49c12-202">Il tipo di dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-202">The type of data.</span>
          </span>
        </typeparam>
        <typeparam name="TArg">
          <span data-ttu-id="49c12-203">Il tipo di argomento passato per il <c>transformer</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-203">The type of argument passed to the <c>transformer</c>.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="49c12-204">Variabile o campo da modificare, accessibile da più thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-204">The variable or field to be changed, which may be accessed by multiple threads.</span>
          </span>
        </param>
        <param name="transformer">
          <span data-ttu-id="49c12-205">Funzione che modifica il valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-205">A function that mutates the value.</span>
          </span>
          <span data-ttu-id="49c12-206">Questa funzione deve essere priva di effetti collaterali poiché può essere eseguita più volte quando si verificano race condition con altri thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-206">This function should be side-effect free,              as it may run multiple times when races occur with other threads.</span>
          </span>
        </param>
        <param name="transformerArgument">
          <span data-ttu-id="49c12-207">Argomento da passare a <c>transformer</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-207">The argument to pass to <c>transformer</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49c12-208">Modifica un valore sul posto con la semantica di transazione bloccante ottimistica tramite una funzione di trasformazione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-208">Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.</span>
          </span>
          <span data-ttu-id="49c12-209">La trasformazione viene ritentata il numero di volte necessario per prevalere sulla race condition bloccante ottimistica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-209">The transformation is retried as many times as necessary to win the optimistic locking race.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="49c12-210">
            <c>true</c> se il valore di location viene modificato applicando il risultato della funzione <paramref name="transformer" />; <c>false</c> se il valore di location rimane lo stesso perché l'ultima chiamata di <paramref name="transformer" /> ha restituito il valore esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49c12-210">
              <c>true</c> if the location's value is changed by applying the result of the              <paramref name="transformer" /> function;             <c>false</c> if the location's value remained the same because the last              invocation of <paramref name="transformer" /> returned the existing value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>