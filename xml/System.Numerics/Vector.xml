<Type Name="Vector" FullName="System.Numerics.Vector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="95e1267a9f59f96ee76094302da88cdb96a63f2e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Vector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Vector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.Vector" />
  <TypeSignature Language="VB.NET" Value="Public Class Vector" />
  <TypeSignature Language="C++ CLI" Value="public ref class Vector abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Numerics.Vectors</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="6f4e2-101">Fornisce una raccolta di metodi pratici statici per la creazione, la modifica, la combinazione e la conversione di vettori generici.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6f4e2-101">Provides a collection of static convenience methods for creating, manipulating, combining, and converting generic vectors.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Abs&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Abs&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Abs&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs(Of T As Structure) (value As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Abs(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-102">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-102">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-103">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-103">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="6f4e2-104">Vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-104">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-105">Restituisce un nuovo vettore i cui elementi sono i valori assoluti di ognuno degli elementi del vettore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-105">Returns a new vector whose elements are the absolute values of the given vector's elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-106">Valore assoluto del vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-106">The absolute value vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Add&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Add&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Add(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-107">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-107">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-108">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-108">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-109">Primo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-109">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-110">Secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-110">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-111">Restituisce un nuovo vettore i cui valori sono la somma di ogni coppia di elementi da due vettori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-111">Returns a new vector whose values are the sum of each pair of elements from two given vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-112">Vettore sommato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-112">The summed vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndNot&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; AndNot&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; AndNot&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndNot(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; AndNot(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-113">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-113">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-114">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-114">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-115">Primo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-115">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-116">Secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-116">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-117">Restituisce un nuovo vettore tramite un'operazione And Not bit per bit in ogni coppia di elementi corrispondenti in due vettori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-117">Returns a new vector by performing a bitwise And Not operation on each pair of corresponding elements in two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-118">Vettore risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-118">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorByte&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;byte&gt; AsVectorByte&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int8&gt; AsVectorByte&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorByte(Of T As Structure) (value As Vector(Of T)) As Vector(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;System::Byte&gt; AsVectorByte(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-119">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-119">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-120">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-120">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="6f4e2-121">Vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-121">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-122">Reinterpreta i bit di un vettore specificato in quelli di un vettore di byte senza segno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-122">Reinterprets the bits of a specified vector into those of a vector of unsigned bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-123">Vettore reinterpretato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-123">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorDouble&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;double&gt; AsVectorDouble&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float64&gt; AsVectorDouble&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorDouble(Of T As Structure) (value As Vector(Of T)) As Vector(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;double&gt; AsVectorDouble(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-124">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-124">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-125">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-125">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="6f4e2-126">Vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-126">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-127">Reinterpreta i bit di un vettore specificato in quelli di un vettore a virgola mobile a precisione doppia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-127">Reinterprets the bits of a specified vector into those of a double-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-128">Vettore reinterpretato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-128">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorInt16&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;short&gt; AsVectorInt16&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int16&gt; AsVectorInt16&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorInt16(Of T As Structure) (value As Vector(Of T)) As Vector(Of Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;short&gt; AsVectorInt16(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int16&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-129">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-129">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-130">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-130">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="6f4e2-131">Vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-131">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-132">Reinterpreta i bit di un vettore specificato in quelli di un vettore di interi a 16 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-132">Reinterprets the bits of a specified vector into those of a vector of 16-bit integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-133">Vettore reinterpretato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-133">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorInt32&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; AsVectorInt32&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; AsVectorInt32&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorInt32(Of T As Structure) (value As Vector(Of T)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;int&gt; AsVectorInt32(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-134">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-134">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-135">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-135">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="6f4e2-136">Vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-136">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-137">Reinterpreta i bit di un vettore specificato in quelli di un vettore di interi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-137">Reinterprets the bits of a specified vector into those of a vector of integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-138">Vettore reinterpretato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-138">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorInt64&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; AsVectorInt64&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; AsVectorInt64&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorInt64(Of T As Structure) (value As Vector(Of T)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;long&gt; AsVectorInt64(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-139">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-139">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-140">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-140">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="6f4e2-141">Vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-141">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-142">Reinterpreta i bit di un vettore specificato in quelli di un vettore di valori Long Integer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-142">Reinterprets the bits of a specified vector into those of a vector of long integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-143">Vettore reinterpretato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-143">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorSByte&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;sbyte&gt; AsVectorSByte&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int8&gt; AsVectorSByte&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorSByte(Of T As Structure) (value As Vector(Of T)) As Vector(Of SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;System::SByte&gt; AsVectorSByte(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.SByte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-144">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-144">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-145">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-145">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="6f4e2-146">Vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-146">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-147">Reinterpreta i bit di un vettore specificato in quelli di un vettore di byte con segno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-147">Reinterprets the bits of a specified vector into those of a vector of signed bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-148">Vettore reinterpretato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-148">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorSingle&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;float&gt; AsVectorSingle&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float32&gt; AsVectorSingle&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorSingle(Of T As Structure) (value As Vector(Of T)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;float&gt; AsVectorSingle(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-149">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-149">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-150">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-150">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="6f4e2-151">Vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-151">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-152">Reinterpreta i bit di un vettore specificato in quelli di un vettore a virgola mobile a precisione singola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-152">Reinterprets the bits of a specified vector into those of a single-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-153">Vettore reinterpretato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-153">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorUInt16&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;ushort&gt; AsVectorUInt16&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; AsVectorUInt16&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorUInt16(Of T As Structure) (value As Vector(Of T)) As Vector(Of UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;System::UInt16&gt; AsVectorUInt16(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt16&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-154">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-154">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-155">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-155">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="6f4e2-156">Vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-156">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-157">Reinterpreta i bit di un vettore specificato in quelli di un vettore di interi senza segno a 16 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-157">Reinterprets the bits of a specified vector into those of a vector of unsigned 16-bit integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-158">Vettore reinterpretato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-158">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorUInt32&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;uint&gt; AsVectorUInt32&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; AsVectorUInt32&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorUInt32(Of T As Structure) (value As Vector(Of T)) As Vector(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;System::UInt32&gt; AsVectorUInt32(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-159">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-159">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-160">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-160">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="6f4e2-161">Vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-161">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-162">Reinterpreta i bit di un vettore specificato in quelli di un vettore di interi senza segno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-162">Reinterprets the bits of a specified vector into those of a vector of unsigned integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-163">Vettore reinterpretato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-163">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsVectorUInt64&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;ulong&gt; AsVectorUInt64&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; AsVectorUInt64&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsVectorUInt64(Of T As Structure) (value As Vector(Of T)) As Vector(Of ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;System::UInt64&gt; AsVectorUInt64(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-164">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-164">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-165">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-165">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="6f4e2-166">Vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-166">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-167">Reinterpreta i bit di un vettore specificato in quelli di un vettore di valori Unsigned Long Integer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-167">Reinterprets the bits of a specified vector into those of a vector of unsigned long integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-168">Vettore reinterpretato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-168">The reinterpreted vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitwiseAnd&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; BitwiseAnd&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; BitwiseAnd&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitwiseAnd(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; BitwiseAnd(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-169">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-169">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-170">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-170">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-171">Primo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-171">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-172">Secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-172">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-173">Restituisce un nuovo vettore tramite un'operazione <see langword="And" /> bit per bit in ogni coppia di elementi in due vettori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-173">Returns a new vector by performing a bitwise <see langword="And" /> operation on each pair of elements in two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-174">Vettore risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-174">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitwiseOr&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; BitwiseOr&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; BitwiseOr&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitwiseOr(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; BitwiseOr(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-175">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-175">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-176">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-176">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-177">Primo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-177">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-178">Secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-178">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-179">Restituisce un nuovo vettore tramite un'operazione <see langword="Or" /> bit per bit in ogni coppia di elementi in due vettori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-179">Returns a new vector by performing a bitwise <see langword="Or" /> operation on each pair of elements in two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-180">Vettore risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-180">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalSelect">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;float&gt; ConditionalSelect (System.Numerics.Vector&lt;int&gt; condition, System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float32&gt; ConditionalSelect(valuetype System.Numerics.Vector`1&lt;int32&gt; condition, valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalSelect (condition As Vector(Of Integer), left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;float&gt; ConditionalSelect(System::Numerics::Vector&lt;int&gt; condition, System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="6f4e2-181">Vettore mascheramento integrale usato per la selezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-181">The integral mask vector used to drive selection.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="6f4e2-182">Primo vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-182">The first source vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-183">Secondo vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-183">The second source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-184">Crea un nuovo vettore a precisione singola con gli elementi selezionati tra due vettori di origine a precisione singola specificati in base a un mascheramento vettore integrale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-184">Creates a new single-precision vector with elements selected between two specified single-precision source vectors based on an integral mask vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-185">Nuovo vettore con gli elementi selezionati in base alla maschera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-185">The new vector with elements selected based on the mask.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalSelect">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;double&gt; ConditionalSelect (System.Numerics.Vector&lt;long&gt; condition, System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float64&gt; ConditionalSelect(valuetype System.Numerics.Vector`1&lt;int64&gt; condition, valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalSelect (condition As Vector(Of Long), left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;double&gt; ConditionalSelect(System::Numerics::Vector&lt;long&gt; condition, System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="6f4e2-186">Vettore mascheramento integrale usato per la selezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-186">The integral mask vector used to drive selection.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="6f4e2-187">Primo vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-187">The first source vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-188">Secondo vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-188">The second source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-189">Crea un nuovo vettore a precisione doppia con gli elementi selezionati tra due vettori di origine a precisione doppia specificati in base a un mascheramento vettore integrale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-189">Creates a new double-precision vector with elements selected between two specified double-precision source vectors based on an integral mask vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-190">Nuovo vettore con gli elementi selezionati in base alla maschera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-190">The new vector with elements selected based on the mask.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalSelect&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; ConditionalSelect&lt;T&gt; (System.Numerics.Vector&lt;T&gt; condition, System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; ConditionalSelect&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; condition, valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalSelect(Of T As Structure) (condition As Vector(Of T), left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; ConditionalSelect(System::Numerics::Vector&lt;T&gt; condition, System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="condition" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-191">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-191">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-192">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-192">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="condition">
          <span data-ttu-id="6f4e2-193">Vettore mascheramento integrale usato per la selezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-193">The integral mask vector used to drive selection.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="6f4e2-194">Primo vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-194">The first source vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-195">Secondo vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-195">The second source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-196">Crea un nuovo vettore di un tipo specificato con gli elementi selezionati tra due vettori di origine specificati in base a un mascheramento vettore integrale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-196">Creates a new vector of a specified type with elements selected between two specified source vectors of the same type based on an integral mask vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-197">Nuovo vettore con gli elementi selezionati in base alla maschera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-197">The new vector with elements selected based on the mask.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToDouble">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;double&gt; ConvertToDouble (System.Numerics.Vector&lt;long&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float64&gt; ConvertToDouble(valuetype System.Numerics.Vector`1&lt;int64&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToDouble (value As Vector(Of Long)) As Vector(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;double&gt; ConvertToDouble(System::Numerics::Vector&lt;long&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToDouble">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;double&gt; ConvertToDouble (System.Numerics.Vector&lt;ulong&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float64&gt; ConvertToDouble(valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToDouble (value As Vector(Of ULong)) As Vector(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;double&gt; ConvertToDouble(System::Numerics::Vector&lt;System::UInt64&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.UInt64&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToInt32">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; ConvertToInt32 (System.Numerics.Vector&lt;float&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; ConvertToInt32(valuetype System.Numerics.Vector`1&lt;float32&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToInt32 (value As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; ConvertToInt32(System::Numerics::Vector&lt;float&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToInt64">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; ConvertToInt64 (System.Numerics.Vector&lt;double&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; ConvertToInt64(valuetype System.Numerics.Vector`1&lt;float64&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToInt64 (value As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; ConvertToInt64(System::Numerics::Vector&lt;double&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToSingle">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;float&gt; ConvertToSingle (System.Numerics.Vector&lt;int&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float32&gt; ConvertToSingle(valuetype System.Numerics.Vector`1&lt;int32&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToSingle (value As Vector(Of Integer)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;float&gt; ConvertToSingle(System::Numerics::Vector&lt;int&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToSingle">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;float&gt; ConvertToSingle (System.Numerics.Vector&lt;uint&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float32&gt; ConvertToSingle(valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToSingle (value As Vector(Of UInteger)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;float&gt; ConvertToSingle(System::Numerics::Vector&lt;System::UInt32&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.UInt32&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToUInt32">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;uint&gt; ConvertToUInt32 (System.Numerics.Vector&lt;float&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; ConvertToUInt32(valuetype System.Numerics.Vector`1&lt;float32&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUInt32 (value As Vector(Of Single)) As Vector(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::UInt32&gt; ConvertToUInt32(System::Numerics::Vector&lt;float&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToUInt64">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;ulong&gt; ConvertToUInt64 (System.Numerics.Vector&lt;double&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; ConvertToUInt64(valuetype System.Numerics.Vector`1&lt;float64&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUInt64 (value As Vector(Of Double)) As Vector(Of ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::UInt64&gt; ConvertToUInt64(System::Numerics::Vector&lt;double&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Divide&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Divide&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Divide(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-198">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-198">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-199">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-199">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-200">Primo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-200">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-201">Secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-201">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-202">Restituisce un nuovo vettore i cui valori sono il risultato della divisione degli elementi del primo vettore per gli elementi corrispondenti nel secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-202">Returns a new vector whose values are the result of dividing the first vector's elements by the corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-203">Valore diviso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-203">The divided vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dot&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Dot&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Dot&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dot(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T Dot(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-204">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-204">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-205">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-205">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-206">Primo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-206">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-207">Secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-207">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-208">Restituisce il prodotto scalare di due vettori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-208">Returns the dot product of two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-209">Prodotto scalare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-209">The dot product.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; Equals (System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; Equals(valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; Equals(System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-210">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-210">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-211">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-211">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-212">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in due vettori a precisione doppia specificati sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-212">Returns a new integral vector whose elements signal whether the elements in two specified double-precision vectors are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-213">Vettore integrale risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-213">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; Equals (System.Numerics.Vector&lt;int&gt; left, System.Numerics.Vector&lt;int&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; Equals(valuetype System.Numerics.Vector`1&lt;int32&gt; left, valuetype System.Numerics.Vector`1&lt;int32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; Equals(System::Numerics::Vector&lt;int&gt; left, System::Numerics::Vector&lt;int&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-214">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-214">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-215">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-215">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-216">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in due vettori integrali specificati sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-216">Returns a new integral vector whose elements signal whether the elements in two specified integral vectors are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-217">Vettore integrale risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-217">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; Equals (System.Numerics.Vector&lt;long&gt; left, System.Numerics.Vector&lt;long&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; Equals(valuetype System.Numerics.Vector`1&lt;int64&gt; left, valuetype System.Numerics.Vector`1&lt;int64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; Equals(System::Numerics::Vector&lt;long&gt; left, System::Numerics::Vector&lt;long&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-218">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-218">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-219">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-219">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-220">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in due vettori di tipo Long Integer specificati sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-220">Returns a new vector whose elements signal whether the elements in two specified long integer vectors are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-221">Vettore di tipo Long Integer risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-221">The resulting long integer vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; Equals (System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; Equals(valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; Equals(System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-222">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-222">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-223">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-223">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-224">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in due vettori a precisione singola specificati sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-224">Returns a new integral vector whose elements signal whether the elements in two specified single-precision vectors are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-225">Vettore integrale risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-225">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Equals&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Equals&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Equals(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-226">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-226">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-227">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-227">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-228">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-228">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-229">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-229">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-230">Restituisce un nuovo vettore di un tipo specificato i cui elementi indicano se gli elementi in due vettori specificati dello stesso tipo sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-230">Returns a new vector of a specified type whose elements signal whether the elements in two specified vectors of the same type are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-231">Vettore risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-231">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool EqualsAll&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EqualsAll&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EqualsAll(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool EqualsAll(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-232">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-232">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-233">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-233">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-234">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-234">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-235">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-235">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-236">Restituisce un valore che indica se le coppie di elementi nei vettori specificati sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-236">Returns a value that indicates whether each pair of elements in the given vectors is equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-237">
            <see langword="true" /> se tutti gli elementi in <paramref name="left" /> e <paramref name="right" /> sono uguali; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-237">
              <see langword="true" /> if all elements in <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool EqualsAny&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EqualsAny&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EqualsAny(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool EqualsAny(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-238">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-238">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-239">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-239">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-240">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-240">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-241">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-241">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-242">Restituisce un valore che indica se qualsiasi coppia singola di elementi in due vettori specificati è uguale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-242">Returns a value that indicates whether any single pair of elements in the given vectors is equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-243">
            <see langword="true" /> se qualsiasi coppia singola in <paramref name="left" /> e <paramref name="right" /> è uguale; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-243">
              <see langword="true" /> if any element pair in <paramref name="left" /> and <paramref name="right" /> is equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; GreaterThan (System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; GreaterThan(valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; GreaterThan(System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-244">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-244">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-245">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-245">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-246">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore a virgola mobile a precisione doppia sono maggiori dei relativi elementi corrispondenti in un secondo vettore a virgola mobile a precisione doppia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-246">Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are greater than their corresponding elements in a second double-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-247">Vettore integrale risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-247">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; GreaterThan (System.Numerics.Vector&lt;int&gt; left, System.Numerics.Vector&lt;int&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; GreaterThan(valuetype System.Numerics.Vector`1&lt;int32&gt; left, valuetype System.Numerics.Vector`1&lt;int32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; GreaterThan(System::Numerics::Vector&lt;int&gt; left, System::Numerics::Vector&lt;int&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-248">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-248">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-249">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-249">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-250">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore integrale sono maggiori dei relativi elementi corrispondenti nel secondo vettore integrale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-250">Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than their corresponding elements in a second integral vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-251">Vettore integrale risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-251">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; GreaterThan (System.Numerics.Vector&lt;long&gt; left, System.Numerics.Vector&lt;long&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; GreaterThan(valuetype System.Numerics.Vector`1&lt;int64&gt; left, valuetype System.Numerics.Vector`1&lt;int64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; GreaterThan(System::Numerics::Vector&lt;long&gt; left, System::Numerics::Vector&lt;long&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-252">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-252">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-253">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-253">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-254">Restituisce un nuovo vettore di tipo Long Integer i cui elementi indicano se gli elementi in un vettore di tipo Long Integer sono maggiori dei relativi elementi corrispondenti in un secondo vettore di tipo Long Integer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-254">Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than their corresponding elements in a second long integer vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-255">Vettore di tipo Long Integer risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-255">The resulting long integer vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; GreaterThan (System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; GreaterThan(valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; GreaterThan(System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-256">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-256">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-257">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-257">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-258">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore a virgola mobile a precisione singola sono maggiori dei relativi elementi corrispondenti in un secondo vettore a virgola mobile a precisione singola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-258">Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are greater than their corresponding elements in a second single-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-259">Vettore integrale risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-259">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; GreaterThan&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; GreaterThan&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; GreaterThan(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-260">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-260">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-261">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-261">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-262">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-262">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-263">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-263">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-264">Restituisce un nuovo vettore i cui elementi indicano se gli elementi in un vettore di un tipo specificato sono maggiori dei relativi elementi corrispondenti nel secondo vettore dello stesso tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-264">Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than their corresponding elements in the second vector of the same time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-265">Vettore risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-265">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GreaterThanAll&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GreaterThanAll&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanAll(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool GreaterThanAll(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-266">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-266">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-267">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-267">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-268">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-268">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-269">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-269">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-270">Restituisce un valore che indica se tutti gli elementi nel primo vettore sono maggiori degli elementi corrispondenti nel secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-270">Returns a value that indicates whether all elements in the first vector are greater than the corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-271">
            <see langword="true" /> se tutti gli elementi in <paramref name="left" /> sono maggiori degli elementi corrispondenti in <paramref name="right" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-271">
              <see langword="true" /> if all elements in <paramref name="left" /> are greater than the corresponding elements in <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GreaterThanAny&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GreaterThanAny&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanAny(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool GreaterThanAny(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-272">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-272">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-273">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-273">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-274">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-274">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-275">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-275">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-276">Restituisce un valore che indica se qualsiasi elemento nel primo vettore è maggiore dell'elemento corrispondente nel secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-276">Returns a value that indicates whether any element in the first vector is greater than the corresponding element in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-277">
            <see langword="true" /> se qualsiasi elemento in <paramref name="left" /> è maggiore dell'elemento corrispondente in <paramref name="right" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-277">
              <see langword="true" /> if any element in <paramref name="left" /> is greater than the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; GreaterThanOrEqual (System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; GreaterThanOrEqual(valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; GreaterThanOrEqual(System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-278">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-278">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-279">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-279">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-280">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore sono maggiori o uguali ai relativi elementi corrispondenti nel secondo vettore a virgola mobile a precisione doppia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-280">Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the second double-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-281">Vettore integrale risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-281">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; GreaterThanOrEqual (System.Numerics.Vector&lt;int&gt; left, System.Numerics.Vector&lt;int&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; GreaterThanOrEqual(valuetype System.Numerics.Vector`1&lt;int32&gt; left, valuetype System.Numerics.Vector`1&lt;int32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; GreaterThanOrEqual(System::Numerics::Vector&lt;int&gt; left, System::Numerics::Vector&lt;int&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-282">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-282">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-283">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-283">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-284">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore integrale sono maggiori o uguali ai relativi elementi corrispondenti nel secondo vettore integrale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-284">Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than or equal to their corresponding elements in the second integral vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-285">Vettore integrale risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-285">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; GreaterThanOrEqual (System.Numerics.Vector&lt;long&gt; left, System.Numerics.Vector&lt;long&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; GreaterThanOrEqual(valuetype System.Numerics.Vector`1&lt;int64&gt; left, valuetype System.Numerics.Vector`1&lt;int64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; GreaterThanOrEqual(System::Numerics::Vector&lt;long&gt; left, System::Numerics::Vector&lt;long&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-286">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-286">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-287">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-287">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-288">Restituisce un nuovo vettore Long Integer i cui elementi indicano se gli elementi in un vettore Long Integer sono maggiori o uguali ai relativi elementi corrispondenti nel secondo vettore Long Integer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-288">Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than or equal to their corresponding elements in the second long integer vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-289">Vettore di tipo Long Integer risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-289">The resulting long integer vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; GreaterThanOrEqual (System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; GreaterThanOrEqual(valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; GreaterThanOrEqual(System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-290">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-290">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-291">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-291">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-292">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore sono maggiori o uguali ai relativi elementi corrispondenti nel secondo vettore a virgola mobile a precisione singola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-292">Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the single-precision floating-point second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-293">Vettore integrale risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-293">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; GreaterThanOrEqual&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; GreaterThanOrEqual&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; GreaterThanOrEqual(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-294">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-294">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-295">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-295">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-296">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-296">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-297">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-297">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-298">Restituisce un nuovo vettore i cui elementi indicano se gli elementi in un vettore di un tipo specificato sono maggiori o uguali ai relativi elementi corrispondenti nel secondo vettore dello stesso tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-298">Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than or equal to their corresponding elements in the second vector of the same type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-299">Vettore risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-299">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqualAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GreaterThanOrEqualAll&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GreaterThanOrEqualAll&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqualAll(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool GreaterThanOrEqualAll(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-300">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-300">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-301">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-301">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-302">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-302">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-303">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-303">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-304">Restituisce un valore che indica se tutti gli elementi nel primo vettore sono maggiori  uguali a tutti gli elementi corrispondenti nel secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-304">Returns a value that indicates whether all elements in the first vector are greater than or equal to all the corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-305">
            <see langword="true" /> se tutti gli elementi in <paramref name="left" /> sono maggiori o uguali agli elementi corrispondenti in <paramref name="right" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-305">
              <see langword="true" /> if all elements in <paramref name="left" /> are greater than or equal to the corresponding elements in <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqualAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GreaterThanOrEqualAny&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GreaterThanOrEqualAny&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqualAny(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool GreaterThanOrEqualAny(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-306">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-306">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-307">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-307">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-308">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-308">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-309">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-309">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-310">Restituisce un valore che indica se qualsiasi elemento nel primo vettore è maggiore o uguale all'elemento corrispondente nel secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-310">Returns a value that indicates whether any element in the first vector is greater than or equal to the corresponding element in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-311">
            <see langword="true" /> se qualsiasi elemento in <paramref name="left" /> è maggiore o uguale all'elemento corrispondente in <paramref name="right" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-311">
              <see langword="true" /> if any element in <paramref name="left" /> is greater than or equal to the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHardwareAccelerated">
      <MemberSignature Language="C#" Value="public static bool IsHardwareAccelerated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsHardwareAccelerated" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Vector.IsHardwareAccelerated" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsHardwareAccelerated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsHardwareAccelerated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6f4e2-312">Ottiene un valore che indica se le operazioni vettore sono soggette ad accelerazione hardware tramite supporto intrinseco JIT.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-312">Gets a value that indicates whether vector operations are subject to hardware acceleration through JIT intrinsic support.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6f4e2-313">
            <see langword="true" /> se le operazioni vettore sono soggette ad accelerazione hardware; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-313">
              <see langword="true" /> if vector operations are subject to hardware acceleration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f4e2-314">Le operazioni vettore sono soggette ad accelerazione hardware nei sistemi che supportano una singola istruzione, le istruzioni SIMD (Multiple Data) e il compilatore just-in-time RyiJIT viene utilizzato per compilare il codice gestito.</span><span class="sxs-lookup"><span data-stu-id="6f4e2-314">Vector operations are subject to hardware acceleration on systems that support Single Instruction, Multiple Data (SIMD) instructions and the RyiJIT just-in-time compiler is used to compile managed code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; LessThan (System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; LessThan(valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; LessThan(System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-315">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-315">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-316">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-316">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-317">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore a virgola mobile a precisione doppia sono minori dei relativi elementi corrispondenti in un secondo vettore a virgola mobile a precisione doppia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-317">Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than their corresponding elements in a second double-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-318">Vettore integrale risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-318">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; LessThan (System.Numerics.Vector&lt;int&gt; left, System.Numerics.Vector&lt;int&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; LessThan(valuetype System.Numerics.Vector`1&lt;int32&gt; left, valuetype System.Numerics.Vector`1&lt;int32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; LessThan(System::Numerics::Vector&lt;int&gt; left, System::Numerics::Vector&lt;int&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-319">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-319">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-320">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-320">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-321">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore integrale sono minori dei relativi elementi corrispondenti nel secondo vettore integrale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-321">Returns a new integral vector whose elements signal whether the elements in one integral vector are less than their corresponding elements in a second integral vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-322">Vettore integrale risultante</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-322">The resulting integral vector</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; LessThan (System.Numerics.Vector&lt;long&gt; left, System.Numerics.Vector&lt;long&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; LessThan(valuetype System.Numerics.Vector`1&lt;int64&gt; left, valuetype System.Numerics.Vector`1&lt;int64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; LessThan(System::Numerics::Vector&lt;long&gt; left, System::Numerics::Vector&lt;long&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-323">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-323">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-324">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-324">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-325">Restituisce un nuovo vettore Long Integer i cui elementi indicano se gli elementi in un vettore Long Integer sono minori dei relativi elementi corrispondenti in un secondo vettore Long Integer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-325">Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less than their corresponding elements in a second long integer vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-326">Vettore di tipo Long Integer risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-326">The resulting long integer vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; LessThan (System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; LessThan(valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; LessThan(System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-327">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-327">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-328">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-328">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-329">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore a precisione singola sono minori dei relativi elementi corrispondenti in un secondo vettore a precisione singola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-329">Returns a new integral vector whose elements signal whether the elements in one single-precision vector are less than their corresponding elements in a second single-precision vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-330">Vettore integrale risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-330">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; LessThan&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; LessThan&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; LessThan(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-331">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-331">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-332">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-332">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-333">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-333">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-334">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-334">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-335">Restituisce un nuovo vettore di un tipo specificato i cui elementi indicano se gli elementi in un vettore sono minori dei relativi elementi corrispondenti nel secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-335">Returns a new vector of a specified type whose elements signal whether the elements in one vector are less than their corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-336">Vettore risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-336">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool LessThanAll&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool LessThanAll&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanAll(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool LessThanAll(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-337">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-337">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-338">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-338">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-339">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-339">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-340">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-340">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-341">Restituisce un valore che indica se tutti gli elementi nel primo vettore sono minori degli elementi corrispondenti nel secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-341">Returns a value that indicates whether all of the elements in the first vector are less than their corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-342">
            <see langword="true" /> se tutti gli elementi in <paramref name="left" /> sono minori degli elementi corrispondenti in <paramref name="right" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-342">
              <see langword="true" /> if all of the elements in <paramref name="left" /> are less than the corresponding elements in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool LessThanAny&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool LessThanAny&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanAny(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool LessThanAny(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-343">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-343">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-344">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-344">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-345">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-345">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-346">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-346">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-347">Restituisce un valore che indica se qualsiasi elemento nel primo vettore è minore dell'elemento corrispondente nel secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-347">Returns a value that indicates whether any element in the first vector is less than the corresponding element in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-348">
            <see langword="true" /> se qualsiasi elemento in <paramref name="left" /> è minore dell'elemento corrispondente in <paramref name="right" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-348">
              <see langword="true" /> if any element in <paramref name="left" /> is less than the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; LessThanOrEqual (System.Numerics.Vector&lt;double&gt; left, System.Numerics.Vector&lt;double&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; LessThanOrEqual(valuetype System.Numerics.Vector`1&lt;float64&gt; left, valuetype System.Numerics.Vector`1&lt;float64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; LessThanOrEqual(System::Numerics::Vector&lt;double&gt; left, System::Numerics::Vector&lt;double&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-349">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-349">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-350">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-350">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-351">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore a virgola mobile a precisione doppia sono minori o uguali ai relativi elementi corrispondenti in un secondo vettore a virgola mobile a precisione doppia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-351">Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than or equal to their corresponding elements in a second double-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-352">Vettore integrale risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-352">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; LessThanOrEqual (System.Numerics.Vector&lt;int&gt; left, System.Numerics.Vector&lt;int&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; LessThanOrEqual(valuetype System.Numerics.Vector`1&lt;int32&gt; left, valuetype System.Numerics.Vector`1&lt;int32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; LessThanOrEqual(System::Numerics::Vector&lt;int&gt; left, System::Numerics::Vector&lt;int&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-353">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-353">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-354">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-354">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-355">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore integrale sono minori o uguali ai relativi elementi corrispondenti nel secondo vettore integrale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-355">Returns a new integral vector whose elements signal whether the elements in one integral vector are less than or equal to their corresponding elements in a second integral vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-356">Vettore integrale risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-356">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;long&gt; LessThanOrEqual (System.Numerics.Vector&lt;long&gt; left, System.Numerics.Vector&lt;long&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int64&gt; LessThanOrEqual(valuetype System.Numerics.Vector`1&lt;int64&gt; left, valuetype System.Numerics.Vector`1&lt;int64&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;long&gt; LessThanOrEqual(System::Numerics::Vector&lt;long&gt; left, System::Numerics::Vector&lt;long&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-357">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-357">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-358">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-358">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-359">Restituisce un nuovo vettore Long Integer i cui elementi indicano se gli elementi in un vettore Long Integer sono minori o uguali ai relativi elementi corrispondenti in un secondo vettore Long Integer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-359">Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less or equal to their corresponding elements in a second long integer vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-360">Vettore di tipo Long Integer risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-360">The resulting long integer vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; LessThanOrEqual (System.Numerics.Vector&lt;float&gt; left, System.Numerics.Vector&lt;float&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; LessThanOrEqual(valuetype System.Numerics.Vector`1&lt;float32&gt; left, valuetype System.Numerics.Vector`1&lt;float32&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; LessThanOrEqual(System::Numerics::Vector&lt;float&gt; left, System::Numerics::Vector&lt;float&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;System.Single&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6f4e2-361">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-361">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-362">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-362">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-363">Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore a virgola mobile a precisione singola sono minori o uguali ai relativi elementi corrispondenti in un secondo vettore a virgola mobile a precisione singola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-363">Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are less than or equal to their corresponding elements in a second single-precision floating-point vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-364">Vettore integrale risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-364">The resulting integral vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; LessThanOrEqual&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; LessThanOrEqual&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; LessThanOrEqual(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-365">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-365">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-366">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-366">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-367">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-367">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-368">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-368">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-369">Restituisce un nuovo vettore i cui elementi indicano se gli elementi in un vettore sono minori o uguali ai relativi elementi corrispondenti nel secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-369">Returns a new vector whose elements signal whether the elements in one vector are less than or equal to their corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-370">Vettore risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-370">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqualAll&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool LessThanOrEqualAll&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool LessThanOrEqualAll&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqualAll(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool LessThanOrEqualAll(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-371">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-371">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-372">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-372">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-373">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-373">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-374">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-374">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-375">Restituisce un valore che indica se tutti gli elementi nel primo vettore sono minori o uguali agli elementi corrispondenti nel secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-375">Returns a value that indicates whether all elements in the first vector are less than or equal to their corresponding elements in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-376">
            <see langword="true" /> se tutti gli elementi in <paramref name="left" /> sono minori o uguali agli elementi corrispondenti in <paramref name="right" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-376">
              <see langword="true" /> if all of the elements in <paramref name="left" /> are less than or equal to the corresponding elements in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqualAny&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool LessThanOrEqualAny&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool LessThanOrEqualAny&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqualAny(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool LessThanOrEqualAny(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-377">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-377">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-378">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-378">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-379">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-379">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-380">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-380">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-381">Restituisce un valore che indica se qualsiasi elemento nel primo vettore è minore o uguale all'elemento corrispondente nel secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-381">Returns a value that indicates whether any element in the first vector is less than or equal to the corresponding element in the second vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-382">
            <see langword="true" /> se qualsiasi elemento in <paramref name="left" /> è minore o uguale all'elemento corrispondente in <paramref name="right" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-382">
              <see langword="true" /> if any element in <paramref name="left" /> is less than or equal to the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Max&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Max&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Max(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-383">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-383">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-384">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-384">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-385">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-385">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-386">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-386">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-387">Restituisce un nuovo vettore i cui elementi sono costituiti dal valore più alto di ogni coppia di elementi nei due vettori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-387">Returns a new vector whose elements are the maximum of each pair of elements in the two given vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-388">Vettore massimo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-388">The maximum vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Min&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Min&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Min(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-389">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-389">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-390">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-390">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-391">Primo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-391">The first vector to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-392">Secondo vettore da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-392">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-393">Restituisce un nuovo vettore i cui elementi sono costituiti dal valore più basso di ogni coppia di elementi nei due vettori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-393">Returns a new vector whose elements are the minimum of each pair of elements in the two given vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-394">Vettore minimo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-394">The minimum vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Multiply&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Multiply&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Multiply(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-395">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-395">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-396">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-396">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-397">Primo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-397">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-398">Secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-398">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-399">Restituisce un nuovo vettore i cui valori sono il prodotto di ogni coppia di elementi in due vettori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-399">Returns a new vector whose values are the product of each pair of elements in two specified vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-400">Vettore prodotto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-400">The product vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Multiply&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, T right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Multiply&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, !!T right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply(Of T As Structure) (left As Vector(Of T), right As T) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Multiply(System::Numerics::Vector&lt;T&gt; left, T right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-401">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-401">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-402">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-402">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-403">Vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-403">The vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-404">Valore scalare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-404">The scalar value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-405">Restituisce un nuovo vettore i cui valori sono un valore scalare moltiplicato per ognuno dei valori di un vettore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-405">Returns a new vector whose values are the values of a specified vector each multiplied by a scalar value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-406">Vettore scalato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-406">The scaled vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Multiply&lt;T&gt; (T left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Multiply&lt;struct .ctor (class System.ValueType) T&gt;(!!T left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply(Of T As Structure) (left As T, right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Multiply(T left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-407">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-407">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-408">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-408">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-409">Valore scalare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-409">The scalar value.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-410">Vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-410">The vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-411">Restituisce un nuovo vettore i cui valori sono un valore scalare moltiplicato per ognuno dei valori di un vettore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-411">Returns a new vector whose values are a scalar value multiplied by each of the values of a specified vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-412">Vettore scalato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-412">The scaled vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;float&gt; Narrow (System.Numerics.Vector&lt;double&gt; source1, System.Numerics.Vector&lt;double&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;float32&gt; Narrow(valuetype System.Numerics.Vector`1&lt;float64&gt; source1, valuetype System.Numerics.Vector`1&lt;float64&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of Double), source2 As Vector(Of Double)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;float&gt; Narrow(System::Numerics::Vector&lt;double&gt; source1, System::Numerics::Vector&lt;double&gt; source2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.Double&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.Double&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;sbyte&gt; Narrow (System.Numerics.Vector&lt;short&gt; source1, System.Numerics.Vector&lt;short&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int8&gt; Narrow(valuetype System.Numerics.Vector`1&lt;int16&gt; source1, valuetype System.Numerics.Vector`1&lt;int16&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of Short), source2 As Vector(Of Short)) As Vector(Of SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::SByte&gt; Narrow(System::Numerics::Vector&lt;short&gt; source1, System::Numerics::Vector&lt;short&gt; source2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.SByte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.Int16&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.Int16&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;short&gt; Narrow (System.Numerics.Vector&lt;int&gt; source1, System.Numerics.Vector&lt;int&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int16&gt; Narrow(valuetype System.Numerics.Vector`1&lt;int32&gt; source1, valuetype System.Numerics.Vector`1&lt;int32&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of Integer), source2 As Vector(Of Integer)) As Vector(Of Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;short&gt; Narrow(System::Numerics::Vector&lt;int&gt; source1, System::Numerics::Vector&lt;int&gt; source2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int16&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;int&gt; Narrow (System.Numerics.Vector&lt;long&gt; source1, System.Numerics.Vector&lt;long&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;int32&gt; Narrow(valuetype System.Numerics.Vector`1&lt;int64&gt; source1, valuetype System.Numerics.Vector`1&lt;int64&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of Long), source2 As Vector(Of Long)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;int&gt; Narrow(System::Numerics::Vector&lt;long&gt; source1, System::Numerics::Vector&lt;long&gt; source2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;byte&gt; Narrow (System.Numerics.Vector&lt;ushort&gt; source1, System.Numerics.Vector&lt;ushort&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int8&gt; Narrow(valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; source1, valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of UShort), source2 As Vector(Of UShort)) As Vector(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::Byte&gt; Narrow(System::Numerics::Vector&lt;System::UInt16&gt; source1, System::Numerics::Vector&lt;System::UInt16&gt; source2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.UInt16&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.UInt16&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;ushort&gt; Narrow (System.Numerics.Vector&lt;uint&gt; source1, System.Numerics.Vector&lt;uint&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; Narrow(valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; source1, valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of UInteger), source2 As Vector(Of UInteger)) As Vector(Of UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::UInt16&gt; Narrow(System::Numerics::Vector&lt;System::UInt32&gt; source1, System::Numerics::Vector&lt;System::UInt32&gt; source2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt16&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.UInt32&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.UInt32&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Narrow">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;uint&gt; Narrow (System.Numerics.Vector&lt;ulong&gt; source1, System.Numerics.Vector&lt;ulong&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; Narrow(valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; source1, valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Narrow (source1 As Vector(Of ULong), source2 As Vector(Of ULong)) As Vector(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;System::UInt32&gt; Narrow(System::Numerics::Vector&lt;System::UInt64&gt; source1, System::Numerics::Vector&lt;System::UInt64&gt; source2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source1" Type="System.Numerics.Vector&lt;System.UInt64&gt;" />
        <Parameter Name="source2" Type="System.Numerics.Vector&lt;System.UInt64&gt;" />
      </Parameters>
      <Docs>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Negate&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Negate&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Negate(Of T As Structure) (value As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Negate(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-413">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-413">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-414">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-414">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="6f4e2-415">Vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-415">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-416">Restituisce un nuovo vettore i cui elementi sono la negazione dell'elemento corrispondente nel vettore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-416">Returns a new vector whose elements are the negation of the corresponding element in the specified vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-417">Vettore negato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-417">The negated vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesComplement&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; OnesComplement&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; OnesComplement&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OnesComplement(Of T As Structure) (value As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; OnesComplement(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-418">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-418">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-419">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-419">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="6f4e2-420">Vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-420">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-421">Restituisce un nuovo vettore i cui elementi sono ottenuti prendendo il complemento a uno degli elementi di un vettore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-421">Returns a new vector whose elements are obtained by taking the one's complement of a specified vector's elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-422">Vettore risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-422">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SquareRoot&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; SquareRoot&lt;T&gt; (System.Numerics.Vector&lt;T&gt; value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; SquareRoot&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SquareRoot(Of T As Structure) (value As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; SquareRoot(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-423">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-423">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-424">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-424">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="6f4e2-425">Vettore di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-425">The source vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-426">Restituisce un nuovo vettore i cui elementi sono le radici quadrate degli elementi del vettore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-426">Returns a new vector whose elements are the square roots of a specified vector's elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-427">Vettore radice quadrata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-427">The square root vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Subtract&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Subtract&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Subtract(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-428">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-428">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-429">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-429">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-430">Primo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-430">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-431">Secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-431">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-432">Restituisce un nuovo vettore i cui valori sono la differenza tra gli elementi nel secondo vettore e gli elementi corrispondenti nel primo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-432">Returns a new vector whose values are the difference between the elements in the second vector and their corresponding elements in the first vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-433">Vettore differenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-433">The difference vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;byte&gt; source, out System.Numerics.Vector&lt;ushort&gt; dest1, out System.Numerics.Vector&lt;ushort&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;unsigned int8&gt; source, [out] valuetype System.Numerics.Vector`1&lt;unsigned int16&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;unsigned int16&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of Byte), ByRef dest1 As Vector(Of UShort), ByRef dest2 As Vector(Of UShort))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt16&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt16&gt; % dest2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.Byte&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.UInt16&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.UInt16&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;short&gt; source, out System.Numerics.Vector&lt;int&gt; dest1, out System.Numerics.Vector&lt;int&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;int16&gt; source, [out] valuetype System.Numerics.Vector`1&lt;int32&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;int32&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of Short), ByRef dest1 As Vector(Of Integer), ByRef dest2 As Vector(Of Integer))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;short&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;int&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;int&gt; % dest2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.Int16&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.Int32&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.Int32&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;int&gt; source, out System.Numerics.Vector&lt;long&gt; dest1, out System.Numerics.Vector&lt;long&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;int32&gt; source, [out] valuetype System.Numerics.Vector`1&lt;int64&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;int64&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of Integer), ByRef dest1 As Vector(Of Long), ByRef dest2 As Vector(Of Long))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;int&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;long&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;long&gt; % dest2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.Int32&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.Int64&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.Int64&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;sbyte&gt; source, out System.Numerics.Vector&lt;short&gt; dest1, out System.Numerics.Vector&lt;short&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;int8&gt; source, [out] valuetype System.Numerics.Vector`1&lt;int16&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;int16&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of SByte), ByRef dest1 As Vector(Of Short), ByRef dest2 As Vector(Of Short))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;System::SByte&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;short&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;short&gt; % dest2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.SByte&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.Int16&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.Int16&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;float&gt; source, out System.Numerics.Vector&lt;double&gt; dest1, out System.Numerics.Vector&lt;double&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;float32&gt; source, [out] valuetype System.Numerics.Vector`1&lt;float64&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;float64&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of Single), ByRef dest1 As Vector(Of Double), ByRef dest2 As Vector(Of Double))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;float&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;double&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;double&gt; % dest2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.Single&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.Double&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.Double&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;ushort&gt; source, out System.Numerics.Vector&lt;uint&gt; dest1, out System.Numerics.Vector&lt;uint&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; source, [out] valuetype System.Numerics.Vector`1&lt;unsigned int32&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;unsigned int32&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of UShort), ByRef dest1 As Vector(Of UInteger), ByRef dest2 As Vector(Of UInteger))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;System::UInt16&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt32&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt32&gt; % dest2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.UInt16&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.UInt32&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.UInt32&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public static void Widen (System.Numerics.Vector&lt;uint&gt; source, out System.Numerics.Vector&lt;ulong&gt; dest1, out System.Numerics.Vector&lt;ulong&gt; dest2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Widen(valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; source, [out] valuetype System.Numerics.Vector`1&lt;unsigned int64&gt;&amp; dest1, [out] valuetype System.Numerics.Vector`1&lt;unsigned int64&gt;&amp; dest2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Widen (source As Vector(Of UInteger), ByRef dest1 As Vector(Of ULong), ByRef dest2 As Vector(Of ULong))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Widen(System::Numerics::Vector&lt;System::UInt32&gt; source, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt64&gt; % dest1, [Runtime::InteropServices::Out] System::Numerics::Vector&lt;System::UInt64&gt; % dest2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Numerics.Vector&lt;System.UInt32&gt;" />
        <Parameter Name="dest1" Type="System.Numerics.Vector&lt;System.UInt64&gt;&amp;" RefType="out" />
        <Parameter Name="dest2" Type="System.Numerics.Vector&lt;System.UInt64&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="dest1">To be added.</param>
        <param name="dest2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Xor&lt;T&gt; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector`1&lt;!!T&gt; Xor&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Numerics.Vector`1&lt;!!T&gt; left, valuetype System.Numerics.Vector`1&lt;!!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Xor(Of T As Structure) (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static System::Numerics::Vector&lt;T&gt; Xor(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6f4e2-434">Tipo di vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-434">The vector type.</span>
          </span>
          <span data-ttu-id="6f4e2-435">
            <c>T</c> può essere qualsiasi tipo numerico primitivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-435">
              <c>T</c> can be any primitive numeric type.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="6f4e2-436">Primo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-436">The first vector.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6f4e2-437">Secondo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-437">The second vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f4e2-438">Restituisce un nuovo vettore tramite un'operazione Or (<see langword="XOr" />) esclusiva bit per bit in ogni coppia di elementi in due vettori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-438">Returns a new vector by performing a bitwise exclusive Or (<see langword="XOr" />) operation on each pair of elements in two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f4e2-439">Vettore risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f4e2-439">The resulting vector.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>