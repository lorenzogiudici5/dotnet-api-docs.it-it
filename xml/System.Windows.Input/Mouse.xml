<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Mouse.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac583e98a291f9d5f6cefe7297d93f8f8195e0f1c0a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83e98a291f9d5f6cefe7297d93f8f8195e0f1c0a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.Mouse">
          <source>Represents the mouse device to a specific thread.</source>
          <target state="translated">Rappresenta il dispositivo mouse per un thread specifico.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Mouse">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class provides mouse related events, methods and, properties which provide information regarding the state of the mouse.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> mouse fornisce gli eventi correlati, metodi e proprietà che forniscono informazioni riguardanti lo stato del mouse.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Mouse">
          <source>Each event that <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> defines as an attached event is also re-exposed by the base element classes <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> as a new routed event.</source>
          <target state="translated">Ogni evento che <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> definisce come un evento associato viene nuovamente esposto dalle classi base elemento <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> e <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> come nuovo evento indirizzato.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Mouse">
          <source>Generally, it is more convenient to handle mouse events for an application on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph>, rather than using the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse&gt;</ph> events.</source>
          <target state="translated">In genere, è più conveniente gestire gli eventi del mouse per un'applicazione in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> e <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph>, anziché il <ph id="ph3">&lt;xref:System.Windows.Input.Mouse&gt;</ph> eventi.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Mouse">
          <source>For details, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">Per informazioni dettagliate, vedere <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Mouse">
          <source>The static members of the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class delegate to the primary <ph id="ph2">&lt;xref:System.Windows.Input.MouseDevice&gt;</ph> of the calling thread's input manager.</source>
          <target state="translated">I membri statici del <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> classe delegato al database primario <ph id="ph2">&lt;xref:System.Windows.Input.MouseDevice&gt;</ph> del gestore di input del thread chiamante.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /&gt;</ph> attached event.</source>
          <target state="translated">Aggiunge un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /&gt;</ph> attached event.</source>
          <target state="translated">Aggiunge un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseDown" /&gt;</ph> attached event.</source>
          <target state="translated">Aggiunge un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseDown" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseEnter" /&gt;</ph> attached event.</source>
          <target state="translated">Aggiunge un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseEnter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseLeave" /&gt;</ph> attached event.</source>
          <target state="translated">Aggiunge un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseLeave" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseMove" /&gt;</ph> attached event.</source>
          <target state="translated">Aggiunge un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseMove" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseUp" /&gt;</ph> attached event.</source>
          <target state="translated">Aggiunge un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseUp" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseWheel" /&gt;</ph> attached event.</source>
          <target state="translated">Aggiunge un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseWheel" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /&gt;</ph> attached event.</source>
          <target state="translated">Aggiunge un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /&gt;</ph> attached event.</source>
          <target state="translated">Aggiunge un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /&gt;</ph> attached event.</source>
          <target state="translated">Aggiunge un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /&gt;</ph> attached event.</source>
          <target state="translated">Aggiunge un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /&gt;</ph> attached event.</source>
          <target state="translated">Aggiunge un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddPreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /&gt;</ph> attached event.</source>
          <target state="translated">Aggiunge un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.AddQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.QueryCursor" /&gt;</ph> attached event.</source>
          <target state="translated">Aggiunge un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.QueryCursor" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.Mouse">
          <source>Captures mouse input to the specified element.</source>
          <target state="translated">Acquisisce gli input del mouse nell'elemento specificato.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Mouse">
          <source>When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.</source>
          <target state="translated">Quando un elemento acquisisce il mouse, riceve l'input del mouse o meno il cursore si trova all'interno dei bordi.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Mouse">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Input.CaptureMode&gt;</ph> is not specified, the default <ph id="ph2">&lt;xref:System.Windows.Input.CaptureMode&gt;</ph> is <ph id="ph3">&lt;xref:System.Windows.Input.CaptureMode.Element&gt;</ph>.</source>
          <target state="translated">Se un <ph id="ph1">&lt;xref:System.Windows.Input.CaptureMode&gt;</ph> non viene specificato, il valore predefinito <ph id="ph2">&lt;xref:System.Windows.Input.CaptureMode&gt;</ph> è <ph id="ph3">&lt;xref:System.Windows.Input.CaptureMode.Element&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Mouse">
          <source>To release mouse capture, call <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A&gt;</ph> passing <ph id="ph2">`null`</ph> as the element to capture.</source>
          <target state="translated">Per rilasciare il mouse capture, chiamare <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A&gt;</ph> passando <ph id="ph2">`null`</ph> come elemento da acquisire.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Mouse">
          <source>If the mouse is captured when a <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> event is raised and the input is not going to the element underneath the mouse, <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement&gt;</ph> are raised first.</source>
          <target state="translated">Se il mouse viene rilevato quando un <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> o <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> evento viene generato e l'input dell'elemento sotto il mouse, non sarà <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement&gt;</ph> e <ph id="ph4">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement&gt;</ph> vengono generati prima.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Mouse">
          <source>This enables the captured element a chance to release capture before the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> events are routed.</source>
          <target state="translated">In questo modo all'elemento acquisito la possibilità di rilasciare l'acquisizione prima di <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> e <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> gli eventi vengono indirizzati.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement)">
          <source>The element to capture the mouse.</source>
          <target state="translated">Elemento che deve acquisire il mouse.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement)">
          <source>Captures mouse input to the specified element.</source>
          <target state="translated">Acquisisce gli input del mouse nell'elemento specificato.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element was able to capture the mouse; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'elemento non è stato in grado di acquisire il mouse; in caso contrario <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement)">
          <source>When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.</source>
          <target state="translated">Quando un elemento acquisisce il mouse, riceve l'input del mouse o meno il cursore si trova all'interno dei bordi.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement)">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Input.CaptureMode&gt;</ph> is not specified, the default <ph id="ph2">&lt;xref:System.Windows.Input.CaptureMode&gt;</ph> is <ph id="ph3">&lt;xref:System.Windows.Input.CaptureMode.Element&gt;</ph>.</source>
          <target state="translated">Se un <ph id="ph1">&lt;xref:System.Windows.Input.CaptureMode&gt;</ph> non viene specificato, il valore predefinito <ph id="ph2">&lt;xref:System.Windows.Input.CaptureMode&gt;</ph> è <ph id="ph3">&lt;xref:System.Windows.Input.CaptureMode.Element&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement)">
          <source>To release mouse capture, call <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A&gt;</ph> passing <ph id="ph2">`null`</ph> as the element to capture.</source>
          <target state="translated">Per rilasciare il mouse capture, chiamare <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A&gt;</ph> passando <ph id="ph2">`null`</ph> come elemento da acquisire.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement)">
          <source>If the mouse is captured when a <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> event is raised and the input is not going to the element underneath the mouse, <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement&gt;</ph> are raised first.</source>
          <target state="translated">Se il mouse viene rilevato quando un <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> o <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> evento viene generato e l'input dell'elemento sotto il mouse, non sarà <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement&gt;</ph> e <ph id="ph4">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement&gt;</ph> vengono generati prima.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement)">
          <source>This enables the captured element a chance to release capture before the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> events are routed.</source>
          <target state="translated">In questo modo all'elemento acquisito la possibilità di rilasciare l'acquisizione prima di <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> e <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> gli eventi vengono indirizzati.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement)">
          <source>The following example shows how to capture the mouse to a specific element by using the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A&gt;</ph> method.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come acquisire il mouse per un elemento specifico tramite il <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
          <source>The element to capture the mouse.</source>
          <target state="translated">Elemento che deve acquisire il mouse.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
          <source>The capture policy to use.</source>
          <target state="translated">I criteri di acquisizione da usare.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
          <source>Captures mouse input to the specified element using the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.CaptureMode" /&gt;</ph>.</source>
          <target state="translated">Acquisisce l'input del mouse per l'elemento specificato usando l'oggetto <ph id="ph1">&lt;see cref="T:System.Windows.Input.CaptureMode" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element was able to capture the mouse; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'elemento non è stato in grado di acquisire il mouse; in caso contrario <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
          <source>When an element captures the mouse, it receives mouse input whether the cursor is within its borders.</source>
          <target state="translated">Quando un elemento acquisisce il mouse, riceve l'input del mouse se il cursore si trova all'interno dei bordi.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
          <source>To release mouse capture, call <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A&gt;</ph> passing <ph id="ph2">`null`</ph> as the element to capture.</source>
          <target state="translated">Per rilasciare il mouse capture, chiamare <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A&gt;</ph> passando <ph id="ph2">`null`</ph> come elemento da acquisire.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
          <source>If the mouse is captured when a <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> event is raised and the input is not going to the element underneath the mouse, <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement&gt;</ph> are raised first.</source>
          <target state="translated">Se il mouse viene rilevato quando un <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> o <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> evento viene generato e l'input dell'elemento sotto il mouse, non sarà <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement&gt;</ph> e <ph id="ph4">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement&gt;</ph> vengono generati prima.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
          <source>This enables the captured element a chance to release capture before the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> events are routed.</source>
          <target state="translated">In questo modo all'elemento acquisito la possibilità di rilasciare l'acquisizione prima di <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown&gt;</ph> e <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp&gt;</ph> gli eventi vengono indirizzati.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
          <source>The following example shows how to capture the mouse to a specific element by using the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A&gt;</ph> method.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come acquisire il mouse per un elemento specifico tramite il <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.Mouse.Captured">
          <source>Gets the element that has captured the mouse.</source>
          <target state="translated">Ottiene l'elemento che ha acquisito il mouse.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.Captured">
          <source>The element captured by the mouse.</source>
          <target state="translated">Elemento acquisito dal mouse.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.Captured">
          <source>When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.</source>
          <target state="translated">Quando un elemento acquisisce il mouse, riceve l'input del mouse o meno il cursore si trova all'interno dei bordi.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.Captured">
          <source>The mouse is typically captured in this manner only during drag-and-drop operations, and retains capture until the drop action of the drag-and-drop operation occurs.</source>
          <target state="translated">Il puntatore del mouse viene in genere acquisite in questo modo solo durante le operazioni di trascinamento e rilascio e mantiene l'acquisizione fino a quando non si verifica l'azione di eliminazione dell'operazione di trascinamento e rilascio.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.Captured">
          <source>The follow example shows how to obtain the element that has mouse capture.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come ottenere l'elemento che ha lo stato mouse capture.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.Mouse.DirectlyOver">
          <source>Gets the element the mouse pointer is directly over.</source>
          <target state="translated">Ottiene l'elemento sul quale è posizionato direttamente il puntatore del mouse.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.DirectlyOver">
          <source>The element the mouse pointer is over.</source>
          <target state="translated">Elemento sul quale si trova il puntatore del mouse.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.DirectlyOver">
          <source>Controls can be composed of multiple elements.</source>
          <target state="translated">I controlli possono essere composti da più elementi.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.DirectlyOver">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.DirectlyOver%2A&gt;</ph> reports the specific element in the composite control the mouse pointer is over and not the control itself.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.DirectlyOver%2A&gt;</ph> Restituisce l'elemento specifico nel controllo composito che il puntatore del mouse è posizionato e non il controllo stesso.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.DirectlyOver">
          <source>For example, depending on which part of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> the pointer is over, the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.DirectlyOver%2A&gt;</ph> property could report the <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> of the <ph id="ph4">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph> property or the <ph id="ph5">&lt;xref:Microsoft.Windows.Themes.ButtonChrome&gt;</ph>.</source>
          <target state="translated">Ad esempio, a seconda di quale parte di un <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> il puntatore è posizionato, il <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.DirectlyOver%2A&gt;</ph> proprietà potrebbe indicare la <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> del <ph id="ph4">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph> proprietà o <ph id="ph5">&lt;xref:Microsoft.Windows.Themes.ButtonChrome&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.DirectlyOver">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.IInputElement.IsMouseOver%2A&gt;</ph> property on <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> to determine whether the mouse is over an element, which includes its visual child elements or control compositing elements.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Windows.IInputElement.IsMouseOver%2A&gt;</ph> proprietà <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> e <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> per determinare se il mouse è posizionato su un elemento, che include gli elementi figlio visivi o gli elementi di controllo.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.DirectlyOver">
          <source>If an element has mouse capture, the mouse pointer is considered directly over the element regardless of the where the mouse pointer is.</source>
          <target state="translated">Se un elemento ha lo stato mouse capture, il puntatore del mouse viene considerato direttamente sull'elemento, indipendentemente dal fatto di dove è il puntatore del mouse.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.GetIntermediatePoints(System.Windows.IInputElement,System.Windows.Point[])">
          <source>The elements <bpt id="p1">&lt;c&gt;</bpt>points<ept id="p1">&lt;/c&gt;</ept> are in relation to.</source>
          <target state="translated">Gli elementi correlati a <bpt id="p1">&lt;c&gt;</bpt>points<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.GetIntermediatePoints(System.Windows.IInputElement,System.Windows.Point[])">
          <source>An array of objects.</source>
          <target state="translated">Matrice di oggetti.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.GetIntermediatePoints(System.Windows.IInputElement,System.Windows.Point[])">
          <source>Retrieves up to 64 previous coordinates of the mouse pointer since the last mouse move event.</source>
          <target state="translated">Recupera fino a 64 coordinate precedenti del puntatore del mouse a partire dall'ultimo evento di spostamento del mouse.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.GetIntermediatePoints(System.Windows.IInputElement,System.Windows.Point[])">
          <source>The number of points returned.</source>
          <target state="translated">Numero di punti restituiti.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)">
          <source>The coordinate space in which to calculate the position of the mouse.</source>
          <target state="translated">Lo spazio delle coordinate in cui calcolare la posizione del mouse.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)">
          <source>Gets the position of the mouse relative to a specified element.</source>
          <target state="translated">Ottiene la posizione del puntatore del mouse relativa a un elemento specificato.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)">
          <source>The position of the mouse relative to the parameter <ph id="ph1">&lt;paramref name="relativeTo" /&gt;</ph>.</source>
          <target state="translated">La posizione del mouse relativa al parametro <ph id="ph1">&lt;paramref name="relativeTo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)">
          <source>The position of the mouse pointer is calculated relative to the specified element with the upper-left corner of element being the point of origin, 0,0.</source>
          <target state="translated">La posizione del puntatore del mouse è calcolata in relazione l'elemento specificato con l'angolo superiore sinistro dell'elemento che è il punto di origine, 0,0.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)">
          <source>During drag-and-drop operations, the position of the mouse cannot be reliably determined through <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.GetPosition%2A&gt;</ph>.</source>
          <target state="translated">Durante le operazioni di trascinamento e rilascio, la posizione del mouse non è possibile determinare in modo affidabile tramite <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.GetPosition%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)">
          <source>This is because control of the mouse (possibly including capture) is held by the originating element of the drag until the drop is completed, with much of the behavior controlled by underlying <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> calls.</source>
          <target state="translated">In questo modo il controllo del mouse (possibilmente include l'acquisizione) è utilizzato dall'elemento di origine dell'operazione di trascinamento fino a quando non viene completato il rilascio, con la maggior parte del comportamento controllato dal sottostante <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> chiamate.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)">
          <source>Try the following approaches instead:</source>
          <target state="translated">Provare a utilizzare gli approcci seguenti:</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.DragEventArgs.GetPosition%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Windows.DragEventArgs&gt;</ph> that is passed to the drag events (<ph id="ph3">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.ContentElement.DragOver&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.ContentElement.DragLeave&gt;</ph>).</source>
          <target state="translated">Chiamare il <ph id="ph1">&lt;xref:System.Windows.DragEventArgs.GetPosition%2A&gt;</ph> metodo il <ph id="ph2">&lt;xref:System.Windows.DragEventArgs&gt;</ph> che viene passato agli eventi di trascinamento (<ph id="ph3">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.ContentElement.DragOver&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.ContentElement.DragLeave&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)">
          <source>Call <bpt id="p1">[</bpt>GetCursorPos<ept id="p1">](http://msdn.microsoft.com/library/default.asp?url=/library/winui/winui/windowsuserinterface/resources/cursors/cursorreference/cursorfunctions/getcursorpos.asp)</ept>, using P/Invoke.</source>
          <target state="translated">Chiamare <bpt id="p1">[</bpt>GetCursorPos<ept id="p1">](http://msdn.microsoft.com/library/default.asp?url=/library/winui/winui/windowsuserinterface/resources/cursors/cursorreference/cursorfunctions/getcursorpos.asp)</ept>, tramite P/Invoke.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.GetPosition%2A&gt;</ph> to determine the position of the mouse pointer.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.GetPosition%2A&gt;</ph> per determinare la posizione del puntatore del mouse.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)">
          <source>The position of the mouse pointer is stored in a <ph id="ph1">&lt;xref:System.Windows.Point&gt;</ph> structure.</source>
          <target state="translated">La posizione del puntatore del mouse viene archiviata un <ph id="ph1">&lt;xref:System.Windows.Point&gt;</ph> struttura.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Point.X%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Point.Y%2A&gt;</ph> values of the <ph id="ph3">&lt;xref:System.Windows.Point&gt;</ph> object are displayed in a <ph id="ph4">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Windows.Point.X%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Windows.Point.Y%2A&gt;</ph> valori il <ph id="ph3">&lt;xref:System.Windows.Point&gt;</ph> vengono visualizzati in un <ph id="ph4">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.GotMouseCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /&gt;</ph> attached event.</source>
          <target state="translated">Identifica l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.GotMouseCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">Identificatori di eventi indirizzati vengono creati quando vengono registrati gli eventi indirizzati e il risultato viene archiviato come campo nella classe che registra l'evento indirizzato.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.GotMouseCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">Gli identificatori contengono un nome che identifichi il tipo di proprietario, il tipo di gestore, strategia di routing e un metodo di utilità per l'aggiunta di proprietari per l'evento.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.GotMouseCaptureEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">Si utilizzano questi identificatori come parametri a metodi di sistema di eventi, per identificare un evento indirizzato specifico.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.Mouse.LeftButton">
          <source>Gets the state of the left button of the mouse.</source>
          <target state="translated">Ottiene lo stato del pulsante sinistro del mouse.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.LeftButton">
          <source>The state of the left mouse button.</source>
          <target state="translated">Stato del pulsante sinistro del mouse.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.LeftButton">
          <source>The following example shows how to determine whether the left mouse button is pressed by checking if the state of the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.LeftButton%2A&gt;</ph> is equal to the <ph id="ph2">&lt;xref:System.Windows.Input.MouseButtonState&gt;</ph> enumeration value <ph id="ph3">&lt;xref:System.Windows.Input.MouseButtonState.Pressed&gt;</ph>.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come determinare se il pulsante sinistro del mouse è premuto controllando se lo stato del <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.LeftButton%2A&gt;</ph> è uguale al <ph id="ph2">&lt;xref:System.Windows.Input.MouseButtonState&gt;</ph> valore di enumerazione <ph id="ph3">&lt;xref:System.Windows.Input.MouseButtonState.Pressed&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.LeftButton">
          <source>If the button is pressed, a method is called which updates display elements in the sample.</source>
          <target state="translated">Se viene premuto il pulsante, viene chiamato un metodo quali aggiornamenti vengono visualizzati gli elementi nell'esempio.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.LostMouseCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /&gt;</ph> attached event.</source>
          <target state="translated">Identifica l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.LostMouseCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">Identificatori di eventi indirizzati vengono creati quando vengono registrati gli eventi indirizzati e il risultato viene archiviato come campo nella classe che registra l'evento indirizzato.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.LostMouseCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">Gli identificatori contengono un nome che identifichi il tipo di proprietario, il tipo di gestore, strategia di routing e un metodo di utilità per l'aggiunta di proprietari per l'evento.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.LostMouseCaptureEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">Si utilizzano questi identificatori come parametri a metodi di sistema di eventi, per identificare un evento indirizzato specifico.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.Mouse.MiddleButton">
          <source>Gets the state of the middle button of the mouse.</source>
          <target state="translated">Ottiene lo stato corrente del pulsante centrale del mouse.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.MiddleButton">
          <source>The state of the middle mouse button.</source>
          <target state="translated">Stato del pulsante centrale del mouse.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.MiddleButton">
          <source>The following example shows how to determine whether the middle mouse button is pressed by checking if the state of the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MiddleButton%2A&gt;</ph> is equal to the <ph id="ph2">&lt;xref:System.Windows.Input.MouseButtonState&gt;</ph> enumeration value <ph id="ph3">&lt;xref:System.Windows.Input.MouseButtonState.Pressed&gt;</ph>.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come determinare se il pulsante centrale del mouse è premuto controllando se lo stato del <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MiddleButton%2A&gt;</ph> è uguale al <ph id="ph2">&lt;xref:System.Windows.Input.MouseButtonState&gt;</ph> valore di enumerazione <ph id="ph3">&lt;xref:System.Windows.Input.MouseButtonState.Pressed&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.MiddleButton">
          <source>If the button is pressed, a method is called which updates display elements in the sample.</source>
          <target state="translated">Se viene premuto il pulsante, viene chiamato un metodo quali aggiornamenti vengono visualizzati gli elementi nell'esempio.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.MouseDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseDown" /&gt;</ph> attached event.</source>
          <target state="translated">Identifica l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseDown" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseDownEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">Identificatori di eventi indirizzati vengono creati quando vengono registrati gli eventi indirizzati e il risultato viene archiviato come campo nella classe che registra l'evento indirizzato.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">Gli identificatori contengono un nome che identifichi il tipo di proprietario, il tipo di gestore, strategia di routing e un metodo di utilità per l'aggiunta di proprietari per l'evento.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseDownEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">Si utilizzano questi identificatori come parametri a metodi di sistema di eventi, per identificare un evento indirizzato specifico.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.MouseEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseEnter" /&gt;</ph> attached event.</source>
          <target state="translated">Identifica l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseEnter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseEnterEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">Identificatori di eventi indirizzati vengono creati quando vengono registrati gli eventi indirizzati e il risultato viene archiviato come campo nella classe che registra l'evento indirizzato.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">Gli identificatori contengono un nome che identifichi il tipo di proprietario, il tipo di gestore, strategia di routing e un metodo di utilità per l'aggiunta di proprietari per l'evento.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseEnterEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">Si utilizzano questi identificatori come parametri a metodi di sistema di eventi, per identificare un evento indirizzato specifico.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.MouseLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseLeave" /&gt;</ph> attached event.</source>
          <target state="translated">Identifica l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseLeave" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">Identificatori di eventi indirizzati vengono creati quando vengono registrati gli eventi indirizzati e il risultato viene archiviato come campo nella classe che registra l'evento indirizzato.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">Gli identificatori contengono un nome che identifichi il tipo di proprietario, il tipo di gestore, strategia di routing e un metodo di utilità per l'aggiunta di proprietari per l'evento.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseLeaveEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">Si utilizzano questi identificatori come parametri a metodi di sistema di eventi, per identificare un evento indirizzato specifico.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.MouseMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseMove" /&gt;</ph> attached event.</source>
          <target state="translated">Identifica l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseMove" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseMoveEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">Identificatori di eventi indirizzati vengono creati quando vengono registrati gli eventi indirizzati e il risultato viene archiviato come campo nella classe che registra l'evento indirizzato.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">Gli identificatori contengono un nome che identifichi il tipo di proprietario, il tipo di gestore, strategia di routing e un metodo di utilità per l'aggiunta di proprietari per l'evento.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseMoveEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">Si utilizzano questi identificatori come parametri a metodi di sistema di eventi, per identificare un evento indirizzato specifico.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.MouseUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseUp" /&gt;</ph> attached event.</source>
          <target state="translated">Identifica l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseUp" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseUpEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">Identificatori di eventi indirizzati vengono creati quando vengono registrati gli eventi indirizzati e il risultato viene archiviato come campo nella classe che registra l'evento indirizzato.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">Gli identificatori contengono un nome che identifichi il tipo di proprietario, il tipo di gestore, strategia di routing e un metodo di utilità per l'aggiunta di proprietari per l'evento.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseUpEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">Si utilizzano questi identificatori come parametri a metodi di sistema di eventi, per identificare un evento indirizzato specifico.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine">
          <source>Represents the number of units the mouse wheel is rotated to scroll one line.</source>
          <target state="translated">Rappresenta il numero di unità per cui la rotellina del mouse viene ruotata per scorrere di una riga.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine">
          <source>In the current <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>, the value of this field is 120.</source>
          <target state="translated">Nell'attuale <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>, il valore di questo campo è 120.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine">
          <source>The intention of the field exposure is to allow for vendors to build finer-resolution mouse wheels in the future, that perhaps would include a freely rotating wheel without notches.</source>
          <target state="translated">Lo scopo di esposizione del campo è di consentire ai fornitori di ruote di mouse più precise che potrebbero includere una Ruota ruota liberamente senza scatti in futuro, di creare.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine">
          <source>The expectation is that such a device would send more messages per rotation, but with a smaller value in each message.</source>
          <target state="translated">È previsto che tale dispositivo possa inviare più messaggi per la rotazione, ma con un valore più piccolo in ogni messaggio.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine">
          <source>To support this possibility, you should either add the incoming delta values until the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine&gt;</ph> amount is reached (so for a delta-rotation you get the same response), or scroll partial lines in response to the more frequent messages.</source>
          <target state="translated">Per supportare questa eventualità, è necessario aggiungere i valori delta in ingresso finché il <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine&gt;</ph> raggiunge (in modo che per una rotazione delta si ottiene la stessa risposta), o scorrere le righe parziali in risposta a messaggi più frequenti.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine">
          <source>You could also choose your own scroll granularity and accumulate deltas of your own choosing until that delta is reached, or perhaps reference user-controllable system parameters for mouse sensitivity and extrapolate these to mouse wheel delta thresholds.</source>
          <target state="translated">È anche possibile scegliere la propria granularità di scorrimento e accumulare delta di propria scelta fino a quando tale delta viene raggiunto, o forse fare riferimento ai parametri di sistema controllabile dall'utente per la sensibilità del mouse ed estrapolare questi per valori di soglia delta rotellina del mouse.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.MouseWheelEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseWheel" /&gt;</ph> attached event.</source>
          <target state="translated">Identifica l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseWheel" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseWheelEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">Identificatori di eventi indirizzati vengono creati quando vengono registrati gli eventi indirizzati e il risultato viene archiviato come campo nella classe che registra l'evento indirizzato.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseWheelEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">Gli identificatori contengono un nome che identifichi il tipo di proprietario, il tipo di gestore, strategia di routing e un metodo di utilità per l'aggiunta di proprietari per l'evento.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.MouseWheelEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">Si utilizzano questi identificatori come parametri a metodi di sistema di eventi, per identificare un evento indirizzato specifico.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.Mouse.OverrideCursor">
          <source>Gets or sets the cursor for the entire application.</source>
          <target state="translated">Ottiene o imposta il cursore per l'intera applicazione.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.OverrideCursor">
          <source>The override cursor or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.Windows.Input.Mouse.OverrideCursor" /&gt;</ph> is not set.</source>
          <target state="translated">Cursore di override o <ph id="ph1">&lt;see langword="null" /&gt;</ph> se <ph id="ph2">&lt;see cref="P:System.Windows.Input.Mouse.OverrideCursor" /&gt;</ph> non è impostato.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.OverrideCursor">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> that <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.OverrideCursor%2A&gt;</ph> is set to will be applied to the whole application.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> che <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.OverrideCursor%2A&gt;</ph> è impostato su verrà applicata all'intera applicazione.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.OverrideCursor">
          <source>To clear the override <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph>, set <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.OverrideCursor%2A&gt;</ph> to <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Per cancellare la sostituzione <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph>, impostare <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.OverrideCursor%2A&gt;</ph> a <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.OverrideCursor">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.OverrideCursor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.Input.Cursors.None%2A&gt;</ph> will force the mouse cursor not to be displayed, but mouse events are still processed.</source>
          <target state="translated">Impostazione <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.OverrideCursor%2A&gt;</ph> a <ph id="ph2">&lt;xref:System.Windows.Input.Cursors.None%2A&gt;</ph> forzerà il cursore del mouse a non essere visualizzato, ma vengono ancora elaborati gli eventi del mouse.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.OverrideCursor">
          <source>The following example shows an event handler for a <ph id="ph1">&lt;xref:System.Windows.Controls.RadioButton&gt;</ph> that is used to toggle the scope of a cursor change between a single element and the entire application.</source>
          <target state="translated">Nell'esempio seguente viene illustrato un gestore eventi per un <ph id="ph1">&lt;xref:System.Windows.Controls.RadioButton&gt;</ph> utilizzato per attivare o disattivare l'ambito di una modifica di cursore tra un singolo elemento e l'intera applicazione.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.OverrideCursor">
          <source>If the control that raised the event is the <ph id="ph1">`rbScopeElement`</ph><ph id="ph2">&lt;xref:System.Windows.Controls.RadioButton&gt;</ph>, a flag that denotes the scope of the cursor change is set and <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.OverrideCursor%2A&gt;</ph> is set to <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Se il controllo che ha generato l'evento è il <ph id="ph1">`rbScopeElement`</ph> <ph id="ph2">&lt;xref:System.Windows.Controls.RadioButton&gt;</ph>, viene impostato un flag che indica l'ambito della modifica del cursore e <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.OverrideCursor%2A&gt;</ph> è impostato su <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.OverrideCursor">
          <source>If the control that raised the event is the <ph id="ph1">`rbScopeApplication`</ph><ph id="ph2">&lt;xref:System.Windows.Controls.RadioButton&gt;</ph>, a flag that denotes the scope of the cursor change is set and <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.OverrideCursor%2A&gt;</ph> is set to the <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> property of the <ph id="ph5">&lt;xref:System.Windows.Controls.Border&gt;</ph> control named <ph id="ph6">`DisplayArea`</ph>.</source>
          <target state="translated">Se il controllo che ha generato l'evento è il <ph id="ph1">`rbScopeApplication`</ph> <ph id="ph2">&lt;xref:System.Windows.Controls.RadioButton&gt;</ph>, viene impostato un flag che indica l'ambito della modifica del cursore e <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.OverrideCursor%2A&gt;</ph> è impostato sul <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> proprietà del <ph id="ph5">&lt;xref:System.Windows.Controls.Border&gt;</ph> controllo denominato <ph id="ph6">`DisplayArea`</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.PreviewMouseDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /&gt;</ph> attached event.</source>
          <target state="translated">Identifica l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseDownEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">Identificatori di eventi indirizzati vengono creati quando vengono registrati gli eventi indirizzati e il risultato viene archiviato come campo nella classe che registra l'evento indirizzato.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">Gli identificatori contengono un nome che identifichi il tipo di proprietario, il tipo di gestore, strategia di routing e un metodo di utilità per l'aggiunta di proprietari per l'evento.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseDownEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">Si utilizzano questi identificatori come parametri a metodi di sistema di eventi, per identificare un evento indirizzato specifico.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElementEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /&gt;</ph> attached event.</source>
          <target state="translated">Identifica l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElementEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">Identificatori di eventi indirizzati vengono creati quando vengono registrati gli eventi indirizzati e il risultato viene archiviato come campo nella classe che registra l'evento indirizzato.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElementEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">Gli identificatori contengono un nome che identifichi il tipo di proprietario, il tipo di gestore, strategia di routing e un metodo di utilità per l'aggiunta di proprietari per l'evento.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElementEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">Si utilizzano questi identificatori come parametri a metodi di sistema di eventi, per identificare un evento indirizzato specifico.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.PreviewMouseMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /&gt;</ph> attached event.</source>
          <target state="translated">Identifica l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseMoveEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">Identificatori di eventi indirizzati vengono creati quando vengono registrati gli eventi indirizzati e il risultato viene archiviato come campo nella classe che registra l'evento indirizzato.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">Gli identificatori contengono un nome che identifichi il tipo di proprietario, il tipo di gestore, strategia di routing e un metodo di utilità per l'aggiunta di proprietari per l'evento.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseMoveEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">Si utilizzano questi identificatori come parametri a metodi di sistema di eventi, per identificare un evento indirizzato specifico.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.PreviewMouseUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /&gt;</ph> attached event.</source>
          <target state="translated">Identifica l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseUpEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">Identificatori di eventi indirizzati vengono creati quando vengono registrati gli eventi indirizzati e il risultato viene archiviato come campo nella classe che registra l'evento indirizzato.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">Gli identificatori contengono un nome che identifichi il tipo di proprietario, il tipo di gestore, strategia di routing e un metodo di utilità per l'aggiunta di proprietari per l'evento.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseUpEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">Si utilizzano questi identificatori come parametri a metodi di sistema di eventi, per identificare un evento indirizzato specifico.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElementEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /&gt;</ph> attached event.</source>
          <target state="translated">Identifica l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElementEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">Identificatori di eventi indirizzati vengono creati quando vengono registrati gli eventi indirizzati e il risultato viene archiviato come campo nella classe che registra l'evento indirizzato.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElementEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">Gli identificatori contengono un nome che identifichi il tipo di proprietario, il tipo di gestore, strategia di routing e un metodo di utilità per l'aggiunta di proprietari per l'evento.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElementEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">Si utilizzano questi identificatori come parametri a metodi di sistema di eventi, per identificare un evento indirizzato specifico.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.PreviewMouseWheelEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /&gt;</ph> attached event.</source>
          <target state="translated">Identifica l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseWheelEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">Identificatori di eventi indirizzati vengono creati quando vengono registrati gli eventi indirizzati e il risultato viene archiviato come campo nella classe che registra l'evento indirizzato.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseWheelEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">Gli identificatori contengono un nome che identifichi il tipo di proprietario, il tipo di gestore, strategia di routing e un metodo di utilità per l'aggiunta di proprietari per l'evento.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.PreviewMouseWheelEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">Si utilizzano questi identificatori come parametri a metodi di sistema di eventi, per identificare un evento indirizzato specifico.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.Mouse.PrimaryDevice">
          <source>Gets the primary mouse device.</source>
          <target state="translated">Ottiene il dispositivo mouse primario.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.PrimaryDevice">
          <source>The device.</source>
          <target state="translated">Dispositivo.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.PrimaryDevice">
          <source>This property supports the Windows Presentation Foundation infrastructure and is not intended to be used directly from your code.</source>
          <target state="translated">Questa proprietà supporta l'infrastruttura di Windows Presentation Foundation e non deve essere utilizzato direttamente dal codice.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Mouse.QueryCursorEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.QueryCursor" /&gt;</ph> attached event.</source>
          <target state="translated">Identifica l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.QueryCursor" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.QueryCursorEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">Identificatori di eventi indirizzati vengono creati quando vengono registrati gli eventi indirizzati e il risultato viene archiviato come campo nella classe che registra l'evento indirizzato.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.QueryCursorEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">Gli identificatori contengono un nome che identifichi il tipo di proprietario, il tipo di gestore, strategia di routing e un metodo di utilità per l'aggiunta di proprietari per l'evento.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Mouse.QueryCursorEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">Si utilizzano questi identificatori come parametri a metodi di sistema di eventi, per identificare un evento indirizzato specifico.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /&gt;</ph> attached event.</source>
          <target state="translated">Rimuove un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /&gt;</ph> attached event.</source>
          <target state="translated">Rimuove un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseDown" /&gt;</ph> attached event.</source>
          <target state="translated">Rimuove un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseDown" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseEnter" /&gt;</ph> attached event.</source>
          <target state="translated">Rimuove un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseEnter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseLeave" /&gt;</ph> attached event.</source>
          <target state="translated">Rimuove un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseLeave" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseMove" /&gt;</ph> attached event.</source>
          <target state="translated">Rimuove un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseMove" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseUp" /&gt;</ph> attached event.</source>
          <target state="translated">Rimuove un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseUp" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseWheel" /&gt;</ph> attached event.</source>
          <target state="translated">Rimuove un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseWheel" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /&gt;</ph> attached event.</source>
          <target state="translated">Rimuove un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /&gt;</ph> attached event.</source>
          <target state="translated">Rimuove un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /&gt;</ph> attached event.</source>
          <target state="translated">Rimuove un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /&gt;</ph> attached event.</source>
          <target state="translated">Rimuove un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /&gt;</ph> attached event.</source>
          <target state="translated">Rimuove un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemovePreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /&gt;</ph> attached event.</source>
          <target state="translated">Rimuove un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> in ascolto su questo evento.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)">
          <source>The event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.RemoveQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.QueryCursor" /&gt;</ph> attached event.</source>
          <target state="translated">Rimuove un gestore per l'evento associato <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.QueryCursor" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.Mouse.RightButton">
          <source>Gets the state of the right button.</source>
          <target state="translated">Ottiene lo stato del pulsante destro.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.RightButton">
          <source>The state of the right mouse button.</source>
          <target state="translated">Stato del pulsante destro del mouse.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.RightButton">
          <source>The following example shows how to determine whether the right mouse button is pressed by checking if the state of the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.RightButton%2A&gt;</ph> is equal to the <ph id="ph2">&lt;xref:System.Windows.Input.MouseButtonState&gt;</ph> enumeration value <ph id="ph3">&lt;xref:System.Windows.Input.MouseButtonState.Pressed&gt;</ph>.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come determinare se il pulsante destro del mouse è premuto controllando se lo stato del <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.RightButton%2A&gt;</ph> è uguale al <ph id="ph2">&lt;xref:System.Windows.Input.MouseButtonState&gt;</ph> valore di enumerazione <ph id="ph3">&lt;xref:System.Windows.Input.MouseButtonState.Pressed&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.RightButton">
          <source>If the button is pressed, a method is called which updates display elements in the sample.</source>
          <target state="translated">Se viene premuto il pulsante, viene chiamato un metodo quali aggiornamenti vengono visualizzati gli elementi nell'esempio.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.SetCursor(System.Windows.Input.Cursor)">
          <source>The cursor to set the mouse pointer to.</source>
          <target state="translated">Cursore sul quale impostare il puntatore del mouse.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.SetCursor(System.Windows.Input.Cursor)">
          <source>Sets the mouse pointer to the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.Cursor" /&gt;</ph>.</source>
          <target state="translated">Imposta il puntatore del mouse in relazione all'oggetto <ph id="ph1">&lt;see cref="T:System.Windows.Input.Cursor" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.SetCursor(System.Windows.Input.Cursor)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph>, if the cursor was set; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il cursore del mouse è stato impostato. In caso contrario <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.SetCursor(System.Windows.Input.Cursor)">
          <source>The cursor being set does not apply to any particular element, but rather it applies to the whole application.</source>
          <target state="translated">Il cursore viene impostato non è valida per un determinato elemento, ma piuttosto si applica all'intera applicazione.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.SetCursor(System.Windows.Input.Cursor)">
          <source>So, if after setting the cursor the mouse pointer moves over an object which sets the cursor, the cursor will be changed again.</source>
          <target state="translated">In tal caso, se dopo aver impostato il cursore che si sposta il puntatore del mouse su un oggetto che imposta il cursore, il cursore cambierà nuovamente.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.SetCursor(System.Windows.Input.Cursor)">
          <source>To force the mouse pointer to a specific <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> and to force this <ph id="ph2">&lt;xref:System.Windows.Input.Cursor&gt;</ph> on all elements, set the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.OverrideCursor%2A&gt;</ph> property.</source>
          <target state="translated">Per forzare il puntatore del mouse a uno specifico <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> e forzare <ph id="ph2">&lt;xref:System.Windows.Input.Cursor&gt;</ph> su tutti gli elementi, impostare il <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.OverrideCursor%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.SetCursor(System.Windows.Input.Cursor)">
          <source>To set the cursor on a specific element, use the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> property on either <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.</source>
          <target state="translated">Per impostare il cursore su un elemento specifico, utilizzare il <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Cursor%2A&gt;</ph> una proprietà <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> o <ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Mouse.SetCursor(System.Windows.Input.Cursor)">
          <source>For more information on the base elements, see the <bpt id="p1">[</bpt>Base Elements Overview<ept id="p1">](~/docs/framework/wpf/advanced/base-elements-overview.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sugli elementi di base, vedere il <bpt id="p1">[</bpt>Base Elements Overview<ept id="p1">](~/docs/framework/wpf/advanced/base-elements-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.Synchronize">
          <source>Forces the mouse to resynchronize.</source>
          <target state="translated">Forza la risincronizzazione del mouse.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Mouse.UpdateCursor">
          <source>Forces the mouse cursor to be updated.</source>
          <target state="translated">Forza l'aggiornamento del cursore del mouse.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.Mouse.XButton1">
          <source>Gets the state of the first extended button.</source>
          <target state="translated">Ottiene lo stato del primo pulsante esteso.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.XButton1">
          <source>The state of the first extended mouse button.</source>
          <target state="translated">Stato del primo pulsante del mouse esteso.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.XButton1">
          <source>The following example shows how to determine whether the first extended mouse button is pressed by checking if the state of <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.XButton1%2A&gt;</ph> is equal to the <ph id="ph2">&lt;xref:System.Windows.Input.MouseButtonState&gt;</ph> enumeration value <ph id="ph3">&lt;xref:System.Windows.Input.MouseButtonState.Pressed&gt;</ph>.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come determinare se il primo pulsante del mouse esteso è premuto controllando se lo stato di <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.XButton1%2A&gt;</ph> è uguale al <ph id="ph2">&lt;xref:System.Windows.Input.MouseButtonState&gt;</ph> valore di enumerazione <ph id="ph3">&lt;xref:System.Windows.Input.MouseButtonState.Pressed&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.XButton1">
          <source>If the button is pressed, a method is called which updates display elements in the sample.</source>
          <target state="translated">Se viene premuto il pulsante, viene chiamato un metodo quali aggiornamenti vengono visualizzati gli elementi nell'esempio.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.Mouse.XButton2">
          <source>Gets the state of the second extended button.</source>
          <target state="translated">Ottiene lo stato del secondo pulsante esteso.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.XButton2">
          <source>The state of the second extended mouse button.</source>
          <target state="translated">Stato del secondo pulsante del mouse esteso.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.XButton2">
          <source>The following example shows how to determine whether the second extended mouse button is pressed by checking if the state of <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.XButton2%2A&gt;</ph> is equal to the <ph id="ph2">&lt;xref:System.Windows.Input.MouseButtonState&gt;</ph> enumeration value <ph id="ph3">&lt;xref:System.Windows.Input.MouseButtonState.Pressed&gt;</ph>.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come determinare se il secondo pulsante del mouse esteso è premuto controllando se lo stato di <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.XButton2%2A&gt;</ph> è uguale al <ph id="ph2">&lt;xref:System.Windows.Input.MouseButtonState&gt;</ph> valore di enumerazione <ph id="ph3">&lt;xref:System.Windows.Input.MouseButtonState.Pressed&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Mouse.XButton2">
          <source>If the button is pressed, a method is called which updates display elements in the sample.</source>
          <target state="translated">Se viene premuto il pulsante, viene chiamato un metodo quali aggiornamenti vengono visualizzati gli elementi nell'esempio.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>