<Type Name="InputBinding" FullName="System.Windows.Input.InputBinding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="50863996da2e316125463f1727ac8d6947611179" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39920793" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputBinding extends System.Windows.Freezable implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class InputBinding&#xA;Inherits Freezable&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputBinding : System::Windows::Freezable, System::Windows::Input::ICommandSource" />
  <TypeSignature Language="F#" Value="type InputBinding = class&#xA;    inherit Freezable&#xA;    interface ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.0">System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="5bd5c-101">Rappresenta un'associazione tra un oggetto <see cref="T:System.Windows.Input.InputGesture" /> e un comando.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5bd5c-101">Represents a binding between an <see cref="T:System.Windows.Input.InputGesture" /> and a command.</span>
      </span>
      <span data-ttu-id="5bd5c-102">Il comando è potenzialmente un oggetto <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5bd5c-102">The command is potentially a <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd5c-103">È possibile specificare che l'input dell'utente richiama un comando creando una <xref:System.Windows.Input.InputBinding>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-103">You can specify that user input invokes a command by creating a <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="5bd5c-104">Quando l'utente esegue l'input specificato, il <xref:System.Windows.Input.ICommand> che è impostato sul <xref:System.Windows.Input.InputBinding.Command%2A> proprietà viene eseguita.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-104">When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.</span></span>  
  
 <span data-ttu-id="5bd5c-105">È possibile specificare che il <xref:System.Windows.Input.InputBinding> richiama un comando definiti su un oggetto tramite la creazione di un'associazione nel <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, e <xref:System.Windows.Input.InputBinding.CommandTarget%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-105">You can specify that the <xref:System.Windows.Input.InputBinding> invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties.</span></span> <span data-ttu-id="5bd5c-106">In questo modo è possibile definire un comando personalizzato e associarlo all'input dell'utente.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-106">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="5bd5c-107">Per altre informazioni, vedere il secondo esempio nella sezione esempi.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-107">For more information, see the second example in the Examples section.</span></span>  
  
 <span data-ttu-id="5bd5c-108">Un' <xref:System.Windows.Input.InputBinding> possono essere definiti in un oggetto specifico o a livello di classe registrando un <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> con il <xref:System.Windows.Input.CommandManager>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-108">An <xref:System.Windows.Input.InputBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.</span></span>  
  
 <span data-ttu-id="5bd5c-109">Il <xref:System.Windows.Input.InputBinding> stessa classe non supporta l'utilizzo XAML in quanto non espone un costruttore predefinito pubblico (non c'è un costruttore predefinito, ma è protetta).</span><span class="sxs-lookup"><span data-stu-id="5bd5c-109">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="5bd5c-110">Tuttavia, le classi derivate possono esporre un costruttore pubblico e pertanto possibile impostare le proprietà nella classe derivata dalla quale vengono ereditate <xref:System.Windows.Input.InputBinding> con un utilizzo XAML.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-110">However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="5bd5c-111">Due esistenti <xref:System.Windows.Input.InputBinding>-le classi derivate che possono essere inizializzate in XAML e possono impostare le proprietà in XAML vengono <xref:System.Windows.Input.KeyBinding> e <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-111">Two existing <xref:System.Windows.Input.InputBinding>-derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="5bd5c-112">La proprietà tipica nel [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programmazione che è impostato in XAML e accetta uno o più <xref:System.Windows.Input.InputBinding> oggetti come valori è il <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-112">The typical property in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming that is set in XAML and takes one or more <xref:System.Windows.Input.InputBinding> objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> property.</span></span>  
  
<a name="xamlObjectElementUsage_InputBinding"></a>   
## <a name="xaml-object-element-usage"></a><span data-ttu-id="5bd5c-113">Utilizzo della sintassi XAML per gli elementi oggetto</span><span class="sxs-lookup"><span data-stu-id="5bd5c-113">XAML Object Element Usage</span></span>  
 <span data-ttu-id="5bd5c-114">\<*inputBindingDerivedClass…/*></span><span class="sxs-lookup"><span data-stu-id="5bd5c-114">\<*inputBindingDerivedClass…/*></span></span>  
  
<a name="xamlValues_InputBinding"></a>   
## <a name="xaml-values"></a><span data-ttu-id="5bd5c-115">Valori XAML</span><span class="sxs-lookup"><span data-stu-id="5bd5c-115">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="5bd5c-116">Una classe derivata di <xref:System.Windows.Input.InputBinding> che supporta la sintassi degli elementi oggetto, ad esempio <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-116">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="5bd5c-117">Vedere la sezione Osservazioni.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-117">See Remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5bd5c-118">Nell'esempio seguente viene illustrato come utilizzare un <xref:System.Windows.Input.KeyBinding> per associare un <xref:System.Windows.Input.KeyGesture> per il <xref:System.Windows.Input.ApplicationCommands.Open%2A> comando.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-118">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span> <span data-ttu-id="5bd5c-119">Quando viene eseguita la combinazione di tasti, viene richiamato il comando Apri.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-119">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 <span data-ttu-id="5bd5c-120">Gli esempi seguenti illustrano come associare un comando personalizzato a <xref:System.Windows.Input.InputBinding> oggetti.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-120">The following examples show how to bind a custom command to <xref:System.Windows.Input.InputBinding> objects.</span></span> <span data-ttu-id="5bd5c-121">In questi esempi viene creano un'applicazione che consente all'utente di modificare il colore di sfondo effettuando una delle azioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="5bd5c-121">These examples create an application that enables the user to change the background color by performing one of the following actions:</span></span>  
  
-   <span data-ttu-id="5bd5c-122">Facendo clic su un pulsante.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-122">Clicking a button.</span></span>  
  
-   <span data-ttu-id="5bd5c-123">Se si preme CTRL + C.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-123">Pressing CTRL+C.</span></span>  
  
-   <span data-ttu-id="5bd5c-124">Facendo clic su un <xref:System.Windows.Controls.StackPanel> (all'esterno di <xref:System.Windows.Controls.ListBox>).</span><span class="sxs-lookup"><span data-stu-id="5bd5c-124">Right-clicking a <xref:System.Windows.Controls.StackPanel> (outside the <xref:System.Windows.Controls.ListBox>).</span></span>  
  
 <span data-ttu-id="5bd5c-125">Nel primo esempio viene creata una classe denominata `SimpleDelegateCommand`.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-125">The first example creates a class named `SimpleDelegateCommand`.</span></span> <span data-ttu-id="5bd5c-126">Questa classe accetta un delegato in modo che l'oggetto crea il comando è possibile definire l'azione che si verifica quando viene eseguito il comando.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-126">This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes.</span></span> <span data-ttu-id="5bd5c-127">`SimpleDelegateCommand` definisce inoltre le proprietà che specificano quali da tastiera e mouse input richiama il comando.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-127">`SimpleDelegateCommand` also defines properties that specify what key and mouse input invokes the command.</span></span> <span data-ttu-id="5bd5c-128">`GestureKey` e `GestureModifier` specificare l'input da tastiera; `MouseGesture` specifica l'input del mouse.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-128">`GestureKey` and `GestureModifier` specify the keyboard input; `MouseGesture` specifies the mouse input.</span></span>  
  
 [!code-csharp[InputCommandBinding#DelegateCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#delegatecommand)]
 [!code-vb[InputCommandBinding#DelegateCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#delegatecommand)]  
  
 <span data-ttu-id="5bd5c-129">Nell'esempio seguente crea e inizializza la `ColorChangeCommand`, ovvero un `SimpleDelegateCommand`.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-129">The following example creates and initializes the `ColorChangeCommand`, which is a `SimpleDelegateCommand`.</span></span> <span data-ttu-id="5bd5c-130">L'esempio definisce anche il metodo che viene eseguita quando il comando viene richiamato e imposta il `GestureKey`, `GestureModifier`, e `MouseGesture` proprietà.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-130">The example also defines the method that executes when the command is invoked and sets the `GestureKey`, `GestureModifier`, and `MouseGesture` properties.</span></span> <span data-ttu-id="5bd5c-131">Un'applicazione chiama il `InitializeCommand` metodo quando il programma viene avviato, ad esempio il costruttore di una <xref:System.Windows.Window>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-131">An application would call the `InitializeCommand` method when the program begins, such as in the constructor of a <xref:System.Windows.Window>.</span></span>  
  
 [!code-csharp[InputCommandBinding#InitializeCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#initializecommand)]
 [!code-vb[InputCommandBinding#InitializeCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#initializecommand)]  
  
 <span data-ttu-id="5bd5c-132">Infine, l'esempio seguente crea l'interfaccia utente.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-132">Finally, the following example creates the user interface.</span></span> <span data-ttu-id="5bd5c-133">Nell'esempio viene aggiunto un <xref:System.Windows.Input.KeyBinding> e una <xref:System.Windows.Input.MouseBinding> a un <xref:System.Windows.Controls.StackPanel> contenente una <xref:System.Windows.Controls.Button> e un <xref:System.Windows.Controls.ListBox>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-133">The example adds a <xref:System.Windows.Input.KeyBinding> and a <xref:System.Windows.Input.MouseBinding> to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.ListBox>.</span></span> <span data-ttu-id="5bd5c-134">Quando l'utente seleziona un elemento di <xref:System.Windows.Controls.ListBox>, che potrà possibile modificare il colore di sfondo sul colore selezionato.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-134">When the user selects an item in the <xref:System.Windows.Controls.ListBox>, he or she can change the color of the background to the selected color.</span></span> <span data-ttu-id="5bd5c-135">In ogni caso, il `CommandParameter` proprietà è associata all'elemento selezionato nel <xref:System.Windows.Controls.ListBox>e il `Command` proprietà è associata ai `ColorChangeCommand`.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-135">In each case, the `CommandParameter` property is bound to the selected item in the <xref:System.Windows.Controls.ListBox>, and the `Command` property is bound to the `ColorChangeCommand`.</span></span> <span data-ttu-id="5bd5c-136">Il <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>, e <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> delle proprietà sono associate alle proprietà corrispondenti sul `SimpleDelegateCommand` classe.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-136">The <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>, and <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> properties are bound to the corresponding properties on the `SimpleDelegateCommand` class.</span></span>  
  
 [!code-xaml[InputCommandBinding#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.UIElement.InputBindings" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5bd5c-137">Inizializza una nuova istanza della classe <see cref="T:System.Windows.Input.InputBinding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-137">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InputBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5bd5c-138">Fornisce l'inizializzazione di base per classi derivate dall'oggetto <see cref="T:System.Windows.Input.InputBinding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-138">Provides base initialization for classes derived from <see cref="T:System.Windows.Input.InputBinding" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd5c-139"><xref:System.Windows.Input.InputBinding> non è tecnicamente una classe astratta, ma il costruttore predefinito è deliberatamente accesso protetto.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-139"><xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the default constructor is deliberately protected access.</span></span> <span data-ttu-id="5bd5c-140">Questo ha l'effetto di rendere <xref:System.Windows.Input.InputBinding> classe "abstract" per XAML.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-140">This has the effect of making <xref:System.Windows.Input.InputBinding> an "abstract" class for XAML.</span></span> <span data-ttu-id="5bd5c-141">Sono disponibili le proprietà esistenti nelle [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] che hanno gli utilizzi XAML che prevede gli oggetti di tipo <xref:System.Windows.Input.InputBinding>, ma non è possibile specificare un <xref:System.Windows.Input.InputBinding> istanza in XAML.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-141">There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that have XAML usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in XAML.</span></span> <span data-ttu-id="5bd5c-142">In alternativa, è possibile specificare una delle specifiche di dispositivo <xref:System.Windows.Input.InputBinding> le classi derivate come valori, ad esempio <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-142">Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="5bd5c-143">
            <para>Se si implementa un oggetto personalizzato <see cref="T:System.Windows.Input.InputBinding" /> che supporta l'utilizzo di XAML, utilizzare questo costruttore per l'inizializzazione di base.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-143">
              <para>If you implement a custom <see cref="T:System.Windows.Input.InputBinding" /> that supports a XAML usage, use this constructor for base initialization.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.InputGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As InputGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InputBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::InputGesture ^ gesture);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.InputBinding : System.Windows.Input.ICommand * System.Windows.Input.InputGesture -&gt; System.Windows.Input.InputBinding" Usage="new System.Windows.Input.InputBinding (command, gesture)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.InputGesture" />
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="5bd5c-144">Comando da associare al parametro <c>gesture</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-144">The command to associate with <c>gesture</c>.</span>
          </span>
        </param>
        <param name="gesture">
          <span data-ttu-id="5bd5c-145">Movimento di input da associare al parametro <c>command</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-145">The input gesture to associate with <c>command</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5bd5c-146">Inizializza una nuova istanza della classe <see cref="T:System.Windows.Input.InputBinding" /> con il comando specifico e il movimento di input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-146">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class with the specified command and input gesture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd5c-147">Se sei uno sviluppatore di software tramite le classi di associazione di input esistente, è in genere non utilizzerà questo costruttore, anche se si siano definendo i comandi personalizzati.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-147">If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</span></span> <span data-ttu-id="5bd5c-148">Al contrario, è utilizzare o i costruttori delle classi derivate (<xref:System.Windows.Input.KeyBinding> e <xref:System.Windows.Input.MouseBinding>), o si utilizzerà questo costruttore come le istanze di base di una classe personalizzata.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-148">Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class.</span></span> <span data-ttu-id="5bd5c-149">Sebbene il <xref:System.Windows.Input.InputBinding> classe supporta dispositivi di input diversi in linea di principio, in pratica è necessario scegliere quale dispositivo rappresenterà l'associazione di input.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-149">Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent.</span></span> <span data-ttu-id="5bd5c-150">È possibile impostare solo uno solo <xref:System.Windows.Input.InputBinding.Gesture%2A> valore per l'associazione di input e i movimenti probabilmente specifici del dispositivo.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-150">You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5bd5c-151">Nell'esempio seguente viene illustrato come utilizzare questo costruttore per associare un <xref:System.Windows.Input.KeyGesture> con un <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-151">The following example shows how to use this constructor to associate a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#inputbindingaddingcomand)]
 [!code-vb[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#inputbindingaddingcomand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5bd5c-152">
            <paramref name="command" /> o <paramref name="gesture" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-152">
              <paramref name="command" /> or <paramref name="gesture" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member CloneCore : System.Windows.Freezable -&gt; unit&#xA;override this.CloneCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="5bd5c-153">Oggetto da clonare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-153">The object to clone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5bd5c-154">Copia i valori di base (non animati) delle proprietà dell'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-154">Copies the base (non-animated) values of the properties of the specified object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member CloneCurrentValueCore : System.Windows.Freezable -&gt; unit&#xA;override this.CloneCurrentValueCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCurrentValueCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="5bd5c-155">Oggetto da clonare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-155">The object to clone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5bd5c-156">Copia i valori correnti delle proprietà dell'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-156">Copies the current values of the properties of the specified object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Input.InputBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5bd5c-157">Ottiene o imposta l'oggetto <see cref="T:System.Windows.Input.ICommand" /> associato a questa associazione di input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-157">Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this input binding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5bd5c-158">Comando associato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-158">The associated command.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd5c-159">Il <xref:System.Windows.Input.InputBinding> classe non supporta l'utilizzo XAML in quanto non espone un costruttore pubblico predefinito (ha un costruttore predefinito, ma è protetta).</span><span class="sxs-lookup"><span data-stu-id="5bd5c-159">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</span></span> <span data-ttu-id="5bd5c-160">Tuttavia, le classi derivate possono esporre un costruttore pubblico e pertanto possibile utilizzare le proprietà ereditate dal <xref:System.Windows.Input.InputBinding>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-160">However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="5bd5c-161">Due esistenti <xref:System.Windows.Input.InputBinding> sono classi derivate che possono essere inizializzate in XAML e possono impostare le proprietà con gli utilizzi XAML <xref:System.Windows.Input.KeyBinding> e <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-161">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties with XAML usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 <span data-ttu-id="5bd5c-162"><xref:System.Windows.Input.ICommand> fa riferimento a un convertitore di tipi che consente a determinati preesistente <xref:System.Windows.Input.ICommand> implementazioni per specificare valori sotto forma di stringa.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-162"><xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string.</span></span> <span data-ttu-id="5bd5c-163">Questo comportamento di conversione di tipo imposta il formato del valore di attributo di questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-163">This type conversion behavior sets the attribute value form of this property.</span></span> <span data-ttu-id="5bd5c-164">È anche possibile associare il <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, e <xref:System.Windows.Input.InputBinding.CommandTarget%2A> delle proprietà per un <xref:System.Windows.Input.ICommand> definito in un oggetto.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-164">You can also bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="5bd5c-165">In questo modo è possibile definire un comando personalizzato e associarlo all'input dell'utente.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-165">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="5bd5c-166">Per altre informazioni, vedere il secondo esempio in <xref:System.Windows.Input.InputBinding>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-166">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5bd5c-167">Uso della sintassi XAML per gli attributi</span><span class="sxs-lookup"><span data-stu-id="5bd5c-167">XAML Attribute Usage</span></span>  
 <span data-ttu-id="5bd5c-168"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span><span class="sxs-lookup"><span data-stu-id="5bd5c-168"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span></span>  
  
<a name="xamlPropertyElementUsage_Command"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="5bd5c-169">Utilizzo della sintassi XAML per elementi proprietà</span><span class="sxs-lookup"><span data-stu-id="5bd5c-169">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Command>  
    <iCommandImplementation/>  
  </inputBindingDerivedClass.Command>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a><span data-ttu-id="5bd5c-170">Valori XAML</span><span class="sxs-lookup"><span data-stu-id="5bd5c-170">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="5bd5c-171">Una classe derivata di <xref:System.Windows.Input.InputBinding> che supporta la sintassi degli elementi oggetto, ad esempio <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-171">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="5bd5c-172">Vedere la sezione Osservazioni.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-172">See Remarks.</span></span>  
  
 `iCommandImplementation`  
 <span data-ttu-id="5bd5c-173">Un'implementazione dell'oggetto <xref:System.Windows.Input.ICommand> che supporta la sintassi degli elementi oggetto (ha un costruttore predefinito pubblico).</span><span class="sxs-lookup"><span data-stu-id="5bd5c-173">An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public default constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5bd5c-174">Nell'esempio seguente viene illustrato come utilizzare un <xref:System.Windows.Input.KeyBinding> per associare un <xref:System.Windows.Input.KeyGesture> per il <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> comando.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-174">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> command.</span></span> <span data-ttu-id="5bd5c-175">Quando viene eseguita la combinazione di tasti, viene richiamato il comando Apri.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-175">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewkeybinding)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewkeybinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5bd5c-176">Il valore di <see cref="P:System.Windows.Input.InputBinding.Command" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-176">The <see cref="P:System.Windows.Input.InputBinding.Command" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj with get, set" Usage="System.Windows.Input.InputBinding.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5bd5c-177">Ottiene o imposta i dati specifici del comando per un particolare comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-177">Gets or sets the command-specific data for a particular command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5bd5c-178">Dati specifici del comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-178">The command-specific data.</span>
          </span>
          <span data-ttu-id="5bd5c-179">Il valore predefinito è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-179">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd5c-180">Il <xref:System.Windows.Input.InputBinding.CommandParameter%2A> proprietà viene utilizzata per passare informazioni specifiche per il comando quando viene eseguita.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-180">The <xref:System.Windows.Input.InputBinding.CommandParameter%2A> property is used to pass specific information to the command when it is executed.</span></span> <span data-ttu-id="5bd5c-181">Il tipo di dati è definito dal comando.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-181">The type of the data is defined by the command.</span></span> <span data-ttu-id="5bd5c-182">Molti comandi non si prevedono parametri di comando. Per questi comandi, parametri dei comandi passati verranno ignorati.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-182">Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</span></span>  
  
 <span data-ttu-id="5bd5c-183">Se il comando che è associata un'associazione di input è una <xref:System.Windows.Input.RoutedCommand>, il <xref:System.Windows.Input.InputBinding.CommandParameter%2A> dell'associazione di input viene passato al <xref:System.Windows.Input.RoutedCommand> gestori tramite il <xref:System.Windows.Input.ExecutedRoutedEventArgs> e il <xref:System.Windows.Input.CanExecuteRoutedEventArgs> dati dell'evento quando il comando viene elaborato.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-183">If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the <xref:System.Windows.Input.InputBinding.CommandParameter%2A> of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed.</span></span>  
  
 <span data-ttu-id="5bd5c-184">Il tipo di dati e lo scopo del parametro del comando vengono definiti in modo diverso per ogni comando e può essere `null`.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-184">The data type and purpose of the command parameter are defined differently for each command and can be `null`.</span></span> <span data-ttu-id="5bd5c-185">È possibile associare il <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, e <xref:System.Windows.Input.InputBinding.CommandTarget%2A> delle proprietà per un <xref:System.Windows.Input.ICommand> definito in un oggetto.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-185">You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="5bd5c-186">In questo modo è possibile definire un comando personalizzato e associarlo all'input dell'utente.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-186">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="5bd5c-187">Per altre informazioni, vedere il secondo esempio in <xref:System.Windows.Input.InputBinding>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-187">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
 <span data-ttu-id="5bd5c-188">Il <xref:System.Windows.Input.InputBinding> classe non supporta l'utilizzo XAML in quanto non espone un costruttore pubblico predefinito (ha un costruttore predefinito, ma è protetta).</span><span class="sxs-lookup"><span data-stu-id="5bd5c-188">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</span></span> <span data-ttu-id="5bd5c-189">Tuttavia, le classi derivate possono esporre un costruttore pubblico e pertanto possibile impostare le proprietà ereditate dalla <xref:System.Windows.Input.InputBinding> con l'utilizzo XAML.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-189">However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with XAML usage.</span></span> <span data-ttu-id="5bd5c-190">Due esistenti <xref:System.Windows.Input.InputBinding> sono classi derivate che possono essere inizializzate in XAML e possono impostare le proprietà in XAML <xref:System.Windows.Input.KeyBinding> e <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-190">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5bd5c-191">Uso della sintassi XAML per gli attributi</span><span class="sxs-lookup"><span data-stu-id="5bd5c-191">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandParameter="commandParameterString"/>  
```  
  
<a name="xamlPropertyElementUsage_CommandParameter"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="5bd5c-192">Utilizzo della sintassi XAML per elementi proprietà</span><span class="sxs-lookup"><span data-stu-id="5bd5c-192">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.CommandParameter>  
    <commandParameterObject/>  
  </inputBindingDerivedClass.CommandParameter>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a><span data-ttu-id="5bd5c-193">Valori XAML</span><span class="sxs-lookup"><span data-stu-id="5bd5c-193">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="5bd5c-194">Una classe derivata di <xref:System.Windows.Input.InputBinding> che supporta la sintassi degli elementi oggetto, ad esempio <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-194">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="5bd5c-195">Vedere la sezione Osservazioni.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-195">See Remarks.</span></span>  
  
 `commandParameterString`  
 <span data-ttu-id="5bd5c-196">Stringa che viene elaborata da un particolare comando.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-196">A string that is processed by a particular command.</span></span> <span data-ttu-id="5bd5c-197">Le stringhe sono il tipo comune usato per i parametri di comando, perché possono essere impostate facilmente in XAML.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-197">Strings are the common type used for command parameters because they can be easily set in XAML.</span></span> <span data-ttu-id="5bd5c-198">Per il formato è prevista una stringa e il suo scopo, vedere la documentazione per il comando specifica che l'associazione di input è associato.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-198">For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</span></span> <span data-ttu-id="5bd5c-199">Molti comandi non richiedono parametri.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-199">Many commands do not expect parameters.</span></span>  
  
 `commandParameterObject`  
 <span data-ttu-id="5bd5c-200">Oggetto che viene elaborato da un particolare comando.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-200">An object that is processed by a particular command.</span></span> <span data-ttu-id="5bd5c-201">Tutti i valori esistenti [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] comandi usano le stringhe.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-201">All existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commands use strings.</span></span> <span data-ttu-id="5bd5c-202">Pertanto, questa sintassi per elementi proprietà è rilevante solo per gli scenari di comando personalizzato.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-202">Therefore, this property element syntax is only relevant for custom command scenarios.</span></span> <span data-ttu-id="5bd5c-203">Per supportare questa sintassi, il `commandParameterObject` oggetto deve supportare anche la sintassi degli elementi oggetto (deve avere un costruttore predefinito pubblico).</span><span class="sxs-lookup"><span data-stu-id="5bd5c-203">In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public default constructor).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandParameterProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5bd5c-204">Identifica la proprietà di dipendenza <see cref="P:System.Windows.Input.InputBinding.CommandParameter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-204">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5bd5c-205">Identifica la proprietà di dipendenza <see cref="P:System.Windows.Input.InputBinding.Command" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-205">Identifies the <see cref="P:System.Windows.Input.InputBinding.Command" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement with get, set" Usage="System.Windows.Input.InputBinding.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5bd5c-206">Ottiene o imposta l'elemento di destinazione del comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-206">Gets or sets the target element of the command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5bd5c-207">La destinazione del comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-207">The target of the command.</span>
          </span>
          <span data-ttu-id="5bd5c-208">Il valore predefinito è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-208">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd5c-209">In Windows Presentation Foundation, l'esecuzione di comandi di sistema, il <xref:System.Windows.Input.InputBinding.CommandTarget%2A> proprietà in un <xref:System.Windows.Input.ICommandSource> oggetto è applicabile solo quando il <xref:System.Windows.Input.ICommand> è un <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-209">In the Windows Presentation Foundation commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="5bd5c-210">Se <xref:System.Windows.Input.InputBinding.CommandTarget%2A> è impostato su un <xref:System.Windows.Input.ICommandSource> e il comando corrispondente non è un <xref:System.Windows.Input.RoutedCommand>, la destinazione del comando viene ignorata.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-210">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.</span></span>  
  
 <span data-ttu-id="5bd5c-211">Se usato con un <xref:System.Windows.Input.RoutedCommand>, la destinazione del comando è l'oggetto in cui la <xref:System.Windows.Input.CommandManager.Executed> e <xref:System.Windows.Input.CommandManager.CanExecute> gli eventi vengono generati.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-211">When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised.</span></span> <span data-ttu-id="5bd5c-212">Se il <xref:System.Windows.Input.InputBinding.CommandTarget%2A> proprietà non è impostata, l'elemento con lo stato attivo della tastiera viene usato come destinazione.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-212">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property is not set, the element with keyboard focus is used as the target.</span></span>  
  
 <span data-ttu-id="5bd5c-213">Il <xref:System.Windows.Input.InputBinding> stessa classe non supporta l'utilizzo XAML, in quanto non espone un costruttore predefinito pubblico (non c'è un costruttore predefinito, ma è protetta).</span><span class="sxs-lookup"><span data-stu-id="5bd5c-213">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="5bd5c-214">Tuttavia, le classi derivate possono esporre un costruttore pubblico e pertanto possibile impostare le proprietà ereditate dalla <xref:System.Windows.Input.InputBinding> con un utilizzo XAML.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-214">However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="5bd5c-215">Due esistenti <xref:System.Windows.Input.InputBinding> sono classi derivate che possono essere inizializzate in XAML e possono impostare le proprietà in XAML <xref:System.Windows.Input.KeyBinding> e <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-215">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandTarget"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5bd5c-216">Uso della sintassi XAML per gli attributi</span><span class="sxs-lookup"><span data-stu-id="5bd5c-216">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandTarget="bindingToTarget"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a><span data-ttu-id="5bd5c-217">Valori XAML</span><span class="sxs-lookup"><span data-stu-id="5bd5c-217">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="5bd5c-218">Una classe derivata di <xref:System.Windows.Input.InputBinding> che supporta la sintassi degli elementi oggetto, ad esempio <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-218">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="5bd5c-219">Vedere la sezione Osservazioni.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-219">See Remarks.</span></span>  
  
 `bindingToTarget`  
 <span data-ttu-id="5bd5c-220">Elemento denominato una stringa che utilizza un tipo di sintassi di associazione che può restituire un riferimento all'oggetto esistente.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-220">A string that uses a type of binding syntax that can return an object reference to an existing named element.</span></span> <span data-ttu-id="5bd5c-221">Vedere la sezione Osservazioni.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-221">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandTargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5bd5c-222">Identifica la proprietà di dipendenza <see cref="P:System.Windows.Input.InputBinding.CommandTarget" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-222">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceCore : unit -&gt; System.Windows.Freezable&#xA;override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="inputBinding.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5bd5c-223">Crea un'istanza di un oggetto <see cref="T:System.Windows.Input.InputBinding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-223">Creates an instance of an <see cref="T:System.Windows.Input.InputBinding" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5bd5c-224">Nuovo oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-224">The new object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Gesture : System.Windows.Input.InputGesture with get, set" Usage="System.Windows.Input.InputBinding.Gesture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5bd5c-225">Ottiene o imposta l'oggetto <see cref="T:System.Windows.Input.InputGesture" /> associato a questa associazione di input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-225">Gets or sets the <see cref="T:System.Windows.Input.InputGesture" /> associated with this input binding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5bd5c-226">Movimento associato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-226">The associated gesture.</span>
          </span>
          <span data-ttu-id="5bd5c-227">Il valore predefinito è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-227">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5bd5c-228">Il movimento di input è l'azione che richiama il comando.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-228">The input gesture is the action that invokes the command.</span></span> <span data-ttu-id="5bd5c-229">Esempi di movimenti di input in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] vengono <xref:System.Windows.Input.KeyGesture> e <xref:System.Windows.Input.MouseGesture>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-229">Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>.</span></span> <span data-ttu-id="5bd5c-230">Oggetto <xref:System.Windows.Input.KeyGesture> è una combinazione di un <xref:System.Windows.Input.Key> e un set di <xref:System.Windows.Input.ModifierKeys>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-230">A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span> <span data-ttu-id="5bd5c-231">Oggetto <xref:System.Windows.Input.MouseGesture> è una combinazione di un <xref:System.Windows.Input.MouseAction> e un set di <xref:System.Windows.Input.ModifierKeys>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-231">A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span>  
  
 <span data-ttu-id="5bd5c-232">Il <xref:System.Windows.Input.InputBinding> stessa classe non supporta l'utilizzo XAML, in quanto non espone un costruttore predefinito pubblico (non c'è un costruttore predefinito, ma è protetta).</span><span class="sxs-lookup"><span data-stu-id="5bd5c-232">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</span></span> <span data-ttu-id="5bd5c-233">Tuttavia, le classi derivate possono esporre un costruttore pubblico e pertanto possibile impostare le proprietà ereditate dalla <xref:System.Windows.Input.InputBinding> con un utilizzo XAML.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-233">However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="5bd5c-234">Due esistenti <xref:System.Windows.Input.InputBinding> sono classi derivate che possono essere inizializzate in XAML e possono impostare le proprietà in XAML <xref:System.Windows.Input.KeyBinding> e <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-234">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_gesture"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="5bd5c-235">Uso della sintassi XAML per gli attributi</span><span class="sxs-lookup"><span data-stu-id="5bd5c-235">XAML Attribute Usage</span></span>  
 <span data-ttu-id="5bd5c-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span><span class="sxs-lookup"><span data-stu-id="5bd5c-236"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span></span>  
  
 <span data-ttu-id="5bd5c-237">\- oppure -</span><span class="sxs-lookup"><span data-stu-id="5bd5c-237">\- or -</span></span>  
  
 <span data-ttu-id="5bd5c-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span><span class="sxs-lookup"><span data-stu-id="5bd5c-238"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span></span>  
  
 <span data-ttu-id="5bd5c-239">\- oppure -</span><span class="sxs-lookup"><span data-stu-id="5bd5c-239">\- or -</span></span>  
  
 <span data-ttu-id="5bd5c-240"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span><span class="sxs-lookup"><span data-stu-id="5bd5c-240"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span></span>  
  
<a name="xamlPropertyElementUsage_gesture"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="5bd5c-241">Utilizzo della sintassi XAML per elementi proprietà</span><span class="sxs-lookup"><span data-stu-id="5bd5c-241">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Gesture>  
    <inputGestureImplementation/>  
  </inputBindingDerivedClass.Gesture>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_gesture"></a>   
## <a name="xaml-values"></a><span data-ttu-id="5bd5c-242">Valori XAML</span><span class="sxs-lookup"><span data-stu-id="5bd5c-242">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="5bd5c-243">Una classe derivata di <xref:System.Windows.Input.InputBinding> che supporta la sintassi degli elementi oggetto, ad esempio <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-243">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="5bd5c-244">Vedere la sezione Osservazioni.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-244">See Remarks.</span></span>  
  
 `inputGestureImplementation`  
 <span data-ttu-id="5bd5c-245">Una classe personalizzata derivata di <xref:System.Windows.Input.InputGesture> che supporta la sintassi degli elementi oggetto.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-245">A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5bd5c-246">Nell'esempio seguente viene illustrato come utilizzare un <xref:System.Windows.Input.KeyBinding> per associare un <xref:System.Windows.Input.KeyGesture> a un <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-246">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="5bd5c-247">Quando la <xref:System.Windows.Input.KeyGesture> si preme ALT + L, il <xref:System.Windows.Input.ApplicationCommands.Close%2A> comando viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="5bd5c-247">When the <xref:System.Windows.Input.KeyGesture> ALT+L is pressed, the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command is invoked.</span></span>  
  
 [!code-xaml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member GetAsFrozenCore : System.Windows.Freezable -&gt; unit&#xA;override this.GetAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="5bd5c-248">Oggetto da clonare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-248">The object to clone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5bd5c-249">Rende l'istanza un duplicato bloccato dell'oggetto <see cref="T:System.Windows.Freezable" /> specificato utilizzando i valori di base (non-animati) delle proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-249">Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> by using base (non-animated) property values.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit&#xA;override this.GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetCurrentValueAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="5bd5c-250">Oggetto da clonare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-250">The object to clone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5bd5c-251">Rende l’istanza corrente una copia bloccata di <see cref="T:System.Windows.Freezable" />specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-251">Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />.</span>
          </span>
          <span data-ttu-id="5bd5c-252">Se l'oggetto ha proprietà di dipendenza animate, i valori animati correnti vengono copiati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5bd5c-252">If the object has animated dependency properties, their current animated values are copied.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>