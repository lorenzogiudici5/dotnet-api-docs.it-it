<Type Name="ExecutedRoutedEventArgs" FullName="System.Windows.Input.ExecutedRoutedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="df8e779196cfe272739ecbac85415d9856b088d5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30648245" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ExecutedRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExecutedRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExecutedRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExecutedRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Specifica dati per gli eventi indirizzati <see cref="E:System.Windows.Input.CommandManager.Executed" /> e <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.ExecutedRoutedEventHandler> rappresenta il metodo che implementa la logica del comando un <xref:System.Windows.Input.RoutedCommand>.  Separare la logica di implementazione del comando consente il comando per essere richiamati dai tipi e da diverse origini e consente di centralizzare della logica di comando.  
  
 Questa classe di dati di evento viene utilizzata anche per <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> e <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>. Ma gestori più pratici gestirà la <xref:System.Windows.Input.CommandBinding.Executed> eventi da un particolare <xref:System.Windows.Input.CommandBinding>, anziché di lavorare con il <xref:System.Windows.Input.CommandManager> livello.  
  
 Per altre informazioni sui comandi, vedere [Cenni preliminari sull'esecuzione di comandi](~/docs/framework/wpf/advanced/commanding-overview.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Windows.Input.ExecutedRoutedEventHandler> che consente di aprire un <xref:System.Windows.MessageBox> quando viene eseguito il comando.  
  
 [!code-csharp[commandwithhandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandwithhandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Docs>
  <Members>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ExecutedRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il comando che è stato richiamato.</summary>
        <value>Comando associato a questo evento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il comando associato all'evento può eseguire il cast all'implementazione specifica di <xref:System.Windows.Input.ICommand>, ad esempio un <xref:System.Windows.Input.RoutedCommand>, se il tipo è noto.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Windows.Input.ExecutedRoutedEventHandler> che gestisce più comandi. Il gestore controlla la <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> proprietà il <xref:System.Windows.Input.ExecutedRoutedEventArgs> per determinare il metodo da chiamare.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCmdHander](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecmdhander)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCmdHander](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecmdhander)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il parametro dei dati del comando.</summary>
        <value>Dati specifici del comando. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà rappresenta un parametro generico di dati definito per il comando specifico.  
  
 Se questo parametro non è necessaria, `null` può essere passato.  
  
 In genere, il <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> viene utilizzata per passare informazioni specifiche per il comando quando viene eseguita.  Il tipo di dati è definito dal comando.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Windows.Input.ExecutedRoutedEventHandler> per un oggetto personalizzato <xref:System.Windows.Input.RoutedCommand>.  Il gestore aggiorna un <xref:System.Windows.Controls.TextBox> con l'ora corrente e <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> proprietà di un <xref:System.Windows.Controls.Slider> controllo che viene passato al gestore tramite il <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampleexecuted)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampleexecuted)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
  </Members>
</Type>