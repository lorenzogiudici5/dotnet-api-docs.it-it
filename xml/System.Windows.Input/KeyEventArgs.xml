<Type Name="KeyEventArgs" FullName="System.Windows.Input.KeyEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e1ae5bc7d79c7edc559678a567006745b174c565" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48676708" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class KeyEventArgs : System.Windows.Input.KeyboardEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyEventArgs extends System.Windows.Input.KeyboardEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyEventArgs&#xA;Inherits KeyboardEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyEventArgs : System::Windows::Input::KeyboardEventArgs" />
  <TypeSignature Language="F#" Value="type KeyEventArgs = class&#xA;    inherit KeyboardEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.KeyboardEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="0ca58-101">Visualizza i dati per gli eventi indirizzati <see cref="E:System.Windows.UIElement.KeyUp" /> e <see cref="E:System.Windows.UIElement.KeyDown" />, oltre che per gli eventi associati e di anteprima correlati.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0ca58-101">Provides data for the <see cref="E:System.Windows.UIElement.KeyUp" /> and <see cref="E:System.Windows.UIElement.KeyDown" /> routed events, as well as related attached and Preview events.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca58-102">Questa classe di dati di evento viene utilizzata con i seguenti eventi associati:</span><span class="sxs-lookup"><span data-stu-id="0ca58-102">This event data class is used with the following attached events:</span></span>  
  
-   <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>  
  
 <span data-ttu-id="0ca58-103">Questa classe di dati degli eventi viene usata anche con i seguenti eventi indirizzati per elementi di base.</span><span class="sxs-lookup"><span data-stu-id="0ca58-103">This event data class is also used with the following routed events on base elements.</span></span> <span data-ttu-id="0ca58-104">Questi eventi indirizzati inoltrano gli eventi collegati elencati in precedenza in modo da renderli più accessibile per il modello di elemento generale in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0ca58-104">These routed events forward the previously listed attached events to make them more accessible to the general element model in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span>  
  
-   <xref:System.Windows.UIElement.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=nameWithType>  
  
 <span data-ttu-id="0ca58-105">Gli eventi associati e gli eventi indirizzati dell'elemento base condividono i dati di evento e il bubbling e tunneling versioni degli eventi indirizzati anche condividere i dati dell'evento.</span><span class="sxs-lookup"><span data-stu-id="0ca58-105">The attached events and the base element routed events share their event data, and the bubbling and tunneling versions of the routed events also share event data.</span></span> <span data-ttu-id="0ca58-106">Questo può influire le caratteristiche dell'evento gestite durante il trasferimento lungo la route dell'evento.</span><span class="sxs-lookup"><span data-stu-id="0ca58-106">This can affect the handled characteristics of the event as it travels the event route.</span></span> <span data-ttu-id="0ca58-107">Per informazioni dettagliate, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).</span><span class="sxs-lookup"><span data-stu-id="0ca58-107">For details, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="0ca58-108">Una chiave può essere in entrambi gli stati attivo e attivato/disattivati o la freccia giù e attivare/disattivare gli stati.</span><span class="sxs-lookup"><span data-stu-id="0ca58-108">A key can be in both the up and toggled states or the down and toggled states.</span></span> <span data-ttu-id="0ca58-109">Per questo motivo, che determina se una chiave sia attivo o non è così semplice come controllare il <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> valore come valore numerico.</span><span class="sxs-lookup"><span data-stu-id="0ca58-109">For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value.</span></span> <span data-ttu-id="0ca58-110">Controllare invece il valore trattandoli come un'enumerazione di flag.</span><span class="sxs-lookup"><span data-stu-id="0ca58-110">Instead, you should check the value by treating it as a flag enumeration.</span></span> <span data-ttu-id="0ca58-111">Usare un `AND` confronto del primo bit.</span><span class="sxs-lookup"><span data-stu-id="0ca58-111">Use an `AND` comparison of the first bit.</span></span> <span data-ttu-id="0ca58-112">In alternativa, usare le proprietà di supporto <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, e <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> per determinare se una chiave specificata è verso l'alto, verso il basso, attivato o disattivato.</span><span class="sxs-lookup"><span data-stu-id="0ca58-112">Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyEventHandler" />
    <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
    <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyEventArgs (System.Windows.Input.KeyboardDevice keyboard, System.Windows.PresentationSource inputSource, int timestamp, System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.KeyboardDevice keyboard, class System.Windows.PresentationSource inputSource, int32 timestamp, valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyEventArgs(System::Windows::Input::KeyboardDevice ^ keyboard, System::Windows::PresentationSource ^ inputSource, int timestamp, System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyEventArgs : System.Windows.Input.KeyboardDevice * System.Windows.PresentationSource * int * System.Windows.Input.Key -&gt; System.Windows.Input.KeyEventArgs" Usage="new System.Windows.Input.KeyEventArgs (keyboard, inputSource, timestamp, key)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keyboard" Type="System.Windows.Input.KeyboardDevice" />
        <Parameter Name="inputSource" Type="System.Windows.PresentationSource" />
        <Parameter Name="timestamp" Type="System.Int32" />
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="keyboard">
          <span data-ttu-id="0ca58-113">Dispositivo tastiera logica associata a questo evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-113">The logical keyboard device associated with this event.</span>
          </span>
        </param>
        <param name="inputSource">
          <span data-ttu-id="0ca58-114">Origine di input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-114">The input source.</span>
          </span>
        </param>
        <param name="timestamp">
          <span data-ttu-id="0ca58-115">Tempo in cui si è verificato l'input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-115">The time when the input occurred.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="0ca58-116">Tasto cui fa riferimento l'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-116">The key referenced by the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ca58-117">Inizializza una nuova istanza della classe <see cref="T:System.Windows.Input.KeyEventArgs" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-117">Initializes a new instance of the <see cref="T:System.Windows.Input.KeyEventArgs" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="DeadCharProcessedKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key DeadCharProcessedKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key DeadCharProcessedKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.DeadCharProcessedKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeadCharProcessedKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key DeadCharProcessedKey { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.DeadCharProcessedKey : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.DeadCharProcessedKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca58-118">Ottiene il tasto che fa parte di una composizione di tasti inutilizzati per creare un unico carattere combinato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-118">Gets the key that is part of dead key composition to create a single combined character.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ca58-119">Tasto che fa parte di una composizione di tasti inutilizzati per creare un unico carattere combinato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-119">The key that is part of dead key composition to create a single combined character.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca58-120">Una chiave inattiva, quando premuti, non genera alcun carattere visibili, ma indica che la chiave deve essere combinato con il carattere prodotto dal tasto lettera contiguo premuto.</span><span class="sxs-lookup"><span data-stu-id="0ca58-120">A dead key, when pressed, produces no visible character but indicates that the key is to be combined with the character produced by the next letter key pressed.</span></span>  <span data-ttu-id="0ca58-121">Se <xref:System.Windows.Input.KeyEventArgs.Key%2A> restituisce <xref:System.Windows.Input.Key.DeadCharProcessed?displayProperty=nameWithType>, è possibile usare questa proprietà per ottenere la chiave effettiva di cui è stata immessa.</span><span class="sxs-lookup"><span data-stu-id="0ca58-121">If <xref:System.Windows.Input.KeyEventArgs.Key%2A> returns <xref:System.Windows.Input.Key.DeadCharProcessed?displayProperty=nameWithType>, you can use this property to get the actual key that was entered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImeProcessedKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key ImeProcessedKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key ImeProcessedKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.ImeProcessedKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ImeProcessedKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key ImeProcessedKey { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.ImeProcessedKey : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.ImeProcessedKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca58-122">Ottiene il tasto della tastiera cui fa riferimento l'evento, se il tasto verrà elaborato da un oggetto [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)].</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-122">Gets the keyboard key referenced by the event, if the key will be processed by an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)].</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ca58-123">Oggetto <see cref="T:System.Windows.Input.Key" /> cui fa riferimento l'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-123">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="InputSource">
      <MemberSignature Language="C#" Value="public System.Windows.PresentationSource InputSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PresentationSource InputSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.InputSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputSource As PresentationSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PresentationSource ^ InputSource { System::Windows::PresentationSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputSource : System.Windows.PresentationSource" Usage="System.Windows.Input.KeyEventArgs.InputSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PresentationSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca58-124">Ottiene l'origine di input che ha fornito questo input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-124">Gets the input source that provided this input.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ca58-125">Origine di input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-125">The input source.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="0ca58-126">Per ottenere l'origine di input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-126">for getting the input source.</span>
          </span>
          <span data-ttu-id="0ca58-127">Enumerazioni associate: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-127">Associated enumerations: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="keyEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">
          <span data-ttu-id="0ca58-128">Gestore generico da chiamare nella modalità specifica del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-128">The generic handler to call in a type-specific way.</span>
          </span>
        </param>
        <param name="genericTarget">
          <span data-ttu-id="0ca58-129">Destinazione sulla quale chiamare il gestore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-129">The target to call the handler on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ca58-130">Richiama i gestori eventi in una modalità specifica del tipo, che può aumentare l'efficienza del sistema di eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-130">Invokes event handlers in a type-specific way, which can increase event system efficiency.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca58-131">Questa implementazione viene eseguito il cast del gestore generico come un <xref:System.Windows.Input.KeyEventHandler> e lo richiama.</span><span class="sxs-lookup"><span data-stu-id="0ca58-131">This implementation casts the generic handler as a <xref:System.Windows.Input.KeyEventHandler> and then invokes it.</span></span> <span data-ttu-id="0ca58-132">Per informazioni dettagliate su questo modello di implementazione e i relativi motivi, vedere <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> e [Cenni preliminari sugli eventi indirizzati](~/docs/framework/wpf/advanced/routed-events-overview.md).</span><span class="sxs-lookup"><span data-stu-id="0ca58-132">For details on this implementation pattern and the reasons for it, see <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> and [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDown">
      <MemberSignature Language="C#" Value="public bool IsDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDown" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDown : bool" Usage="System.Windows.Input.KeyEventArgs.IsDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca58-133">Ottiene un valore che indica se il tasto cui fa riferimento l'evento è nello stato premuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-133">Gets a value that indicates whether the key referenced by the event is in the down state.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ca58-134">
            <see langword="true" /> se il tasto è premuto; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-134">
              <see langword="true" /> if the key is down; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca58-135">Il <xref:System.Windows.Input.Keyboard> classe fornisce anche informazioni sullo stato dei tasti sulla tastiera.</span><span class="sxs-lookup"><span data-stu-id="0ca58-135">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span> <span data-ttu-id="0ca58-136">Ad esempio, il <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> metodo restituisce se una chiave specificata è premuto.</span><span class="sxs-lookup"><span data-stu-id="0ca58-136">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method returns whether a specified key is down.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ca58-137">L'esempio seguente controlla se la chiave associata a un'istanza di <xref:System.Windows.Input.KeyEventArgs> è attivo per ottenere lo stato del <xref:System.Windows.Input.KeyEventArgs.IsDown%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="0ca58-137">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsDown%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisdown)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisdown)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsRepeat">
      <MemberSignature Language="C#" Value="public bool IsRepeat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRepeat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsRepeat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRepeat As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRepeat { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRepeat : bool" Usage="System.Windows.Input.KeyEventArgs.IsRepeat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca58-138">Ottiene un valore che indica se il tasto della tastiera, cui fa riferimento l'evento, è un tasto ripetuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-138">Gets a value that indicates whether the keyboard key referenced by the event is a repeated key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ca58-139">
            <see langword="true" /> se il tasto è ripetuto; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-139">
              <see langword="true" /> if the key is repeated; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0ca58-140">Non è previsto alcun valore predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-140">There is no default value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0ca58-141">L'esempio seguente controlla se la chiave associata a un'istanza di <xref:System.Windows.Input.KeyEventArgs> è un tasto ripetuto ottenendo lo stato del <xref:System.Windows.Input.KeyEventArgs.IsRepeat%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="0ca58-141">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is a repeated key by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsRepeat%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsRepeat](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisrepeat)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsRepeat](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisrepeat)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsToggled">
      <MemberSignature Language="C#" Value="public bool IsToggled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsToggled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsToggled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsToggled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsToggled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsToggled : bool" Usage="System.Windows.Input.KeyEventArgs.IsToggled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca58-142">Ottiene un valore che indica se il tasto cui fa riferimento l'evento è nello stato attivato o disattivato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-142">Gets a value that indicates whether the key referenced by the event is in the toggled state.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ca58-143">
            <see langword="true" /> se il tasto è attivato o disattivato; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-143">
              <see langword="true" /> if the key is toggled; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0ca58-144">Non è previsto alcun valore predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-144">There is no default value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca58-145">Il <xref:System.Windows.Input.Keyboard> classe fornisce anche informazioni sullo stato dei tasti sulla tastiera.</span><span class="sxs-lookup"><span data-stu-id="0ca58-145">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span> <span data-ttu-id="0ca58-146">Ad esempio, il <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> metodo viene restituito se è attivata o disattivata una chiave specificata.</span><span class="sxs-lookup"><span data-stu-id="0ca58-146">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method returns whether a specified key is toggled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ca58-147">L'esempio seguente controlla se la chiave associata a un'istanza di <xref:System.Windows.Input.KeyEventArgs> viene attivata/disattivata tramite recupero dello stato del <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="0ca58-147">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is toggled by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsToggled](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsistoggled)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsToggled](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsistoggled)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsUp">
      <MemberSignature Language="C#" Value="public bool IsUp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsUp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUp { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUp : bool" Usage="System.Windows.Input.KeyEventArgs.IsUp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca58-148">Ottiene un valore che indica se il tasto, cui fa riferimento l'evento, è nello stato rilasciato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-148">Gets a value that indicates whether the key referenced by the event is in the up state.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ca58-149">
            <see langword="true" /> se il tasto è rilasciato; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-149">
              <see langword="true" /> if the key is up; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0ca58-150">Non è previsto alcun valore predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-150">There is no default value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca58-151">Il <xref:System.Windows.Input.Keyboard> classe fornisce anche informazioni sullo stato dei tasti sulla tastiera.</span><span class="sxs-lookup"><span data-stu-id="0ca58-151">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span>  <span data-ttu-id="0ca58-152">Ad esempio, il <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> metodo indica se un oggetto specificato è backup.</span><span class="sxs-lookup"><span data-stu-id="0ca58-152">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method returns whether a specified is up.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ca58-153">L'esempio seguente controlla se la chiave associata a un'istanza di <xref:System.Windows.Input.KeyEventArgs> sia attivo per ottenere lo stato del <xref:System.Windows.Input.KeyEventArgs.IsUp%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="0ca58-153">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is up by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsUp%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsUp](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisup)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsUp](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisup)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca58-154">Ottiene il tasto della tastiera associato all'evento di input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-154">Gets the keyboard key associated with the event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ca58-155">Oggetto <see cref="T:System.Windows.Input.Key" /> cui fa riferimento l'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-155">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0ca58-156">L'esempio seguente crea una <xref:System.Windows.Input.KeyEventHandler> e controlla se il tasto associato con il <xref:System.Windows.Input.KeyEventArgs> è il <xref:System.Windows.Input.Key.Return> chiave.</span><span class="sxs-lookup"><span data-stu-id="0ca58-156">The following example creates a <xref:System.Windows.Input.KeyEventHandler> and checks whether the key associated with the <xref:System.Windows.Input.KeyEventArgs> is the <xref:System.Windows.Input.Key.Return> key.</span></span>  
  
 [!code-csharp[keydown#KeyDownSample](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyDown/CSharp/Window1.xaml.cs#keydownsample)]
 [!code-vb[keydown#KeyDownSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyDown/VisualBasic/Window1.xaml.vb#keydownsample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="KeyStates">
      <MemberSignature Language="C#" Value="public System.Windows.Input.KeyStates KeyStates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.KeyStates KeyStates" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.KeyStates" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyStates As KeyStates" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::KeyStates KeyStates { System::Windows::Input::KeyStates get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyStates : System.Windows.Input.KeyStates" Usage="System.Windows.Input.KeyEventArgs.KeyStates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyStates</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca58-157">Ottiene lo stato del tasto della tastiera associato a questo evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-157">Gets the state of the keyboard key associated with this event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ca58-158">Stato del tasto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-158">The state of the key.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca58-159">Una chiave può essere in entrambi gli stati attivo e attivato/disattivati o la freccia giù e attivare/disattivare gli stati.</span><span class="sxs-lookup"><span data-stu-id="0ca58-159">A key can be in both the up and toggled states or the down and toggled states.</span></span> <span data-ttu-id="0ca58-160">Per questo motivo, che determina se una chiave sia attivo o non è così semplice come controllare il <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> valore come valore numerico.</span><span class="sxs-lookup"><span data-stu-id="0ca58-160">For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value.</span></span> <span data-ttu-id="0ca58-161">Controllare invece il valore trattandoli come un'enumerazione di flag.</span><span class="sxs-lookup"><span data-stu-id="0ca58-161">Instead, you should check the value by treating it as a flag enumeration.</span></span> <span data-ttu-id="0ca58-162">Usare un `AND` confronto del primo bit.</span><span class="sxs-lookup"><span data-stu-id="0ca58-162">Use an `AND` comparison of the first bit.</span></span> <span data-ttu-id="0ca58-163">In alternativa, usare le proprietà di supporto <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, e <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> per determinare se una chiave specificata è verso l'alto, verso il basso, attivato o disattivato.</span><span class="sxs-lookup"><span data-stu-id="0ca58-163">Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ca58-164">L'esempio seguente controlla se una chiave associata a un'istanza di <xref:System.Windows.Input.KeyEventArgs> è attivo, eseguendo un bit per bit `AND` confronto sulle <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> della chiave e il <xref:System.Windows.Input.KeyStates.Down> valore di enumerazione.</span><span class="sxs-lookup"><span data-stu-id="0ca58-164">The following example checks whether a key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by performing a bitwise `AND` comparison on the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> of the key and the <xref:System.Windows.Input.KeyStates.Down> enumeration value.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeystatesdown)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeystatesdown)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="SystemKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key SystemKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key SystemKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.SystemKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SystemKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key SystemKey { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.SystemKey : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.SystemKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca58-165">Ottiene il tasto della tastiera cui fa riferimento l'evento se il tasto verrà elaborato dal sistema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-165">Gets the keyboard key referenced by the event, if the key will be processed by the system.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ca58-166">Oggetto <see cref="T:System.Windows.Input.Key" /> cui fa riferimento l'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca58-166">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
  </Members>
</Type>