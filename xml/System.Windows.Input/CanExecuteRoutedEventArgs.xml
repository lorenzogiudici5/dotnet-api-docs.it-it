<Type Name="CanExecuteRoutedEventArgs" FullName="System.Windows.Input.CanExecuteRoutedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4b8dddd7cb69affee96be90bc72d1409afcef3d8" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39751767" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CanExecuteRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CanExecuteRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class CanExecuteRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Specifica dati per gli eventi indirizzati <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> e <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, un'origine del comando, questo tipo una <xref:System.Windows.Controls.MenuItem>, chiamerà il <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> metodo su un <xref:System.Windows.Input.RoutedCommand> per determinare se il comando può o non è possibile eseguire il comando sulla destinazione corrente.  Se <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> è impostata su `false` da un gestore eventi, si disabiliterà l'origine del comando.  Ad esempio, se un <xref:System.Windows.Controls.MenuItem> agisce come origine del comando per un comando e il comando non può essere eseguito sulla destinazione del comando corrente, quindi il <xref:System.Windows.Controls.MenuItem> se stesso out.  
  
 Il <xref:System.Windows.Input.ICommand.CanExecuteChanged> eventi invia una notifica di un comando di origine quando la capacità di eseguire un comando può essere modificata.  
  
   
  
## Examples  
 L'esempio seguente crea una <xref:System.Windows.Input.CanExecuteRoutedEventHandler> che restituisce `true` solo se la destinazione del comando è un controllo.  Prima di tutto <xref:System.Windows.RoutedEventArgs.Source%2A> viene eseguito il cast a un <xref:System.Windows.Controls.Control>.  Se <xref:System.Windows.RoutedEventArgs.Source%2A> è un <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> è impostata su `true`; in caso contrario, impostarlo su `false`.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanExecute" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Property CanExecute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanExecute { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanExecute : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se l'oggetto <see cref="T:System.Windows.Input.RoutedCommand" /> associato a questo evento può essere eseguito sulla destinazione del comando.</summary>
        <value>
          <see langword="true" /> se l'evento può essere eseguito sulla destinazione del comando; in caso contrario, <see langword="false" />.  Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Molte origini, comando, ad esempio <xref:System.Windows.Controls.MenuItem> e <xref:System.Windows.Controls.Button>, sono disabilitate quando <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> viene `false` e abilitate quando la <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> è `true`.  
  
   
  
## Examples  
 L'esempio seguente crea un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> che restituisce true solo se la destinazione del comando è un controllo.  Prima di <xref:System.Windows.RoutedEventArgs.Source%2A> i dati dell'evento viene eseguito il cast a un <xref:System.Windows.Controls.Control>.  Se si tratta di un <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> è impostata su `true`; in caso contrario, impostarlo su `false`.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il comando associato a questo evento.</summary>
        <value>Comando. Se il comando non è un comando personalizzato, generalmente è un <see cref="T:System.Windows.Input.RoutedCommand" />. Non è previsto alcun valore predefinito.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sull'esecuzione di comandi, vedere la [Cenni preliminari](~/docs/framework/wpf/advanced/commanding-overview.md).  
  
   
  
## Examples  
 L'esempio seguente crea un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> che gestisce più comandi.  Se il <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> proprietà è uguale al <xref:System.Windows.Input.MediaCommands.Play%2A> comando e il metodo `IsPlaying` restituisce `false`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> è impostato su `true`; in caso contrario, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> è impostato su `false`.  Se il <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> proprietà è uguale al <xref:System.Windows.Input.MediaCommands.Stop%2A> comando e il metodo `IsPlaying` restituisce `true`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> è impostato su `true`; in caso contrario, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> è impostato su `false`.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="ContinueRouting">
      <MemberSignature Language="C#" Value="public bool ContinueRouting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueRouting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueRouting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContinueRouting { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueRouting : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina se l'evento indirizzato di input che ha richiamato il comando deve continuare a eseguire l'indirizzamento attraverso la struttura ad albero dell'elemento.</summary>
        <value>
          <see langword="true" /> se l'evento indirizzato deve continuare ad indirizzare attraverso la struttura ad albero dell'elemento; in caso contrario, <see langword="false" />.   Il valore predefinito è <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="canExecuteRoutedEventArgs.InvokeEventHandler (genericHandler, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameter : obj" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene i dati specifici del comando.</summary>
        <value>Dati del comando.  Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il parametro del comando viene usato per passare informazioni specifiche per il comando quando viene eseguita.  Il tipo di dati è definito dal comando.  
  
 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> può essere `null`. Molti comandi non elaborare o prevedono parametri di comando.  
  
   
  
## Examples  
 Nell'esempio seguente viene visualizzato da utilizzare un <xref:System.Windows.Controls.Button> come origine del comando per un comando personalizzato.  Il <xref:System.Windows.Input.ICommandSource.Command%2A> proprietà del <xref:System.Windows.Controls.Button> è impostata su un oggetto personalizzato <xref:System.Windows.Input.RoutedCommand> chiamato `customComand` e il <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> viene usato per passare il valore del <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> proprietà di un <xref:System.Windows.Controls.Slider> controllo.  Ciò viene ottenuto tramite l'uso di Data Binding per associare il <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> per il <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> proprietà.  Il convertitore nell'espressione di associazione è una classe personalizzata <xref:System.Windows.Data.IValueConverter> che consente di convertire <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> in un <xref:System.Int32> prima di associarlo al <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 [!code-xaml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml#invalidatesampleslidercommandparameter)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>