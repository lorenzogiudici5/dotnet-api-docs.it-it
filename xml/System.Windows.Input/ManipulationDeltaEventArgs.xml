<Type Name="ManipulationDeltaEventArgs" FullName="System.Windows.Input.ManipulationDeltaEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="14e330c730054f8a6441ee6306a12db68536d587" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30658635" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManipulationDeltaEventArgs : System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManipulationDeltaEventArgs extends System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ManipulationDeltaEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManipulationDeltaEventArgs&#xA;Inherits InputEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManipulationDeltaEventArgs sealed : System::Windows::Input::InputEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce dati per l'evento <see cref="E:System.Windows.UIElement.ManipulationDelta" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Windows.Input.ManipulationDeltaEventArgs> classe contiene i dati sulle modifiche nella posizione di una modifica. Il <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> proprietà contiene le modifiche apportate dall'ultimo <xref:System.Windows.UIElement.ManipulationDelta> evento si è verificato. Il <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> proprietà contiene i numero totale di modifiche che si sono verificati per la modifica corrente. Utilizzare uno di tali proprietà per trasformare l'oggetto modificato.  
  
 È possibile terminare una modifica chiamando il <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> metodo o la modifica nell'inerzia chiamando forza il <xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Windows.UIElement.ManipulationDelta> evento. Nell'esempio viene utilizzato il <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> proprietà da spostare, ridimensionare e ruotare un <xref:System.Windows.Shapes.Rectangle>. Nell'esempio viene inoltre verificato se il <xref:System.Windows.UIElement.ManipulationDelta> evento si è verificato durante l'inerzia e se il rettangolo tocca il bordo di una finestra. Se questi casi, l'applicazione si interrompe la modifica per evitare che il rettangolo di lasciare l'area visibile dell'applicazione. Questo esempio fa parte di un esempio più esaustivo in [procedura dettagliata: creazione del primo Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public bool Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDeltaEventArgs.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Function Cancel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Cancel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Annulla la modifica.</summary>
        <returns>
          <see langword="true" /> se la modifica è stata annullata; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il metodo ha esito positivo, il valore predefinito <xref:System.Windows.Input.TouchDevice> precedente invia eventi di tocco come mouse verso il basso o il mouse gli eventi di spostamento all'elemento e non si verificano eventi di modifica futuri. Non è possibile promuovere il tocco agli eventi del mouse se il <xref:System.Windows.UIElement.ManipulationCompleted> evento si verifica durante l'inerzia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDeltaEventArgs.Complete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Complete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Completa la modifica senza inerzia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile chiamare il <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> metodo per terminare la modifica. Ad esempio, quando un oggetto raggiunge il bordo di una finestra, è possibile chiamare <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> per impedire che l'oggetto che lo schermo.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Windows.UIElement.ManipulationDelta> evento. Nell'esempio viene controllato se il <xref:System.Windows.UIElement.ManipulationDelta> evento si è verificato durante l'inerzia e se il rettangolo tocca il bordo di una finestra. Se questi casi, l'applicazione si interrompe la modifica per evitare che il rettangolo di lasciare l'area visibile dell'applicazione. Questo esempio fa parte di un esempio più esaustivo in [procedura dettagliata: creazione del primo Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CumulativeManipulation">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationDelta CumulativeManipulation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ManipulationDelta CumulativeManipulation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CumulativeManipulation As ManipulationDelta" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationDelta ^ CumulativeManipulation { System::Windows::Input::ManipulationDelta ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationDelta</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene le modifiche accumulate della manipolazione corrente.</summary>
        <value>Modifiche accumulate della manipolazione corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> proprietà contiene i numero totale di modifiche che si sono verificati per la modifica corrente. È possibile utilizzare <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> per trasformare l'oggetto modificato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeltaManipulation">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationDelta DeltaManipulation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ManipulationDelta DeltaManipulation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeltaManipulation As ManipulationDelta" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationDelta ^ DeltaManipulation { System::Windows::Input::ManipulationDelta ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationDelta</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene le modifiche più recenti della manipolazione corrente.</summary>
        <value>Modifiche più recenti della manipolazione corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> proprietà contiene le modifiche apportate dall'ultimo <xref:System.Windows.UIElement.ManipulationDelta> evento si è verificato. È possibile utilizzare questa proprietà per trasformare l'oggetto modificato.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Windows.UIElement.ManipulationDelta> evento. Nell'esempio viene utilizzato il <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> proprietà da spostare, ridimensionare e ruotare un <xref:System.Windows.Shapes.Rectangle>. Questo esempio fa parte di un esempio più esaustivo in [procedura dettagliata: creazione del primo Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="genericTarget">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInertial">
      <MemberSignature Language="C#" Value="public bool IsInertial { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInertial" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInertial As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInertial { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se l'evento <see cref="E:System.Windows.UIElement.ManipulationDelta" /> si verifica durante l'inerzia.</summary>
        <value>
          <see langword="true" /> se l'evento <see cref="E:System.Windows.UIElement.ManipulationDelta" /> si verifica durante l'inerzia; <see langword="false" /> se l'evento si verifica mentre l'utente è a contatto con l'oggetto <see cref="T:System.Windows.UIElement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare questo metodo per determinare se il <xref:System.Windows.UIElement.ManipulationDelta> evento si verifica durante l'inerzia o mentre l'utente dispone di un contatto con l'elemento che riceve il <xref:System.Windows.UIElement.ManipulationDelta> evento.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Windows.UIElement.ManipulationDelta> evento. Nell'esempio viene controllato se il <xref:System.Windows.UIElement.ManipulationDelta> evento si è verificato durante l'inerzia e se il rettangolo tocca il bordo di una finestra. Se questi casi, l'applicazione si interrompe la modifica per evitare che il rettangolo di lasciare l'area visibile dell'applicazione. Questo esempio fa parte di un esempio più esaustivo in [procedura dettagliata: creazione del primo Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationContainer">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement ManipulationContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement ManipulationContainer" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ManipulationContainer As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ ManipulationContainer { System::Windows::IInputElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il contenitore che definisce le coordinate per la manipolazione.</summary>
        <value>Contenitore che definisce le coordinate per la manipolazione.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point ManipulationOrigin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point ManipulationOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ManipulationOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point ManipulationOrigin { System::Windows::Point get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il punto da cui ha origine la manipolazione.</summary>
        <value>Punto da cui ha origine la manipolazione.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Manipulators">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt; Manipulators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.IManipulator&gt; Manipulators" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.Manipulators" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Manipulators As IEnumerable(Of IManipulator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ Manipulators { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un insieme di oggetti che rappresenta i contatti tocco per la modifica.</summary>
        <value>Insieme di oggetti che rappresenta i contatti tocco per la modifica.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportBoundaryFeedback">
      <MemberSignature Language="C#" Value="public void ReportBoundaryFeedback (System.Windows.Input.ManipulationDelta unusedManipulation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportBoundaryFeedback(class System.Windows.Input.ManipulationDelta unusedManipulation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReportBoundaryFeedback (unusedManipulation As ManipulationDelta)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReportBoundaryFeedback(System::Windows::Input::ManipulationDelta ^ unusedManipulation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unusedManipulation" Type="System.Windows.Input.ManipulationDelta" />
      </Parameters>
      <Docs>
        <param name="unusedManipulation">La parte della modifica che rappresenta lo spostamento oltre il limite.</param>
        <summary>Specifica che la modifica è andata oltre limiti determinati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A> metodo per indicare che un elemento è stato spostato oltre un determinato limite.  Ad esempio, se si sposta un elemento all'esterno dei limiti di un <xref:System.Windows.Window>, è possibile chiamare questo metodo per segnalare che la finestra di.  Quando si chiama <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> si verifica l'evento.  Per impostazione predefinita, il <xref:System.Windows.Window> sottoscrive il <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> evento per fornire indicazioni visive per l'utente che è stato raggiunto un limite.  È possibile sottoscrivere <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> per implementare il comportamento personalizzato.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Windows.UIElement.ManipulationDelta> evento che chiama il <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A> metodo quando l'utente sposta l'elemento sul bordo del relativo contenitore.  Per testare questo esempio, seguire i passaggi descritti in [procedura dettagliata: creazione del primo Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md) e sostituire il codice nel passaggio 5 con questo codice.  
  
 [!code-csharp[BasicManipulation#ReportBoundaryFeedback](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/reportboundaryfeedbackexample.xaml.cs#reportboundaryfeedback)]
 [!code-vb[BasicManipulation#ReportBoundaryFeedback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/reportboundaryfeedbackexample.xaml.vb#reportboundaryfeedback)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unusedManipulation" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartInertia">
      <MemberSignature Language="C#" Value="public void StartInertia ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartInertia() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartInertia ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartInertia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Avvia l'inerzia sulla manipolazione ignorando i movimenti di contatto successivi e generando l'evento <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Velocities">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationVelocities Velocities { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ManipulationVelocities Velocities" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.Velocities" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Velocities As ManipulationVelocities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationVelocities ^ Velocities { System::Windows::Input::ManipulationVelocities ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationVelocities</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la frequenza delle modifiche più recenti alla manipolazione.</summary>
        <value>Frequenza delle modifiche più recenti alla manipolazione.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>