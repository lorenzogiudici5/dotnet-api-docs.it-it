<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TaskFactory.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58296a8b30e22be1b2ee5b32b830a9891457a2f44.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8296a8b30e22be1b2ee5b32b830a9891457a2f44</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Provides support for creating and scheduling <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> objects.</source>
          <target state="translated">Fornisce supporto per la creazione e la pianificazione di oggetti <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>The .NET Framework provides two factories for creating and scheduling tasks:</source>
          <target state="translated">.NET Framework fornisce due factory per la creazione e la pianificazione di attività:</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> class, which creates <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> (classe), che consente di creare <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> e <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> oggetti.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>You can call the overloads of this method to create and execute a task that requires non-default arguments.</source>
          <target state="translated">È possibile chiamare l'overload di questo metodo per creare ed eseguire un'attività che richiede argomenti non predefiniti.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> method provides the easiest way to create a task with default configuration values and start it immediately.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> metodo fornisce il modo più semplice per creare un'attività con l'impostazione predefinita, i valori di configurazione e avviarla immediatamente.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class, which creates <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> (classe), che consente di creare <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> oggetti.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> class allows you to do the following:</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> classe consente di eseguire le operazioni seguenti:</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Create a task and start it immediately by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> method.</source>
          <target state="translated">Creare un'attività e vengono avviati immediatamente chiamando il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> method provides the easiest way to create a task with default configuration values and start it immediately.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> metodo fornisce il modo più semplice per creare un'attività con l'impostazione predefinita, i valori di configurazione e avviarla immediatamente.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Create a task that starts when any one of the tasks in an array has completed by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A&gt;</ph> method.</source>
          <target state="translated">Creare un'attività che viene avviata quando una qualsiasi delle attività in una matrice è stata completata chiamando il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Create a task that starts when all the tasks in an array have completed by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> method.</source>
          <target state="translated">Creare un'attività che viene avviata quando completamento di tutte le attività in una matrice chiamando il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>The static <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType&gt;</ph> property returns a default <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> object.</source>
          <target state="translated">Il metodo statico <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType&gt;</ph> proprietà restituisce un valore predefinito <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>You can also call one of the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> class constructors to configure the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objects that  the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> class creates.</source>
          <target state="translated">È inoltre possibile chiamare uno del <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> classe costruttori per configurare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> gli oggetti che il <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> Crea classe.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>The following example configures a new <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.</source>
          <target state="translated">Nell'esempio seguente consente di configurare un nuovo <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> oggetto per creare le attività che dispongono di un token di annullamento specificato, le opzioni di creazione di attività, opzioni di continuazione e un'utilità di pianificazione personalizzata.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>In most cases, you do not have to instantiate a new <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> instance.</source>
          <target state="translated">Nella maggior parte dei casi, non è necessario creare un'istanza di un nuovo <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> istanza.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Instead, you can use the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType&gt;</ph> property, which returns a factory object that uses default values.</source>
          <target state="translated">In alternativa, è possibile utilizzare il <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType&gt;</ph> proprietà, che restituisce un oggetto factory che utilizza valori predefiniti.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>You can then call its methods to start new tasks or define task continuations.</source>
          <target state="translated">È quindi possibile chiamare i metodi per avviare nuove attività o definire le continuazioni di attività.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>For an illustration, see the example.</source>
          <target state="translated">Per un'illustrazione, vedere l'esempio.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>The following example uses the static <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Factory%2A&gt;</ph> property to make two calls to the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">L'esempio seguente usa il metodo statico <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Factory%2A&gt;</ph> due chiamate a proprietà di <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory.</source>
          <target state="translated">Il primo popola una matrice con i nomi dei file nella directory di documenti dell'utente, mentre il secondo popola una matrice con i nomi delle sottodirectory della directory documenti dell'utente.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType&gt;</ph> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.</source>
          <target state="translated">Chiama quindi il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType&gt;</ph> metodo, che visualizza informazioni sul numero di file e directory in due matrici dopo le prime due attività ha completato l'esecuzione.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads.</source>
          <target state="translated">Tutti i membri pubblici e protetti di <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> sono thread-safe e possono essere utilizzate contemporaneamente da più thread.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> instance with the default configuration.</source>
          <target state="translated">Inizializza un'istanza di <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> con la configurazione predefinita.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.#ctor">
          <source>This constructor creates a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> instance with a default configuration.</source>
          <target state="translated">Questo costruttore crea un <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> istanza con una configurazione predefinita.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, and the <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to the current scheduler (see <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> proprietà viene inizializzata su <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> proprietà viene inizializzata su <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>e <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> proprietà viene inizializzata all'utilità di pianificazione corrente (vedere <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that will be assigned to tasks created by this <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> unless another CancellationToken is explicitly specified while calling the factory methods.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> che verrà assegnato alle attività create da questo oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> a meno che durante la chiamata dei metodi factory non venga specificato in modo esplicito un altro oggetto CancellationToken.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> instance with the specified configuration.</source>
          <target state="translated">Inizializza un'istanza di <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> con la configurazione specificata.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)">
          <source>This constructor creates a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> instance with a default configuration.</source>
          <target state="translated">Questo costruttore crea un <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> istanza con una configurazione predefinita.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, and the <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to the current scheduler (see <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> proprietà viene inizializzata su <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> proprietà viene inizializzata su <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>e <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> proprietà viene inizializzata all'utilità di pianificazione corrente (vedere <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to use to schedule any tasks created with this TaskFactory.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> da usare per pianificare le attività create con questo oggetto TaskFactory.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)">
          <source>A null value indicates that the current TaskScheduler should be used.</source>
          <target state="translated">Un valore Null indica che occorre usare l'oggetto TaskScheduler corrente.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> instance with the specified configuration.</source>
          <target state="translated">Inizializza un'istanza di <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> con la configurazione specificata.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)">
          <source>With this constructor, the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, and the <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to <ph id="ph6">`scheduler`</ph>, unless it's null, in which case the property is initialized to the current scheduler (see <ph id="ph7">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</source>
          <target state="translated">Con questo costruttore, il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> proprietà viene inizializzata su <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> proprietà viene inizializzata su <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>e <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> proprietà viene inizializzata su <ph id="ph6">`scheduler`</ph>, a meno che non è null, nel qual caso il proprietà viene inizializzata all'utilità di pianificazione corrente (vedere <ph id="ph7">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The default <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> to use when creating tasks with this TaskFactory.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> predefinito da usare quando si creano attività con questo oggetto TaskFactory.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The default <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> to use when creating continuation tasks with this TaskFactory.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> predefinito da usare quando si creano attività di continuazione con questo oggetto TaskFactory.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> instance with the specified configuration.</source>
          <target state="translated">Inizializza un'istanza di <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> con la configurazione specificata.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>With this constructor, the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id="ph2">`creationOptions`</ph>, the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id="ph4">`continuationOptions`</ph>, and the <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to the current scheduler (see <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</source>
          <target state="translated">Con questo costruttore, il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> proprietà viene inizializzata su <ph id="ph2">`creationOptions`</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> proprietà viene inizializzata su <ph id="ph4">`continuationOptions`</ph>e <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> proprietà viene inizializzata all'utilità di pianificazione corrente (vedere <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> value.</source>
          <target state="translated">L'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> non valido.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</source>
          <target state="translated">Per altre informazioni, vedere le note su <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          <target state="translated">L'argomento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> specifica un valore non valido.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The default <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that will be assigned to tasks created by this <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> unless another CancellationToken is explicitly specified while calling the factory methods.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> predefinito che verrà assegnato alle attività create da questo oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> a meno che durante la chiamata dei metodi factory non venga specificato in modo esplicito un altro oggetto CancellationToken.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The default <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> to use when creating tasks with this TaskFactory.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> predefinito da usare quando si creano attività con questo oggetto TaskFactory.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The default <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> to use when creating continuation tasks with this TaskFactory.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> predefinito da usare quando si creano attività di continuazione con questo oggetto TaskFactory.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The default <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to use to schedule any Tasks created with this TaskFactory.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> predefinito da usare per pianificare le attività create con questo oggetto TaskFactory.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A null value indicates that TaskScheduler.Current should be used.</source>
          <target state="translated">Un valore Null indica che occorre usare TaskScheduler.Current.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> instance with the specified configuration.</source>
          <target state="translated">Inizializza un'istanza di <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> con la configurazione specificata.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>With this constructor, the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id="ph2">`creationOptions`</ph>, the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id="ph4">`continuationOptions`</ph>, and the <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to <ph id="ph6">`scheduler`</ph>, unless it's null, in which case the property is initialized to the current scheduler (see <ph id="ph7">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</source>
          <target state="translated">Con questo costruttore, il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> proprietà viene inizializzata su <ph id="ph2">`creationOptions`</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> proprietà viene inizializzata su <ph id="ph4">`continuationOptions`</ph>e <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> proprietà viene inizializzata su <ph id="ph6">`scheduler`</ph>, a meno che non è null, nel qual caso il proprietà viene inizializzata all'utilità di pianificazione corrente (vedere <ph id="ph7">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> value.</source>
          <target state="translated">L'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> non valido.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</source>
          <target state="translated">Per altre informazioni, vedere le note su <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          <target state="translated">L'argomento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> specifica un valore non valido.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.TaskFactory.CancellationToken">
          <source>Gets the default cancellation token for this task factory.</source>
          <target state="translated">Ottiene il token di annullamento predefinito per questa factory delle attività.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory.CancellationToken">
          <source>The default task cancellation token for this task factory.</source>
          <target state="translated">Token di annullamento attività predefinito per questa factory delle attività.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory.CancellationToken">
          <source>This property returns the default <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> that will be assigned to all tasks created by this factory, unless another <ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph> value is explicitly specified during the call to the factory methods.</source>
          <target state="translated">Questa proprietà restituisce il valore predefinito <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> che verrà assegnato a tutte le attività create da questa factory, a meno che un altro <ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph> durante la chiamata ai metodi factory in modo esplicito viene specificato alcun valore.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.TaskFactory.ContinuationOptions">
          <source>Gets the default task continuation options for this task factory.</source>
          <target state="translated">Ottiene le opzioni di continuazione attività predefinite per questa factory delle attività.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory.ContinuationOptions">
          <source>The default task continuation options for this task factory.</source>
          <target state="translated">Opzioni di continuazione attività predefinite per questa factory delle attività.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory.ContinuationOptions">
          <source>The property value is used to create all continuation tasks, unless other options are explicitly specified during calls to this factory's methods.</source>
          <target state="translated">Il valore della proprietà è possibile creare tutte le attività di continuazione, a meno che altre opzioni vengono specificate in modo esplicito durante le chiamate ai metodi di questa factory.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>The action delegate to execute when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato dell'azione da eseguire quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> method executes the <ph id="ph2">`continuationAction`</ph> delegate when all tasks in the <ph id="ph3">`tasks`</ph> array have completed, regardless of their completion status.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> il metodo viene eseguito il <ph id="ph2">`continuationAction`</ph> delegato quando tutte le attività di <ph id="ph3">`tasks`</ph> matrice completate, indipendentemente dal relativo stato di completamento.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>Exceptions thrown by tasks in the <ph id="ph1">`tasks`</ph> array are not available to the continuation task through structured exception handling.</source>
          <target state="translated">Le eccezioni generate dalle attività di <ph id="ph1">`tasks`</ph> matrice non sono disponibili per l'attività di continuazione mediante la gestione delle eccezioni strutturata.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>You can determine which exceptions were thrown by examining the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph> property of each task in the <ph id="ph2">`tasks`</ph> array.</source>
          <target state="translated">È possibile determinare quali eccezioni generate esaminando il <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph> proprietà di ogni attività nel <ph id="ph2">`tasks`</ph> matrice.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>To use structured exception handling to handle exceptions thrown by tasks in the <ph id="ph1">`tasks`</ph> array, call the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per utilizzare strutturata delle eccezioni per gestire le eccezioni generate dalle attività nel <ph id="ph1">`tasks`</ph> matrice, chiamare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType&gt;</ph> (metodo).</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>The following example launches separate tasks that use a regular expression to count the number of words in a set of text files.</source>
          <target state="translated">Nell'esempio seguente avvia attività separate che utilizzano un'espressione regolare per contare il numero di parole in un set di file di testo.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> method is used to launch a task that displays the total word count when all the antecedent tasks have completed.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> metodo viene utilizzato per avviare un'attività che visualizza il conteggio totale delle parole termine di tutte le attività precedenti.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>The call to the continuation task's <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType&gt;</ph> method does not allow it to handle exceptions thrown by the antecedent tasks, so the example examines the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType&gt;</ph> property of each antecedent task to determine whether the task succeeded.</source>
          <target state="translated">La chiamata per l'attività di continuazione <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType&gt;</ph> metodo consente di gestire le eccezioni generate dalle attività precedenti, pertanto l'esempio esamina la <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType&gt;</ph> proprietà di ogni attività precedente per determinare se l'attività ha avuto esito positivo.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>An element in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Un elemento nella matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>The action delegate to execute when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato dell'azione da eseguire quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>The cancellation token to assign to the new continuation task.</source>
          <target state="translated">Token di annullamento da assegnare alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>The [<ph id="ph1">\]</ph>, Action(Task<ph id="ph2">\&lt;</ph>xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%2CSystem.Threading.CancellationToken%29&gt; method executes the <ph id="ph3">`continuationAction`</ph> delegate when all tasks in the <ph id="ph4">`tasks`</ph> array have completed, regardless of their completion status.</source>
          <target state="translated">The [<ph id="ph1">\]</ph>, Action(Task<ph id="ph2">\&lt;</ph>xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%2CSystem.Threading.CancellationToken%29&gt; method executes the <ph id="ph3">`continuationAction`</ph> delegate when all tasks in the <ph id="ph4">`tasks`</ph> array have completed, regardless of their completion status.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>The following example creates a cancellation token, which it passes to separate tasks that use a regular expression to count the number of words in a set of text files.</source>
          <target state="translated">L'esempio seguente crea un token di annullamento, che viene passato per separare le attività che utilizzano un'espressione regolare per contare il numero di parole in un set di file di testo.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>The cancellation token is set if a file cannot be found.</source>
          <target state="translated">Il token di annullamento viene impostato se non viene trovato un file.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>The [<ph id="ph1">\]</ph>, Action(Task<ph id="ph2">\&lt;</ph>xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt; method is used to launch a task that displays the total word count when all the antecedent tasks have completed.</source>
          <target state="translated">Il [<ph id="ph1">\]</ph>, azione (attività<ph id="ph2">\&lt;</ph>xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A &gt; metodo viene utilizzato per avviare un'attività che visualizza il conteggio totale delle parole termine di tutte le attività precedenti.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>If the cancellation token is set, which indicates that one or more tasks have been cancelled, it handles the <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> exception and displays an error message.</source>
          <target state="translated">Se il token di annullamento è impostato, che indica che una o più attività sono state annullate, che gestisce il <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> eccezione e viene visualizzato un messaggio di errore.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>An element in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Un elemento nella matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> che ha creato <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> è già stato eliminato.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The action delegate to execute when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato dell'azione da eseguire quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>A bitwise combination of the enumeration values that control the behavior of the new continuation task.</source>
          <target state="translated">Combinazione bit per bit dei valori di enumerazione che controllano il comportamento della nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The NotOn* and OnlyOn* members are not supported.</source>
          <target state="translated">I membri NotOn* e OnlyOn* non sono supportati.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>An element in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Un elemento nella matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          <target state="translated">L'argomento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> specifica un valore non valido.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The action delegate to execute when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato dell'azione da eseguire quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token to assign to the new continuation task.</source>
          <target state="translated">Token di annullamento da assegnare alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A bitwise combination of the enumeration values that control the behavior of the new continuation task.</source>
          <target state="translated">Combinazione bit per bit dei valori di enumerazione che controllano il comportamento della nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The object that is used to schedule the new continuation task.</source>
          <target state="translated">Oggetto usato per pianificare la nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
          <source>The action delegate to execute when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato dell'azione da eseguire quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
          <source>An element in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Un elemento nella matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
          <source>The action delegate to execute when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato dell'azione da eseguire quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
          <source>The cancellation token to assign to the new continuation task.</source>
          <target state="translated">Token di annullamento da assegnare alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
          <source>An element in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Un elemento nella matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> che ha creato <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> è già stato eliminato.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The action delegate to execute when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato dell'azione da eseguire quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>A bitwise combination of the enumeration values that control the behavior of the new continuation task.</source>
          <target state="translated">Combinazione bit per bit dei valori di enumerazione che controllano il comportamento della nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The NotOn* and OnlyOn* members are not supported.</source>
          <target state="translated">I membri NotOn* e OnlyOn* non sono supportati.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>An element in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Un elemento nella matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          <target state="translated">L'argomento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> specifica un valore non valido.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The action delegate to execute when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato dell'azione da eseguire quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token to assign to the new continuation task.</source>
          <target state="translated">Token di annullamento da assegnare alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A bitwise combination of the enumeration values that control the behavior of the new continuation task.</source>
          <target state="translated">Combinazione bit per bit dei valori di enumerazione che controllano il comportamento della nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The NotOn* and OnlyOn* members are not supported.</source>
          <target state="translated">I membri NotOn* e OnlyOn* non sono supportati.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The object that is used to schedule the new continuation task.</source>
          <target state="translated">Oggetto usato per pianificare la nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created task.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associato all'attività creata.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
          <source>An element in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Un elemento nella matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created task.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associato all'attività creata.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
          <source>The cancellation token to assign to the new continuation task.</source>
          <target state="translated">Token di annullamento da assegnare alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
          <source>An element in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Un elemento nella matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> che ha creato <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> è già stato eliminato.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created task.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associato all'attività creata.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>A bitwise combination of the enumeration values that control the behavior of the new continuation task.</source>
          <target state="translated">Combinazione bit per bit dei valori di enumerazione che controllano il comportamento della nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The NotOn* and OnlyOn* members are not supported.</source>
          <target state="translated">I membri NotOn* e OnlyOn* non sono supportati.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>An element in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Un elemento nella matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          <target state="translated">L'argomento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> specifica un valore non valido.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created task.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associato all'attività creata.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token to assign to the new continuation task.</source>
          <target state="translated">Token di annullamento da assegnare alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A bitwise combination of the enumeration values that control the behavior of the new continuation task.</source>
          <target state="translated">Combinazione bit per bit dei valori di enumerazione che controllano il comportamento della nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The NotOn* and OnlyOn* members are not supported.</source>
          <target state="translated">I membri NotOn* e OnlyOn* non sono supportati.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The object that is used to schedule the new continuation task.</source>
          <target state="translated">Oggetto usato per pianificare la nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created task.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associato all'attività creata.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
          <source>An element in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Un elemento nella matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created task.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associato all'attività creata.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
          <source>The cancellation token to assign to the new continuation task.</source>
          <target state="translated">Token di annullamento da assegnare alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
          <source>An element in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Un elemento nella matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> che ha creato <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> è già stato eliminato.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created task.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associato all'attività creata.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>A bitwise combination of the enumeration values that control the behavior of the new continuation task.</source>
          <target state="translated">Combinazione bit per bit dei valori di enumerazione che controllano il comportamento della nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The NotOn* and OnlyOn* members are not supported.</source>
          <target state="translated">I membri NotOn* e OnlyOn* non sono supportati.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>An element in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Un elemento nella matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          <target state="translated">L'argomento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> specifica un valore non valido.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created task.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associato all'attività creata.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue.</source>
          <target state="translated">Matrice di attività da cui continuare.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando tutte le attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> sono state completate.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token to assign to the new continuation task.</source>
          <target state="translated">Token di annullamento da assegnare alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A bitwise combination of the enumeration values that control the behavior of the new continuation task.</source>
          <target state="translated">Combinazione bit per bit dei valori di enumerazione che controllano il comportamento della nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The NotOn* and OnlyOn* members are not supported.</source>
          <target state="translated">I membri NotOn* e OnlyOn* non sono supportati.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The object that is used to schedule the new continuation task.</source>
          <target state="translated">Oggetto usato per pianificare la nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation task that starts when a set of specified tasks has completed.</source>
          <target state="translated">Crea un'attività di continuazione che viene avviata quando un set di attività specificate è stato completato.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation task.</source>
          <target state="translated">Nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty or contains a null value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota o contiene un valore null.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          <target state="translated">L'argomento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> specifica un valore non valido.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>An element in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Un elemento nella matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> che ha creato <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> è già stato eliminato.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
          <source>The action delegate to execute when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato dell'azione da eseguire al completamento di una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
          <source>The following example shows how to use <ph id="ph1">`ContinueWhenAny`</ph> and <ph id="ph2">`ContinueWhenAll`</ph>:</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare <ph id="ph1">`ContinueWhenAny`</ph> e <ph id="ph2">`ContinueWhenAll`</ph>:</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Uno degli elementi nella matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a <ph id="ph2">&lt;see langword="null" /&gt;</ph> value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore di <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The action delegate to execute when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato dell'azione da eseguire al completamento di una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> che verrà assegnato alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Uno degli elementi nella matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> è già stato eliminato.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a <ph id="ph2">&lt;see langword="null" /&gt;</ph> value.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore di <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty .</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The action delegate to execute when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato dell'azione da eseguire al completamento di una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> value that controls the behavior of the created continuation <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Valore di <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> che controlla il comportamento dell'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione creato.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The NotOn* and OnlyOn* <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, which constrain for which <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> states a continuation will be executed, are illegal with ContinueWhenAny.</source>
          <target state="translated">NotOn * e OnlyOn * <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, che vincolano per cui <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> stati verrà eseguita una continuazione, non sono consentiti con ContinueWhenAny.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when one of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Eccezione generata quando uno degli elementi della matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid TaskContinuationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> specifica un valore TaskContinuationOptions non valido.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore Null.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The action delegate to execute when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato dell'azione da eseguire al completamento di una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> che verrà assegnato alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> value that controls the behavior of the created continuation <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Valore di <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> che controlla il comportamento dell'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione creato.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that is used to schedule the created continuation <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> usato per pianificare l'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione creato.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore Null.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
          <source>The action delegate to execute when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato dell'azione da eseguire al completamento di una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
          <source>The exception that is thrown when one of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Eccezione generata quando uno degli elementi della matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore Null.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The action delegate to execute when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato dell'azione da eseguire al completamento di una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> che verrà assegnato alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The exception that is thrown when one of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Eccezione generata quando uno degli elementi della matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'istanza <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornita è già stata eliminata.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore Null.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The action delegate to execute when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato dell'azione da eseguire al completamento di una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> value that controls the behavior of the created continuation <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Valore di <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> che controlla il comportamento dell'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione creato.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The NotOn* and OnlyOn* <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, which constrain for which <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> states a continuation will be executed, are illegal with ContinueWhenAny.</source>
          <target state="translated">NotOn * e OnlyOn * <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, che vincolano per cui <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> stati verrà eseguita una continuazione, non sono consentiti con ContinueWhenAny.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when one of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Eccezione generata quando uno degli elementi della matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid TaskContinuationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> specifica un valore TaskContinuationOptions non valido.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore Null.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The action delegate to execute when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato dell'azione da eseguire al completamento di una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> che verrà assegnato alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> value that controls the behavior of the created continuation <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Valore di <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> che controlla il comportamento dell'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione creato.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that is used to schedule the created continuation <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> usato per pianificare l'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione creato.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The NotOn* and OnlyOn* <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, which constrain for which <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> states a continuation will be executed, are illegal with ContinueWhenAny.</source>
          <target state="translated">NotOn * e OnlyOn * <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, che vincolano per cui <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> stati verrà eseguita una continuazione, non sono consentiti con ContinueWhenAny.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore Null.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associati all'oggetto creato <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> viene completata.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
          <source>The exception that is thrown when one of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Eccezione generata quando uno degli elementi della matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore Null.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associati all'oggetto creato <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> viene completata.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> che verrà assegnato alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The exception that is thrown when one of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Eccezione generata quando uno degli elementi della matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'istanza <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornita è già stata eliminata.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore Null.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associati all'oggetto creato <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> viene completata.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> value that controls the behavior of the created continuation <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Valore di <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> che controlla il comportamento dell'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione creato.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The NotOn* and OnlyOn* <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, which constrain for which <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> states a continuation will be executed, are illegal with ContinueWhenAny.</source>
          <target state="translated">NotOn * e OnlyOn * <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, che vincolano per cui <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> stati verrà eseguita una continuazione, non sono consentiti con ContinueWhenAny.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when one of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Eccezione generata quando uno degli elementi della matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid TaskContinuationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> specifica un valore TaskContinuationOptions non valido.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore Null.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associati all'oggetto creato <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> viene completata.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> che verrà assegnato alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> value that controls the behavior of the created continuation <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Valore di <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> che controlla il comportamento dell'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione creato.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that is used to schedule the created continuation <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> usato per pianificare l'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione creato.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The NotOn* and OnlyOn* <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, which constrain for which <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> states a continuation will be executed, are illegal with ContinueWhenAny.</source>
          <target state="translated">NotOn * e OnlyOn * <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, che vincolano per cui <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> stati verrà eseguita una continuazione, non sono consentiti con ContinueWhenAny.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore Null.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associati all'oggetto creato <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> viene completata.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
          <source>The exception that is thrown when one of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Eccezione generata quando uno degli elementi della matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore Null.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associati all'oggetto creato <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> viene completata.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> che verrà assegnato alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>The exception that is thrown when one of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Eccezione generata quando uno degli elementi della matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'istanza <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornita è già stata eliminata.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore Null.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associati all'oggetto creato <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> viene completata.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> value that controls the behavior of the created continuation <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Valore di <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> che controlla il comportamento dell'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione creato.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The NotOn* and OnlyOn* <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, which constrain for which <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> states a continuation will be executed, are illegal with ContinueWhenAny.</source>
          <target state="translated">NotOn * e OnlyOn * <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, che vincolano per cui <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> stati verrà eseguita una continuazione, non sono consentiti con ContinueWhenAny.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when one of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          <target state="translated">Eccezione generata quando uno degli elementi della matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è stato eliminato.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid TaskContinuationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> specifica un valore TaskContinuationOptions non valido.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore Null.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del risultato dell'attività precedente <bpt id="p1">&lt;c&gt;</bpt>attività<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result that is returned by the <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegate and associated with the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Il tipo del risultato restituito dal <bpt id="p1">&lt;c&gt;</bpt>continuationFunction<ept id="p1">&lt;/c&gt;</ept> delegare e associati all'oggetto creato <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue when one task completes.</source>
          <target state="translated">Matrice di attività da cui continuare al completamento di un'attività.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          <target state="translated">Delegato della funzione da eseguire in modo asincrono quando una delle attività nella matrice <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> viene completata.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> che verrà assegnato alla nuova attività di continuazione.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> value that controls the behavior of the created continuation <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Valore di <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> che controlla il comportamento dell'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione creato.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that is used to schedule the created continuation <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> usato per pianificare l'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione creato.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that will be started upon the completion of any Task in the provided set.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione che verrà avviato al completamento di una delle attività nel set fornito.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> di continuazione.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The NotOn* and OnlyOn* <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, which constrain for which <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> states a continuation will be executed, are illegal with ContinueWhenAny.</source>
          <target state="translated">NotOn * e OnlyOn * <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, che vincolano per cui <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> stati verrà eseguita una continuazione, non sono consentiti con ContinueWhenAny.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> contiene un valore Null.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          <target state="translated">Eccezione generata quando la matrice <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> è vuota.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.TaskFactory.CreationOptions">
          <source>Gets the default task creation options for this task factory.</source>
          <target state="translated">Ottiene le opzioni di creazione attività predefinite per questa factory delle attività.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory.CreationOptions">
          <source>The default task creation options for this task factory.</source>
          <target state="translated">Opzioni di creazione attività predefinite per questa factory delle attività.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory.CreationOptions">
          <source>The property value is used to create all tasks, unless other options are explicitly specified during calls to this factory's methods.</source>
          <target state="translated">Il valore della proprietà è possibile creare tutte le attività, a meno che altre opzioni vengono specificate in modo esplicito durante le chiamate ai metodi di questa factory.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
          <source>The IAsyncResult whose completion should trigger the processing of the <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">IAsyncResult il cui completamento deve attivare l'elaborazione di <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
          <source>The action delegate that processes the completed <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Delegato dell'azione che elabora l'oggetto <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept> completato.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that executes an end method action when a specified <ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> completes.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> che esegue un'azione del metodo End al completamento di un oggetto <ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overloads that take an <ph id="ph2">`asyncResult`</ph> parameter are not as efficient as the overloads that take a <ph id="ph3">`beginMethod`</ph> parameter.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overload che accettano un <ph id="ph2">`asyncResult`</ph> parametro non sono più efficienti gli overload che accettano un <ph id="ph3">`beginMethod`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
          <source>If performance is an issue, use the overloads that provide the <ph id="ph1">`beginMethod`</ph><ph id="ph2">/</ph><ph id="ph3">`endMethod`</ph> pattern.</source>
          <target state="translated">Se le prestazioni costituiscono un problema, utilizzare l'overload che forniscono il <ph id="ph1">`beginMethod`</ph> <ph id="ph2">/</ph> <ph id="ph3">`endMethod`</ph> modello.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
          <source>The <ph id="ph1">`beginMethod`</ph> delegate is started on the thread that <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.</source>
          <target state="translated">Il <ph id="ph1">`beginMethod`</ph> avvio delegato sul thread che <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> è in esecuzione in.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
          <source>The IAsyncResult whose completion should trigger the processing of the <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">IAsyncResult il cui completamento deve attivare l'elaborazione di <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
          <source>The action delegate that processes the completed <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Delegato dell'azione che elabora l'oggetto <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept> completato.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
          <source>The TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that executes an end method action when a specified <ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> completes.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> che esegue un'azione del metodo End al completamento di un oggetto <ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overloads that take an <ph id="ph2">`asyncResult`</ph> parameter are not as efficient as the overloads that take a <ph id="ph3">`beginMethod`</ph> parameter.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overload che accettano un <ph id="ph2">`asyncResult`</ph> parametro non sono più efficienti gli overload che accettano un <ph id="ph3">`beginMethod`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
          <source>If performance is an issue, use the overloads that provide the <ph id="ph1">`beginMethod`</ph><ph id="ph2">/</ph><ph id="ph3">`endMethod`</ph> pattern.</source>
          <target state="translated">Se le prestazioni costituiscono un problema, utilizzare l'overload che forniscono il <ph id="ph1">`beginMethod`</ph> <ph id="ph2">/</ph> <ph id="ph3">`endMethod`</ph> modello.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">`beginMethod`</ph> delegate is started on the thread that <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.</source>
          <target state="translated">Il <ph id="ph1">`beginMethod`</ph> avvio delegato sul thread che <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> è in esecuzione in.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> values <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskCreationOptions.LongRunning&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent&gt;</ph> are all mutually exclusive.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> valori <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskCreationOptions.LongRunning&gt;</ph> e <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent&gt;</ph> sono tutti si escludono a vicenda.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>In the FromAsync methods, either <ph id="ph1">`LongRunning`</ph> or <ph id="ph2">`AttachedToParent`</ph> by themselves will cause an <ph id="ph3">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> to be thrown.</source>
          <target state="translated">I metodi FromAsync, sia <ph id="ph1">`LongRunning`</ph> o <ph id="ph2">`AttachedToParent`</ph> autonomamente causerà un <ph id="ph3">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> generata.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The IAsyncResult whose completion should trigger the processing of the <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">IAsyncResult il cui completamento deve attivare l'elaborazione di <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The action delegate that processes the completed <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Delegato dell'azione che elabora l'oggetto <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept> completato.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that is used to schedule the task that executes the end method.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> usato per pianificare l'attività che esegue il metodo End.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that executes an end method action when a specified <ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> completes.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> che esegue un'azione del metodo End al completamento di un oggetto <ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overloads that take an <ph id="ph2">`asyncResult`</ph> parameter are not as efficient as the overloads that take a <ph id="ph3">`beginMethod`</ph> parameter.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overload che accettano un <ph id="ph2">`asyncResult`</ph> parametro non sono più efficienti gli overload che accettano un <ph id="ph3">`beginMethod`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>If performance is an issue, use the overloads that provide the <ph id="ph1">`beginMethod`</ph><ph id="ph2">/</ph><ph id="ph3">`endMethod`</ph> pattern.</source>
          <target state="translated">Se le prestazioni costituiscono un problema, utilizzare l'overload che forniscono il <ph id="ph1">`beginMethod`</ph> <ph id="ph2">/</ph> <ph id="ph3">`endMethod`</ph> modello.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del primo argomento passato al <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Primo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
          <source>The <ph id="ph1">`beginMethod`</ph> delegate is started on the thread that <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.</source>
          <target state="translated">Il <ph id="ph1">`beginMethod`</ph> avvio delegato sul thread che <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> è in esecuzione in.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del primo argomento passato al <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Primo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">`beginMethod`</ph> delegate is started on the thread that <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.</source>
          <target state="translated">Il <ph id="ph1">`beginMethod`</ph> avvio delegato sul thread che <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> è in esecuzione in.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
          <source>The IAsyncResult whose completion should trigger the processing of the <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">IAsyncResult il cui completamento deve attivare l'elaborazione di <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
          <source>The function delegate that processes the completed <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Delegato della funzione che elabora l'oggetto <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept> completato.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that executes an end method function when a specified <ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> completes.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> che esegue una funzione del metodo End al completamento di un oggetto <ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overloads that take an <ph id="ph2">`asyncResult`</ph> parameter are not as efficient as the overloads that take a <ph id="ph3">`beginMethod`</ph> parameter.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overload che accettano un <ph id="ph2">`asyncResult`</ph> parametro non sono più efficienti gli overload che accettano un <ph id="ph3">`beginMethod`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
          <source>If performance is an issue, use the overloads that provide the <ph id="ph1">`beginMethod`</ph><ph id="ph2">/</ph><ph id="ph3">`endMethod`</ph> pattern.</source>
          <target state="translated">Se le prestazioni costituiscono un problema, utilizzare l'overload che forniscono il <ph id="ph1">`beginMethod`</ph> <ph id="ph2">/</ph> <ph id="ph3">`endMethod`</ph> modello.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The IAsyncResult whose completion should trigger the processing of the <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">IAsyncResult il cui completamento deve attivare l'elaborazione di <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The function delegate that processes the completed <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Delegato della funzione che elabora l'oggetto <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept> completato.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that executes an end method function when a specified <ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> completes.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> che esegue una funzione del metodo End al completamento di un oggetto <ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overloads that take an <ph id="ph2">`asyncResult`</ph> parameter are not as efficient as the overloads that take a <ph id="ph3">`beginMethod`</ph> parameter.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overload che accettano un <ph id="ph2">`asyncResult`</ph> parametro non sono più efficienti gli overload che accettano un <ph id="ph3">`beginMethod`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>If performance is an issue, use the overloads that provide the <ph id="ph1">`beginMethod`</ph><ph id="ph2">/</ph><ph id="ph3">`endMethod`</ph> pattern.</source>
          <target state="translated">Se le prestazioni costituiscono un problema, utilizzare l'overload che forniscono il <ph id="ph1">`beginMethod`</ph> <ph id="ph2">/</ph> <ph id="ph3">`endMethod`</ph> modello.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The IAsyncResult whose completion should trigger the processing of the <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">IAsyncResult il cui completamento deve attivare l'elaborazione di <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The function delegate that processes the completed <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Delegato della funzione che elabora l'oggetto <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept> completato.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that is used to schedule the task that executes the end method.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> usato per pianificare l'attività che esegue il metodo End.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that executes an end method function when a specified <ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> completes.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> che esegue una funzione del metodo End al completamento di un oggetto <ph id="ph2">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overloads that take an <ph id="ph2">`asyncResult`</ph> parameter are not as efficient as the overloads that take a <ph id="ph3">`beginMethod`</ph> parameter.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overload che accettano un <ph id="ph2">`asyncResult`</ph> parametro non sono più efficienti gli overload che accettano un <ph id="ph3">`beginMethod`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>If performance is an issue, use the overloads that provide the <ph id="ph1">`beginMethod`</ph><ph id="ph2">/</ph><ph id="ph3">`endMethod`</ph> pattern.</source>
          <target state="translated">Se le prestazioni costituiscono un problema, utilizzare l'overload che forniscono il <ph id="ph1">`beginMethod`</ph> <ph id="ph2">/</ph> <ph id="ph3">`endMethod`</ph> modello.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del secondo argomento passato a <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del primo argomento passato al <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Primo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Secondo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
          <source>The <ph id="ph1">`beginMethod`</ph> delegate is started on the thread that <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.</source>
          <target state="translated">Il <ph id="ph1">`beginMethod`</ph> avvio delegato sul thread che <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> è in esecuzione in.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del secondo argomento passato a <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del primo argomento passato al <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Primo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Secondo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">`beginMethod`</ph> delegate is started on the thread that <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.</source>
          <target state="translated">Il <ph id="ph1">`beginMethod`</ph> avvio delegato sul thread che <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> è in esecuzione in.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del primo argomento passato al <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Primo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
          <source>The <ph id="ph1">`beginMethod`</ph> delegate is started on the thread that <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.</source>
          <target state="translated">Il <ph id="ph1">`beginMethod`</ph> avvio delegato sul thread che <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> è in esecuzione in.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del primo argomento passato al <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Primo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">`beginMethod`</ph> delegate is started on the thread that <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.</source>
          <target state="translated">Il <ph id="ph1">`beginMethod`</ph> avvio delegato sul thread che <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> è in esecuzione in.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del secondo argomento passato a <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>The type of the third argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del terzo argomento passato a <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del primo argomento passato al <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Primo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Secondo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>The third argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Terzo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>The <ph id="ph1">`beginMethod`</ph> delegate is started on the thread that <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.</source>
          <target state="translated">Il <ph id="ph1">`beginMethod`</ph> avvio delegato sul thread che <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> è in esecuzione in.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del secondo argomento passato a <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the third argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del terzo argomento passato a <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del primo argomento passato al <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Primo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Secondo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The third argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Terzo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">`beginMethod`</ph> delegate is started on the thread that <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.</source>
          <target state="translated">Il <ph id="ph1">`beginMethod`</ph> avvio delegato sul thread che <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> è in esecuzione in.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del secondo argomento passato a <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del primo argomento passato al <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Primo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Secondo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
          <source>The <ph id="ph1">`beginMethod`</ph> delegate is started on the thread that <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.</source>
          <target state="translated">Il <ph id="ph1">`beginMethod`</ph> avvio delegato sul thread che <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> è in esecuzione in.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del secondo argomento passato a <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del primo argomento passato al <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Primo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Secondo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">`beginMethod`</ph> delegate is started on the thread that <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.</source>
          <target state="translated">Il <ph id="ph1">`beginMethod`</ph> avvio delegato sul thread che <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> è in esecuzione in.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del secondo argomento passato a <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>The type of the third argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del terzo argomento passato a <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del primo argomento passato al <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Primo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Secondo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>The third argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Terzo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>The <ph id="ph1">`beginMethod`</ph> delegate is started on the thread that <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.</source>
          <target state="translated">Il <ph id="ph1">`beginMethod`</ph> avvio delegato sul thread che <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> è in esecuzione in.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del secondo argomento passato a <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the third argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del terzo argomento passato a <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Il tipo del primo argomento passato al <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegato.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          <target state="translated">Delegato che inizia l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          <target state="translated">Delegato che termina l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Primo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Secondo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The third argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Terzo argomento passato al delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> che rappresenta una coppia di metodi Begin ed End conformi al modello di programmazione asincrona.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">`beginMethod`</ph> delegate is started on the thread that <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.</source>
          <target state="translated">Il <ph id="ph1">`beginMethod`</ph> avvio delegato sul thread che <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> è in esecuzione in.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Questo metodo genera qualsiasi eccezione generata dal <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.TaskFactory.Scheduler">
          <source>Gets the default task scheduler for this task factory.</source>
          <target state="translated">Ottiene l'utilità di pianificazione predefinita per questa factory delle attività.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory.Scheduler">
          <source>The default task scheduler for this task factory.</source>
          <target state="translated">Utilità di pianificazione predefinita per questa factory delle attività.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory.Scheduler">
          <source>The property value is used to schedule all tasks, unless another scheduler is explicitly specified during calls to this factory's methods.</source>
          <target state="translated">Il valore della proprietà usato per pianificare tutte le attività, a meno che non è specificato in modo esplicito un'altra utilità di pianificazione durante le chiamate ai metodi di questa factory.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory.Scheduler">
          <source>If this property value is <ph id="ph1">`null`</ph>, the value of the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph> property is used.</source>
          <target state="translated">Se questo valore della proprietà <ph id="ph1">`null`</ph>, il valore di <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph> viene utilizzata la proprietà.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> method is the recommended way to launch a compute-bound task.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> metodo è il modo consigliato per avviare un'attività di calcolo.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Use the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> method only when you require fine-grained control for a long-running, compute-bound task.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> metodo solo quando si richiede un controllo dettagliato per un'attività di lunga durata e di calcolo.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>This includes scenarios in which you want to control the following:</source>
          <target state="translated">Sono inclusi gli scenari in cui si desidera controllare le operazioni seguenti:</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Task creation options.</source>
          <target state="translated">Opzioni di creazione di attività.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Tasks created by the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> method by default are created with the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType&gt;</ph> option.</source>
          <target state="translated">Le operazioni create tramite il <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> metodo per impostazione predefinita vengono creati con il <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType&gt;</ph> opzione.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>To override this behavior, or to provide other <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> options, call a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> overload.</source>
          <target state="translated">Per eseguire l'override di questo comportamento, o per fornire altri <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> opzioni, chiamare un <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> rapporto di overload.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Parameter passing.</source>
          <target state="translated">Passaggio dei parametri.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>The overloads of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> method do not allow you to pass a parameter to the task delegate.</source>
          <target state="translated">Gli overload di <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> metodo consente di passare un parametro al delegato dell'attività.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>Overloads of the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> method do.</source>
          <target state="translated">Esegue l'overload di <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>The task scheduler.</source>
          <target state="translated">Utilità di pianificazione.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>The overloads of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> method use the default task scheduler.</source>
          <target state="translated">Gli overload di <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> metodo utilizzare utilità di pianificazione predefinita.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>To control the task scheduler, call a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> overload with a <ph id="ph2">`scheduler`</ph> parameter.</source>
          <target state="translated">Per controllare l'utilità di pianificazione, chiamare un <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> eseguire l'overload con un <ph id="ph2">`scheduler`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory">
          <source>For more information, see .</source>
          <target state="translated">Per altre informazioni, vedere .</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
          <source>The action delegate to execute asynchronously.</source>
          <target state="translated">Delegato dell'azione da eseguire in modo asincrono.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
          <source>Creates and starts a task.</source>
          <target state="translated">Crea e avvia un'attività.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
          <source>The started task.</source>
          <target state="translated">Attività avviata.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
          <source>Calling <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> is functionally equivalent to creating a task by using one of its constructors, and then calling the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType&gt;</ph> method to schedule the task for execution.</source>
          <target state="translated">La chiamata <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> è funzionalmente equivalente alla creazione di un'attività utilizzando uno dei costruttori e chiamando quindi il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType&gt;</ph> metodo per la pianificazione per l'esecuzione.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType&gt;</ph> method as  a quick way to call <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType&gt;</ph> un modo rapido per chiamare il metodo <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
          <source>Note, however, that there is a difference in behavior between the two methods regarding : <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType&gt;</ph> by default does not allow child tasks started with the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType&gt;</ph> option to attach to the current <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> instance, whereas <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29&gt;</ph> does.</source>
          <target state="translated">Si noti, tuttavia, che esiste una differenza nel comportamento tra i due metodi per quanto riguarda: <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType&gt;</ph> per impostazione predefinita non consente figlio attività avviate con il <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType&gt;</ph> opzione di connessione corrente <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> istanza, mentre <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29&gt;</ph> does.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
          <source>For more information and code examples, see <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29&gt;</ph> method to repeatedly invoke an <ph id="ph2">&lt;xref:System.Action&gt;</ph> delegate that generates a random number, interprets it as a Unicode code point, converts it to a UTF16-encoded code unit, and displays information about the resulting character or characters.</source>
          <target state="translated">L'esempio seguente usa il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29&gt;</ph> metodo da richiamare più volte un <ph id="ph2">&lt;xref:System.Action&gt;</ph> delegato che genera un numero casuale, lo interpreta come un punto di codice Unicode viene convertito in un'unità di codice codificata in formato UTF16 e visualizza le informazioni risultanti carattere o caratteri.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
          <source>The <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is null.</source>
          <target state="translated">L'argomento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
          <source>The action delegate to execute asynchronously.</source>
          <target state="translated">Delegato dell'azione da eseguire in modo asincrono.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that will be assigned to the new task.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> che verrà assegnato alla nuova attività.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> avviato.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a Task using one of its constructors and then calling <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.</source>
          <target state="translated">La chiamata <ph id="ph1">`StartNew`</ph> è funzionalmente equivalente alla creazione di un'attività utilizzando uno dei relativi costruttori e quindi chiamando <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> per pianificarne l'esecuzione.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> method as  a quick way to call <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> un modo rapido per chiamare il metodo <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
          <source>Note, however, that there is a difference in behavior between the two methods regarding : <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> by default does not allow child tasks started with the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType&gt;</ph> option to attach to the current <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> instance, whereas <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29&gt;</ph> does.</source>
          <target state="translated">Si noti, tuttavia, che esiste una differenza nel comportamento tra i due metodi per quanto riguarda: <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> per impostazione predefinita non consente figlio attività avviate con il <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType&gt;</ph> opzione di connessione corrente <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> istanza, mentre <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29&gt;</ph> does.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
          <source>For more information and code examples, see <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29&gt;</ph> method to create a task that iterates the files in the C:\Windows\System32 directory.</source>
          <target state="translated">L'esempio seguente chiama il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29&gt;</ph> metodo per creare un'attività che consente di scorrere i file nella directory C:\Windows\System32.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
          <source>The lambda expression calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> method to add information about each  file to a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object.</source>
          <target state="translated">L'espressione lambda chiama il <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> metodo per aggiungere informazioni su ogni file da un <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
          <source>Each detached nested task invoked by the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> loop checks the state of the cancellation token and, if cancellation is requested, calls the <ph id="ph2">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Ogni scollegato attività annidata richiamato dal <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> ciclo controlla lo stato del token di annullamento e, se la richiesta di annullamento, chiama il <ph id="ph2">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exception that is handled in a <ph id="ph3">`catch`</ph> block when the calling thread calls the <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> metodo genera un <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> eccezione gestita in un <ph id="ph3">`catch`</ph> blocco quando il thread chiamante chiama il <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'istanza <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornita è già stata eliminata.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>The action delegate to execute asynchronously.</source>
          <target state="translated">Delegato dell'azione da eseguire in modo asincrono.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>A TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph></source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> avviato.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.</source>
          <target state="translated">La chiamata di StartNew è funzionalmente equivalente alla creazione di un'attività utilizzando uno dei relativi costruttori e quindi chiamando <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> per pianificarne l'esecuzione.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id="ph3">&lt;xref:System.Action&gt;</ph> object as  a quick way to call <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> metodo con un <ph id="ph3">&lt;xref:System.Action&gt;</ph> oggetto come un modo rapido per chiamare <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information and code examples, see <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
          <source>The action delegate to execute asynchronously.</source>
          <target state="translated">Delegato dell'azione da eseguire in modo asincrono.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>action<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>action<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> avviato.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
          <source>Calling <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> is functionally equivalent to creating a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> using one of its constructors and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">La chiamata <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> è funzionalmente equivalente alla creazione di un <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> utilizzando uno dei suoi costruttori e chiamando quindi il <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> metodo per pianificarne l'esecuzione.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id="ph3">&lt;xref:System.Action&gt;</ph> object as  a quick way to call <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> metodo con un <ph id="ph3">&lt;xref:System.Action&gt;</ph> oggetto come un modo rapido per chiamare <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
          <source>For more information and code examples, see <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
          <source>The following example defines an array of 6-letter words.</source>
          <target state="translated">Nell'esempio seguente definisce una matrice di parole 6 lettera.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
          <source>Each word is then passed to an <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate, which scrambles the word and displays the original word and its scrambled version.</source>
          <target state="translated">Ogni parola viene quindi passato a un <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegato che codificata la parola e viene visualizzata la parola originale e la relativa versione codificata.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
          <source>Note that the example initializes a single random number generator, which is protected by a lock.</source>
          <target state="translated">Si noti che nell'esempio viene inizializzato un singolo generatore di numeri casuali, che è protetta da un blocco.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
          <source>For the need of a lock, see "The System.Random class and thread safety" in the <ph id="ph1">&lt;xref:System.Random&gt;</ph> class topic.</source>
          <target state="translated">Per la necessità di un blocco, vedere "La sicurezza Random classe e il thread" nella <ph id="ph1">&lt;xref:System.Random&gt;</ph> argomento relativo alla classe.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The action delegate to execute asynchronously.</source>
          <target state="translated">Delegato dell'azione da eseguire in modo asincrono.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>action<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>action<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that will be assigned to the new <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph></source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> che verrà assegnato al nuovo oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> avviato.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.</source>
          <target state="translated">La chiamata di StartNew è funzionalmente equivalente alla creazione di un'attività utilizzando uno dei relativi costruttori e quindi chiamando <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> per pianificarne l'esecuzione.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id="ph3">&lt;xref:System.Action&gt;</ph> object as  a quick way to call <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> metodo con un <ph id="ph3">&lt;xref:System.Action&gt;</ph> oggetto come un modo rapido per chiamare <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>For more information and code examples, see <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The following example defines an array of 6-letter words.</source>
          <target state="translated">Nell'esempio seguente definisce una matrice di parole 6 lettera.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>Each word is then passed to an <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate, which scrambles the word and displays the original word and its scrambled version.</source>
          <target state="translated">Ogni parola viene quindi passato a un <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegato che codificata la parola e viene visualizzata la parola originale e la relativa versione codificata.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>Note that the example initializes a single random number generator, which is protected by a lock.</source>
          <target state="translated">Si noti che nell'esempio viene inizializzato un singolo generatore di numeri casuali, che è protetta da un blocco.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>For the need of a lock, see "The System.Random class and thread safety" in the <ph id="ph1">&lt;xref:System.Random&gt;</ph> class topic.</source>
          <target state="translated">Per la necessità di un blocco, vedere "La sicurezza Random classe e il thread" nella <ph id="ph1">&lt;xref:System.Random&gt;</ph> argomento relativo alla classe.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>To handle the possibility of corruption of the random number generator, a cancellation token is passed to task.</source>
          <target state="translated">Per gestire la possibilità di danneggiamento del generatore di numeri casuali, un token di annullamento viene passato all'attività.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>If two random numbers equal zero, the method assumes that the random number generator is corrupted and sets the cancellation token.</source>
          <target state="translated">Se due numeri casuali è uguale a zero, il metodo presuppone che il generatore di numeri casuali è danneggiato e imposta il token di annullamento.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>Before sorting the <ph id="ph1">`chars`</ph> array that contains the six characters in a word, the method calls the <ph id="ph2">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> method to throw an <ph id="ph3">&lt;xref:System.OperationCanceledException&gt;</ph> if the token has been canceled.</source>
          <target state="translated">Prima di ordinare il <ph id="ph1">`chars`</ph> matrice che contiene i sei caratteri di una parola, le chiamate al metodo il <ph id="ph2">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> metodo consente di generare un <ph id="ph3">&lt;xref:System.OperationCanceledException&gt;</ph> se il token è stato annullato.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'istanza <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornita è già stata eliminata.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The action delegate to execute asynchronously.</source>
          <target state="translated">Delegato dell'azione da eseguire in modo asincrono.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>action<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>action<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>A TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph></source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> avviato.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.</source>
          <target state="translated">La chiamata di StartNew è funzionalmente equivalente alla creazione di un'attività utilizzando uno dei relativi costruttori e quindi chiamando <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> per pianificarne l'esecuzione.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id="ph3">&lt;xref:System.Action&gt;</ph> object as  a quick way to call <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> metodo con un <ph id="ph3">&lt;xref:System.Action&gt;</ph> oggetto come un modo rapido per chiamare <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information and code examples, see <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The action delegate to execute asynchronously.</source>
          <target state="translated">Delegato dell'azione da eseguire in modo asincrono.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that will be assigned to the new <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph></source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> che verrà assegnato al nuovo oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph></source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that is used to schedule the created <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> usato per pianificare l'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> avviato.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.</source>
          <target state="translated">La chiamata di StartNew è funzionalmente equivalente alla creazione di un'attività utilizzando uno dei relativi costruttori e quindi chiamando <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> per pianificarne l'esecuzione.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id="ph3">&lt;xref:System.Action&gt;</ph> object as  a quick way to call <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> metodo con un <ph id="ph3">&lt;xref:System.Action&gt;</ph> oggetto come un modo rapido per chiamare <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>For more information and code examples, see <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'istanza <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornita è già stata eliminata.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The action delegate to execute asynchronously.</source>
          <target state="translated">Delegato dell'azione da eseguire in modo asincrono.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>action<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>action<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that will be assigned to the new task.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> che verrà assegnato alla nuova attività.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph></source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that is used to schedule the created <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> usato per pianificare l'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> avviato.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.</source>
          <target state="translated">La chiamata di StartNew è funzionalmente equivalente alla creazione di un'attività utilizzando uno dei relativi costruttori e quindi chiamando <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> per pianificarne l'esecuzione.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id="ph3">&lt;xref:System.Action&gt;</ph> object as  a quick way to call <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> metodo con un <ph id="ph3">&lt;xref:System.Action&gt;</ph> oggetto come un modo rapido per chiamare <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>For more information and code examples, see <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere <bpt id="p1">[</bpt>Task.Run vs Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'istanza <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornita è già stata eliminata.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="action" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="action" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
          <source>A function delegate that returns the future result to be available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Delegato della funzione che restituisce il risultato futuro da rendere disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avviato.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
          <source>Calling <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> is functionally equivalent to creating a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.</source>
          <target state="translated">La chiamata <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> è funzionalmente equivalente alla creazione di un <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> utilizzando uno dei suoi costruttori e chiamando quindi <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> per pianificarne l'esecuzione.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can call the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType&gt;</ph> method as a quick way to call <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile chiamare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType&gt;</ph> un modo rapido per chiamare il metodo <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
          <source>Note, however, that there is a difference in behavior between the two methods regarding : <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType&gt;</ph> by default does not allow child tasks started with the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType&gt;</ph> option to attach to the current <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> instance, whereas <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29&gt;</ph> does.</source>
          <target state="translated">Si noti, tuttavia, che esiste una differenza nel comportamento tra i due metodi per quanto riguarda: <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType&gt;</ph> per impostazione predefinita non consente figlio attività avviate con il <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType&gt;</ph> opzione di connessione corrente <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> istanza, mentre <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29&gt;</ph> does.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
          <source>For more information and code examples, see the entry <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere la voce <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
          <source>The following example is a simple addition app that generates two random numbers and prompts the user to enter their sum.</source>
          <target state="translated">L'esempio seguente è un'applicazione semplice aggiunta che genera due numeri casuali e chiede all'utente di immettere la somma.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
          <source>It then indicates whether the answer is correct or, if the user's response is not a valid number, prompts the user to re-enter a valid number.</source>
          <target state="translated">Quindi, indica se la risposta è corretta o, se la risposta dell'utente non è un numero valido, viene richiesto all'utente di immettere nuovamente un numero valido.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> is used to create the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects that return the random numbers to add.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> viene utilizzato per creare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> gli oggetti che restituiscono i numeri casuali da aggiungere.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore dell'argomento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
          <source>A function delegate that returns the future result to be available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Delegato della funzione che restituisce il risultato futuro da rendere disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avviato.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
          <source>Calling StartNew is functionally equivalent to creating a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.</source>
          <target state="translated">La chiamata di StartNew è funzionalmente equivalente alla creazione di un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> utilizzando uno dei suoi costruttori e chiamando quindi <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> per pianificarne l'esecuzione.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id="ph3">&lt;xref:System.Action&gt;</ph> object as a quick way to call <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> metodo con un <ph id="ph3">&lt;xref:System.Action&gt;</ph> oggetto come un modo rapido per chiamare <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
          <source>For more information and code examples, see the entry <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere la voce <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>A function delegate that returns the future result to be available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Delegato della funzione che restituisce il risultato futuro da rendere disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that will be assigned to the new <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph></source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> che verrà assegnato al nuovo oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avviato.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>Calling <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> is functionally equivalent to creating a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.</source>
          <target state="translated">La chiamata <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> è funzionalmente equivalente alla creazione di un <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> utilizzando uno dei suoi costruttori e chiamando quindi <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> per pianificarne l'esecuzione.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> method as a quick way to call <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> un modo rapido per chiamare il metodo <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>Note, however, that there is a difference in behavior between the two methods regarding : <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> by default does not allow child tasks started with the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType&gt;</ph> option to attach to the current <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> instance, whereas <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29&gt;</ph> does.</source>
          <target state="translated">Si noti, tuttavia, che esiste una differenza nel comportamento tra i due metodi per quanto riguarda: <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> per impostazione predefinita non consente figlio attività avviate con il <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType&gt;</ph> opzione di connessione corrente <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> istanza, mentre <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29&gt;</ph> does.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>For more information and code examples, see the entry <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere la voce <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The following example uses two tasks to compute the Fibonacci sequence ending in F100 = F100-1 + F100-2 with seed values F1= 1, F2 = 1 and F1 = 0, F2= 1.</source>
          <target state="translated">L'esempio seguente usa due attività per calcolare la sequenza di Fibonacci che terminano con F100 = F100 1 + F100 2 con valori di inizializzazione F1 = 1, F2 = 1 e F1 = 0, F2 = 1.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>Approximately half of the time, a cancellation token is set as the operations execute.</source>
          <target state="translated">Circa la metà dei casi, un token di annullamento è impostato come eseguire le operazioni.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The output from the example shows the result if the two tasks complete successfully and if the token is cancelled.</source>
          <target state="translated">Se le due attività è stata completata correttamente e se il token viene annullato, l'output dell'esempio mostra il risultato.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'istanza <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornita è già stata eliminata.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>A function delegate that returns the future result to be available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Delegato della funzione che restituisce il risultato futuro da rendere disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>A TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avviato.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>Calling StartNew is functionally equivalent to creating a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.</source>
          <target state="translated">La chiamata di StartNew è funzionalmente equivalente alla creazione di un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> utilizzando uno dei suoi costruttori e chiamando quindi <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> per pianificarne l'esecuzione.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id="ph3">&lt;xref:System.Action&gt;</ph> object as a quick way to call <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> metodo con un <ph id="ph3">&lt;xref:System.Action&gt;</ph> oggetto come un modo rapido per chiamare <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information and code examples, see the entry <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere la voce <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>A function delegate that returns the future result to be available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Delegato della funzione che restituisce il risultato futuro da rendere disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that will be assigned to the new <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph></source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> che verrà assegnato al nuovo oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avviato.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>Calling StartNew is functionally equivalent to creating a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.</source>
          <target state="translated">La chiamata di StartNew è funzionalmente equivalente alla creazione di un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> utilizzando uno dei suoi costruttori e chiamando quindi <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> per pianificarne l'esecuzione.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id="ph3">&lt;xref:System.Action&gt;</ph> object as a quick way to call <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> metodo con un <ph id="ph3">&lt;xref:System.Action&gt;</ph> oggetto come un modo rapido per chiamare <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>For more information and code examples, see the entry <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere la voce <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'istanza <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornita è già stata eliminata.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>A function delegate that returns the future result to be available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Delegato della funzione che restituisce il risultato futuro da rendere disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>A TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avviato.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Calling StartNew is functionally equivalent to creating a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.</source>
          <target state="translated">La chiamata di StartNew è funzionalmente equivalente alla creazione di un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> utilizzando uno dei suoi costruttori e chiamando quindi <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> per pianificarne l'esecuzione.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id="ph3">&lt;xref:System.Action&gt;</ph> object as a quick way to call <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> metodo con un <ph id="ph3">&lt;xref:System.Action&gt;</ph> oggetto come un modo rapido per chiamare <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information and code examples, see the entry <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere la voce <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A function delegate that returns the future result to be available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Delegato della funzione che restituisce il risultato futuro da rendere disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that will be assigned to the new task.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> che verrà assegnato alla nuova attività.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that is used to schedule the created <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> usato per pianificare l'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avviato.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Calling StartNew is functionally equivalent to creating a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.</source>
          <target state="translated">La chiamata di StartNew è funzionalmente equivalente alla creazione di un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> utilizzando uno dei suoi costruttori e chiamando quindi <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> per pianificarne l'esecuzione.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id="ph3">&lt;xref:System.Action&gt;</ph> object as a quick way to call <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> metodo con un <ph id="ph3">&lt;xref:System.Action&gt;</ph> oggetto come un modo rapido per chiamare <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>For more information and code examples, see the entry <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere la voce <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'istanza <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornita è già stata eliminata.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Tipo del risultato disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A function delegate that returns the future result to be available through the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Delegato della funzione che restituisce il risultato futuro da rendere disponibile tramite <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal delegato <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> that will be assigned to the new task.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /&gt;</ph> che verrà assegnato alla nuova attività.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A TaskCreationOptions value that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Valore di TaskCreationOptions che controlla il comportamento dell'oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that is used to schedule the created <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> usato per pianificare l'oggetto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> creato.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates and starts a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Crea e avvia un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avviato.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Calling StartNew is functionally equivalent to creating a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.</source>
          <target state="translated">La chiamata di StartNew è funzionalmente equivalente alla creazione di un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> utilizzando uno dei suoi costruttori e chiamando quindi <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> per pianificarne l'esecuzione.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id="ph3">&lt;xref:System.Action&gt;</ph> object as a quick way to call <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> metodo con un <ph id="ph3">&lt;xref:System.Action&gt;</ph> oggetto come un modo rapido per chiamare <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> con parametri predefiniti.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>For more information and code examples, see the entry <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di codice, vedere la voce <bpt id="p1">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id="p1">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in parallelo blog sulla programmazione con .NET.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">L'istanza <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fornita è già stata eliminata.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="function" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> è Null.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The exception that is thrown when the <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid TaskCreationOptions value.</source>
          <target state="translated">Eccezione generata quando l'argomento <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> specifica un valore TaskCreationOptions non valido.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>For more information, see the Remarks for <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph></source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione Osservazioni di <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>