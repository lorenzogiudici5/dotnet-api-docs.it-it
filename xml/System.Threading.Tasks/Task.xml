<Type Name="Task" FullName="System.Threading.Tasks.Task">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="20607044e8a6b00e4cc3c8fd73a433891b7b588e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408234" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Task : IAsyncResult, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Task extends System.Object implements class System.IAsyncResult, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Task" />
  <TypeSignature Language="VB.NET" Value="Public Class Task&#xA;Implements IAsyncResult, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Task : IAsyncResult, IDisposable" />
  <TypeSignature Language="F#" Value="type Task = class&#xA;    interface IAsyncResult&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.SystemThreadingTasks_TaskDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9dbf3-101">Represents an asynchronous operation.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9dbf3-101">Represents an asynchronous operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
   
## Remarks  
 <span data-ttu-id="9dbf3-102">Il <xref:System.Threading.Tasks.Task> classe rappresenta una singola operazione che non restituisce un valore e che in genere esegue in modo asincrono.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-102">The <xref:System.Threading.Tasks.Task> class represents a single operation that does not return a value and that usually executes asynchronously.</span></span> <span data-ttu-id="9dbf3-103"><xref:System.Threading.Tasks.Task> gli oggetti sono uno dei componenti centrali del [modello asincrono basato su attività](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) introdotti inizialmente in .NET Framework 4.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-103"><xref:System.Threading.Tasks.Task> objects are one of the central components of the  [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) first introduced in the .NET Framework 4.</span></span> <span data-ttu-id="9dbf3-104">Poiché il lavoro eseguito da un <xref:System.Threading.Tasks.Task> in genere viene eseguito l'oggetto in modo asincrono in un pool di thread anziché in modo sincrono sul thread principale dell'applicazione, è possibile usare il <xref:System.Threading.Tasks.Task.Status%2A> proprietà, così come <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, e <xref:System.Threading.Tasks.Task.IsFaulted%2A> alle proprietà per determinare lo stato di un'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-104">Because the work performed by a <xref:System.Threading.Tasks.Task> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task.</span></span> <span data-ttu-id="9dbf3-105">In genere, un'espressione lambda viene utilizzata per specificare il lavoro che l'attività deve eseguire.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-105">Most commonly, a lambda expression is used to specify the work that the task is to perform.</span></span>  
  
 <span data-ttu-id="9dbf3-106">Per le operazioni che restituiscono valori, utilizzare il <xref:System.Threading.Tasks.Task%601> classe.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-106">For operations that return values, you use the <xref:System.Threading.Tasks.Task%601> class.</span></span>  
  
 <span data-ttu-id="9dbf3-107">Contenuto della sezione:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-107">In this section:</span></span>  
  
 <span data-ttu-id="9dbf3-108">[Esempi di creazione di un'istanza di attività](#Instant) </span><span class="sxs-lookup"><span data-stu-id="9dbf3-108">[Task instantiation examples](#Instant) </span></span>  
 <span data-ttu-id="9dbf3-109">[Per creare ed eseguire un'attività](#Creating) </span><span class="sxs-lookup"><span data-stu-id="9dbf3-109">[Creating and executing a task](#Creating) </span></span>  
 <span data-ttu-id="9dbf3-110">[Separazione di esecuzione e la creazione di attività](#Separating) </span><span class="sxs-lookup"><span data-stu-id="9dbf3-110">[Separating task creation and execution](#Separating) </span></span>  
 <span data-ttu-id="9dbf3-111">[In attesa di uno o più attività da completare](#WaitingForOne) </span><span class="sxs-lookup"><span data-stu-id="9dbf3-111">[Waiting for one or more tasks to complete](#WaitingForOne) </span></span>  
 <span data-ttu-id="9dbf3-112">[Attività e le impostazioni cultura](#Culture) </span><span class="sxs-lookup"><span data-stu-id="9dbf3-112">[Tasks and culture](#Culture) </span></span>  
 [<span data-ttu-id="9dbf3-113">Per gli sviluppatori del debugger</span><span class="sxs-lookup"><span data-stu-id="9dbf3-113">For debugger developers</span></span>](#Debugger)  

 <a name="Instant"></a>     
## <a name="task-instantiation"></a><span data-ttu-id="9dbf3-114">Creazione di istanze di attività</span><span class="sxs-lookup"><span data-stu-id="9dbf3-114">Task instantiation</span></span>  
 <span data-ttu-id="9dbf3-115">Nell'esempio seguente crea ed esegue quattro attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-115">The following example creates and executes four tasks.</span></span> <span data-ttu-id="9dbf3-116">Le tre attività vengono eseguite un' <xref:System.Action%601> delegato denominato `action`, che accetta un argomento di tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-116">Three tasks execute an <xref:System.Action%601> delegate named `action`, which accepts an argument of type <xref:System.Object>.</span></span> <span data-ttu-id="9dbf3-117">Un quarto di attività viene eseguita un'espressione lambda (un <xref:System.Action> delegare) vale a dire definito inline nella chiamata al metodo di creazione di attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-117">A fourth task executes a lambda expression (an <xref:System.Action> delegate) that is defined inline in the call to the task creation method.</span></span> <span data-ttu-id="9dbf3-118">Ogni attività vengano creata un'istanza ed eseguire in modo diverso:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-118">Each task is instantiated and run in a different way:</span></span>  
  
-   <span data-ttu-id="9dbf3-119">Attività `t1` viene creata un'istanza chiamando un costruttore di classe di attività, ma viene avviata chiamando il relativo <xref:System.Threading.Tasks.Task.Start> metodo solo dopo l'attività `t2` è stata avviata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-119">Task `t1` is instantiated by calling a Task class constructor, but is started by calling its <xref:System.Threading.Tasks.Task.Start> method only after task `t2` has started.</span></span>  
  
-   <span data-ttu-id="9dbf3-120">Attività `t2` viene creata un'istanza e avviato in una singola chiamata al metodo chiamando il <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-120">Task `t2` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="9dbf3-121">Attività `t3` viene creata un'istanza e avviato in una singola chiamata al metodo chiamando il <xref:System.Threading.Tasks.Task.Run%28System.Action%29> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-121">Task `t3` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span>  
  
-   <span data-ttu-id="9dbf3-122">Attività `t4` viene eseguita in modo sincrono sul thread principale chiamando il <xref:System.Threading.Tasks.Task.RunSynchronously> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-122">Task `t4` is executed synchronously on the main thread by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method.</span></span>  
  
 <span data-ttu-id="9dbf3-123">Poiché attività `t4` esegue in modo sincrono, viene eseguito nel thread principale dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-123">Because task `t4` executes synchronously, it executes on the main application thread.</span></span> <span data-ttu-id="9dbf3-124">Le attività rimanenti in genere eseguite in modo asincrono in uno o più thread del pool.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-124">The remaining tasks execute asynchronously typically on one or more thread pool threads.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew.cs#01)]
 [!code-vb[System.Threading.Tasks.Task#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew.vb#01)] 
    
<a name="Creating"></a>   
## <a name="creating-and-executing-a-task"></a><span data-ttu-id="9dbf3-125">Per creare ed eseguire un'attività</span><span class="sxs-lookup"><span data-stu-id="9dbf3-125">Creating and executing a task</span></span>  
 <span data-ttu-id="9dbf3-126"><xref:System.Threading.Tasks.Task> è possibile creare istanze in diversi modi.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-126"><xref:System.Threading.Tasks.Task> instances may be created in a variety of ways.</span></span> <span data-ttu-id="9dbf3-127">L'approccio più comune, che viene utilizzata solo con il [!INCLUDE[net_v45](~/includes/net-v45-md.md)], consiste nel chiamare il metodo statico <xref:System.Threading.Tasks.Task.Run%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-127">The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%2A> method.</span></span> <span data-ttu-id="9dbf3-128">Il <xref:System.Threading.Tasks.Task.Run%2A> metodo fornisce un modo semplice per avviare un'attività utilizzando i valori predefiniti e senza richiedere parametri aggiuntivi.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-128">The <xref:System.Threading.Tasks.Task.Run%2A> method provides a simple way to start a task using default values and without requiring additional parameters.</span></span> <span data-ttu-id="9dbf3-129">L'esempio seguente usa il <xref:System.Threading.Tasks.Task.Run%28System.Action%29> metodo per avviare un'attività che esegue il ciclo e quindi Visualizza il numero di iterazioni del ciclo:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-129">The following example uses the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to start a task that loops and then displays the number of loop iterations:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/run1.cs#6)]
 [!code-vb[System.Threading.Tasks.Task#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/run1.vb#6)]  
  
 <span data-ttu-id="9dbf3-130">In alternativa e il metodo più comune per avviare un'attività in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], è statica <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-130">An alternative, and the most common method to start a task in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9dbf3-131">Il <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> proprietà restituisce un <xref:System.Threading.Tasks.TaskFactory> oggetto.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-131">The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> property returns a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="9dbf3-132">Esegue l'overload del <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> metodo consentono di specificare i parametri da passare a un'utilità di pianificazione e le opzioni di creazione di attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-132">Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method let you specify parameters to pass to the task creation options and a task scheduler.</span></span> <span data-ttu-id="9dbf3-133">L'esempio seguente usa il <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> metodo per avviare un'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-133">The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method to start a task.</span></span> <span data-ttu-id="9dbf3-134">È funzionalmente equivalente al codice nell'esempio precedente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-134">It is functionally equivalent to the code in the previous example.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew1.cs#7)]
 [!code-vb[System.Threading.Tasks.Task#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew1.vb#7)]  
  
 <span data-ttu-id="9dbf3-135">Per esempi più completi, vedere [basato su attività di programmazione asincrona](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-135">For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).</span></span>  
  
<a name="Separating"></a>   
## <a name="separating-task-creation-and-execution"></a><span data-ttu-id="9dbf3-136">Separazione di esecuzione e la creazione di attività</span><span class="sxs-lookup"><span data-stu-id="9dbf3-136">Separating task creation and execution</span></span>  
 <span data-ttu-id="9dbf3-137">Il <xref:System.Threading.Tasks.Task> classe fornisce anche i costruttori che inizializzano l'attività, ma che non pianificarne l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-137">The <xref:System.Threading.Tasks.Task> class also provides constructors that initialize the task but that do not schedule it for execution.</span></span> <span data-ttu-id="9dbf3-138">Per motivi di prestazioni, il <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> o <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> metodo è il meccanismo preferito per creare e pianificare le attività di calcolo, ma per gli scenari in cui la creazione e la pianificazione devono essere separati, è possibile utilizzare i costruttori e quindi chiamare il <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> metodo per la pianificazione per l'esecuzione in un secondo momento.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-138">For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> method to schedule the task for execution at a later time.</span></span>  
  
<a name="WaitingForOne"></a>   
## <a name="waiting-for-one-or-more-tasks-to-complete"></a><span data-ttu-id="9dbf3-139">In attesa di uno o più attività da completare</span><span class="sxs-lookup"><span data-stu-id="9dbf3-139">Waiting for one or more tasks to complete</span></span>  
 <span data-ttu-id="9dbf3-140">Poiché le attività in genere eseguite in modo asincrono in un pool di thread, il thread che crea e avvia l'attività continua l'esecuzione non appena l'attività è stata creata un'istanza.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-140">Because tasks typically run asynchronously on a thread pool thread, the thread that creates and starts the task continues execution as soon as the task has been instantiated.</span></span> <span data-ttu-id="9dbf3-141">In alcuni casi, quando il thread chiamante è il thread principale dell'applicazione, l'applicazione può terminare prima di qualsiasi attività effettivamente inizia l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-141">In some cases, when the calling thread is the main application thread, the app may terminate before any the task actually begins execution.</span></span> <span data-ttu-id="9dbf3-142">In altri, la logica dell'applicazione può richiedere che il thread chiamante continua l'esecuzione solo quando una o più attività è stata completata l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-142">In others,   your application's logic may require that the calling thread continue execution only when one or more tasks has completed execution.</span></span> <span data-ttu-id="9dbf3-143">È possibile sincronizzare l'esecuzione del thread chiamante e asincrona le attività viene avviata chiamando un `Wait` metodo per attendere uno o più attività da completare.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-143">You can synchronize the execution of the calling thread and the asynchronous tasks it launches by calling a `Wait` method to wait for one or more tasks to complete.</span></span>  
  
 <span data-ttu-id="9dbf3-144">Per attendere il completamento di un'attività singola, è possibile chiamare il relativo <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-144">To wait for a single task to complete, you can call its <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9dbf3-145">Una chiamata al <xref:System.Threading.Tasks.Task.Wait%2A> metodo blocca il thread chiamante finché l'istanza della classe singola ha completato l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-145">A call to the  <xref:System.Threading.Tasks.Task.Wait%2A> method blocks the calling thread until the single class instance has completed execution.</span></span>  
  
 <span data-ttu-id="9dbf3-146">L'esempio seguente viene chiamata senza parametri <xref:System.Threading.Tasks.Task.Wait> metodo per attendere in modo incondizionato fino al completamento di un'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-146">The following example calls the parameterless <xref:System.Threading.Tasks.Task.Wait> method to wait unconditionally until a task completes.</span></span> <span data-ttu-id="9dbf3-147">L'attività simula lavoro chiamando il <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> metodo per due secondi.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-147">The task simulates work by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to sleep for two seconds.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait1.cs#8)]
 [!code-vb[System.Threading.Tasks.Task#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait1.vb#8)]  
  
 <span data-ttu-id="9dbf3-148">È inoltre in modo condizionale possibile attendere un'attività da completare.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-148">You can also conditionally wait for a task to complete.</span></span> <span data-ttu-id="9dbf3-149">Il <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> e <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> metodi bloccano il thread chiamante fino al completamento dell'attività o un intervallo di timeout scade, quest'ultima giunge prima.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-149">The  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> and <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first.</span></span> <span data-ttu-id="9dbf3-150">Poiché nell'esempio seguente viene avviata un'attività che rimane inattivo per due secondi, ma definisce un valore di timeout di un secondo, il thread chiamante si blocca fino a quando il timeout scade e prima dell'attività è stata completata l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-150">Since the following example launches a task that sleeps for two seconds but defines a one-second timeout value, the calling thread blocks until the timeout expires and before the task has completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait2.cs#9)]
 [!code-vb[System.Threading.Tasks.Task#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait2.vb#9)]  
  
 <span data-ttu-id="9dbf3-151">È inoltre possibile fornire un token di annullamento chiamando il <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> e <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> metodi.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-151">You can also supply a cancellation token by calling the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> and  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> methods.</span></span> <span data-ttu-id="9dbf3-152">Se il token <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> proprietà è `true`, il tempo di attesa è stata annullata; se diventa true durante il <xref:System.Threading.Tasks.Task.Wait%2A> metodo termina.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-152">If the  token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`, the wait is cancelled; if it becomes true while the <xref:System.Threading.Tasks.Task.Wait%2A> method terminates.</span></span>  
  
 <span data-ttu-id="9dbf3-153">In alcuni casi, è possibile attendere per il primo di una serie di attività eseguite completare, ma non è care quale attività è.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-153">In some cases, you may want to wait for the first of a series of executing tasks to complete, but don't care which task it is.</span></span>  <span data-ttu-id="9dbf3-154">A tale scopo, è possibile chiamare uno degli overload del <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-154">For this purpose, you can call one of the overloads of the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="9dbf3-155">L'esempio seguente crea tre attività, ognuna delle quali rimane inattiva per un intervallo per determinare da un generatore di numeri casuali.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-155">The following example creates three tasks, each of which sleeps for an interval determine by a random number generator.</span></span> <span data-ttu-id="9dbf3-156">Il <xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> metodo attende la prima attività da completare.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-156">The <xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> method waits for the first task to complete.</span></span> <span data-ttu-id="9dbf3-157">Nell'esempio vengono quindi visualizzate informazioni sullo stato di tutte le tre attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-157">The example then displays information about the status of all three tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WhenAny1.cs#10)]
 [!code-vb[System.Threading.Tasks.Task#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAny1.vb#10)]  
  
 <span data-ttu-id="9dbf3-158">È anche possibile attendere tutta una serie di attività da completare tramite la chiamata di <xref:System.Threading.Tasks.Task.WaitAll%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-158">You can also wait for all of a series of tasks to complete by calling the <xref:System.Threading.Tasks.Task.WaitAll%2A> method.</span></span> <span data-ttu-id="9dbf3-159">Nell'esempio seguente crea dieci attività, è in attesa di dieci tutte completate e quindi Visualizza il relativo stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-159">The following example creates ten tasks, waits for all ten to complete, and then displays their status.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll1.cs#11)]
 [!code-vb[System.Threading.Tasks.Task#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll1.vb#11)]  
  
 <span data-ttu-id="9dbf3-160">Si noti che quando in attesa di uno o più attività da completare, tutte le eccezioni generate in esecuzione di attività vengono propagate nel thread che chiama il `Wait` metodo, come illustrato nell'esempio seguente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-160">Note that when you wait for one or more tasks to complete, any exceptions thrown in the running tasks are propagated on the thread that calls the `Wait` method, as the following example shows.</span></span> <span data-ttu-id="9dbf3-161">Avvia 12 attività, tre dei quali completare normalmente e tre dei quali generi un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-161">It launches 12 tasks, three of which complete normally and three of which throw an exception.</span></span> <span data-ttu-id="9dbf3-162">Delle sei attività rimanenti, tre viene annullato prima dell'inizio e tre sono annullato mentre sono in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-162">Of the remaining six tasks, three are cancelled before the start, and three are cancelled while they executing.</span></span> <span data-ttu-id="9dbf3-163">Le eccezioni vengono generate <xref:System.Threading.Tasks.Task.WaitAll%2A> chiamata al metodo e sono gestite da un `try` / `catch` blocco.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-163">Exceptions are thrown in the <xref:System.Threading.Tasks.Task.WaitAll%2A> method call and are handled by a `try`/`catch` block.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll2.cs#12)]
 [!code-vb[System.Threading.Tasks.Task#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll2.vb#12)]  
  
 <span data-ttu-id="9dbf3-164">Per ulteriori informazioni sulla gestione delle eccezioni in operazioni asincrone basate su attività, vedere [eccezioni](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-164">For more information on exception handling in task-based asynchronous operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
<a name="Culture"></a>   
## <a name="tasks-and-culture"></a><span data-ttu-id="9dbf3-165">Attività e le impostazioni cultura</span><span class="sxs-lookup"><span data-stu-id="9dbf3-165">Tasks and culture</span></span>  
 <span data-ttu-id="9dbf3-166">A partire da app desktop che hanno come destinazione il [!INCLUDE[net_v46](~/includes/net-v46-md.md)], le impostazioni cultura del thread che crea e richiama un'attività diventano parte del contesto del thread.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-166">Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context.</span></span> <span data-ttu-id="9dbf3-167">Vale a dire, indipendentemente dalle impostazioni cultura correnti del thread in cui l'attività viene eseguita, le impostazioni cultura correnti dell'attività sono le impostazioni cultura del thread chiamante.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-167">That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread.</span></span> <span data-ttu-id="9dbf3-168">Per le app destinate alle versioni di .NET Framework precedenti al [!INCLUDE[net_v46](~/includes/net-v46-md.md)], le impostazioni cultura dell'attività sono le impostazioni cultura del thread in cui viene eseguita l'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-168">For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes.</span></span> <span data-ttu-id="9dbf3-169">Per altre informazioni, vedere la sezione "Operazioni asincrone basate su attività e delle impostazioni cultura" nel <xref:System.Globalization.CultureInfo> argomento.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-169">For more information, see the "Culture and task-based asynchronous operations" section in the <xref:System.Globalization.CultureInfo> topic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9dbf3-170">Le app di Store seguono Windows Runtime in impostazione e recupero delle impostazioni cultura predefinite.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-170">Store apps follow the Windows Runtime in setting and getting the default culture.</span></span>  
  
<a name="Debugger"></a>   
## <a name="for-debugger-developers"></a><span data-ttu-id="9dbf3-171">Per gli sviluppatori del debugger</span><span class="sxs-lookup"><span data-stu-id="9dbf3-171">For debugger developers</span></span>  
 <span data-ttu-id="9dbf3-172">Per gli sviluppatori implementano debugger personalizzati, diversi membri interni e privati di attività possono essere utili (possono cambiare a ogni versione).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-172">For developers implementing custom debuggers, several internal and private members of task may be useful (these may change from release to release).</span></span> <span data-ttu-id="9dbf3-173">Il `m_taskId` campo viene utilizzato come archivio di backup per il <xref:System.Threading.Tasks.Task.Id%2A> proprietà, tuttavia l'accesso questo campo direttamente da un debugger può essere più efficiente l'accesso al valore stesso tramite il metodo di richiamo della proprietà (il `s_taskIdCounter` contatore Consente di recuperare il successivo ID disponibile per un'attività).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-173">The `m_taskId` field serves as the backing store for the <xref:System.Threading.Tasks.Task.Id%2A> property, however accessing this field directly from a debugger may be more efficient than accessing the same value through the property's getter method (the `s_taskIdCounter` counter is used to retrieve the next available ID for a task).</span></span> <span data-ttu-id="9dbf3-174">Analogamente, il `m_stateFlags` campo Archivia le informazioni sulla fase corrente del ciclo di vita dell'attività, informazioni accessibili anche tramite il <xref:System.Threading.Tasks.Task.Status%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-174">Similarly, the `m_stateFlags` field stores information about the current lifecycle stage of the task, information also accessible through the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span> <span data-ttu-id="9dbf3-175">Il `m_action` campo Archivia un riferimento al delegato dell'attività e il `m_stateObject` campo Archivia lo stato asincrono passato all'attività dallo sviluppatore.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-175">The `m_action` field stores a reference to the task's delegate, and the `m_stateObject` field stores the async state passed to the task by the developer.</span></span> <span data-ttu-id="9dbf3-176">Infine, per i debugger che analizzano stack frame, la `InternalWait` metodo funge da indicatore potenziale per quando un'attività sta entrando in un'operazione di attesa.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-176">Finally, for debuggers that parse stack frames, the `InternalWait` method serves a potential marker for when a task is entering a wait operation.</span></span>   
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="9dbf3-177">Tutti i membri di <see cref="T:System.Threading.Tasks.Task" />, ad eccezione di <see cref="M:System.Threading.Tasks.Task.Dispose" />, sono thread-safe e possono essere utilizzati da più thread contemporaneamente.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9dbf3-177">All members of <see cref="T:System.Threading.Tasks.Task" />, except for <see cref="M:System.Threading.Tasks.Task.Dispose" />, are thread-safe and may be used from multiple threads concurrently.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Tasks.Task`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-178">Initializes a new <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-178">Initializes a new <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task action" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="9dbf3-179">The delegate that represents the code to execute in the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-179">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-180">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-180">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-181">Anziché chiamare questo costruttore, il modo più comune per creare un'istanza di un <xref:System.Threading.Tasks.Task> oggetti e avviare un'attività è tramite la chiamata al metodo statico <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> o <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-181">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9dbf3-182">L'unico vantaggio offerto da questo costruttore è che consente la creazione di istanze di oggetto essere separati dalla chiamata di attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-182">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-183">L'esempio seguente usa il <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> costruttore per creare le attività che consentono di recuperare i nomi dei file nelle directory specificate.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-183">The following example uses the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to create tasks that retrieve the filenames in specified directories.</span></span> <span data-ttu-id="9dbf3-184">Tutte le attività di scrivono i nomi dei file in un singolo <xref:System.Collections.Concurrent.ConcurrentBag%601> oggetto.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-184">All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span> <span data-ttu-id="9dbf3-185">Nell'esempio viene quindi chiamato il <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> metodo per garantire che tutte le attività completate e quindi visualizza un conteggio del numero totale dei nomi file da scrivere il <xref:System.Collections.Concurrent.ConcurrentBag%601> oggetto.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-185">The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/ctor1.vb#1)]  
  
 <span data-ttu-id="9dbf3-186">Nell'esempio seguente è identico, ad eccezione del fatto che utilizzato il <xref:System.Threading.Tasks.Task.Run%28System.Action%29> metodo per creare un'istanza ed eseguire l'attività in un'unica operazione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-186">The following example is identical, except that it used the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to instantiate and run the task in a single operation.</span></span> <span data-ttu-id="9dbf3-187">Il metodo restituisce il <xref:System.Threading.Tasks.Task> oggetto che rappresenta l'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-187">The method returns the <xref:System.Threading.Tasks.Task> object that represents the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-188">The <paramref name="action" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-188">The <paramref name="action" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Threading.Tasks.Task.Run(System.Action)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, cancellationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="9dbf3-189">The delegate that represents the code to execute in the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-189">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-190">The <see cref="T:System.Threading.CancellationToken" /> that the new  task will observe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-190">The <see cref="T:System.Threading.CancellationToken" /> that the new  task will observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-191">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-191">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-192">Anziché chiamare questo costruttore, il modo più comune per creare un'istanza di un <xref:System.Threading.Tasks.Task> oggetti e avviare un'attività è tramite la chiamata al metodo statico <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> e <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> metodi.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-192">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> and <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="9dbf3-193">L'unico vantaggio offerto da questo costruttore è che consente la creazione di istanze di oggetto essere separati dalla chiamata di attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-193">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 <span data-ttu-id="9dbf3-194">Per altre informazioni, vedere [parallelismo delle attività (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) e [annullamento in thread gestiti](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-194">For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-195">L'esempio seguente chiama il <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29> costruttore per creare un'attività che scorre i file nella directory C:\Windows\System32.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-195">The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29> constructor to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="9dbf3-196">L'espressione lambda chiama il <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> metodo per aggiungere informazioni su ogni file da un <xref:System.Collections.Generic.List%601> oggetto.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-196">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="9dbf3-197">Ogni attività annidata richiamato da scollegata il <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> ciclo controlla lo stato del token di annullamento e, se viene richiesto l'annullamento, chiama il <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-197">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9dbf3-198">Il <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> metodo genera un <xref:System.OperationCanceledException> eccezione gestita in un `catch` bloccare quando il thread chiamante chiama il <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-198">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="9dbf3-199">Il <xref:System.Threading.Tasks.Task.Start%2A> viene quindi chiamato il metodo per avviare l'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-199">The <xref:System.Threading.Tasks.Task.Start%2A> method is then called to start the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/run4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/run4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-200">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-200">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-201">The <paramref name="action" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-201">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="9dbf3-202">The delegate that represents the code to execute in the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-202">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="9dbf3-203">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-203">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-204">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-204">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-205">Anziché chiamare questo costruttore, il modo più comune per creare un'istanza di un <xref:System.Threading.Tasks.Task> oggetti e avviare un'attività è tramite la chiamata al metodo statico <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-205">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9dbf3-206">L'unico vantaggio offerto da questo costruttore è che consente la creazione di istanze di oggetto essere separati dalla chiamata di attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-206">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-207">The <paramref name="action" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-207">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-208">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-208">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of Object), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="9dbf3-209">The delegate that represents the code to execute in the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-209">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9dbf3-210">An object representing data to be used by the action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-210">An object representing data to be used by the action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-211">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and state.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-211">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-212">Anziché chiamare questo costruttore, il modo più comune per creare un'istanza di un <xref:System.Threading.Tasks.Task> oggetti e avviare un'attività è tramite la chiamata al metodo statico <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-212">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9dbf3-213">L'unico vantaggio offerto da questo costruttore è che consente la creazione di istanze di oggetto essere separati dalla chiamata di attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-213">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-214">Nell'esempio seguente definisce una matrice di parole di lettera di 6.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-214">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="9dbf3-215">Ogni parola viene quindi passato come argomento per il <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29> costruttore, il cui <xref:System.Action%601> delegato codificata i caratteri nella parola, quindi Visualizza la parola originale e la relativa versione codificata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-215">Each word is then passed as an argument to the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29> constructor, whose <xref:System.Action%601> delegate scrambles the characters in the word, then displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/startnew3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/startnew3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-216">The <paramref name="action" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-216">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <altmember cref="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, cancellationToken, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="9dbf3-217">The delegate that represents the code to execute in the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-217">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-218">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that the new task will observe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-218">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that the new task will observe.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="9dbf3-219">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-219">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-220">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-220">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-221">Anziché chiamare questo costruttore, il modo più comune per creare un'istanza di un <xref:System.Threading.Tasks.Task> oggetti e avviare un'attività è tramite la chiamata al metodo statico <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-221">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9dbf3-222">L'unico vantaggio offerto da questo costruttore è che consente la creazione di istanze di oggetto essere separati dalla chiamata di attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-222">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 <span data-ttu-id="9dbf3-223">Per altre informazioni, vedere [parallelismo delle attività (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) e [annullamento delle attività](~/docs/standard/parallel-programming/task-cancellation.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-223">For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Task Cancellation](~/docs/standard/parallel-programming/task-cancellation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-224">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-224">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-225">The <paramref name="action" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-225">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-226">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-226">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state, cancellationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="9dbf3-227">The delegate that represents the code to execute in the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-227">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9dbf3-228">An object representing data to be used by the action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-228">An object representing data to be used by the action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-229">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that that the new task will observe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-229">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that that the new task will observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-230">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-230">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-231">Anziché chiamare questo costruttore, il modo più comune per creare un'istanza di un <xref:System.Threading.Tasks.Task> oggetti e avviare un'attività è tramite la chiamata al metodo statico <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-231">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9dbf3-232">L'unico vantaggio offerto da questo costruttore è che consente la creazione di istanze di oggetto essere separati dalla chiamata di attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-232">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-233">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-233">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-234">The <paramref name="action" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-234">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="9dbf3-235">The delegate that represents the code to execute in the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-235">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9dbf3-236">An object representing data to be used by the action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-236">An object representing data to be used by the action.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="9dbf3-237">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-237">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-238">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-238">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-239">Anziché chiamare questo costruttore, il modo più comune per creare un'istanza di un <xref:System.Threading.Tasks.Task> oggetti e avviare un'attività è tramite la chiamata al metodo statico <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-239">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9dbf3-240">L'unico vantaggio offerto da questo costruttore è che consente la creazione di istanze di oggetto essere separati dalla chiamata di attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-240">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-241">The <paramref name="action" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-241">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-242">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-242">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state, cancellationToken, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="9dbf3-243">The delegate that represents the code to execute in the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-243">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9dbf3-244">An object representing data to be used by the action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-244">An object representing data to be used by the action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-245">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that that the new task will observe..</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-245">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that that the new task will observe..</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="9dbf3-246">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-246">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-247">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-247">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-248">Anziché chiamare questo costruttore, il modo più comune per creare un'istanza di un <xref:System.Threading.Tasks.Task> oggetti e avviare un'attività è tramite la chiamata al metodo statico <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-248">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9dbf3-249">L'unico vantaggio offerto da questo costruttore è che consente la creazione di istanze di oggetto essere separati dalla chiamata di attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-249">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-250">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-250">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-251">The <paramref name="action" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-251">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-252">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-252">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.Threading.Tasks.Task.AsyncState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-253">Gets the state object supplied when the <see cref="T:System.Threading.Tasks.Task" /> was created, or null if none was supplied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-253">Gets the state object supplied when the <see cref="T:System.Threading.Tasks.Task" /> was created, or null if none was supplied.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9dbf3-254">Oggetto <see cref="T:System.Object" /> che rappresenta i dati relativi allo stato passati all'attività al momento della creazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-254">An <see cref="T:System.Object" /> that represents the state data that was passed in to the task when it was created.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-255">Il cast dell'oggetto al tipo originale di recuperare i dati.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-255">Cast the object back to the original type to retrieve its data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletedTask">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CompletedTask { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.Task CompletedTask" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CompletedTask" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CompletedTask As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::Task ^ CompletedTask { System::Threading::Tasks::Task ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedTask : System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.CompletedTask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-256">Gets a task that has already completed successfully.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-256">Gets a task that has already completed successfully.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9dbf3-257">Attività completata correttamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-257">The successfully completed task.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-258">Questa proprietà restituisce un'attività il cui <xref:System.Threading.Tasks.Task.Status%2A> è impostata su <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-258">This property returns a task whose <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span></span> <span data-ttu-id="9dbf3-259">Per creare attività che restituisce un valore e viene eseguito fino al completamento, chiamare il <xref:System.Threading.Tasks.Task.FromResult%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-259">To create task that returns a value and runs to completion, call the <xref:System.Threading.Tasks.Task.FromResult%2A> method.</span></span>  
  
 <span data-ttu-id="9dbf3-260">I tentativi ripetuti di recuperare il valore della proprietà potrebbero non restituire sempre la stessa istanza.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-260">Repeated attempts to retrieve this property value may not always return the same instance.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="ConfigureAwait">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait (bool continueOnCapturedContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConfigureAwait (continueOnCapturedContext As Boolean) As ConfiguredTaskAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);" />
      <MemberSignature Language="F#" Value="member this.ConfigureAwait : bool -&gt; System.Runtime.CompilerServices.ConfiguredTaskAwaitable" Usage="task.ConfigureAwait continueOnCapturedContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredTaskAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continueOnCapturedContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="continueOnCapturedContext">
          <span data-ttu-id="9dbf3-261">
            <see langword="true" /> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-261">
              <see langword="true" /> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-262">Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-262">Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-263">An object used to await this task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-263">An object used to await this task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWith">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-264">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-264">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith continuationAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="9dbf3-265">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-265">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-266">When run, the delegate will be passed the completed task as an argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-266">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-267">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-267">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-268">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-268">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-269">L'oggetto restituito <xref:System.Threading.Tasks.Task> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente, se viene completato a causa di completamento dell'esecuzione fino al completamento, generare un errore a causa di un'eccezione non gestita o interrotta in modo prematuro perché annullata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-269">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-270">L'esempio seguente definisce un'attività che popola una matrice con 100 casuale valori data e ora.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-270">The following example defines a task that populates an array with 100 random date and time values.</span></span> <span data-ttu-id="9dbf3-271">Usa il <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29> metodo per selezionare i valori di data più recenti e dal meno recente dopo che la matrice è completamente popolata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-271">It uses the <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29> method to select the earliest and the latest date values once the array is fully populated.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/cs/continuewith1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/vb/continuewith1.vb#1)]  
  
 <span data-ttu-id="9dbf3-272">Perché un'applicazione console può terminare prima che l'attività di continuazione viene eseguita, il <xref:System.Threading.Tasks.Task.Wait> metodo viene chiamato per verificare che la continuazione al termine dell'esecuzione prima della fine di esempio.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-272">Because a console application may terminate before the continuation task executes, the <xref:System.Threading.Tasks.Task.Wait> method is called to ensure that the continuation finishes executing before the example ends.</span></span>  
  
 <span data-ttu-id="9dbf3-273">Per un altro esempio, vedere [concatenamento di attività tramite attività di continuazione](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-273">For an additional example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-274">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-274">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="9dbf3-275">An action to run when the task completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-275">An action to run when the task completes.</span>
          </span>
          <span data-ttu-id="9dbf3-276">When run, the delegate is passed the completed task and a caller-supplied state object as arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-276">When run, the delegate is passed the completed task and a caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9dbf3-277">An object representing data to be used by the continuation action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-277">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-278">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-278">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-279">A new continuation task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-279">A new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-280">L'oggetto restituito <xref:System.Threading.Tasks.Task> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente, se viene completato a causa di completamento dell'esecuzione fino al completamento, generare un errore a causa di un'eccezione non gestita oppure uscire in anticipo a causa dell'annullamento.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-280">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to cancellation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-281">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-281">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="9dbf3-282">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-282">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-283">When run, the delegate will be passed the completed task as an argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-283">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-284">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-284">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-285">Creates a continuation that receives a cancellation token and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-285">Creates a continuation that receives a cancellation token and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-286">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-286">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-287">L'oggetto restituito <xref:System.Threading.Tasks.Task> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente, se viene completato a causa di completamento dell'esecuzione fino al completamento, generare un errore a causa di un'eccezione non gestita o interrotta in modo prematuro perché annullata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-287">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-288">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-288">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-289">The <paramref name="continuationAction" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-289">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="9dbf3-290">An action to run according to the specified <c>continuationOptions</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-290">An action to run according to the specified <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="9dbf3-291">When run, the delegate will be passed the completed task as an argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-291">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="9dbf3-292">Options for when the continuation is scheduled and how it behaves.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-292">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="9dbf3-293">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-293">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-294">Creates a continuation that executes when the target task completes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-294">Creates a continuation that executes when the target task completes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-295">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-295">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-296">L'oggetto restituito <xref:System.Threading.Tasks.Task> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-296">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="9dbf3-297">Se i criteri di continuazione specificato tramite la `continuationOptions` parametro non vengono soddisfatte, verrà annullata l'attività di continuazione anziché pianificata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-297">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-298">Nell'esempio seguente viene illustrato l'utilizzo <xref:System.Threading.Tasks.TaskContinuationOptions> per specificare che un'attività di continuazione deve essere eseguito in modo sincrono al completamento dell'attività precedente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-298">The following example demonstrates using <xref:System.Threading.Tasks.TaskContinuationOptions> to specify that a continuation task should run synchronously when the antecedent task completes.</span></span> <span data-ttu-id="9dbf3-299">(Se l'attività specificata è già stata completata la fase <xref:System.Threading.Tasks.Task.ContinueWith%2A> viene chiamato, sincroni continuazione verrà eseguita nel chiamante thread <xref:System.Threading.Tasks.Task.ContinueWith%2A>.)</span><span class="sxs-lookup"><span data-stu-id="9dbf3-299">(If the specified task has already completed by the time <xref:System.Threading.Tasks.Task.ContinueWith%2A> is called, the synchronous continuation will run on the thread calling <xref:System.Threading.Tasks.Task.ContinueWith%2A>.)</span></span>  
  
```csharp  
  
public class TaskCounter  
{  
   private volatile int _count;  
  
   public void Track(Task t)  
   {  
      if (t == null) throw new ArgumentNullException("t");  
      Interlocked.Increment(ref _count);  
      t.ContinueWith(ct => Interlocked.Decrement(ref _count), TaskContinuationOptions.ExecuteSynchronously);  
   }  
  
   public int NumberOfActiveTasks { get { return _count; } }  
}  
  
```  
  
```vb  
  
Public Class TaskCounter  
   Private _count as Integer  
  
   Public Sub Track(ByVal t as Task)  
      If t is Nothing Then Throw New ArgumentNullException("t")  
      Interlocked.Increment(_count)  
      t.ContinueWith(Sub(ct)  
                        Interlocked.Decrement(_count)  
                     End Sub,  
                     TaskContinuationOptions.ExecuteSynchronously)  
   End Sub  
  
   Public ReadOnly Property NumberOfActiveTasks As Integer  
      Get  
         Return _count  
      End Get  
   End Property  
End Class  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-300">The <paramref name="continuationAction" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-300">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-301">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-301">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task), scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="9dbf3-302">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-302">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-303">When run, the delegate will be passed the completed task as an argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-303">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="9dbf3-304">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-304">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-305">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-305">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-306">The continuation uses a specified scheduler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-306">The continuation uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-307">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-307">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-308">L'oggetto restituito <xref:System.Threading.Tasks.Task> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente, se viene completato a causa di completamento dell'esecuzione fino al completamento, generare un errore a causa di un'eccezione non gestita o interrotta in modo prematuro perché annullata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-308">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-309">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-309">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-310">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-310">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9dbf3-311">-or-  The <paramref name="scheduler" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-311">-or-  The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="9dbf3-312">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-312">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-313">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-313">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9dbf3-314">An object representing data to be used by the continuation action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-314">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-315">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-315">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-316">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-316">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-317">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-317">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-318">L'oggetto restituito <xref:System.Threading.Tasks.Task> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente, se viene completato a causa di completamento dell'esecuzione fino al completamento, generare un errore a causa di un'eccezione non gestita o interrotta in modo prematuro perché annullata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-318">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-319">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-319">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-320">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-320">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object, continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="9dbf3-321">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-321">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-322">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-322">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9dbf3-323">An object representing data to be used by the continuation action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-323">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="9dbf3-324">Options for when the continuation is scheduled and how it behaves.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-324">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="9dbf3-325">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-325">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-326">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-326">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-327">The continuation executes based on a set of specified conditions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-327">The continuation executes based on a set of specified conditions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-328">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-328">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-329">L'oggetto restituito <xref:System.Threading.Tasks.Task> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-329">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="9dbf3-330">Se i criteri di continuazione specificato tramite la `continuationOptions` parametro non vengono soddisfatte, verrà annullata l'attività di continuazione anziché pianificata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-330">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-331">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-331">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-332">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-332">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object, scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="9dbf3-333">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-333">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-334">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-334">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9dbf3-335">An object representing data to be used by the continuation action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-335">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="9dbf3-336">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-336">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-337">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-337">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-338">The continuation uses a specified scheduler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-338">The continuation uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-339">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-339">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-340">L'oggetto restituito <xref:System.Threading.Tasks.Task> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente, se viene completato a causa di completamento dell'esecuzione fino al completamento, generare un errore a causa di un'eccezione non gestita o interrotta in modo prematuro perché annullata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-340">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-341">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-341">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="9dbf3-342">An action to run according to the specified <c>continuationOptions</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-342">An action to run according to the specified <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="9dbf3-343">When run, the delegate will be passed the completed task as an argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-343">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-344">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-344">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="9dbf3-345">Options for when the continuation is scheduled and how it behaves.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-345">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="9dbf3-346">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-346">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="9dbf3-347">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-347">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-348">Creates a continuation that executes when the target task competes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-348">Creates a continuation that executes when the target task competes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
          <span data-ttu-id="9dbf3-349">The continuation receives a cancellation token and uses a specified scheduler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-349">The continuation receives a cancellation token and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-350">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-350">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-351">L'oggetto restituito <xref:System.Threading.Tasks.Task> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-351">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="9dbf3-352">Se i criteri specificati tramite il `continuationOptions` parametro non vengono soddisfatte, verrà annullata l'attività di continuazione anziché pianificata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-352">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-353">Di seguito è riportato un esempio di uso di ContinueWith per l'esecuzione di lavoro in background e nell'utente del thread di interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-353">The following is an example of using ContinueWith to run work both in the background and on the user interface threads.</span></span>  
  
```csharp  
  
private void Button1_Click(object sender, EventArgs e)  
{  
   var backgroundScheduler = TaskScheduler.Default;  
   var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();  
   Task.Factory.StartNew(delegate { DoBackgroundComputation(); },  
                         backgroundScheduler).  
   ContinueWith(delegate { UpdateUI(); }, uiScheduler).  
                ContinueWith(delegate { DoAnotherBackgroundComputation(); },  
                             backgroundScheduler).  
                ContinueWith(delegate { UpdateUIAgain(); }, uiScheduler);  
}  
  
```  
  
```vb  
  
Private Sub Button1_Click(ByVal sender As System.Object,   
                          ByVal e As System.EventArgs) Handles Button1.Click  
   Dim backgroundScheduler = TaskScheduler.Default  
   Dim uiScheduler = TaskScheduler.FromCurrentSynchronizationContext()  
  
   Task.Factory.StartNew(Sub()  
                           DoBackgroundComputation()  
                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  
                            UpdateUI()  
                         End Sub, uiScheduler).ContinueWith(Sub(t)  
                            DoAnotherBackgroundComputation()  
                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  
                            UpdateUIAgain()  
                         End Sub, uiScheduler)  
End Sub  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-354">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-354">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-355">The <paramref name="continuationAction" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-355">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
          <span data-ttu-id="9dbf3-356">-or-  The <paramref name="scheduler" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-356">-or-  The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-357">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-357">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="9dbf3-358">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-358">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-359">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-359">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9dbf3-360">An object representing data to be used by the continuation action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-360">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-361">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-361">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="9dbf3-362">Options for when the continuation is scheduled and how it behaves.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-362">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="9dbf3-363">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-363">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="9dbf3-364">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-364">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-365">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-365">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-366">The continuation executes based on a set of specified conditions and uses a specified scheduler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-366">The continuation executes based on a set of specified conditions and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-367">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-367">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-368">L'oggetto restituito <xref:System.Threading.Tasks.Task> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-368">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="9dbf3-369">Se i criteri specificati tramite il `continuationOptions` parametro non vengono soddisfatte, verrà annullata l'attività di continuazione anziché pianificata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-369">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-370">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-370">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-371">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-371">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-372">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-372">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith continuationFunction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-373">Tipo del risultato prodotto dalla continuazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-373">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="9dbf3-374">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-374">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-375">When run, the delegate will be passed the completed task as an argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-375">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-376">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes and returns a value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-376">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes and returns a value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-377">A new continuation task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-377">A new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-378">L'oggetto restituito <xref:System.Threading.Tasks.Task%601> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente, se viene completato a causa di completamento dell'esecuzione fino al completamento, generare un errore a causa di un'eccezione non gestita o interrotta in modo prematuro perché annullata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-378">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-379">Nell'esempio seguente viene illustrato come utilizzare il metodo ContinueWith:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-379">The following example shows how to use the ContinueWith method:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationsimple.cs#03)]
 [!code-vb[System.Threading.Tasks.Task#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationsimple.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-380">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-380">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-381">The <paramref name="continuationFunction" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-381">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-382">Tipo del risultato prodotto dalla continuazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-382">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="9dbf3-383">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-383">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-384">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-384">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9dbf3-385">An object representing data to be used by the continuation function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-385">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-386">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-386">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-387">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-387">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-388">L'oggetto restituito <xref:System.Threading.Tasks.Task%601> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente, se viene completato a causa di completamento dell'esecuzione fino al completamento, generare un errore a causa di un'eccezione non gestita o interrotta in modo prematuro perché annullata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-388">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-389">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-389">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-390">Tipo del risultato prodotto dalla continuazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-390">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="9dbf3-391">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-391">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-392">When run, the delegate will be passed the completed task as an argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-392">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-393">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-393">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-394">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-394">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="9dbf3-395">The continuation receives a cancellation token.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-395">The continuation receives a cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-396">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-396">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-397">L'oggetto restituito <xref:System.Threading.Tasks.Task%601> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente, se viene completato a causa di completamento dell'esecuzione fino al completamento, generare un errore a causa di un'eccezione non gestita o interrotta in modo prematuro perché annullata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-397">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-398">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-398">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
          <span data-ttu-id="9dbf3-399">-or-  The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-399">-or-  The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-400">The <paramref name="continuationFunction" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-400">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-401">Tipo del risultato prodotto dalla continuazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-401">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="9dbf3-402">A function to run according to the condition specified in <c>continuationOptions</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-402">A function to run according to the condition specified in <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="9dbf3-403">When run, the delegate will be passed the completed task as an argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-403">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="9dbf3-404">Options for when the continuation is scheduled and how it behaves.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-404">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="9dbf3-405">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-405">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-406">Creates a continuation that executes according to the specified continuation options and returns a value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-406">Creates a continuation that executes according to the specified continuation options and returns a value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-407">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-407">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-408">L'oggetto restituito <xref:System.Threading.Tasks.Task%601> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-408">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="9dbf3-409">Se i criteri di continuazione specificato tramite la `continuationOptions` parametro non vengono soddisfatte, verrà annullata l'attività di continuazione anziché pianificata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-409">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-410">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-410">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-411">The <paramref name="continuationFunction" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-411">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-412">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-412">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult), scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-413">Tipo del risultato prodotto dalla continuazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-413">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="9dbf3-414">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-414">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-415">When run, the delegate will be passed the completed task as an argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-415">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="9dbf3-416">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-416">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-417">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-417">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="9dbf3-418">The continuation uses a specified scheduler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-418">The continuation uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-419">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-419">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-420">L'oggetto restituito <xref:System.Threading.Tasks.Task%601> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente, se viene completato a causa di completamento dell'esecuzione fino al completamento, generare un errore a causa di un'eccezione non gestita o interrotta in modo prematuro perché annullata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-420">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-421">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-421">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-422">The <paramref name="continuationFunction" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-422">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="9dbf3-423">-or-  The <paramref name="scheduler" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-423">-or-  The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-424">Tipo del risultato prodotto dalla continuazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-424">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="9dbf3-425">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-425">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-426">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-426">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9dbf3-427">An object representing data to be used by the continuation function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-427">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-428">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-428">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-429">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-429">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="9dbf3-430">The continuation receives caller-supplied state information and a cancellation token.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-430">The continuation receives caller-supplied state information and a cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-431">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-431">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-432">L'oggetto restituito <xref:System.Threading.Tasks.Task%601> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente, se viene completato a causa di completamento dell'esecuzione fino al completamento, generare un errore a causa di un'eccezione non gestita o interrotta in modo prematuro perché annullata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-432">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-433">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-433">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-434">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-434">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object, continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-435">Tipo del risultato prodotto dalla continuazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-435">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="9dbf3-436">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-436">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-437">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-437">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9dbf3-438">An object representing data to be used by the continuation function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-438">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="9dbf3-439">Options for when the continuation is scheduled and how it behaves.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-439">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="9dbf3-440">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-440">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-441">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-441">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-442">The continuation receives caller-supplied state information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-442">The continuation receives caller-supplied state information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-443">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-443">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-444">L'oggetto restituito <xref:System.Threading.Tasks.Task%601> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-444">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="9dbf3-445">Se i criteri di continuazione specificato tramite la `continuationOptions` parametro non vengono soddisfatte, verrà annullata l'attività di continuazione anziché pianificata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-445">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-446">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-446">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-447">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-447">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-448">Tipo del risultato prodotto dalla continuazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-448">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="9dbf3-449">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-449">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-450">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-450">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9dbf3-451">An object representing data to be used by the continuation function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-451">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="9dbf3-452">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-452">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-453">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-453">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-454">The continuation receives caller-supplied state information and uses a specified scheduler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-454">The continuation receives caller-supplied state information and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-455">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-455">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-456">L'oggetto restituito <xref:System.Threading.Tasks.Task%601> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente, se viene completato a causa di completamento dell'esecuzione fino al completamento, generare un errore a causa di un'eccezione non gestita o interrotta in modo prematuro perché annullata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-456">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-457">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-457">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-458">Tipo del risultato prodotto dalla continuazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-458">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="9dbf3-459">A function to run according to the specified <c>continuationOptions.</c></span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-459">A function to run according to the specified <c>continuationOptions.</c></span>
          </span>
          <span data-ttu-id="9dbf3-460">When run, the delegate will be passed the completed task as an argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-460">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-461">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-461">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="9dbf3-462">Options for when the continuation is scheduled and how it behaves.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-462">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="9dbf3-463">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-463">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="9dbf3-464">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-464">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-465">Creates a continuation that executes according to the specified continuation options and returns a value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-465">Creates a continuation that executes according to the specified continuation options and returns a value.</span>
          </span>
          <span data-ttu-id="9dbf3-466">The continuation is passed a cancellation token and uses a specified scheduler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-466">The continuation is passed a cancellation token and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-467">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-467">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-468">L'oggetto restituito <xref:System.Threading.Tasks.Task%601> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-468">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="9dbf3-469">Se i criteri specificati tramite il `continuationOptions` parametro non vengono soddisfatte, verrà annullata l'attività di continuazione anziché pianificata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-469">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-470">Nell'esempio seguente viene illustrato come utilizzare il metodo ContinueWith con opzioni di continuazione:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-470">The following example shows how to use the ContinueWith method with continuation options:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Task#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-471">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-471">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
          <span data-ttu-id="9dbf3-472">-or-  The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-472">-or-  The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-473">The <paramref name="continuationFunction" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-473">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="9dbf3-474">-or-  The <paramref name="scheduler" /> argument is null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-474">-or-  The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-475">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-475">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-476">Tipo del risultato prodotto dalla continuazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-476">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="9dbf3-477">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-477">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="9dbf3-478">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-478">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9dbf3-479">An object representing data to be used by the continuation function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-479">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-480">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-480">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="9dbf3-481">Options for when the continuation is scheduled and how it behaves.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-481">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="9dbf3-482">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-482">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="9dbf3-483">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-483">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-484">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-484">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="9dbf3-485">The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-485">The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-486">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-486">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-487">L'oggetto restituito <xref:System.Threading.Tasks.Task%601> non verrà pianificato per l'esecuzione fino al completamento dell'attività corrente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-487">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="9dbf3-488">Se i criteri specificati tramite il `continuationOptions` parametro non vengono soddisfatte, verrà annullata l'attività di continuazione anziché pianificata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-488">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-489">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-489">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-490">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-490">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-491">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-491">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.CreationOptions : System.Threading.Tasks.TaskCreationOptions" Usage="System.Threading.Tasks.Task.CreationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-492">Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-492">Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9dbf3-493">Oggetto <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> usato per creare questa attività.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-493">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentId">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; CurrentId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Nullable`1&lt;int32&gt; CurrentId" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CurrentId" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentId As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Nullable&lt;int&gt; CurrentId { Nullable&lt;int&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentId : Nullable&lt;int&gt;" Usage="System.Threading.Tasks.Task.CurrentId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-494">Returns the ID of the currently executing <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-494">Returns the ID of the currently executing <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9dbf3-495">Intero assegnato dal sistema all'attività attualmente in esecuzione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-495">An integer that was assigned by the system to the currently-executing task.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-496"><xref:System.Threading.Tasks.Task.CurrentId%2A> è un `static` (`Shared` in Visual Basic) proprietà usata per ottenere l'identificatore dell'attività attualmente in esecuzione dal codice che viene eseguita l'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-496"><xref:System.Threading.Tasks.Task.CurrentId%2A> is a `static` (`Shared` in Visual Basic) property that is used to get the identifier of the currently executing task from the code that the task is executing.</span></span> <span data-ttu-id="9dbf3-497">Differisce dal <xref:System.Threading.Tasks.Task.Id%2A> proprietà, che restituisce l'identificatore di un determinato <xref:System.Threading.Tasks.Task> istanza.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-497">It differs from the <xref:System.Threading.Tasks.Task.Id%2A> property, which returns the identifier of a particular <xref:System.Threading.Tasks.Task> instance.</span></span> <span data-ttu-id="9dbf3-498">Se si tenta di recuperare il <xref:System.Threading.Tasks.Task.CurrentId%2A> valore all'esterno del codice che esegue un'attività, la proprietà restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-498">If you attempt to retrieve the <xref:System.Threading.Tasks.Task.CurrentId%2A> value from outside the code that a task is executing, the property returns `null`.</span></span>  
  
 <span data-ttu-id="9dbf3-499">Si noti che sebbene collisioni sono molto rare, gli identificatori di attività non sono necessariamente essere univoco.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-499">Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.Id" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Delay">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-500">Creates a task that will complete after a time delay.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-500">Creates a task that will complete after a time delay.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (int millisecondsDelay);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(int32 millisecondsDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Delay (millisecondsDelay As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(int millisecondsDelay);" />
      <MemberSignature Language="F#" Value="static member Delay : int -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay millisecondsDelay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay">
          <span data-ttu-id="9dbf3-501">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-501">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-502">Creates a task that completes after a time delay.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-502">Creates a task that completes after a time delay.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-503">A task that represents the time delay.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-503">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-504">Il <xref:System.Threading.Tasks.Task.Delay%2A> metodo viene in genere utilizzato per ritardare l'operazione di tutte o parte di un'attività per un intervallo di tempo specificato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-504">The <xref:System.Threading.Tasks.Task.Delay%2A> method is typically used to delay the operation of all or part of a task for a specified time interval.</span></span> <span data-ttu-id="9dbf3-505">In genere, è stato introdotto il ritardo di tempo:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-505">Most commonly, the time delay is introduced:</span></span>  
  
-   <span data-ttu-id="9dbf3-506">AT Mostra l'inizio dell'attività, come nell'esempio seguente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-506">At the beginning of the task, as the following example shows.</span></span>  
  
     [!code-csharp[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#5)]
     [!code-vb[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#5)]  
  
-   <span data-ttu-id="9dbf3-507">Qualche minuto mentre l'attività è in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-507">Sometime while the task is executing.</span></span> <span data-ttu-id="9dbf3-508">In questo caso, la chiamata al <xref:System.Threading.Tasks.Task.Delay%2A> metodo viene eseguito come attività figlio all'interno di un'attività, come illustrato nell'esempio seguente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-508">In this case, the call to the <xref:System.Threading.Tasks.Task.Delay%2A> method executes as a child task within a task, as the following example shows.</span></span> <span data-ttu-id="9dbf3-509">Si noti che dopo l'attività che chiama la <xref:System.Threading.Tasks.Task.Delay%2A> metodo viene eseguito in modo asincrono, l'attività padre deve attendere il completamento tramite la `await` (parola chiave).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-509">Note that since the task that calls the <xref:System.Threading.Tasks.Task.Delay%2A> method executes asynchronously, the parent task must wait for it to complete by using the `await` keyword.</span></span>  
  
     [!code-csharp[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#7)]
     [!code-vb[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#7)]  
  
 <span data-ttu-id="9dbf3-510">Dopo il ritardo di tempo specificato, l'attività è stata completata nel <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-510">After the specified time delay, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="9dbf3-511">Il metodo dipende dall'orologio di sistema.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-511">This method depends on the system clock.</span></span> <span data-ttu-id="9dbf3-512">Ciò significa che il ritardo di tempo corrisponderanno circa la risoluzione del clock di sistema se la `millisecondsDelay` argomento è minore rispetto alla risoluzione del clock di sistema, è di circa 15 millisecondi nei sistemi Windows.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-512">This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-513">Nell'esempio seguente viene illustrato un utilizzo semplice del <xref:System.Threading.Tasks.Task.Delay%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-513">The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-514">The <paramref name="millisecondsDelay" /> argument is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-514">The <paramref name="millisecondsDelay" /> argument is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (TimeSpan delay);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(valuetype System.TimeSpan delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Delay (delay As TimeSpan) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(TimeSpan delay);" />
      <MemberSignature Language="F#" Value="static member Delay : TimeSpan -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay delay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="delay">
          <span data-ttu-id="9dbf3-515">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-515">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-516">Creates a task that completes after a specified time interval.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-516">Creates a task that completes after a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-517">A task that represents the time delay.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-517">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-518">Dopo il ritardo di tempo specificato, l'attività è stata completata <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-518">After the specified time delay, the task is completed in <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="9dbf3-519">Per gli scenari di utilizzo ed esempi aggiuntivi, vedere la documentazione per il <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> rapporto di overload.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-519">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="9dbf3-520">Il metodo dipende dall'orologio di sistema.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-520">This method depends on the system clock.</span></span> <span data-ttu-id="9dbf3-521">Ciò significa che il ritardo di tempo corrisponderanno circa la risoluzione del clock di sistema se la `delay` argomento è minore rispetto alla risoluzione del clock di sistema, è di circa 15 millisecondi nei sistemi Windows.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-521">This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-522">Nell'esempio seguente viene illustrato un utilizzo semplice del <xref:System.Threading.Tasks.Task.Delay%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-522">The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-523">
            <paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-523">
              <paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          </span>
          <span data-ttu-id="9dbf3-524">-or-  The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-524">-or-  The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (int millisecondsDelay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(int32 millisecondsDelay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(int millisecondsDelay, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Delay : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay (millisecondsDelay, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay">
          <span data-ttu-id="9dbf3-525">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-525">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-526">The cancellation token that will be checked prior to completing the returned task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-526">The cancellation token that will be checked prior to completing the returned task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-527">Creates a cancellable task that completes after a time delay.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-527">Creates a cancellable task that completes after a time delay.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-528">A task that represents the time delay.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-528">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-529">Se il token di annullamento viene segnalato prima che il ritardo di tempo specificato, una <xref:System.Threading.Tasks.TaskCanceledException> risultati dell'eccezione e l'attività viene completata nel <xref:System.Threading.Tasks.TaskStatus.Canceled> dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-529">If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  <span data-ttu-id="9dbf3-530">In caso contrario, l'attività è stata completata nel <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stato una volta trascorso l'intervallo di tempo specificato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-530">Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state once the specified time delay has elapsed.</span></span>  
  
 <span data-ttu-id="9dbf3-531">Per gli scenari di utilizzo ed esempi aggiuntivi, vedere la documentazione per il <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> rapporto di overload.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-531">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="9dbf3-532">Il metodo dipende dall'orologio di sistema.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-532">This method depends on the system clock.</span></span> <span data-ttu-id="9dbf3-533">Ciò significa che il ritardo di tempo corrisponderanno circa la risoluzione del clock di sistema se la `millisecondsDelay` argomento è minore rispetto alla risoluzione del clock di sistema, è di circa 15 millisecondi nei sistemi Windows.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-533">This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-534">Nell'esempio seguente viene avviata un'attività che include una chiamata al <xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29> metodo con un ritardo secondo uno.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-534">The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29> method with a one second delay.</span></span> <span data-ttu-id="9dbf3-535">Prima dell'intervallo di ritardo, il token viene annullato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-535">Before the delay interval elapses, the token is cancelled.</span></span> <span data-ttu-id="9dbf3-536">L'output dell'esempio mostra che, di conseguenza, un <xref:System.Threading.Tasks.TaskCanceledException> viene generata, nonché le attività <xref:System.Threading.Tasks.Task.Status%2A> è impostata su <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-536">The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-537">The <paramref name="millisecondsDelay" /> argument is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-537">The <paramref name="millisecondsDelay" /> argument is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="9dbf3-538">The task has been canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-538">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-539">The provided <paramref name="cancellationToken" /> has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-539">The provided <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (TimeSpan delay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(valuetype System.TimeSpan delay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(TimeSpan delay, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Delay : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay (delay, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="delay">
          <span data-ttu-id="9dbf3-540">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-540">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-541">The cancellation token that will be checked prior to completing the returned task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-541">The cancellation token that will be checked prior to completing the returned task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-542">Creates a cancellable task that completes after a specified time interval.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-542">Creates a cancellable task that completes after a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-543">A task that represents the time delay.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-543">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-544">Se il token di annullamento viene segnalato prima che il ritardo di tempo specificato, una <xref:System.Threading.Tasks.TaskCanceledException> risultati dell'eccezione e l'attività viene completata nel <xref:System.Threading.Tasks.TaskStatus.Canceled> dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-544">If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  <span data-ttu-id="9dbf3-545">In caso contrario, l'attività è stata completata nel <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stato una volta trascorso l'intervallo di tempo specificato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-545">Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state once the specified time delay has elapsed.</span></span>  
  
 <span data-ttu-id="9dbf3-546">Per gli scenari di utilizzo ed esempi aggiuntivi, vedere la documentazione per il <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> rapporto di overload.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-546">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="9dbf3-547">Il metodo dipende dall'orologio di sistema.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-547">This method depends on the system clock.</span></span> <span data-ttu-id="9dbf3-548">Ciò significa che il ritardo di tempo corrisponderanno circa la risoluzione del clock di sistema se la `delay` argomento è minore rispetto alla risoluzione del clock di sistema, è di circa 15 millisecondi nei sistemi Windows.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-548">This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-549">Nell'esempio seguente viene avviata un'attività che include una chiamata al <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> metodo con un ritardo di uno e-mezzo secondo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-549">The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method with a one-and-a-half second delay.</span></span> <span data-ttu-id="9dbf3-550">Prima dell'intervallo di ritardo, il token viene annullato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-550">Before the delay interval elapses, the token is cancelled.</span></span> <span data-ttu-id="9dbf3-551">L'output dell'esempio mostra che, di conseguenza, un <xref:System.Threading.Tasks.TaskCanceledException> viene generata, nonché le attività <xref:System.Threading.Tasks.Task.Status%2A> è impostata su <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-551">The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay4.vb#4)]  
  
 <span data-ttu-id="9dbf3-552">Si noti che in questo esempio include una potenziali race condition: dipende l'attività in esecuzione in modo asincrono il ritardo quando viene annullato il token.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-552">Note that this example includes a potential race condition: it depends on the task asynchronously executing the delay when the token is cancelled.</span></span> <span data-ttu-id="9dbf3-553">Anche se il secondo 1,5 ritardare la chiamata ai <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> metodo presume che probabilmente, tuttavia è possibile che la chiamata al <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> metodo potrebbe restituire prima che il token viene annullato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-553">Although the 1.5 second delay from the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method makes that assumption likely, it is nevertheless possible that the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method could return before the token is cancelled.</span></span> <span data-ttu-id="9dbf3-554">In tal caso, l'esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-554">In that case, the example produces the following output:</span></span>  
  
```  
Task t Status: RanToCompletion, Result: 42  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-555">
            <paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-555">
              <paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          </span>
          <span data-ttu-id="9dbf3-556">-or-  The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-556">-or-  The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="9dbf3-557">The task has been canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-557">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-558">The provided <paramref name="cancellationToken" /> has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-558">The provided <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-559">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-559">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="task.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-560">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-560">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-561">Il <xref:System.Threading.Tasks.Task> implementa la <xref:System.IDisposable> interfaccia perché utilizza internamente le risorse che implementano anch <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-561">The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>.</span></span> <span data-ttu-id="9dbf3-562">Tuttavia, in particolare se app è destinato ai [!INCLUDE[net_v45](~/includes/net-v45-md.md)] o versione successiva, non è necessario chiamare <xref:System.Threading.Tasks.Task.Dispose%2A> , a meno che le prestazioni o scalabilità test indica che, in base ai modelli di utilizzo, le prestazioni dell'app migliorerebbe eliminando delle attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-562">However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</span></span> <span data-ttu-id="9dbf3-563">Per altre informazioni, vedere [necessario per l'eliminazione delle attività?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) nella programmazione parallela con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-563">For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9dbf3-564">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-564">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="task.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="9dbf3-565">A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.Tasks.Task.Dispose" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-565">A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.Tasks.Task.Dispose" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-566">Disposes the <see cref="T:System.Threading.Tasks.Task" />, releasing all of its unmanaged resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-566">Disposes the <see cref="T:System.Threading.Tasks.Task" />, releasing all of its unmanaged resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-567">Il <xref:System.Threading.Tasks.Task> implementa la <xref:System.IDisposable> interfaccia perché utilizza internamente le risorse che implementano anch <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-567">The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>.</span></span> <span data-ttu-id="9dbf3-568">Tuttavia, in particolare se app è destinato ai [!INCLUDE[net_v45](~/includes/net-v45-md.md)] o versione successiva, non è necessario chiamare <xref:System.Threading.Tasks.Task.Dispose%2A> , a meno che le prestazioni o scalabilità test indica che, in base ai modelli di utilizzo, le prestazioni dell'app migliorerebbe eliminando delle attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-568">However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</span></span> <span data-ttu-id="9dbf3-569">Per altre informazioni, vedere [necessario per l'eliminazione delle attività?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) nella programmazione parallela con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-569">For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9dbf3-570">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-570">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          </span>
        </exception>
        <threadsafe>
          <span data-ttu-id="9dbf3-571">A differenza della maggior parte dei membri del <see cref="T:System.Threading.Tasks.Task" /> (classe), questo metodo non è thread-safe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-571">Unlike most of the members of the <see cref="T:System.Threading.Tasks.Task" /> class, this method is not thread-safe.</span>
          </span>
        </threadsafe>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public AggregateException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AggregateException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As AggregateException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AggregateException ^ Exception { AggregateException ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : AggregateException" Usage="System.Threading.Tasks.Task.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AggregateException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-572">Gets the <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-572">Gets the <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</span>
          </span>
          <span data-ttu-id="9dbf3-573">If the <see cref="T:System.Threading.Tasks.Task" /> completed successfully or has not yet thrown any exceptions, this will return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-573">If the <see cref="T:System.Threading.Tasks.Task" /> completed successfully or has not yet thrown any exceptions, this will return <see langword="null" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9dbf3-574">Oggetto <see cref="T:System.AggregateException" /> che ha causato l'interruzione anomala di <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-574">The <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-575">Le attività che generano eccezioni non gestite archiviare l'eccezione risultante e propagarlo eseguito il wrapping in un <xref:System.AggregateException> nelle chiamate a <xref:System.Threading.Tasks.Task.Wait%2A> o in accessi effettuati al <xref:System.Threading.Tasks.Task.Exception%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-575">Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a <xref:System.AggregateException> in calls to <xref:System.Threading.Tasks.Task.Wait%2A> or in accesses to the <xref:System.Threading.Tasks.Task.Exception%2A> property.</span></span> <span data-ttu-id="9dbf3-576">Qualsiasi eccezione non osservate dall'ora in cui che l'istanza dell'attività è sottoposto a garbage collection verranno propagate nel thread finalizzatore.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-576">Any exceptions not observed by the time the task instance is garbage collected will be propagated on the finalizer thread.</span></span> <span data-ttu-id="9dbf3-577">Per ulteriori informazioni e un esempio, vedere [eccezioni (Task Parallel Library)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-577">For more information and an example, see [Exception Handling (Task Parallel Library)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Factory">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.TaskFactory Factory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.TaskFactory Factory" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Factory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Factory As TaskFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::TaskFactory ^ Factory { System::Threading::Tasks::TaskFactory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Factory : System.Threading.Tasks.TaskFactory" Usage="System.Threading.Tasks.Task.Factory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-578">Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> instances.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-578">Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> instances.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9dbf3-579">Oggetto factory in grado di creare una vasta gamma di oggetti <see cref="T:System.Threading.Tasks.Task" /> e <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-579">A factory object that can create a variety of <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-580">Questa proprietà restituisce un'istanza predefinita del <xref:System.Threading.Tasks.TaskFactory> classe che è identico a quello creato mediante la chiamata senza parametri <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType> costruttore.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-580">This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="9dbf3-581">Contiene i valori delle proprietà seguenti:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-581">It has the following property values:</span></span>  
  
|<span data-ttu-id="9dbf3-582">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9dbf3-582">Property</span></span>|<span data-ttu-id="9dbf3-583">Valore</span><span class="sxs-lookup"><span data-stu-id="9dbf3-583">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A?displayProperty=nameWithType>|<xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.ContinuationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskContinuationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.CreationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskCreationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.Scheduler%2A?displayProperty=nameWithType>|<span data-ttu-id="9dbf3-584">`null`, o <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="9dbf3-584">`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span></span>|  
  
 <span data-ttu-id="9dbf3-585">L'utilizzo più comune di questa proprietà consiste nel creare e avviare una nuova attività in una singola chiamata al <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-585">The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9dbf3-586">Inizia con il [!INCLUDE[net_v45](~/includes/net-v45-md.md)], il <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> metodo fornisce il modo più semplice per creare un <xref:System.Threading.Tasks.Task> oggetto con valori di configurazione predefiniti.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-586">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a <xref:System.Threading.Tasks.Task> object with default configuration values.</span></span>  
  
 <span data-ttu-id="9dbf3-587">L'esempio seguente usa il metodo statico <xref:System.Threading.Tasks.Task.Factory%2A> proprietà eseguire due chiamate al <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-587">The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9dbf3-588">Il primo popola una matrice con i nomi dei file nella directory di documenti dell'utente, mentre il secondo popola una matrice con i nomi delle sottodirectory della directory documenti dell'utente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-588">The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="9dbf3-589">Chiama quindi il <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> (metodo), che visualizza informazioni sul numero di file e directory in due matrici dopo le prime due attività ha completato l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-589">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskFactory" />
      </Docs>
    </Member>
    <Member MemberName="FromCanceled">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task FromCanceled (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task FromCanceled(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ FromCanceled(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member FromCanceled : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.FromCanceled cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-590">The cancellation token with which to complete the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-590">The cancellation token with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-591">Creates a <see cref="T:System.Threading.Tasks.Task" /> that's completed due to cancellation with a specified cancellation token.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-591">Creates a <see cref="T:System.Threading.Tasks.Task" /> that's completed due to cancellation with a specified cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-592">The canceled task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-592">The canceled task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-593">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-593">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FromCanceled&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromCanceled&lt;TResult&gt; (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromCanceled&lt;TResult&gt;(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromCanceled(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member FromCanceled : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.FromCanceled cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-594">Tipo del risultato restituito dall'attività.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-594">The type of the result returned by the task.</span>
          </span>
        </typeparam>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-595">The cancellation token with which to complete the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-595">The cancellation token with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-596">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed due to cancellation with a specified cancellation token.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-596">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed due to cancellation with a specified cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-597">The canceled task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-597">The canceled task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-598">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-598">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FromException">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task FromException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task FromException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ FromException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="static member FromException : Exception -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.FromException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">
          <span data-ttu-id="9dbf3-599">The exception with which to complete the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-599">The exception with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-600">Creates a <see cref="T:System.Threading.Tasks.Task" /> that has completed with a specified exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-600">Creates a <see cref="T:System.Threading.Tasks.Task" /> that has completed with a specified exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-601">The faulted task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-601">The faulted task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-602">Questo metodo crea un <xref:System.Threading.Tasks.Task> oggetto la cui proprietà <xref:System.Threading.Tasks.Task.Status%2A> è di proprietà <xref:System.Threading.Tasks.TaskStatus.Faulted> e il cui <xref:System.Threading.Tasks.Task.Exception%2A> contiene proprietà `exception`.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-602">This method creates a <xref:System.Threading.Tasks.Task> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.Faulted> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`.</span></span> <span data-ttu-id="9dbf3-603">Il metodo viene comunemente utilizzato quando si conosce immediatamente che il lavoro che esegue un'attività verrà generata un'eccezione prima di eseguire un percorso di codice più lungo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-603">The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</span></span> <span data-ttu-id="9dbf3-604">Per un esempio, vedere il <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> rapporto di overload.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-604">For an example, see the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromException&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromException&lt;TResult&gt; (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromException&lt;TResult&gt;(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromException``1(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="static member FromException : Exception -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.FromException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-605">Tipo del risultato restituito dall'attività.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-605">The type of the result returned by the task.</span>
          </span>
        </typeparam>
        <param name="exception">
          <span data-ttu-id="9dbf3-606">The exception with which to complete the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-606">The exception with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-607">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed with a specified exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-607">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed with a specified exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-608">The faulted task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-608">The faulted task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-609">Questo metodo crea un <xref:System.Threading.Tasks.Task%601> oggetto la cui proprietà <xref:System.Threading.Tasks.Task.Status%2A> è di proprietà <xref:System.Threading.Tasks.TaskStatus.Faulted> e il cui <xref:System.Threading.Tasks.Task.Exception%2A> contiene proprietà `exception`.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-609">This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.Faulted> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`.</span></span> <span data-ttu-id="9dbf3-610">Il metodo viene comunemente utilizzato quando si conosce immediatamente che il lavoro che esegue un'attività verrà generata un'eccezione prima di eseguire un percorso di codice più lungo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-610">The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</span></span> <span data-ttu-id="9dbf3-611">Nell'esempio viene illustrata una situazione di questo tipo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-611">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-612">Nell'esempio seguente è un'utilità della riga di comando che calcola il numero di byte nei file in ogni directory il cui nome è passato come argomento della riga di comando.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-612">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="9dbf3-613">Anziché l'esecuzione di un percorso più lungo di codice che crea un'istanza di un <xref:System.IO.FileInfo> dell'oggetto e recupera il valore del relativo <xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType> proprietà per ogni file nella directory, l'esempio chiama semplicemente il <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> i metodi per creare un'attività in errore se un particolare sottodirectory non esiste.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-613">Rather than executing a longer code path that instantiates a <xref:System.IO.FileInfo> object and retrieves the value of its <xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> method to create a faulted task if a particular subdirectory does not exist.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromResult&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromResult&lt;TResult&gt; (TResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromResult&lt;TResult&gt;(!!TResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromResult(Of TResult) (result As TResult) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromResult(TResult result);" />
      <MemberSignature Language="F#" Value="static member FromResult : 'Result -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.FromResult result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="result" Type="TResult" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-614">Tipo del risultato restituito dall'attività.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-614">The type of the result returned by the task.</span>
          </span>
        </typeparam>
        <param name="result">
          <span data-ttu-id="9dbf3-615">The result to store into the completed task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-615">The result to store into the completed task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-616">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed successfully with the specified result.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-616">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed successfully with the specified result.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-617">The successfully completed task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-617">The successfully completed task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-618">Questo metodo crea un <xref:System.Threading.Tasks.Task%601> oggetto la cui proprietà <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> è di proprietà `result` e il cui <xref:System.Threading.Tasks.Task.Status%2A> proprietà <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-618">This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is `result` and whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span></span> <span data-ttu-id="9dbf3-619">Il metodo viene comunemente utilizzato quando il valore restituito di un'attività è noto immediatamente senza l'esecuzione di un percorso di codice più lungo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-619">The method is commonly used when the return value of a task is immediately known without executing a longer code path.</span></span> <span data-ttu-id="9dbf3-620">Nell'esempio viene illustrata una situazione di questo tipo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-620">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="9dbf3-621">Per creare un oggetto attività che non restituisce un valore, recuperare l'oggetto attività il <xref:System.Threading.Tasks.Task.CompletedTask%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-621">To create a Task object that does not return a value, retrieve the Task object from the <xref:System.Threading.Tasks.Task.CompletedTask%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-622">Nell'esempio seguente è un'utilità della riga di comando che calcola il numero di byte nei file in ogni directory il cui nome è passato come argomento della riga di comando.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-622">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="9dbf3-623">Anziché l'esecuzione di un percorso più lungo di codice che crea un'istanza di un <xref:System.IO.FileStream> dell'oggetto e recupera il valore del relativo <xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType> proprietà per ogni file nella directory, l'esempio chiama semplicemente il <xref:System.Threading.Tasks.Task.FromResult%2A> metodo per creare un'attività il cui <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> proprietà è zero (0) se una directory è presenti file.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-623">Rather than executing a longer code path that instantiates a <xref:System.IO.FileStream> object and retrieves the value of its <xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromResult%2A> method to create a task whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is zero (0) if a directory has no files.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.CompletedTask" />
      </Docs>
    </Member>
    <Member MemberName="GetAwaiter">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.TaskAwaiter GetAwaiter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.GetAwaiter" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAwaiter () As TaskAwaiter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::TaskAwaiter GetAwaiter();" />
      <MemberSignature Language="F#" Value="member this.GetAwaiter : unit -&gt; System.Runtime.CompilerServices.TaskAwaiter" Usage="task.GetAwaiter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.TaskAwaiter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-624">Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-624">Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-625">An awaiter instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-625">An awaiter instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-626">Questo metodo è destinato ai fini del compilatore piuttosto che per l'utilizzo nel codice dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-626">This method is intended for compiler use rather than for use in application code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : int" Usage="System.Threading.Tasks.Task.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-627">Gets an ID for this <see cref="T:System.Threading.Tasks.Task" /> instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-627">Gets an ID for this <see cref="T:System.Threading.Tasks.Task" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9dbf3-628">Identificatore assegnato dal sistema a questa istanza di <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-628">The identifier that is assigned by the system to this <see cref="T:System.Threading.Tasks.Task" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-629">ID attività vengono assegnati su richiesta e non rappresenta necessariamente l'ordine delle attività vengono create istanze.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-629">Task IDs are assigned on-demand and do not necessarily represent the order in which task instances are created.</span></span> <span data-ttu-id="9dbf3-630">Si noti che sebbene collisioni sono molto rare, gli identificatori di attività non sono necessariamente essere univoco.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-630">Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</span></span>  
  
 <span data-ttu-id="9dbf3-631">Per ottenere l'ID attività dell'attività attualmente in esecuzione da all'interno di codice che tale attività è in esecuzione, usare il <xref:System.Threading.Tasks.Task.CurrentId%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-631">To get the task ID of the currently executing task from within code that that task is executing, use the <xref:System.Threading.Tasks.Task.CurrentId%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.CurrentId" />
      </Docs>
    </Member>
    <Member MemberName="IsCanceled">
      <MemberSignature Language="C#" Value="public bool IsCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCanceled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCanceled : bool" Usage="System.Threading.Tasks.Task.IsCanceled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-632">Gets whether this <see cref="T:System.Threading.Tasks.Task" /> instance has completed execution due to being canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-632">Gets whether this <see cref="T:System.Threading.Tasks.Task" /> instance has completed execution due to being canceled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9dbf3-633">
            <see langword="true" /> se l'attività è stata completata perché annullata; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-633">
              <see langword="true" /> if the task has completed due to being canceled; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-634">Un <xref:System.Threading.Tasks.Task> sarà impostato sul <xref:System.Threading.Tasks.TaskStatus.Canceled> dello stato in presenza delle condizioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-634">A <xref:System.Threading.Tasks.Task> will complete in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="9dbf3-635">Relativo <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> è stato contrassegnato per l'annullamento prima che l'attività ha iniziato l'esecuzione,</span><span class="sxs-lookup"><span data-stu-id="9dbf3-635">Its <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> was marked for cancellation before the task started executing,</span></span>  
  
-   <span data-ttu-id="9dbf3-636">L'attività ha confermato la richiesta di annullamento nel relativo già segnalato <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> generando un' <xref:System.OperationCanceledException> che contiene lo stesso <xref:System.Threading.CancellationToken>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-636">The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by throwing an <xref:System.OperationCanceledException> that bears the same <xref:System.Threading.CancellationToken>.</span></span>  
  
-   <span data-ttu-id="9dbf3-637">L'attività ha confermato la richiesta di annullamento nel relativo già segnalato <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> chiamando il <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> metodo sul <xref:System.Threading.CancellationToken>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-637">The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by calling the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> method on the <xref:System.Threading.CancellationToken>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9dbf3-638">Il recupero del valore del <xref:System.Threading.Tasks.Task.IsCanceled%2A> proprietà non blocca il thread chiamante fino al completamento dell'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-638">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCanceled%2A> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.Threading.Tasks.Task.IsCompleted" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.IsCompleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-639">Gets whether this <see cref="T:System.Threading.Tasks.Task" /> has completed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-639">Gets whether this <see cref="T:System.Threading.Tasks.Task" /> has completed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9dbf3-640">
            <see langword="true" /> se l'attività è stata completata; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-640">
              <see langword="true" /> if the task has completed; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-641"><xref:System.Threading.Tasks.Task.IsCompleted%2A> restituirà `true` quando l'attività è in uno dei tre stati finali: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, o <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-641"><xref:System.Threading.Tasks.Task.IsCompleted%2A> will return `true` when the task is in one of the three final states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9dbf3-642">Il recupero del valore del <xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType> proprietà non blocca il thread chiamante fino al completamento dell'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-642">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompletedSuccessfully">
      <MemberSignature Language="C#" Value="public bool IsCompletedSuccessfully { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompletedSuccessfully" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCompletedSuccessfully" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompletedSuccessfully As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompletedSuccessfully { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompletedSuccessfully : bool" Usage="System.Threading.Tasks.Task.IsCompletedSuccessfully" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFaulted">
      <MemberSignature Language="C#" Value="public bool IsFaulted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFaulted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsFaulted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFaulted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFaulted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFaulted : bool" Usage="System.Threading.Tasks.Task.IsFaulted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-643">Gets whether the <see cref="T:System.Threading.Tasks.Task" /> completed due to an unhandled exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-643">Gets whether the <see cref="T:System.Threading.Tasks.Task" /> completed due to an unhandled exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9dbf3-644">
            <see langword="true" /> se l'attività ha generato un'eccezione non gestita; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-644">
              <see langword="true" /> if the task has thrown an unhandled exception; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-645">Se <xref:System.Threading.Tasks.Task.IsFaulted%2A> viene `true`, l'attività <xref:System.Threading.Tasks.Task.Status%2A> è uguale a <xref:System.Threading.Tasks.TaskStatus.Faulted>e il relativo <xref:System.Threading.Tasks.Task.Exception%2A> proprietà è non null.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-645">If <xref:System.Threading.Tasks.Task.IsFaulted%2A> is `true`, the task's <xref:System.Threading.Tasks.Task.Status%2A> is equal to <xref:System.Threading.Tasks.TaskStatus.Faulted>, and its <xref:System.Threading.Tasks.Task.Exception%2A> property will be non-null.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9dbf3-646">Il recupero del valore del <xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType> proprietà non blocca il thread chiamante fino al completamento dell'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-646">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-647">Queues the specified work to run on the ThreadPool and returns a task or <see cref="T:System.Threading.Tasks.Task`1" /> handle for that work.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-647">Queues the specified work to run on the ThreadPool and returns a task or <see cref="T:System.Threading.Tasks.Task`1" /> handle for that work.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-648">Il <xref:System.Threading.Tasks.Task.Run%2A> metodo fornisce un set di overload che rendono più semplice avviare un'attività usando i valori predefiniti.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-648">The <xref:System.Threading.Tasks.Task.Run%2A> method provides a set of overloads that make it easy to start a task by using default values.</span></span> <span data-ttu-id="9dbf3-649">È un'alternativa semplificata al <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overload.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-649">It is a lightweight alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overloads.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Action ^ action);" />
      <MemberSignature Language="F#" Value="static member Run : Action -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="9dbf3-650">The work to execute asynchronously</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-650">The work to execute asynchronously</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-651">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-651">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-652">A task that represents the work queued to execute in the ThreadPool.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-652">A task that represents the work queued to execute in the ThreadPool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-653">Il <xref:System.Threading.Tasks.Task.Run%2A> metodo consente di creare ed eseguire un'attività in una singola chiamata al metodo, un'alternativa più semplice la <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-653">The <xref:System.Threading.Tasks.Task.Run%2A> method allows you to create and execute a task in a single method call and is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="9dbf3-654">Crea un'attività con i valori predefiniti seguenti:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-654">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="9dbf3-655">Il token di annullamento è <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-655">Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="9dbf3-656">Il relativo <xref:System.Threading.Tasks.Task.CreationOptions%2A> valore della proprietà è <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-656">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="9dbf3-657">Usa l'utilità di pianificazione predefinita.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-657">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="9dbf3-658">Per informazioni sulla gestione delle eccezioni generate dalle operazioni di attività, vedere [eccezioni](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-658">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-659">L'esempio seguente definisce una `ShowThreadInfo` metodo che visualizza il <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> del thread corrente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-659">The following example defines a `ShowThreadInfo` method  that displays the <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> of the current thread.</span></span> <span data-ttu-id="9dbf3-660">Viene chiamato direttamente dal thread dell'applicazione e viene chiamato dal <xref:System.Action> delegato passato al <xref:System.Threading.Tasks.Task.Run%28System.Action%29> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-660">It is called directly from the application thread, and is called from the <xref:System.Action> delegate passed to the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run11.cs#11)]
 [!code-vb[System.Threading.Tasks.Task.Run#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run11.vb#11)]  
  
 <span data-ttu-id="9dbf3-661">Nell'esempio seguente è simile a quella precedente, ad eccezione del fatto che viene utilizzata un'espressione lambda per definire il codice di cui l'attività da eseguire.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-661">The following example is similar to the previous one, except that it uses a lambda expression to define the code that the task is to execute.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run6.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Run#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run6.vb#3)]  
  
 <span data-ttu-id="9dbf3-662">Gli esempi mostrano che l'attività asincrona viene eseguita su un thread diverso rispetto al thread principale dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-662">The examples show that the asynchronous task executes on a different thread than the main application thread.</span></span>  
  
 <span data-ttu-id="9dbf3-663">La chiamata al <xref:System.Threading.Tasks.Task.Wait%2A> metodo assicura che l'attività viene completata e visualizza il relativo output prima della chiusura dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-663">The call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that the task completes and displays its output before the application ends.</span></span> <span data-ttu-id="9dbf3-664">In caso contrario, è possibile che il `Main` metodo verrà completato prima del completamento dell'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-664">Otherwise, it is possible that the `Main` method will complete before the task finishes.</span></span>  
  
 <span data-ttu-id="9dbf3-665">Nell'esempio seguente viene illustrato il <xref:System.Threading.Tasks.Task.Run%28System.Action%29> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-665">The following example illustrates the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span> <span data-ttu-id="9dbf3-666">Definisce una matrice di nomi di directory e avvia un'attività separata per recuperare i nomi di file in ogni directory.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-666">It defines an array of directory names and starts a separate task to retrieve the file names in each directory.</span></span> <span data-ttu-id="9dbf3-667">Tutte le attività di scrivono i nomi dei file in un singolo <xref:System.Collections.Concurrent.ConcurrentBag%601> oggetto.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-667">All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span> <span data-ttu-id="9dbf3-668">Nell'esempio viene quindi chiamato il <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> metodo per garantire che tutte le attività completate e quindi visualizza un conteggio del numero totale dei nomi file da scrivere il <xref:System.Collections.Concurrent.ConcurrentBag%601> oggetto.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-668">The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-669">The <paramref name="action" /> parameter was <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-669">The <paramref name="action" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run (function As Func(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Func&lt;System::Threading::Tasks::Task ^&gt; ^ function);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="9dbf3-670">The work to execute asynchronously</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-670">The work to execute asynchronously</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-671">Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-671">Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-672">A task that represents a proxy for the task returned by <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-672">A task that represents a proxy for the task returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-673">Per informazioni sulla gestione delle eccezioni generate dalle operazioni di attività, vedere [eccezioni](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-673">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-674">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-674">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Action * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run (action, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="9dbf3-675">The work to execute asynchronously</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-675">The work to execute asynchronously</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-676">A cancellation token that can be used to cancel the work</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-676">A cancellation token that can be used to cancel the work</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-677">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-677">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span>
          </span>
          <span data-ttu-id="9dbf3-678">A cancellation token allows the work to be cancelled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-678">A cancellation token allows the work to be cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-679">A task that represents the work queued to execute in the thread pool.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-679">A task that represents the work queued to execute in the thread pool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-680">Se viene richiesto l'annullamento prima che l'attività viene avviata l'esecuzione, l'attività non viene eseguito.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-680">If cancellation is requested before the task begins execution, the task does not execute.</span></span> <span data-ttu-id="9dbf3-681">Invece è impostata il <xref:System.Threading.Tasks.TaskStatus.Canceled> lo stato e genera un <xref:System.Threading.Tasks.TaskCanceledException> (eccezione).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-681">Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.</span></span>  
  
 <span data-ttu-id="9dbf3-682">Il <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> metodo è un'alternativa più semplice la <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-682">The <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9dbf3-683">Crea un'attività con i valori predefiniti seguenti:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-683">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="9dbf3-684">Il relativo <xref:System.Threading.Tasks.Task.CreationOptions%2A> valore della proprietà è <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-684">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="9dbf3-685">Usa l'utilità di pianificazione predefinita.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-685">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="9dbf3-686">Per informazioni sulla gestione delle eccezioni generate dalle operazioni di attività, vedere [eccezioni](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-686">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-687">L'esempio seguente chiama il <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> metodo per creare un'attività che scorre i file nella directory C:\Windows\System32.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-687">The following example calls the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="9dbf3-688">L'espressione lambda chiama il <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> metodo per aggiungere informazioni su ogni file da un <xref:System.Collections.Generic.List%601> oggetto.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-688">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="9dbf3-689">Ogni attività annidata richiamato da scollegata il <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> ciclo controlla lo stato del token di annullamento e, se viene richiesto l'annullamento, chiama il <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-689">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9dbf3-690">Il <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> metodo genera un <xref:System.OperationCanceledException> eccezione gestita in un `catch` bloccare quando il thread chiamante chiama il <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-690">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Run#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-691">The <paramref name="action" /> parameter was <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-691">The <paramref name="action" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="9dbf3-692">The task has been canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-692">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-693">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-693">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Func&lt;System::Threading::Tasks::Task ^&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="9dbf3-694">The work to execute asynchronously.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-694">The work to execute asynchronously.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-695">A cancellation token that should be used to cancel the work.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-695">A cancellation token that should be used to cancel the work.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-696">Queues the specified work to run on the thread pool and returns a proxy for the task returned by <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-696">Queues the specified work to run on the thread pool and returns a proxy for the task returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-697">A task that represents a proxy for the task returned by <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-697">A task that represents a proxy for the task returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-698">Per informazioni sulla gestione delle eccezioni generate dalle operazioni di attività, vedere [eccezioni](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-698">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-699">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-699">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="9dbf3-700">The task has been canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-700">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-701">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-701">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run(Of TResult) (function As Func(Of Task(Of TResult))) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ function);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-702">Tipo del risultato restituito dall'attività proxy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-702">The type of the result returned by the proxy task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="9dbf3-703">The work to execute asynchronously</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-703">The work to execute asynchronously</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-704">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-704">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-705">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-705">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-706">Per informazioni sulla gestione delle eccezioni generate dalle operazioni di attività, vedere [eccezioni](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-706">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-707">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-707">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run(Of TResult) (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;TResult&gt; ^ function);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-708">Tipo restituito dell'attività.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-708">The return type of the task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="9dbf3-709">The work to execute asynchronously.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-709">The work to execute asynchronously.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-710">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task`1" /> object that represents that work.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-710">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task`1" /> object that represents that work.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-711">A task object that represents the work queued to execute in the thread pool.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-711">A task object that represents the work queued to execute in the thread pool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-712">Il <xref:System.Threading.Tasks.Task.Run%2A> metodo è un'alternativa più semplice la <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-712">The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9dbf3-713">Crea un'attività con i valori predefiniti seguenti:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-713">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="9dbf3-714">Il token di annullamento è <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-714">Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="9dbf3-715">Il relativo <xref:System.Threading.Tasks.Task.CreationOptions%2A> valore della proprietà è <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-715">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="9dbf3-716">Usa l'utilità di pianificazione predefinita.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-716">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="9dbf3-717">Per informazioni sulla gestione delle eccezioni generate dalle operazioni di attività, vedere [eccezioni](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-717">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-718">L'esempio seguente viene contato il numero approssimativo di parole nei file di testo che rappresentano documentazione pubblicate.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-718">The following example counts the approximate number of words in text files that represent published books.</span></span> <span data-ttu-id="9dbf3-719">Ogni attività è responsabile dell'apertura di un file, leggere l'intero contenuto in modo asincrono e calcolare il conteggio di word usando un'espressione regolare.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-719">Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression.</span></span> <span data-ttu-id="9dbf3-720">Il <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> metodo viene chiamato per garantire che tutte le attività vengano completate prima di visualizzare il numero di parole di ogni libro nella console.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-720">The <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method is called to ensure that all tasks have completed before  displaying the word count of each book to the console.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run3.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Run#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run3.vb#2)]  
  
 <span data-ttu-id="9dbf3-721">L'espressione regolare `\p{P}*\s+` corrisponde a nessuno, uno o più caratteri di punteggiatura, seguiti da uno o più caratteri spazio vuoto.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-721">The regular expression `\p{P}*\s+` matches zero, one, or more punctuation characters followed by one or more whitespace characters.</span></span> <span data-ttu-id="9dbf3-722">Si presuppone che il numero complessivo di corrispondenze uguale al conteggio approssimativo word.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-722">It assumes that the total number of matches equals the approximate word count.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-723">The <paramref name="function" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-723">The <paramref name="function" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-724">Tipo del risultato restituito dall'attività proxy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-724">The type of the result returned by the proxy task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="9dbf3-725">The work to execute asynchronously</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-725">The work to execute asynchronously</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-726">A cancellation token that should be used to cancel the work</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-726">A cancellation token that should be used to cancel the work</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-727">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-727">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-728">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-728">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-729">Per informazioni sulla gestione delle eccezioni generate dalle operazioni di attività, vedere [eccezioni](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-729">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-730">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-730">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="9dbf3-731">The task has been canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-731">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-732">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-732">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-733">Tipo di risultato dell'attività.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-733">The result type of the task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="9dbf3-734">The work to execute asynchronously</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-734">The work to execute asynchronously</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-735">A cancellation token that should be used to cancel the work</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-735">A cancellation token that should be used to cancel the work</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-736">Queues the specified work to run on the thread pool and returns a <see langword="Task(TResult)" /> object that represents that work.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-736">Queues the specified work to run on the thread pool and returns a <see langword="Task(TResult)" /> object that represents that work.</span>
          </span>
          <span data-ttu-id="9dbf3-737">A cancellation token allows the work to be cancelled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-737">A cancellation token allows the work to be cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-738">A <see langword="Task(TResult)" /> that represents the work queued to execute in the thread pool.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-738">A <see langword="Task(TResult)" /> that represents the work queued to execute in the thread pool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-739">Se viene richiesto l'annullamento prima che l'attività viene avviata l'esecuzione, l'attività non viene eseguito.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-739">If cancellation is requested before the task begins execution, the task does not execute.</span></span> <span data-ttu-id="9dbf3-740">Invece è impostata il <xref:System.Threading.Tasks.TaskStatus.Canceled> lo stato e genera un <xref:System.Threading.Tasks.TaskCanceledException> (eccezione).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-740">Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.</span></span>  
  
 <span data-ttu-id="9dbf3-741">Il <xref:System.Threading.Tasks.Task.Run%2A> metodo è un'alternativa più semplice la <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-741">The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="9dbf3-742">Crea un'attività con i valori predefiniti seguenti:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-742">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="9dbf3-743">Il relativo <xref:System.Threading.Tasks.Task.CreationOptions%2A> valore della proprietà è <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-743">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="9dbf3-744">Usa l'utilità di pianificazione predefinita.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-744">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="9dbf3-745">Per informazioni sulla gestione delle eccezioni generate dalle operazioni di attività, vedere [eccezioni](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-745">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-746">L'esempio seguente crea 20 attività che eseguirà un ciclo fino a quando non viene incrementato un contatore in un valore di 2 milioni.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-746">The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</span></span> <span data-ttu-id="9dbf3-747">Quando le prime 10 attività raggiungono 2 milioni, il token di annullamento viene annullato e vengono annullate tutte le attività il cui contatori non hanno raggiunto 2 milioni.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-747">When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</span></span> <span data-ttu-id="9dbf3-748">L'esempio Mostra output possibili.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-748">The example shows possible output.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]
 [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]  
  
 <span data-ttu-id="9dbf3-749">Anziché utilizzare il <xref:System.AggregateException.InnerExceptions%2A> proprietà per esaminare le eccezioni, l'esempio scorre tutte le attività per determinare che sono stati completati correttamente e che sono state annullate.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-749">Instead of using the <xref:System.AggregateException.InnerExceptions%2A> property to   examine exceptions, the example iterates all tasks to determine which have completed successfully and which have been cancelled.</span></span> <span data-ttu-id="9dbf3-750">Per coloro che sono state completate, ma visualizza il valore restituito dall'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-750">For those that have completed, it displays the value returned by the task.</span></span>  
  
 <span data-ttu-id="9dbf3-751">Poiché l'annullamento è cooperativo, ogni attività possono decidere come rispondere all'annullamento.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-751">Because cancellation is cooperative, each task can decide how to respond to cancellation.</span></span> <span data-ttu-id="9dbf3-752">L'esempio seguente è simile alla prima, ad eccezione del fatto che, dopo che il token viene annullato, attività di restituire il numero di iterazioni vengono completati l'anziché generare un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-752">The following example is like the first, except that, once the token is cancelled, tasks return the number of iterations they've completed rather than throw an exception.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run28.cs#28)]
 [!code-vb[System.Threading.Tasks.Task.Run#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run28.vb#28)]  
  
 <span data-ttu-id="9dbf3-753">Nell'esempio viene comunque necessario gestire il <xref:System.AggregateException> eccezione, poiché tutte le attività che non hanno avviato quando viene richiesto l'annullamento comunque un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-753">The example still must handle the <xref:System.AggregateException> exception,   since any tasks that have not started when cancellation is requested still throw an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-754">The <paramref name="function" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-754">The <paramref name="function" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="9dbf3-755">The task has been canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-755">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-756">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-756">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RunSynchronously">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-757">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-757">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RunSynchronously">
      <MemberSignature Language="C#" Value="public void RunSynchronously ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunSynchronously() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.RunSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunSynchronously ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunSynchronously();" />
      <MemberSignature Language="F#" Value="member this.RunSynchronously : unit -&gt; unit" Usage="task.RunSynchronously " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-758">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-758">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-759">In genere, le attività vengono eseguite in modo asincrono in un pool di thread e non blocca il thread chiamante.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-759">Ordinarily, tasks are executed asynchronously on a thread pool thread and do not block the calling thread.</span></span> <span data-ttu-id="9dbf3-760">Le attività eseguite chiamando il <xref:System.Threading.Tasks.Task.RunSynchronously> metodo associati corrente <xref:System.Threading.Tasks.TaskScheduler> e vengono eseguiti nel thread chiamante.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-760">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method are associated with the current <xref:System.Threading.Tasks.TaskScheduler> and are run on the calling thread.</span></span> <span data-ttu-id="9dbf3-761">Se l'utilità di pianificazione di destinazione non supporta l'esecuzione di questa attività nel thread chiamante, verrà pianificata l'attività per l'esecuzione nell'utilità di pianificazione, e blocca il thread chiamante fino a quando l'attività ha completato l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-761">If the target scheduler does not support running this task on the calling thread, the task will be scheduled for execution on the scheduler, and the calling thread will block until the task has completed execution.</span></span> <span data-ttu-id="9dbf3-762">Anche se l'attività viene eseguita in modo sincrono, il thread chiamante deve ancora chiamare <xref:System.Threading.Tasks.Task.Wait%2A> per gestire le eccezioni che potrebbe generare l'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-762">Even though the task runs synchronously, the calling thread should still call <xref:System.Threading.Tasks.Task.Wait%2A> to handle any exceptions that the task might throw.</span></span>  <span data-ttu-id="9dbf3-763">Per ulteriori informazioni sulla gestione delle eccezioni, vedere [eccezioni](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-763">For more information on exception handling, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 <span data-ttu-id="9dbf3-764">Le attività eseguite chiamando il <xref:System.Threading.Tasks.Task.RunSynchronously%2A> viene creata un'istanza di metodo chiamando un <xref:System.Threading.Tasks.Task> o <xref:System.Threading.Tasks.Task%601> costruttore della classe.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-764">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor.</span></span> <span data-ttu-id="9dbf3-765">L'attività da eseguire in modo sincrono è necessario racchiudere il <xref:System.Threading.Tasks.TaskStatus.Created> dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-765">The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus.Created> state.</span></span> <span data-ttu-id="9dbf3-766">Un'attività può essere avviata ed eseguire una sola volta.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-766">A task may be started and run only once.</span></span> <span data-ttu-id="9dbf3-767">Qualsiasi tentativo di pianificare un'attività risultati di un secondo tempo generano un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-767">Any attempts to schedule a task a second time results in an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-768">L'esempio seguente confronta un'attività eseguita chiamando il <xref:System.Threading.Tasks.Task.RunSynchronously%2A> (metodo) con uno eseguita in modo asincrono.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-768">The following example compares a task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method with one executed asynchronously.</span></span> <span data-ttu-id="9dbf3-769">In entrambi i casi, le attività di eseguire le espressioni lambda identici che consentono di visualizzare l'ID attività e l'ID del thread su cui l'esecuzione dell'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-769">In both cases, the tasks execute identical lambda expressions that display the task ID and the ID of the thread on which the task is running.</span></span> <span data-ttu-id="9dbf3-770">L'attività calcola la somma dei valori interi compresi tra 1 e 1.000.000.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-770">The task calculates the sum of the integers between 1 and 1,000,000.</span></span> <span data-ttu-id="9dbf3-771">Come illustrato nell'output dell'esempio, l'attività eseguita chiamando il <xref:System.Threading.Tasks.Task.RunSynchronously%2A> metodo viene eseguito nel thread dell'applicazione, mentre l'attività asincrona non lo è.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-771">As the output from the example shows, the task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method runs on the application thread, while the asynchronous task does not.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/cs/runsynchronously1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/vb/runsynchronously1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-772">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-772">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9dbf3-773">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-773">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="9dbf3-774">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-774">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RunSynchronously">
      <MemberSignature Language="C#" Value="public void RunSynchronously (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunSynchronously(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunSynchronously (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunSynchronously(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.RunSynchronously : System.Threading.Tasks.TaskScheduler -&gt; unit" Usage="task.RunSynchronously scheduler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler">
          <span data-ttu-id="9dbf3-775">The scheduler on which to attempt to run this task inline.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-775">The scheduler on which to attempt to run this task inline.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-776">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the <see cref="T:System.Threading.Tasks.TaskScheduler" /> provided.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-776">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the <see cref="T:System.Threading.Tasks.TaskScheduler" /> provided.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-777">Le attività eseguite chiamando il <xref:System.Threading.Tasks.Task.RunSynchronously%2A> viene creata un'istanza di metodo chiamando un <xref:System.Threading.Tasks.Task> o <xref:System.Threading.Tasks.Task%601> costruttore della classe.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-777">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor.</span></span> <span data-ttu-id="9dbf3-778">L'attività da eseguire in modo sincrono è necessario racchiudere il <xref:System.Threading.Tasks.TaskStatus.Created> dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-778">The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus.Created> state.</span></span> <span data-ttu-id="9dbf3-779">Un'attività può essere avviata ed eseguire una sola volta.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-779">A task may be started and run only once.</span></span> <span data-ttu-id="9dbf3-780">Qualsiasi tentativo di pianificare un'attività risultati di un secondo tempo generano un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-780">Any attempts to schedule a task a second time results in an exception.</span></span>  
  
 <span data-ttu-id="9dbf3-781">Se l'utilità di pianificazione di destinazione non supporta l'esecuzione di questa attività nel thread corrente, verrà pianificata l'attività per l'esecuzione nell'utilità di pianificazione e il thread corrente verrà bloccata fino al completamento dell'esecuzione dell'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-781">If the target scheduler does not support running this task on the current thread, the task will be scheduled for execution on the scheduler, and the current thread will block until the task has completed execution.</span></span> <span data-ttu-id="9dbf3-782">Per questo motivo, il thread chiamante non è necessario chiamare un metodo, ad esempio <xref:System.Threading.Tasks.Task.Wait%2A> per garantire che l'attività è stata completata l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-782">Because of this, the calling thread does not need to call a method such as <xref:System.Threading.Tasks.Task.Wait%2A> to ensure that the task has completed execution.</span></span> <span data-ttu-id="9dbf3-783">Per ulteriori informazioni sulla gestione delle eccezioni per le operazioni di attività, vedere [eccezioni](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-783">For more information on exception handling for task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-784">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-784">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-785">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-785">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9dbf3-786">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-786">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="9dbf3-787">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-787">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-788">Starts the <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-788">Starts the <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="task.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-789">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-789">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-790">Un'attività può essere avviata ed eseguire una sola volta.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-790">A task may be started and run only once.</span></span> <span data-ttu-id="9dbf3-791">Qualsiasi tentativo di pianificare un'attività di una seconda volta genererà un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-791">Any attempts to schedule a task a second time will result in an exception.</span></span>  
  
 <span data-ttu-id="9dbf3-792">Il <xref:System.Threading.Tasks.Task.Start%2A> viene utilizzata per eseguire un'attività che è stata creata chiamando uno del <xref:System.Threading.Tasks.Task> costruttori.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-792">The <xref:System.Threading.Tasks.Task.Start%2A> is used to execute a task that has been created by calling one of the <xref:System.Threading.Tasks.Task> constructors.</span></span> <span data-ttu-id="9dbf3-793">In genere, questo caso quando è necessario separare la creazione dell'attività dalla relativa esecuzione, ad esempio quando si esegue in modo condizionale le attività che è stato creato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-793">Typically, you do this when you need to separate the task's creation from its execution, such as when you conditionally execute tasks that you've created.</span></span> <span data-ttu-id="9dbf3-794">Nel caso più comune in cui non è necessario separare la creazione di istanze di attività di esecuzione, si consiglia di chiamare un overload del <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> o <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-794">For the more common case in which you don't need to separate  task instantiation from execution, we recommend that you call an overload of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="9dbf3-795">Per informazioni sulla gestione delle eccezioni generate dalle operazioni di attività, vedere [eccezioni](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-795">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-796">L'esempio seguente chiama il <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> costruttore per creare un'istanza di un nuovo <xref:System.Threading.Tasks.Task> oggetto che consente di visualizzare l'attività ID e l'ID thread gestito, quindi esegue un ciclo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-796">The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to instantiate a new <xref:System.Threading.Tasks.Task> object that displays its task ID and managed thread ID and then executes a loop.</span></span> <span data-ttu-id="9dbf3-797">Chiama quindi il <xref:System.Threading.Tasks.Task.Start%2A> metodo per eseguire l'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-797">It then calls the <xref:System.Threading.Tasks.Task.Start%2A> method to execute the task.</span></span>  <span data-ttu-id="9dbf3-798">Poiché si tratta di un'applicazione console, la chiamata al <xref:System.Threading.Tasks.Task.Wait%2A> metodo è fondamentale per impedire l'app da terminare prima che l'attività viene completata l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-798">Since this is a console app, the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method is necessary to prevent the app from terminating before the task finishes execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Start#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.start/cs/Start1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Start#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.start/vb/Start1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-799">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-799">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9dbf3-800">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-800">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="9dbf3-801">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-801">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.Start : System.Threading.Tasks.TaskScheduler -&gt; unit" Usage="task.Start scheduler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler">
          <span data-ttu-id="9dbf3-802">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> with which to associate and execute this task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-802">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> with which to associate and execute this task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-803">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the specified <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-803">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the specified <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-804">Un'attività può essere avviata e solo una volta.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-804">A task may only be started and run only once.</span></span> <span data-ttu-id="9dbf3-805">Qualsiasi tentativo di pianificare un'attività di una seconda volta genererà un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-805">Any attempts to schedule a task a second time will result in an exception.</span></span>  
  
 <span data-ttu-id="9dbf3-806">Per informazioni sulla gestione delle eccezioni generate dalle operazioni di attività, vedere [eccezioni](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-806">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-807">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-807">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9dbf3-808">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-808">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="9dbf3-809">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-809">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-810">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-810">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskSchedulerException">
          <span data-ttu-id="9dbf3-811">The scheduler was unable to queue this task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-811">The scheduler was unable to queue this task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As TaskStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskStatus Status { System::Threading::Tasks::TaskStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Threading.Tasks.TaskStatus" Usage="System.Threading.Tasks.Task.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-812">Gets the <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-812">Gets the <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9dbf3-813">Oggetto <see cref="T:System.Threading.Tasks.TaskStatus" /> corrente di questa istanza dell'attività.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-813">The current <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-814">Il recupero del valore del <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> proprietà non blocca il thread chiamante fino al completamento dell'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-814">Retrieving the value of the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 <span data-ttu-id="9dbf3-815">Per ulteriori informazioni e un esempio, vedere [concatenamento di attività tramite attività di continuazione](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md) e [procedura: annullare un'attività e i relativi figli](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-815">For more information and an example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md) and [How to: Cancel a Task and Its Children](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-816">L'esempio seguente crea 20 attività che eseguirà un ciclo fino a quando non viene incrementato un contatore in un valore di 2 milioni.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-816">The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</span></span> <span data-ttu-id="9dbf3-817">Quando le prime 10 attività raggiungono 2 milioni, il token di annullamento viene annullato e vengono annullate tutte le attività il cui contatori non hanno raggiunto 2 milioni.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-817">When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</span></span> <span data-ttu-id="9dbf3-818">Nell'esempio viene quindi esamina il <xref:System.Threading.Tasks.Task.Status%2A> proprietà di ogni attività per indicare se è stata completata o è stata annullata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-818">The example then examines the <xref:System.Threading.Tasks.Task.Status%2A> property of each task to indicate whether it completed successfully or was cancelled.</span></span> <span data-ttu-id="9dbf3-819">Per gli utenti che è stata completata, viene visualizzato il valore restituito dall'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-819">For those that completed, it displays the value returned by the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]
 [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.AsyncWaitHandle">
      <MemberSignature Language="C#" Value="System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property AsyncWaitHandle As WaitHandle Implements IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="property System::Threading::WaitHandle ^ System.IAsyncResult.AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Threading.Tasks.Task.System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncWaitHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-820">Gets a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-820">Gets a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9dbf3-821">Oggetto <see cref="T:System.Threading.WaitHandle" /> che può essere usato per attendere il completamento dell'attività.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-821">A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-822">Utilizzando la funzionalità di attesa fornita da <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> è preferibile usare <xref:System.IAsyncResult.AsyncWaitHandle%2A> per una funzionalità simile.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-822">Using the wait functionality provided by <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> is preferable to using <xref:System.IAsyncResult.AsyncWaitHandle%2A> for similar functionality.</span></span> <span data-ttu-id="9dbf3-823">Per altre informazioni, vedere la sezione "In attesa su attività" nella [basato su attività di programmazione asincrona](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) e [utilizzo di TPL con altri modelli asincroni](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-823">For more information, see the "Waiting on Tasks" section in [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Using TPL with Other Asynchronous Patterns](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-824">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-824">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.CompletedSynchronously">
      <MemberSignature Language="C#" Value="bool System.IAsyncResult.CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property CompletedSynchronously As Boolean Implements IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="C++ CLI" Value="property bool System.IAsyncResult.CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Threading.Tasks.Task.System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.CompletedSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-825">Gets an indication of whether the operation completed synchronously.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-825">Gets an indication of whether the operation completed synchronously.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9dbf3-826">
            <see langword="true" /> se l'operazione è stata completata in modo sincrono; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-826">
              <see langword="true" /> if the operation completed synchronously; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-827">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-827">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberSignature Language="F#" Value="member this.Wait : unit -&gt; unit" Usage="task.Wait " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-828">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-828">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-829"><xref:System.Threading.Tasks.Task.Wait%2A> è un metodo di sincronizzazione che fa sì che il thread chiamante attendere il completamento dell'attività corrente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-829"><xref:System.Threading.Tasks.Task.Wait%2A> is a synchronization method that causes the calling thread to wait until the current task has completed.</span></span> <span data-ttu-id="9dbf3-830">Se l'attività corrente non ha avviato l'esecuzione, il metodo di attesa tenta di rimuovere l'attività dall'utilità di pianificazione ed eseguirlo inline nel thread corrente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-830">If the current task has not started execution, the Wait method attempts to remove the task from the scheduler and execute it inline on the current thread.</span></span> <span data-ttu-id="9dbf3-831">Se non è in grado di eseguire tale operazione, o se l'attività corrente è già avviato l'esecuzione, si blocca il thread chiamante fino al completamento dell'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-831">If it is unable to do that, or if the current task has already started execution, it blocks the calling thread until the task completes.</span></span> <span data-ttu-id="9dbf3-832">Per altre informazioni, vedere [Task.Wait e "Inline"](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) nella programmazione parallela con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-832">For more information, see [Task.Wait and "Inlining"](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 <span data-ttu-id="9dbf3-833">Per ulteriori informazioni e un esempio, vedere [procedura: restare in attesa di una o più attività su completato](http://msdn.microsoft.com/library/79cb522b-9c93-46ed-b23a-c06908f3a374).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-833">For more information and an example, see [How to: Wait on One or More Tasks to Complete](http://msdn.microsoft.com/library/79cb522b-9c93-46ed-b23a-c06908f3a374).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-834">Nell'esempio seguente avvia un'attività che genera un milione integer casuale compreso tra 0 e 100 e calcola la Media.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-834">The following example starts a task that generates one million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="9dbf3-835">Nell'esempio viene utilizzato il <xref:System.Threading.Tasks.Task.Wait%2A> metodo per assicurarsi che l'attività viene completata prima della chiusura dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-835">The example uses the <xref:System.Threading.Tasks.Task.Wait%2A> method to ensure that the task completes before the application terminates.</span></span> <span data-ttu-id="9dbf3-836">In caso contrario, poiché si tratta di un'applicazione console, nell'esempio verrebbe chiuso prima che l'attività è possibile calcolare e visualizzare il valore medio.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-836">Otherwise, because this is a console application, the example would terminate before the task can compute and display the mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-837">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-837">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="9dbf3-838">The task was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-838">The task was canceled.</span>
          </span>
          <span data-ttu-id="9dbf3-839">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-839">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="9dbf3-840">-or-  An exception was thrown during the execution of the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-840">-or-  An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="9dbf3-841">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-841">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : int -&gt; bool" Usage="task.Wait millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="9dbf3-842">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-842">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-843">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified number of milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-843">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-844">
            <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-844">
              <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-845"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> è un metodo di sincronizzazione che fa sì che il thread chiamante di attesa per l'istanza corrente di attività completare fino a quando non si verifica una delle operazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-845"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="9dbf3-846">L'attività viene completata correttamente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-846">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="9dbf3-847">L'attività stessa viene annullata o genera un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-847">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="9dbf3-848">In questo caso, si gestisce un <xref:System.AggregateException> (eccezione).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-848">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="9dbf3-849">Il <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> proprietà contiene i dettagli sull'eccezione o le eccezioni.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-849">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="9dbf3-850">L'intervallo definito da `millisecondsTimeout` scade.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-850">The interval defined by `millisecondsTimeout` elapses.</span></span> <span data-ttu-id="9dbf3-851">In questo caso, il thread corrente riprende l'esecuzione e il metodo restituisce `false`.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-851">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-852">Nell'esempio seguente avvia un'attività che genera l'errore 5 milioni di integer casuale compreso tra 0 e 100 e calcola la Media.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-852">The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="9dbf3-853">Nell'esempio viene utilizzato il <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> metodo per attendere che l'applicazione è completata entro 150 millisecondi.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-853">The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> method to wait for the application to complete within 150 milliseconds.</span></span> <span data-ttu-id="9dbf3-854">Se l'applicazione viene completata, l'attività Visualizza la somma e Media dei numeri casuali che lo ha generato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-854">If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</span></span> <span data-ttu-id="9dbf3-855">Se è trascorso l'intervallo di timeout, verrà visualizzato un messaggio prima che venga terminato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-855">If the timeout interval has elapsed, the example displays a message before it terminates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait5.cs#5)]
 [!code-vb[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-856">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-856">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-857">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-857">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="9dbf3-858">The task was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-858">The task was canceled.</span>
          </span>
          <span data-ttu-id="9dbf3-859">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-859">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="9dbf3-860">-or-  An exception was thrown during the execution of the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-860">-or-  An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="9dbf3-861">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-861">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : System.Threading.CancellationToken -&gt; unit" Usage="task.Wait cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-862">A cancellation token to observe while waiting for the task to complete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-862">A cancellation token to observe while waiting for the task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-863">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-863">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
          <span data-ttu-id="9dbf3-864">The wait terminates if a cancellation token is canceled before the task completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-864">The wait terminates if a cancellation token is canceled before the task completes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-865">Il <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> metodo crea un periodo di attesa annullabile; vale a dire, altrimenti il thread corrente attendere finché non si verifica una delle operazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-865">The <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method creates a cancelable wait; that is, it causes the current thread to wait until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="9dbf3-866">Completamento dell'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-866">The task completes.</span></span>  
  
-   <span data-ttu-id="9dbf3-867">Il token di annullamento viene annullato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-867">The cancellation token is canceled.</span></span> <span data-ttu-id="9dbf3-868">In questo caso, la chiamata ai <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> metodo genera un <xref:System.OperationCanceledException>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-868">In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9dbf3-869">Annullamento di `cancellationToken` token di annullamento non influisce sulle attività in esecuzione a meno che non viene inoltre passato il token di annullamento e non è preparata gestire l'annullamento.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-869">Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</span></span> <span data-ttu-id="9dbf3-870">Passando il `cancellationToken` oggetto da questo metodo consente semplicemente l'attesa di essere annullata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-870">Passing the `cancellationToken` object to this method simply allows the wait to be canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-871">Nell'esempio seguente viene illustrato l'utilizzo semplice di un token di annullamento per annullare l'attesa del completamento dell'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-871">The following example illustrates the simple use of a cancellation token to cancel waiting for a task's completion.</span></span> <span data-ttu-id="9dbf3-872">Un'attività viene avviata, le chiamate di <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> metodo annullare uno qualsiasi dei token di annullamento dell'origine del token, quindi ritardi per cinque secondi.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-872">A task is launched, calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to cancel any of the token source's cancellation tokens, and then delays for five seconds.</span></span> <span data-ttu-id="9dbf3-873">Si noti che l'attività stessa non è stato passato il token di annullamento e non può essere annullata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-873">Note that the task itself has not been passed the cancellation token and is not cancelable.</span></span> <span data-ttu-id="9dbf3-874">Il thread dell'applicazione chiama l'attività <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> metodo per attendere il completamento dell'attività, ma il tempo di attesa viene annullata quando viene annullato il token di annullamento e un' <xref:System.OperationCanceledException> viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-874">The application thread calls the task's <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method to wait for the task to complete, but the wait is canceled once the cancellation token is cancelled and an <xref:System.OperationCanceledException> is thrown.</span></span> <span data-ttu-id="9dbf3-875">Il gestore di eccezioni segnala l'eccezione e quindi viene sospesa per sei secondi.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-875">The exception handler reports the exception and then sleeps for six seconds.</span></span> <span data-ttu-id="9dbf3-876">Come illustrato nell'output dell'esempio, questo ritardo consente all'attività di completare il <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-876">As the output from the example shows, that delay allows the task to complete in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="9dbf3-877">The <paramref name="cancellationToken" /> was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-877">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-878">The task has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-878">The task has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="9dbf3-879">The task was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-879">The task was canceled.</span>
          </span>
          <span data-ttu-id="9dbf3-880">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-880">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="9dbf3-881">-or-  An exception was thrown during the execution of the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-881">-or-  An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="9dbf3-882">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-882">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan -&gt; bool" Usage="task.Wait timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="9dbf3-883">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-883">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-884">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified time interval.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-884">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-885">
            <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-885">
              <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-886"><xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> è un metodo di sincronizzazione che fa sì che il thread chiamante di attesa per l'istanza corrente di attività completare fino a quando non si verifica una delle operazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-886"><xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="9dbf3-887">L'attività viene completata correttamente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-887">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="9dbf3-888">L'attività stessa viene annullata o genera un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-888">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="9dbf3-889">In questo caso, si gestisce un <xref:System.AggregateException> (eccezione).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-889">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="9dbf3-890">Il <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> proprietà contiene i dettagli sull'eccezione o le eccezioni.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-890">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="9dbf3-891">L'intervallo definito da `timeout` scade.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-891">The interval defined by `timeout` elapses.</span></span> <span data-ttu-id="9dbf3-892">In questo caso, il thread corrente riprende l'esecuzione e il metodo restituisce `false`.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-892">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-893">Nell'esempio seguente avvia un'attività che genera l'errore 5 milioni di integer casuale compreso tra 0 e 100 e calcola la Media.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-893">The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="9dbf3-894">Nell'esempio viene utilizzato il <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> metodo per attendere che l'applicazione è completata entro 150 millisecondi.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-894">The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> method to wait for the application to complete within 150 milliseconds.</span></span> <span data-ttu-id="9dbf3-895">Se l'applicazione viene completata, l'attività Visualizza la somma e Media dei numeri casuali che lo ha generato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-895">If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</span></span> <span data-ttu-id="9dbf3-896">Se è trascorso l'intervallo di timeout, verrà visualizzato un messaggio prima che venga terminato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-896">If the timeout interval has elapsed, the example displays a message before it terminates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait6.cs#6)]
 [!code-vb[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-897">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-897">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-898">
            <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-898">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="9dbf3-899">The task was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-899">The task was canceled.</span>
          </span>
          <span data-ttu-id="9dbf3-900">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-900">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="9dbf3-901">-or-  An exception was thrown during the execution of the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-901">-or-  An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="9dbf3-902">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-902">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : int * System.Threading.CancellationToken -&gt; bool" Usage="task.Wait (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="9dbf3-903">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-903">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-904">A cancellation token to observe while waiting for the task to complete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-904">A cancellation token to observe while waiting for the task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-905">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-905">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
          <span data-ttu-id="9dbf3-906">The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-906">The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-907">
            <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-907">
              <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-908"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> è un metodo di sincronizzazione che fa sì che il thread chiamante di attesa per l'istanza corrente di attività completare fino a quando non si verifica una delle operazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="9dbf3-908"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="9dbf3-909">L'attività viene completata correttamente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-909">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="9dbf3-910">L'attività stessa viene annullata o genera un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-910">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="9dbf3-911">In questo caso, si gestisce un <xref:System.AggregateException> (eccezione).</span><span class="sxs-lookup"><span data-stu-id="9dbf3-911">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="9dbf3-912">Il <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> proprietà contiene i dettagli sull'eccezione o le eccezioni.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-912">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="9dbf3-913">Il `cancellationToken` token di annullamento.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-913">The `cancellationToken` cancellation token is canceled.</span></span> <span data-ttu-id="9dbf3-914">In questo caso, la chiamata ai <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> metodo genera un <xref:System.OperationCanceledException>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-914">In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.</span></span>  
  
-   <span data-ttu-id="9dbf3-915">L'intervallo definito da `millisecondsTimeout` scade.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-915">The interval defined by `millisecondsTimeout` elapses.</span></span> <span data-ttu-id="9dbf3-916">In questo caso, il thread corrente riprende l'esecuzione e il metodo restituisce `false`.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-916">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9dbf3-917">Annullamento di `cancellationToken` token di annullamento non influisce sulle attività in esecuzione a meno che non viene inoltre passato il token di annullamento e non è preparata gestire l'annullamento.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-917">Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</span></span> <span data-ttu-id="9dbf3-918">Passando il `cancellationToken` oggetto da questo metodo semplicemente consente l'attesa di essere annullata in base in determinate condizioni.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-918">Passing the `cancellationToken` object to this method simply allows the wait to be canceled based on some condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-919">L'esempio seguente chiama il <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> metodo per fornire un valore di timeout sia un annullamento del token che può terminare l'attesa di completamento dell'attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-919">The following example calls the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method to provide both a timeout value and a cancellation token that can end the wait for a task's completion.</span></span> <span data-ttu-id="9dbf3-920">Un nuovo thread viene avviato e viene eseguita la `CancelToken` (metodo), che sospende e quindi chiama il <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> metodo per annullare il token di annullamento.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-920">A new thread is started and executes the `CancelToken` method, which pauses and then calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to cancel the cancellation tokens.</span></span> <span data-ttu-id="9dbf3-921">Un'attività viene quindi avviata e ritarda per 5 secondi.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-921">A task is then launched and delays for 5 seconds.</span></span> <span data-ttu-id="9dbf3-922">Il <xref:System.Threading.Tasks.Task.Wait%2A> metodo per attendere il completamento dell'attività viene quindi chiamato e viene fornito un valore di timeout breve sia un token di annullamento.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-922">The <xref:System.Threading.Tasks.Task.Wait%2A> method is then called to wait for the task's completion and is provided both a brief timeout value and a cancellation token.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait4.vb#4)]  
  
 <span data-ttu-id="9dbf3-923">Si noti che l'output dell'esempio preciso dipende se il tempo di attesa è stata annullata a causa del token di annullamento o perché l'intervallo di timeout è scaduto.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-923">Note that the precise output from the example depends on whether the wait was canceled because of the cancellation token or because the timeout interval elapsed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="9dbf3-924">The <paramref name="cancellationToken" /> was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-924">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-925">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-925">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-926">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-926">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="9dbf3-927">The task was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-927">The task was canceled.</span>
          </span>
          <span data-ttu-id="9dbf3-928">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-928">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="9dbf3-929">-or-  An exception was thrown during the execution of the task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-929">-or-  An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="9dbf3-930">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-930">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-931">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-931">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static void WaitAll (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitAll(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WaitAll (ParamArray tasks As Task())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitAll(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] -&gt; unit" Usage="System.Threading.Tasks.Task.WaitAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="9dbf3-932">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-932">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-933">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-933">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9dbf3-934">Nell'esempio seguente viene avviato 10 attività, ognuna delle quali viene passato un indice come un oggetto di stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-934">The following example starts 10 tasks, each of which is passed an index as a state object.</span></span> <span data-ttu-id="9dbf3-935">Attività con un indice da due a cinque generare eccezioni.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-935">Tasks with an index from two to five throw exceptions.</span></span> <span data-ttu-id="9dbf3-936">La chiamata ai <xref:System.Threading.Tasks.Task.WaitAll%2A> metodo esegue il wrapping di tutte le eccezioni in un <xref:System.AggregateException> dell'oggetto e venga ripropagata al thread chiamante.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-936">The call to the <xref:System.Threading.Tasks.Task.WaitAll%2A> method wraps all exceptions in an <xref:System.AggregateException> object and propagates it to the calling thread.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/waitall.cs#02)]
 [!code-vb[System.Threading.Tasks.Task#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/waitall.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-937">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-937">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-938">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-938">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-939">The <paramref name="tasks" /> argument contains a null element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-939">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="9dbf3-940">-or-  The <paramref name="tasks" /> argument is an empty array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-940">-or-  The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="9dbf3-941">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-941">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="9dbf3-942">If a task was canceled, the <see cref="T:System.AggregateException" /> exception contains an <see cref="T:System.OperationCanceledException" /> exception in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-942">If a task was canceled, the <see cref="T:System.AggregateException" /> exception contains an <see cref="T:System.OperationCanceledException" /> exception in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="9dbf3-943">-or-  An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-943">-or-  An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (tasks As Task(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * int -&gt; bool" Usage="System.Threading.Tasks.Task.WaitAll (tasks, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="9dbf3-944">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-944">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="9dbf3-945">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-945">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-946">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-946">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-947">
            <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-947">
              <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-948">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-948">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-949">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-949">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="9dbf3-950">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-950">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="9dbf3-951">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-951">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="9dbf3-952">-or-  An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-952">-or-  An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-953">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-953">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-954">The <paramref name="tasks" /> argument contains a null element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-954">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="9dbf3-955">-or-  The <paramref name="tasks" /> argument is an empty array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-955">-or-  The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static void WaitAll (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitAll(class System.Threading.Tasks.Task[] tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * System.Threading.CancellationToken -&gt; unit" Usage="System.Threading.Tasks.Task.WaitAll (tasks, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="9dbf3-956">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-956">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-957">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-957">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-958">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-958">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-959">Il `cancellationToken` argomento viene utilizzato per annullare l'operazione di attesa.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-959">The `cancellationToken` argument is used to cancel the wait operation.</span></span> <span data-ttu-id="9dbf3-960">Annullamento delle attività è un'operazione distinta e viene segnalato dal <xref:System.AggregateException> come indicato in precedenza.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-960">Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> as noted above.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="9dbf3-961">The <paramref name="cancellationToken" /> was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-961">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-962">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-962">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="9dbf3-963">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-963">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="9dbf3-964">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-964">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="9dbf3-965">-or-  An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-965">-or-  An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-966">The <paramref name="tasks" /> argument contains a null element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-966">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="9dbf3-967">-or-  The <paramref name="tasks" /> argument is an empty array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-967">-or-  The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-968">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-968">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (tasks As Task(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * TimeSpan -&gt; bool" Usage="System.Threading.Tasks.Task.WaitAll (tasks, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="9dbf3-969">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-969">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="9dbf3-970">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-970">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-971">Waits for all of the provided cancellable <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-971">Waits for all of the provided cancellable <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-972">
            <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-972">
              <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-973">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-973">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-974">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-974">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="9dbf3-975">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-975">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="9dbf3-976">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-976">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="9dbf3-977">-or-  An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-977">-or-  An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-978">
            <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-978">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-979">The <paramref name="tasks" /> argument contains a null element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-979">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="9dbf3-980">-or-  The <paramref name="tasks" /> argument is an empty array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-980">-or-  The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * int * System.Threading.CancellationToken -&gt; bool" Usage="System.Threading.Tasks.Task.WaitAll (tasks, millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="9dbf3-981">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-981">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="9dbf3-982">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-982">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-983">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-983">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-984">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-984">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-985">
            <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-985">
              <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-986">Il `cancellationToken` argomento viene utilizzato per annullare l'operazione di attesa.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-986">The `cancellationToken` argument is used to cancel the wait operation.</span></span> <span data-ttu-id="9dbf3-987">Annullamento delle attività è un'operazione distinta e viene segnalato dal <xref:System.AggregateException> indicato in precedenza.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-987">Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> noted above.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-988">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-988">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-989">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-989">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="9dbf3-990">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-990">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="9dbf3-991">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-991">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="9dbf3-992">-or-  An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-992">-or-  An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-993">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-993">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-994">The <paramref name="tasks" /> argument contains a null element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-994">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="9dbf3-995">-or-  The <paramref name="tasks" /> argument is an empty array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-995">-or-  The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="9dbf3-996">The <paramref name="cancellationToken" /> was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-996">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-997">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-997">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (ParamArray tasks As Task()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="9dbf3-998">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-998">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-999">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-999">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-1000">The index of the completed <see cref="T:System.Threading.Tasks.Task" /> object in the <paramref name="tasks" /> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1000">The index of the completed <see cref="T:System.Threading.Tasks.Task" /> object in the <paramref name="tasks" /> array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9dbf3-1001">Nell'esempio seguente avvia cinque attività, ognuna delle quali rimane inattivo per un massimo di 1.050 millisecondi o almeno 50 millisecondi.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1001">The following example launches five tasks, each of which sleeps for a minimum of 50 milliseconds or a maximum of 1,050 milliseconds.</span></span> <span data-ttu-id="9dbf3-1002">Il <xref:System.Threading.Tasks.Task.WaitAny%2A> metodo quindi attende che uno di attività da completare.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1002">The <xref:System.Threading.Tasks.Task.WaitAny%2A> method then waits for any of the tasks to complete.</span></span> <span data-ttu-id="9dbf3-1003">L'esempio mostra l'ID attività dell'attività che è terminata l'attesa, nonché lo stato corrente di tutte le attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1003">The example displays the task ID of the task that ended the wait, as well as the current status of all the tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/cs/WaitAny1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/vb/WaitAny1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-1004">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1004">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-1005">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1005">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-1006">The <paramref name="tasks" /> argument contains a null element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1006">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (tasks As Task(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * int -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="9dbf3-1007">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1007">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="9dbf3-1008">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1008">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-1009">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1009">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-1010">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1010">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-1011">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1011">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-1012">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1012">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-1013">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1013">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-1014">The <paramref name="tasks" /> argument contains a null element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1014">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * System.Threading.CancellationToken -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="9dbf3-1015">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1015">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-1016">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1016">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-1017">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1017">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-1018">The index of the completed task in the <paramref name="tasks" /> array argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1018">The index of the completed task in the <paramref name="tasks" /> array argument.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-1019">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1019">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-1020">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1020">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-1021">The <paramref name="tasks" /> argument contains a null element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1021">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="9dbf3-1022">The <paramref name="cancellationToken" /> was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1022">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (tasks As Task(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * TimeSpan -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="9dbf3-1023">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1023">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="9dbf3-1024">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1024">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-1025">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1025">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-1026">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1026">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-1027">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1027">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-1028">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1028">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-1029">
            <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1029">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-1030">The <paramref name="tasks" /> argument contains a null element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1030">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * int * System.Threading.CancellationToken -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="9dbf3-1031">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1031">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="9dbf3-1032">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1032">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="9dbf3-1033">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1033">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-1034">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1034">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-1035">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1035">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="9dbf3-1036">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1036">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-1037">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1037">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9dbf3-1038">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1038">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-1039">The <paramref name="tasks" /> argument contains a null element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1039">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="9dbf3-1040">The <paramref name="cancellationToken" /> was canceled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1040">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-1041">Creates a task that will complete when all of the supplied tasks have completed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1041">Creates a task that will complete when all of the supplied tasks have completed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WhenAll">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WhenAll (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WhenAll(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll (tasks As IEnumerable(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ WhenAll(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : seq&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="9dbf3-1042">The tasks to wait on for completion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1042">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-1043">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an enumerable collection have completed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1043">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an enumerable collection have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-1044">A task that represents the completion of all of the supplied tasks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1044">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-1045">Gli overload del <xref:System.Threading.Tasks.Task.WhenAll%2A> metodo che restituisce un <xref:System.Threading.Tasks.Task> oggetto in genere vengono chiamati quando si è interessati nello stato di un set di attività o la generazione di eccezioni da un set di attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1045">The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9dbf3-1046">La chiamata a <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> metodo non blocca il thread chiamante.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1046">The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method does not block the calling thread.</span></span>  
  
 <span data-ttu-id="9dbf3-1047">Se una delle attività specificata viene completato in uno stato di errore, l'attività restituita verrà completata anche un <xref:System.Threading.Tasks.TaskStatus.Faulted> stato, in cui le eccezioni conterrà l'aggregazione del set di eccezioni annullato il wrapping da ognuna delle attività fornite.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1047">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state,  where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="9dbf3-1048">Se nessuna delle attività fornite con errori, ma almeno uno di essi è stato annullato, l'attività restituita scadrà il <xref:System.Threading.Tasks.TaskStatus.Canceled> dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1048">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="9dbf3-1049">Se nessuna delle attività non riuscite e nessuna delle attività sono stata annullata, l'attività risultante terminerà tra il <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1049">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="9dbf3-1050">Se fornito array/enumerabile non contiene attività, l'attività restituita immediatamente assume un <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stato prima che venga restituito al chiamante.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1050">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-1051">L'esempio seguente crea un set di attività che esegue il ping gli URL in una matrice.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1051">The following example creates a set of tasks that ping the URLs in an array.</span></span> <span data-ttu-id="9dbf3-1052">Le attività vengono archiviate in un `List<Task>` raccolta che viene passato per il <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1052">The tasks are stored in a `List<Task>` collection that is passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method.</span></span> <span data-ttu-id="9dbf3-1053">Dopo la chiamata ai <xref:System.Threading.Tasks.Task.Wait%2A> metodo assicura che tutti i thread è sono completata, l'esempio esamina la <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> proprietà per determinare se tutte le attività sono con errori.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1053">After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property to determine whether any tasks have faulted.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-1054">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1054">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-1055">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1055">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WhenAll (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WhenAll(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll (ParamArray tasks As Task()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ WhenAll(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : System.Threading.Tasks.Task[] -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="9dbf3-1056">The tasks to wait on for completion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1056">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-1057">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an array have completed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1057">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an array have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-1058">A task that represents the completion of all of the supplied tasks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1058">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-1059">Gli overload del <xref:System.Threading.Tasks.Task.WhenAll%2A> metodo che restituisce un <xref:System.Threading.Tasks.Task> oggetto in genere vengono chiamati quando si è interessati nello stato di un set di attività o la generazione di eccezioni da un set di attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1059">The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9dbf3-1060">La chiamata a <xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> metodo non blocca il thread chiamante.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1060">The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> method does not block the calling thread.</span></span>  
  
 <span data-ttu-id="9dbf3-1061">Se una delle attività specificata viene completato in uno stato di errore, l'attività restituita verrà completata anche un <xref:System.Threading.Tasks.TaskStatus.Faulted> stato, in cui le eccezioni conterrà l'aggregazione del set di eccezioni annullato il wrapping da ognuna delle attività fornite.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1061">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="9dbf3-1062">Se nessuna delle attività fornite con errori, ma almeno uno di essi è stato annullato, l'attività restituita scadrà il <xref:System.Threading.Tasks.TaskStatus.Canceled> dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1062">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="9dbf3-1063">Se nessuna delle attività non riuscite e nessuna delle attività sono stata annullata, l'attività risultante terminerà tra il <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1063">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="9dbf3-1064">Se fornito array/enumerabile non contiene attività, l'attività restituita immediatamente assume un <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stato prima che venga restituito al chiamante.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1064">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-1065">L'esempio seguente crea un set di attività che esegue il ping gli URL in una matrice.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1065">The following example creates a set of tasks that ping the URLs in an array.</span></span> <span data-ttu-id="9dbf3-1066">Le attività vengono archiviate in un `List<Task>` raccolta che viene convertito in una matrice e passato per il <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> metodo.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1066">The tasks are stored in a `List<Task>` collection that is converted to an array and passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method.</span></span> <span data-ttu-id="9dbf3-1067">Dopo la chiamata ai <xref:System.Threading.Tasks.Task.Wait%2A> metodo assicura che tutti i thread è sono completata, l'esempio esamina la <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> proprietà per determinare se tutte le attività sono con errori.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1067">After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property to determine whether any tasks have faulted.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-1068">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1068">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-1069">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1069">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult[]&gt; WhenAll&lt;TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll(Of TResult) (tasks As IEnumerable(Of Task(Of TResult))) As Task(Of TResult())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;TResult&gt; ^&gt; ^ WhenAll(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : seq&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result[]&gt;" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-1070">Tipo dell'attività completata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1070">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="9dbf3-1071">The tasks to wait on for completion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1071">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-1072">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an enumerable collection have completed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1072">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an enumerable collection have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-1073">A task that represents the completion of all of the supplied tasks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1073">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-1074">La chiamata a <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> metodo non blocca il thread chiamante.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1074">The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> method does not block the calling thread.</span></span> <span data-ttu-id="9dbf3-1075">Tuttavia, una chiamata all'oggetto restituito <xref:System.Threading.Tasks.Task%601.Result%2A> proprietà blocca il thread chiamante.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1075">However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.</span></span>  
  
 <span data-ttu-id="9dbf3-1076">Se una delle attività specificata viene completato in uno stato di errore, l'attività restituita verrà completata anche un <xref:System.Threading.Tasks.TaskStatus.Faulted> stato, in cui le eccezioni conterrà l'aggregazione del set di eccezioni annullato il wrapping da ognuna delle attività fornite.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1076">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="9dbf3-1077">Se nessuna delle attività fornite con errori, ma almeno uno di essi è stato annullato, l'attività restituita scadrà il <xref:System.Threading.Tasks.TaskStatus.Canceled> dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1077">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="9dbf3-1078">Se nessuna delle attività non riuscite e nessuna delle attività sono stata annullata, l'attività risultante terminerà tra il <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1078">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  <span data-ttu-id="9dbf3-1079">Il <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> dell'attività restituita verrà impostata in una matrice che contiene tutti i risultati delle attività fornite nello stesso ordine, così come sono stati forniti (ad esempio, se l'input dell'attività di matrice inclusa t1, t2, t3, l'attività di output <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> proprietà restituirà un' `TResult[]` in cui `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1079">The <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output task's <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span></span>  
  
 <span data-ttu-id="9dbf3-1080">Se il `tasks` argomento non contiene attività, l'attività restituita immediatamente passerà a un <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stato prima che venga restituito al chiamante.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1080">If the `tasks` argument contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span> <span data-ttu-id="9dbf3-1081">L'oggetto restituito `TResult[]` sarà una matrice di 0 elementi.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1081">The returned `TResult[]` will be an array of 0 elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-1082">L'esempio seguente crea dieci attività, ognuna delle quali viene creata un'istanza di un generatore di numeri casuali che crea 1.000 numeri casuali compreso tra 1 e 1.000 e calcola la Media.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1082">The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</span></span> <span data-ttu-id="9dbf3-1083">Il <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> metodo viene utilizzato per posticipare la creazione di istanze di generatori di numeri casuali in modo che non vengono create con valori di inizializzazione identici.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1083">The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</span></span> <span data-ttu-id="9dbf3-1084">La chiamata ai <xref:System.Threading.Tasks.Task.WhenAll%2A> metodo quindi restituisce un <xref:System.Int64> matrice che contiene il valore medio calcolato da ogni attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1084">The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task.</span></span> <span data-ttu-id="9dbf3-1085">Questi sono quindi usati per calcolare la media complessiva.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1085">These are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall1.vb#1)]  
  
 <span data-ttu-id="9dbf3-1086">In questo caso, le dieci attività singole vengono archiviate un <xref:System.Collections.Generic.List%601> oggetto.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1086">In this case, the ten individual tasks are stored in a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="9dbf3-1087">L'oggetto <xref:System.Collections.Generic.List%601> implementa l'interfaccia <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1087"><xref:System.Collections.Generic.List%601> implements the <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-1088">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1088">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-1089">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1089">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (params System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult[]&gt; WhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt;[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll(Of TResult) (ParamArray tasks As Task(Of TResult)()) As Task(Of TResult())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;TResult&gt; ^&gt; ^ WhenAll(... cli::array &lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : System.Threading.Tasks.Task&lt;'Result&gt;[] -&gt; System.Threading.Tasks.Task&lt;'Result[]&gt;" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TResult&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-1090">Tipo dell'attività completata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1090">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="9dbf3-1091">The tasks to wait on for completion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1091">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-1092">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an array have completed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1092">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an array have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-1093">A task that represents the completion of all of the supplied tasks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1093">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-1094">La chiamata a <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> metodo non blocca il thread chiamante.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1094">The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> method does not block the calling thread.</span></span> <span data-ttu-id="9dbf3-1095">Tuttavia, una chiamata all'oggetto restituito <xref:System.Threading.Tasks.Task%601.Result%2A> proprietà blocca il thread chiamante.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1095">However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.</span></span>  
  
 <span data-ttu-id="9dbf3-1096">Se una delle attività specificata viene completato in uno stato di errore, l'attività restituita verrà completata anche un <xref:System.Threading.Tasks.TaskStatus.Faulted> stato, in cui le eccezioni conterrà l'aggregazione del set di eccezioni annullato il wrapping da ognuna delle attività fornite.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1096">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="9dbf3-1097">Se nessuna delle attività fornite con errori, ma almeno uno di essi è stato annullato, l'attività restituita scadrà il <xref:System.Threading.Tasks.TaskStatus.Canceled> dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1097">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="9dbf3-1098">Se nessuna delle attività non riuscite e nessuna delle attività sono stata annullata, l'attività risultante terminerà tra il <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1098">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  <span data-ttu-id="9dbf3-1099">Il <xref:System.Threading.Tasks.Task%601.Result%2A> dell'attività restituita verrà impostato su una matrice contenente tutti i risultati delle attività fornite nello stesso ordine così come sono stati forniti (ad esempio, se l'input dell'attività di matrice inclusa t1, t2, t3, l'attività di output <xref:System.Threading.Tasks.Task%601.Result%2A> restituirà un `TResult[]` dove `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1099">The <xref:System.Threading.Tasks.Task%601.Result%2A> of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output   task's <xref:System.Threading.Tasks.Task%601.Result%2A> will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span></span>  
  
 <span data-ttu-id="9dbf3-1100">Se fornito array/enumerabile non contiene attività, l'attività restituita immediatamente assume un <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> stato prima che venga restituito al chiamante.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1100">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  <span data-ttu-id="9dbf3-1101">L'oggetto restituito `TResult[]` sarà una matrice di 0 elementi.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1101">The returned `TResult[]` will be an array of 0 elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dbf3-1102">L'esempio seguente crea dieci attività, ognuna delle quali viene creata un'istanza di un generatore di numeri casuali che crea 1.000 numeri casuali compreso tra 1 e 1.000 e calcola la Media.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1102">The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</span></span> <span data-ttu-id="9dbf3-1103">In questo caso, le dieci attività singole vengono archiviate un `Task<Int64>` matrice.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1103">In this case, the ten individual tasks are stored in a `Task<Int64>` array.</span></span>  <span data-ttu-id="9dbf3-1104">Il <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> metodo viene utilizzato per posticipare la creazione di istanze di generatori di numeri casuali in modo che non vengono create con valori di inizializzazione identici.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1104">The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</span></span> <span data-ttu-id="9dbf3-1105">La chiamata ai <xref:System.Threading.Tasks.Task.WhenAll%2A> metodo quindi restituisce un <xref:System.Int64> matrice che contiene il valore medio calcolato da ogni attività.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1105">The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task.</span></span> <span data-ttu-id="9dbf3-1106">Questi sono quindi usati per calcolare la media complessiva.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1106">These are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-1107">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1107">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-1108">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1108">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-1109">Creates a task that will complete when any of the supplied tasks have completed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1109">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WhenAny">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; WhenAny(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny (tasks As IEnumerable(Of Task)) As Task(Of Task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ WhenAny(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : seq&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="9dbf3-1110">The tasks to wait on for completion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1110">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-1111">Creates a task that will complete when any of the supplied tasks have completed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1111">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-1112">A task that represents the completion of one of the supplied tasks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1112">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="9dbf3-1113">The return task's Result is the task that completed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1113">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-1114">L'attività restituita verrà completata quando una delle attività fornite è stata completata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1114">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="9dbf3-1115">L'attività restituita sempre terminerà tra il `RanToCompletion` stato con il relativo set di risultati per la prima attività per completare.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1115">The returned task will always end in the `RanToCompletion` state  with its Result set to the first task to complete.</span></span>  <span data-ttu-id="9dbf3-1116">Ciò vale anche se è terminata con la prima attività da completare il `Canceled` o `Faulted` dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1116">This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-1117">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1117">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-1118">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1118">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; WhenAny(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny (ParamArray tasks As Task()) As Task(Of Task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ WhenAny(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : System.Threading.Tasks.Task[] -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="9dbf3-1119">The tasks to wait on for completion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1119">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-1120">Creates a task that will complete when any of the supplied tasks have completed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1120">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-1121">A task that represents the completion of one of the supplied tasks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1121">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="9dbf3-1122">The return task's Result is the task that completed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1122">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-1123">L'attività restituita verrà completata quando una delle attività fornite è stata completata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1123">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="9dbf3-1124">L'attività restituita sempre terminerà tra il `RanToCompletion` dello stato con relativo `Result` impostato per la prima attività da completare.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1124">The returned task will always end in the `RanToCompletion` state   with its `Result` set to the first task to complete.</span></span>  <span data-ttu-id="9dbf3-1125">Ciò vale anche se è terminata con la prima attività da completare il `Canceled` o `Faulted` dello stato.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1125">This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-1126">The <paramref name="tasks" /> argument was null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1126">The <paramref name="tasks" /> argument was null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-1127">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1127">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; WhenAny&lt;TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny(Of TResult) (tasks As IEnumerable(Of Task(Of TResult))) As Task(Of Task(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ WhenAny(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : seq&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-1128">Tipo dell'attività completata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1128">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="9dbf3-1129">The tasks to wait on for completion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1129">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-1130">Creates a task that will complete when any of the supplied tasks have completed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1130">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-1131">A task that represents the completion of one of the supplied tasks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1131">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="9dbf3-1132">The return task's Result is the task that completed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1132">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-1133">L'attività restituita verrà completata quando una delle attività fornite è stata completata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1133">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="9dbf3-1134">L'attività restituita terminerà sempre nello stato RanToCompletion con relativo set di risultati per la prima attività da completare.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1134">The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</span></span> <span data-ttu-id="9dbf3-1135">Questo vale anche se la prima attività da completare è terminata nello stato Faulted o Canceled.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1135">This is true even if the first task to complete ended in the Canceled or Faulted state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-1136">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1136">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-1137">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1137">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (params System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; WhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt;[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny(Of TResult) (ParamArray tasks As Task(Of TResult)()) As Task(Of Task(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ WhenAny(... cli::array &lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : System.Threading.Tasks.Task&lt;'Result&gt;[] -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TResult&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="9dbf3-1138">Tipo dell'attività completata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1138">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="9dbf3-1139">The tasks to wait on for completion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1139">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dbf3-1140">Creates a task that will complete when any of the supplied tasks have completed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1140">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-1141">A task that represents the completion of one of the supplied tasks.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1141">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="9dbf3-1142">The return task's Result is the task that completed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1142">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-1143">L'attività restituita verrà completata quando una delle attività fornite è stata completata.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1143">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="9dbf3-1144">L'attività restituita terminerà sempre nello stato RanToCompletion con relativo set di risultati per la prima attività da completare.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1144">The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</span></span> <span data-ttu-id="9dbf3-1145">Questo vale anche se la prima attività da completare è terminata nello stato Faulted o Canceled.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1145">This is true even if the first task to complete ended in the Canceled or Faulted state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9dbf3-1146">The <paramref name="tasks" /> argument was null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1146">The <paramref name="tasks" /> argument was null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9dbf3-1147">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1147">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.YieldAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.YieldAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As YieldAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::CompilerServices::YieldAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Runtime.CompilerServices.YieldAwaitable" Usage="System.Threading.Tasks.Task.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.YieldAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9dbf3-1148">Creates an awaitable task that asynchronously yields back to the current context when awaited.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1148">Creates an awaitable task that asynchronously yields back to the current context when awaited.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dbf3-1149">A context that, when awaited, will asynchronously transition back into the current context at the time of the await.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1149">A context that, when awaited, will asynchronously transition back into the current context at the time of the await.</span>
          </span>
          <span data-ttu-id="9dbf3-1150">If the current <see cref="T:System.Threading.SynchronizationContext" /> is non-null, it is treated as the current context.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1150">If the current <see cref="T:System.Threading.SynchronizationContext" /> is non-null, it is treated as the current context.</span>
          </span>
          <span data-ttu-id="9dbf3-1151">Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dbf3-1151">Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dbf3-1152">È possibile utilizzare `await Task.Yield();` in un metodo asincrono per forzare il metodo venga completato in modo asincrono.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1152">You can use `await Task.Yield();` in an asynchronous method to force the method to complete asynchronously.</span></span> <span data-ttu-id="9dbf3-1153">Se non esiste un contesto di sincronizzazione corrente (<xref:System.Threading.SynchronizationContext> oggetto), questo verrà registrato il resto dell'esecuzione del metodo tale contesto.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1153">If there is a current synchronization context (<xref:System.Threading.SynchronizationContext> object), this will post the remainder of the method’s execution back to that context.</span></span> <span data-ttu-id="9dbf3-1154">Tuttavia, il contesto stabilirà per impostarne la priorità il lavoro relativo a altro lavoro che può essere sospeso.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1154">However, the context will decide how to prioritize this work relative to other work that may be pending.</span></span> <span data-ttu-id="9dbf3-1155">Il contesto di sincronizzazione che è presente in un thread dell'interfaccia utente nella maggior parte degli ambienti di interfaccia utente spesso verrà data priorità lavoro registrato per il contesto di maggiore di input e di lavoro per il rendering.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1155">The synchronization context that is present on a UI thread in most UI environments will often prioritize work posted to the context higher than input and rendering work.</span></span> <span data-ttu-id="9dbf3-1156">Per questo motivo, non fare affidamento su `await Task.Yield();` per mantenere la reattività di un'interfaccia utente.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1156">For this reason, do not rely on `await Task.Yield();` to keep a UI responsive.</span></span>  <span data-ttu-id="9dbf3-1157">Per altre informazioni, vedere il post [utile astrazioni abilitato con ContinueWith](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx) nella programmazione parallela con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="9dbf3-1157">For more information, see the entry [Useful Abstractions Enabled with ContinueWith](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>