<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ce5700b68f4a6ba69f5224dd0dd9b977cbfc8288" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407490" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="dbcfb-101">Consente alle iterazioni dei cicli paralleli di interagire con altre iterazioni.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dbcfb-101">Enables iterations of parallel loops to interact with other iterations.</span>
      </span>
      <span data-ttu-id="dbcfb-102">Un'istanza di questa classe viene fornita dalla classe <see cref="T:System.Threading.Tasks.Parallel" /> a ogni ciclo. Non è possibile creare istanze nel codice utente.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dbcfb-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dbcfb-103">Si noti che è possibile creare un'istanza di questa classe.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="dbcfb-104">Viene generato automaticamente dal compilatore come argomento in una chiamata ai <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> o <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="dbcfb-105">Nell'esempio viene illustrata una situazione di questo tipo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="dbcfb-106">Ad esempio costruisce `for` e `foreach` (in c#) e `For` e `For Each` (in Visual Basic) eseguire in sequenza dall'indice più basso al più alto o dal primo oggetto in un set e l'ultimo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="dbcfb-107">Al contrario, il <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> e <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> metodi non lo sono.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="dbcfb-108">Poiché le singole iterazioni del ciclo vengono eseguiti in parallelo, possono iniziare e terminare in qualsiasi ordine.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="dbcfb-109">Il <xref:System.Threading.Tasks.ParallelLoopState> classe consente a singoli alle iterazioni dei cicli paralleli di interagire tra loro.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="dbcfb-110">Il <xref:System.Threading.Tasks.ParallelLoopState> classe consente di:</span><span class="sxs-lookup"><span data-stu-id="dbcfb-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="dbcfb-111">Chiudere l'iterazione corrente e impedire qualsiasi iterazioni aggiuntive avviarlo chiamando il <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="dbcfb-112">Questa operazione non influenza le iterazioni che abbia già avviato l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="dbcfb-113">Impedire l'esecuzione chiamando alcuna iterazione con un indice maggiore dell'indice corrente il <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="dbcfb-114">Questa operazione non influenza le iterazioni che abbia già avviato l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="dbcfb-115">Determinare se un'eccezione in qualsiasi iterazione del ciclo recuperando il valore della <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="dbcfb-116">Determinare se un'iterazione del ciclo ha chiamato la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodo recuperando il valore della <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="dbcfb-117">È possibile utilizzare questa proprietà per restituire derivata dalle iterazioni del ciclo che ha avviato prima della chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (metodo), ma sono ancora in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="dbcfb-118">Determinare se un'iterazione del ciclo ha chiamato la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodo o ha generato un'eccezione recuperando il valore della <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="dbcfb-119">Uscita da un'iterazione con esecuzione prolungata il cui indice è maggiore dell'indice di un'iterazione in cui è stata chiamata interruzione recuperando il valore della <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dbcfb-120">Nell'esempio seguente viene eseguita fino a 100 iterazioni di un ciclo in parallelo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="dbcfb-121">Ogni iterazione viene sospeso per un intervallo casuale da 1 a 1.000 millisecondi.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="dbcfb-122">Un valore generato casualmente determina a quali iterazione del ciclo di <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodo viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="dbcfb-123">Come output illustrato nell'esempio, nessuna iterazione il cui indice è maggiore di <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> inizio del valore proprietà dopo la chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="dbcfb-124">Poiché le iterazioni del ciclo vengono ancora soggetti a essere in esecuzione al termine il <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodo viene chiamato, le chiamate di ogni iterazione il <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> proprietà per verificare se un'altra iterazione è chiamato il <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="dbcfb-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="dbcfb-125">Se il valore della proprietà `true`, l'iterazione controlla il valore del <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> proprietà e, se è maggiore del valore di indice dell'iterazione corrente, restituisce immediatamente.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="dbcfb-126">Oggetto <see cref="T:System.Threading.Tasks.ParallelLoopState" /> istanza deve essere utilizzata solo all'interno del corpo del ciclo a cui è stata fornita un'istanza.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dbcfb-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span>
      </span>
      <span data-ttu-id="dbcfb-127">Non è consigliabile utilizzare un oggetto fornito <see cref="T:System.Threading.Tasks.ParallelLoopState" /> istanza dopo il ciclo associato termina, non è sicuro in modo esplicito trasferirlo a altri thread e che tali thread di accedere in qualsiasi momento.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dbcfb-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span>
      </span>
      <span data-ttu-id="dbcfb-128">Un altro <see cref="T:System.Threading.Tasks.ParallelLoopState" /> verrà fornita l'istanza per ogni thread coinvolto in un ciclo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dbcfb-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dbcfb-129">Comunica che il ciclo <see cref="T:System.Threading.Tasks.Parallel" /> deve interrompere l'esecuzione non appena è stato raggiunto il numero di iterazioni oltre l'iterazione corrente desiderato dal sistema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbcfb-129">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dbcfb-130"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indica che nessuna iterazione dopo l'iterazione corrente devono essere eseguita.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-130"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="dbcfb-131">Cancella in modo efficace le iterazioni aggiuntive del ciclo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-131">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="dbcfb-132">Tuttavia, non arresta tutte le iterazioni che abbia già avviato l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-132">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="dbcfb-133">Ad esempio, se <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> viene chiamato da 100 iterazione di un ciclo parallelo iterazione da 0 a 1.000, tutte le iterazioni minore di 100 devono ancora essere eseguito, ma le iterazioni comprese tra 101 e 1000 che non sono ancora stati avviato non sono eseguiti.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-133">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="dbcfb-134">Per le iterazioni di lunga durata che potrebbero essere già in esecuzione, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> imposta il <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> all'indice dell'iterazione corrente se l'indice corrente è minore del valore corrente della proprietà <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-134">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="dbcfb-135">Per interrompere le iterazioni il cui indice è maggiore di iterazione minimo interruzione del ciclo dall'esecuzione concorrente, è necessario eseguire le operazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="dbcfb-135">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="dbcfb-136">Controllare se il <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-136">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="dbcfb-137">Uscire dall'iterazione se l'indice è maggiore di <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valore della proprietà.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-137">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="dbcfb-138">Nell'esempio viene illustrata una situazione di questo tipo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-138">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="dbcfb-139"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> viene in genere utilizzato negli algoritmi basati sulla ricerca un ordinamento in cui è presente nell'origine dati.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-139"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dbcfb-140">Nell'esempio seguente viene eseguita fino a 100 iterazioni di un ciclo in parallelo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-140">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="dbcfb-141">Ogni iterazione viene sospeso per un intervallo casuale da 1 a 1.000 millisecondi.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-141">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="dbcfb-142">Un valore generato casualmente determina a quali iterazione del ciclo di <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodo viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-142">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="dbcfb-143">Come output illustrato nell'esempio, nessuna iterazione il cui indice è maggiore di <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> inizio del valore proprietà dopo la chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-143">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="dbcfb-144">Poiché le iterazioni del ciclo vengono ancora soggetti a essere in esecuzione al termine il <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodo viene chiamato, le chiamate di ogni iterazione il <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> proprietà per verificare se un'altra iterazione è chiamato il <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="dbcfb-144">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="dbcfb-145">Se il valore della proprietà `true`, l'iterazione controlla il valore del <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> proprietà e, se è maggiore del valore di indice dell'iterazione corrente, restituisce immediatamente.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-145">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="dbcfb-146">Il metodo <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> è stato chiamato precedentemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbcfb-146">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span>
          </span>
          <span data-ttu-id="dbcfb-147">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> e <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> non possono essere utilizzati in combinazione da iterazioni dello stesso ciclo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbcfb-147">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dbcfb-148">Ottiene un valore che indica se un'iterazione del ciclo ha generato un'eccezione che non è stata gestita da tale iterazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbcfb-148">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dbcfb-149">
            <see langword="true" /> se è stata generata un'eccezione non gestita; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbcfb-149">
              <see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dbcfb-150">Ottiene un valore che indica se un'iterazione del ciclo ha chiamato il metodo <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbcfb-150">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dbcfb-151">
            <see langword="true" /> se un'iterazione ha arrestato il ciclo chiamando il metodo <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbcfb-151">
              <see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dbcfb-152">Per le iterazioni di lunga durata del ciclo, è possibile recuperare il valore della <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> proprietà per determinare se tutte le iterazioni del ciclo di inizio dell'esecuzione prima della chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodo sono ancora in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-152">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="dbcfb-153">È quindi possibile utilizzare il valore di <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> proprietà per determinare se deve restituire immediatamente o eseguire normalmente.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-153">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dbcfb-154">Nell'esempio seguente viene eseguita fino a 10.000 iterazioni di un ciclo in parallelo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-154">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="dbcfb-155">Ogni iterazione viene sospeso per un intervallo casuale da 1 a 1.000 millisecondi.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-155">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="dbcfb-156">Un valore generato casualmente determina a quali iterazione del ciclo di <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodo viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-156">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="dbcfb-157">Poiché sono ancora soggetti a essere in esecuzione al termine delle iterazioni del ciclo il <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> viene chiamato, l'espressione lambda chiama il <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> metodo per verificare se un'altra iterazione è chiamato il <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="dbcfb-157">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="dbcfb-158">Se viene restituito `true`, viene restituito immediatamente all'iterazione.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-158">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dbcfb-159">Ottiene il numero di iterazione minimo del ciclo da cui è stato chiamato l'oggetto <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbcfb-159">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dbcfb-160">Numero di iterazione minimo del ciclo da cui è stato chiamato l'oggetto <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbcfb-160">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
          <span data-ttu-id="dbcfb-161">Nel caso di un ciclo <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />, il valore è basato su un indice generato internamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbcfb-161">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dbcfb-162">È possibile che più iterazioni di un ciclo parallelo per chiamare il <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-162">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="dbcfb-163">In caso contrario, questo valore è l'indice minimo di un'iterazione che ha chiamato <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-163">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="dbcfb-164">Se non chiamata alcuna iterazione del ciclo <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, questa proprietà restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-164">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="dbcfb-165">Si noti che il valore della proprietà è influenzato dalle chiamate al <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-165">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="dbcfb-166">Nelle iterazioni di lunga durata in cui tutte le iterazioni dopo l'iterazione che chiama la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodo non è necessario eseguire, il <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> proprietà viene utilizzata per terminare le iterazioni che ha iniziato l'esecuzione prima della chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-166">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="dbcfb-167">Per interrompere le iterazioni il cui indice è maggiore di iterazione minimo interruzione del ciclo dall'esecuzione concorrente, è necessario eseguire le operazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="dbcfb-167">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="dbcfb-168">Controllare se il <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-168">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="dbcfb-169">Uscire dall'iterazione se l'indice è maggiore di <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valore della proprietà.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-169">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="dbcfb-170">Nell'esempio viene illustrata una situazione di questo tipo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-170">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dbcfb-171">Nell'esempio seguente viene eseguita fino a 100 iterazioni di un ciclo in parallelo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-171">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="dbcfb-172">Ogni iterazione viene sospeso per un intervallo casuale da 1 a 1.000 millisecondi.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-172">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="dbcfb-173">Un valore generato casualmente determina a quali iterazione del ciclo di <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodo viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-173">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="dbcfb-174">In tal modo le iterazioni il cui indice è maggiore di <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valore della proprietà da avviare dopo la chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (metodo), ma non influisce sui tutte le iterazioni che abbia già avviato l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-174">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="dbcfb-175">Per evitare questi completamento, chiama ogni iterazione di <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> metodo per verificare se un'altra iterazione è chiamato il <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-175">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="dbcfb-176">Se in tal caso, l'iterazione controlla il valore del <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> proprietà e, se è maggiore del valore di indice dell'iterazione corrente, restituisce immediatamente.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-176">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="dbcfb-177">Si noti che, in quanto il <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valore esula dall'ambito di fuori del ciclo parallelo, è necessario assegnare a una variabile che è visibile all'esterno del ciclo se si desidera mantenere il relativo valore.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-177">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dbcfb-178">Ottiene un valore che indica se terminare l'iterazione corrente del ciclo in base alle richieste fatte da questa o da altre iterazioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbcfb-178">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dbcfb-179">
            <see langword="true" /> se l'iterazione corrente deve essere terminata; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbcfb-179">
              <see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dbcfb-180">Il <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> è impostata su `true` in presenza delle condizioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="dbcfb-180">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="dbcfb-181">Un'iterazione delle chiamate di ciclo <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-181">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="dbcfb-182">Un'iterazione del ciclo genera un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-182">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="dbcfb-183">Il ciclo viene annullato.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-183">The loop is canceled.</span></span>  
  
 <span data-ttu-id="dbcfb-184">Quando questa proprietà è impostata `true`, la <xref:System.Threading.Tasks.Parallel> classe in modo proattivo proverà a impedire l'avvio dell'esecuzione di iterazioni aggiuntive del ciclo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-184">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="dbcfb-185">Tuttavia, potrebbe essere casi in cui non è in grado di impedire l'avvio di iterazioni aggiuntive.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-185">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="dbcfb-186">Potrebbe inoltre essere il caso che un'iterazione con esecuzione prolungata ha già iniziato l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-186">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="dbcfb-187">In questi casi, le iterazioni possono controllare in modo esplicito il <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> proprietà e interrompere l'esecuzione se la proprietà restituisce `true`.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-187">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dbcfb-188">Nell'esempio seguente viene eseguita fino a 100 iterazioni di un ciclo in parallelo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-188">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="dbcfb-189">Ogni iterazione viene sospeso per un intervallo casuale da 1 a 1.000 millisecondi.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-189">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="dbcfb-190">Un valore generato casualmente determina a quali iterazione del ciclo di <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodo viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-190">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="dbcfb-191">In tal modo le iterazioni il cui indice è maggiore di <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valore della proprietà da avviare dopo la chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (metodo), ma non influisce sui tutte le iterazioni che abbia già avviato l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-191">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="dbcfb-192">Per evitare questi completamento, chiama ogni iterazione di <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> metodo per verificare se un'altra iterazione è chiamato il <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-192">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="dbcfb-193">Se in tal caso, l'iterazione controlla il valore del <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> proprietà e, se è maggiore del valore di indice dell'iterazione corrente, restituisce immediatamente.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-193">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dbcfb-194">Comunica che il ciclo <see cref="T:System.Threading.Tasks.Parallel" /> deve interrompere l'esecuzione non appena il sistema lo richieda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbcfb-194">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dbcfb-195">La chiamata di <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodo indica che qualsiasi iterazioni del ciclo che non sono ancora state avviate necessitano non essere eseguite.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-195">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="dbcfb-196">Cancella in modo efficace le iterazioni aggiuntive del ciclo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-196">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="dbcfb-197">Tuttavia, non arresta tutte le iterazioni che abbia già avviato l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-197">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="dbcfb-198">Chiamata di <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodo provoca il <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> proprietà da restituire `true` per qualsiasi iterazione del ciclo che è ancora in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-198">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="dbcfb-199">Questo è particolarmente utile per le iterazioni con esecuzione prolungata, che è possono controllare la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> proprietà e uscire in anticipo se il valore è `true`.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-199">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="dbcfb-200"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> viene in genere utilizzato negli algoritmi basati sulla ricerca, in cui una volta che il risultato è presente, nessun altra iterazioni necessitano eseguite.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-200"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dbcfb-201">Nell'esempio seguente viene eseguita fino a 10.000 iterazioni di un ciclo in parallelo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-201">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="dbcfb-202">Ogni iterazione viene sospeso per un intervallo casuale da 1 a 1.000 millisecondi.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-202">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="dbcfb-203">Un valore generato casualmente determina a quali iterazione del ciclo di <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodo viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-203">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="dbcfb-204">Come illustrato nell'output dell'esempio, nessun iterazioni eseguite dopo la chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-204">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="dbcfb-205">Perché le iterazioni del ciclo vengono ancora soggetti a essere eseguito quando il <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> viene chiamato, le chiamate di ogni iterazione il <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> metodo per verificare se un'altra iterazione è chiamato il <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="dbcfb-205">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="dbcfb-206">Se viene restituito `true`, viene restituito immediatamente all'iterazione.</span><span class="sxs-lookup"><span data-stu-id="dbcfb-206">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="dbcfb-207">Il metodo <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> è stato chiamato in precedenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbcfb-207">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span>
          </span>
          <span data-ttu-id="dbcfb-208">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> e <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> non possono essere utilizzati in combinazione da iterazioni dello stesso ciclo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dbcfb-208">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      </Docs>
    </Member>
  </Members>
</Type>