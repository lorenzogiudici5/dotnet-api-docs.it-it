<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="af16a98f705e63e2ba868d464648af2e365bcb9a" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48619329" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Consente alle iterazioni dei cicli paralleli di interagire con altre iterazioni. Un'istanza di questa classe viene fornita dalla classe <see cref="T:System.Threading.Tasks.Parallel" /> a ogni ciclo. Non è possibile creare istanze nel codice utente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si noti che è possibile creare un'istanza di questa classe. Viene generato automaticamente dal compilatore come argomento in una chiamata per il <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> o <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> (metodo). Nell'esempio viene illustrata una situazione di questo tipo.  
  
 Ad esempio costruisce `for` e `foreach` (in c#) e `For` e `For Each` (in Visual Basic) eseguite in sequenza dall'indice più basso al più elevato o dal primo oggetto in un set e l'ultimo. Al contrario, il <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> e <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> metodi non lo sono. Poiché le singole iterazioni del ciclo vengono eseguiti in parallelo, possono iniziare e terminare in qualsiasi ordine. Il <xref:System.Threading.Tasks.ParallelLoopState> classe consente a singole iterazioni dei cicli paralleli di interagire tra loro. Il <xref:System.Threading.Tasks.ParallelLoopState> classe consente di:  
  
-   Chiudere l'iterazione corrente ed evitare eventuali iterazioni aggiuntive avvio chiamando il <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (metodo). Questa operazione non influenza le iterazioni che aver già iniziato l'esecuzione.  
  
-   Impedire l'esecuzione tramite la chiamata di tutte le iterazioni con un indice maggiore dell'indice corrente di <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (metodo). Questa operazione non influenza le iterazioni che aver già iniziato l'esecuzione.  
  
-   Determinare se un'eccezione in qualsiasi iterazione del ciclo recuperando il valore della <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> proprietà.  
  
-   Determinare se un'iterazione del ciclo ha chiamato la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> recuperando il valore del metodo di <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> proprietà. È possibile usare questa proprietà da restituire dalla iterazioni del ciclo che ha avviato prima della chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (metodo), ma sono ancora in esecuzione.  
  
-   Determinare se un'iterazione del ciclo ha chiamato la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodo o ha generato un'eccezione recuperando il valore della <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> proprietà.  
  
-   Uscita da un'iterazione a esecuzione prolungata il cui indice è maggiore dell'indice di un'iterazione in cui è stato chiamato Break recuperando il valore della <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita fino a 100 iterazioni di un ciclo in parallelo. Ogni iterazione viene sospeso per un intervallo casuale compreso tra 1 e 1.000 millisecondi. Un valore generato casualmente determina a quali iterazione del ciclo di <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> viene chiamato il metodo. Come l'output illustrato nell'esempio, non ci sono iterazioni il cui indice è maggiore di <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> inizio del valore proprietà dopo la chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (metodo).  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Poiché sono ancora soggetti a essere in esecuzione al termine delle iterazioni del ciclo il <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> viene chiamato il metodo, le chiamate di ogni iterazione il <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> proprietà da controllare se un'altra iterazione ha chiamato la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (metodo). Se il valore della proprietà `true`, l'iterazione controlla il valore della <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> proprietà e, se è maggiore del valore di indice dell'iterazione corrente, viene restituito immediatamente.  
  
 ]]></format>
    </remarks>
    <threadsafe>Oggetto <see cref="T:System.Threading.Tasks.ParallelLoopState" /> istanza deve essere usata solo all'interno del corpo del ciclo in cui è stata fornita un'istanza.  Non è sicuro usare un oggetto fornito <see cref="T:System.Threading.Tasks.ParallelLoopState" /> istanza dopo il ciclo associato termina, né distribuirla in modo esplicito trasferirlo agli altri thread e che tali thread di accedervi in qualsiasi momento.  Un altro <see cref="T:System.Threading.Tasks.ParallelLoopState" /> istanza verrà fornita per ogni thread coinvolti in un ciclo.</threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Parallelismo dei dati (Task Parallel Library)</related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Comunica che il ciclo <see cref="T:System.Threading.Tasks.Parallel" /> deve interrompere l'esecuzione non appena è stato raggiunto il numero di iterazioni oltre l'iterazione corrente desiderato dal sistema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indica che non ci sono iterazioni dopo l'iterazione corrente devono essere eseguite. Cancella in modo efficace eventuali altre iterazioni del ciclo. Tuttavia, tutte le iterazioni che aver già iniziato l'esecuzione non viene arrestato. Ad esempio, se <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> viene chiamato dall'iterazione di un ciclo parallelo l'iterazione da 0 a 1.000, tutte le iterazioni minore di 100 devono ancora essere esecuzione, ma le iterazioni da 101 a 1000 che non sono ancora stati avviato non sono eseguiti 100.  
  
 Per le iterazioni di lunga durata che potrebbero essere già in esecuzione, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> imposta la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> all'indice di iterazione corrente se l'indice corrente è minore del valore corrente della proprietà <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>. Per interrompere le iterazioni il cui indice è maggiore dell'iterazione minima interruzione dall'esecuzione concorrente, è necessario eseguire le operazioni seguenti:  
  
1.  Controllare se il <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> è di proprietà `true`.  
  
2.  Uscire dall'iterazione se l'indice è maggiore di <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valore della proprietà.  
  
 Nell'esempio viene illustrata una situazione di questo tipo.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> viene in genere utilizzato negli algoritmi basate sulla ricerca un ordinamento in cui è presente nell'origine dati.  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita fino a 100 iterazioni di un ciclo in parallelo. Ogni iterazione viene sospeso per un intervallo casuale compreso tra 1 e 1.000 millisecondi. Un valore generato casualmente determina a quali iterazione del ciclo di <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> viene chiamato il metodo. Come l'output illustrato nell'esempio, non ci sono iterazioni il cui indice è maggiore di <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> inizio del valore proprietà dopo la chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (metodo).  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Poiché sono ancora soggetti a essere in esecuzione al termine delle iterazioni del ciclo il <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> viene chiamato il metodo, le chiamate di ogni iterazione il <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> proprietà da controllare se un'altra iterazione ha chiamato la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (metodo). Se il valore della proprietà `true`, l'iterazione controlla il valore della <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> proprietà e, se è maggiore del valore di indice dell'iterazione corrente, viene restituito immediatamente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> è stato chiamato precedentemente. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> e <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> non possono essere utilizzati in combinazione da iterazioni dello stesso ciclo.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Parallelismo dei dati (Task Parallel Library)</related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se un'iterazione del ciclo ha generato un'eccezione che non è stata gestita da tale iterazione.</summary>
        <value>
          <see langword="true" /> se è stata generata un'eccezione non gestita; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Parallelismo dei dati (Task Parallel Library)</related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se un'iterazione del ciclo ha chiamato il metodo <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</summary>
        <value>
          <see langword="true" /> se un'iterazione ha arrestato il ciclo chiamando il metodo <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per le iterazioni di lunga durata del ciclo, è possibile recuperare il valore della <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> proprietà per determinare se eventuali iterazioni del ciclo che ha iniziato l'esecuzione prima della chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodo sono ancora in esecuzione. È quindi possibile usare il valore della <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> proprietà per determinare se deve restituire immediatamente o eseguire normalmente.  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita fino a 10.000 iterazioni di un ciclo in parallelo. Ogni iterazione viene sospeso per un intervallo casuale compreso tra 1 e 1.000 millisecondi. Un valore generato casualmente determina a quali iterazione del ciclo di <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> viene chiamato il metodo. Perché sono ancora soggetti a essere in esecuzione al termine delle iterazioni del ciclo il <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodo viene chiamato, l'espressione lambda chiama il <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> metodo per verificare se un'altra iterazione ha chiamato la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (metodo). Se il valore restituito `true`, viene restituito immediatamente all'iterazione.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Parallelismo dei dati (Task Parallel Library)</related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di iterazione minimo del ciclo da cui è stato chiamato l'oggetto <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</summary>
        <value>Numero di iterazione minimo del ciclo da cui è stato chiamato l'oggetto <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />. Nel caso di un ciclo <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />, il valore è basato su un indice generato internamente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile che più iterazioni di un ciclo parallelo per chiamare il <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (metodo). In caso affermativo, questo valore è l'indice più basso di un'iterazione che ha chiamato <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Se viene non chiamato alcuna iterazione del ciclo <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, questa proprietà restituisce `null`. Si noti che il valore della proprietà non è interessato dalle chiamate al <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (metodo).  
  
 Nelle iterazioni di lunga durata in cui tutte le iterazioni dopo l'iterazione che chiama il <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> metodo non è necessario eseguire, il <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> proprietà viene utilizzata per terminare le iterazioni che ha iniziato l'esecuzione prima della chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (metodo). Per interrompere le iterazioni il cui indice è maggiore dell'iterazione minima interruzione dall'esecuzione concorrente, è necessario eseguire le operazioni seguenti:  
  
1.  Controllare se il <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> è di proprietà `true`.  
  
2.  Uscire dall'iterazione se l'indice è maggiore di <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valore della proprietà.  
  
 Nell'esempio viene illustrata una situazione di questo tipo.  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita fino a 100 iterazioni di un ciclo in parallelo. Ogni iterazione viene sospeso per un intervallo casuale compreso tra 1 e 1.000 millisecondi. Un valore generato casualmente determina a quali iterazione del ciclo di <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> viene chiamato il metodo. Ciò impedisce che le iterazioni il cui indice è maggiore di <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valore della proprietà da avviare dopo la chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (metodo), ma non influisce sul tutte le iterazioni che aver già iniziato l'esecuzione. Per evitare che queste informazioni dal completamento, ogni iterazione chiama il <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> metodo per verificare se un'altra iterazione ha chiamato la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (metodo). Se quindi l'iterazione controlla il valore della <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> proprietà e, se è maggiore del valore di indice dell'iterazione corrente, viene restituito immediatamente.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Si noti che, in quanto il <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valore esula dall'ambito di fuori del ciclo parallelo, è necessario assegnarla a una variabile che è visibile all'esterno del ciclo, se si desidera mantenere il valore.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Parallelismo dei dati (Task Parallel Library)</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se terminare l'iterazione corrente del ciclo in base alle richieste fatte da questa o da altre iterazioni.</summary>
        <value>
          <see langword="true" /> se l'iterazione corrente deve essere terminata; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> è impostata su `true` in presenza delle condizioni seguenti:  
  
-   Un'iterazione delle chiamate di loop <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.  
  
-   Un'iterazione del ciclo genera un'eccezione.  
  
-   Il ciclo viene annullato.  
  
 Quando questa proprietà è impostata `true`, il <xref:System.Threading.Tasks.Parallel> classe tenterà in modo proattivo impediscono alle altre iterazioni del ciclo di avvio dell'esecuzione. Tuttavia, potrebbero esserci casi in cui non è in grado di impedire l'avvio di iterazioni aggiuntive.  
  
 Potrebbe anche essere il caso che un'iterazione a esecuzione prolungata ha già iniziato l'esecuzione. In questi casi, le iterazioni possono verificare in modo esplicito il <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> proprietà e interrompere l'esecuzione se la proprietà restituisce `true`.  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita fino a 100 iterazioni di un ciclo in parallelo. Ogni iterazione viene sospeso per un intervallo casuale compreso tra 1 e 1.000 millisecondi. Un valore generato casualmente determina a quali iterazione del ciclo di <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> viene chiamato il metodo. Ciò impedisce che le iterazioni il cui indice è maggiore di <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valore della proprietà da avviare dopo la chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (metodo), ma non influisce sul tutte le iterazioni che aver già iniziato l'esecuzione. Per evitare che queste informazioni dal completamento, ogni iterazione chiama il <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> metodo per verificare se un'altra iterazione ha chiamato la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (metodo). Se quindi l'iterazione controlla il valore della <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> proprietà e, se è maggiore del valore di indice dell'iterazione corrente, viene restituito immediatamente.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Parallelismo dei dati (Task Parallel Library)</related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Comunica che il ciclo <see cref="T:System.Threading.Tasks.Parallel" /> deve interrompere l'esecuzione non appena il sistema lo richieda.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chiamata di <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (metodo) indica che le iterazioni del ciclo che non sono ancora state avviate non devono essere eseguite. Cancella in modo efficace eventuali altre iterazioni del ciclo. Tuttavia, tutte le iterazioni che aver già iniziato l'esecuzione non viene arrestato.  
  
 Chiama il <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> metodo provoca il <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> proprietà da restituire `true` per un'iterazione del ciclo che è ancora in esecuzione. Ciò è particolarmente utile per le iterazioni con esecuzione prolungata, che possono controllare la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> proprietà e uscita anticipo se il valore è `true`.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> viene in genere utilizzato negli algoritmi basate sulla ricerca, in cui una volta un risultato trovate, nessun altro iterazioni necessitano da eseguire.  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita fino a 10.000 iterazioni di un ciclo in parallelo. Ogni iterazione viene sospeso per un intervallo casuale compreso tra 1 e 1.000 millisecondi. Un valore generato casualmente determina a quali iterazione del ciclo di <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> viene chiamato il metodo. Come illustrato nell'output dell'esempio, non le iterazioni vengono eseguite dopo la chiamata al <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (metodo).  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 Poiché le iterazioni del ciclo sono ancora soggetti a essere in esecuzione quando il <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> viene chiamato il metodo, le chiamate di ogni iterazione il <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> metodo per verificare se un'altra iterazione è chiamato il <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (metodo). Se il valore restituito `true`, viene restituito immediatamente all'iterazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> è stato chiamato in precedenza. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> e <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> non possono essere utilizzati in combinazione da iterazioni dello stesso ciclo.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Parallelismo dei dati (Task Parallel Library)</related>
      </Docs>
    </Member>
  </Members>
</Type>