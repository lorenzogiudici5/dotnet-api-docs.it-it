<Type Name="DbDataAdapter" FullName="System.Data.Common.DbDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3826e6f3e20f9dbc94d47c3d958b6e469e8cfe76" />
    <Meta Name="ms.sourcegitcommit" Value="e7865e39826e7aaf54da4c7042975153813a31c7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/16/2018" />
    <Meta Name="ms.locfileid" Value="31044262" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbDataAdapter extends System.Data.Common.DataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbDataAdapter&#xA;Inherits DataAdapter&#xA;Implements ICloneable, IDbDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbDataAdapter abstract : System::Data::Common::DataAdapter, ICloneable, System::Data::IDbDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDbDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Semplifica l'implementazione dell'interfaccia <see cref="T:System.Data.IDbDataAdapter" />. Gli eredi di <see cref="T:System.Data.Common.DbDataAdapter" /> implementano un set di funzioni per fornire una tipizzazione forte, ma ereditano la maggior parte delle funzionalità necessarie per implementare in modo completo un oggetto **DataAdapter**.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.Common.DbDataAdapter> classe eredita il <xref:System.Data.Common.DataAdapter> classe e implementa il <xref:System.Data.IDbDataAdapter> interfaccia. Consente una classe di implementare un **DataAdapter** progettato per l'uso con un database relazionale.  
  
 Un'applicazione crea un'istanza di <xref:System.Data.Common.DbDataAdapter> direttamente alla classe, ma crea un'istanza di una classe che eredita da esso.  
  
 Le classi che ereditano <xref:System.Data.Common.DbDataAdapter> deve implementare i membri ereditati e in genere definire membri aggiuntivi per aggiungere funzionalità specifiche del provider. Ad esempio, il <xref:System.Data.Common.DbDataAdapter> classe definisce il <xref:System.Data.IDbDataAdapter.SelectCommand%2A> , proprietà e il <xref:System.Data.Common.DbDataAdapter> classe definisce otto overload del <xref:System.Data.IDataAdapter.Fill%2A> (metodo). A sua volta, il <xref:System.Data.OleDb.OleDbDataAdapter> classe eredita il <xref:System.Data.Common.DbDataAdapter.Fill%2A> (metodo) che definisce anche altri due overload di <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> che accettano un oggetto Recordset ADO come parametro.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Quando si eredita dal <see cref="T:System.Data.Common.DbDataAdapter" /> (classe), si consiglia di implementare i seguenti costruttori:  
  
 <list type="table"><listheader><term> Elemento  
  
 </term><description> Descrizione  
  
 </description></listheader><item><term> *Prv*DataAdapter()  
  
 </term><description> Inizializza una nuova istanza di *Prv*classe DataAdapter.  
  
 </description></item><item><term> *Prv*DataAdapter (*Prv*comando *selectCommand*)  
  
 </term><description> Inizializza una nuova istanza di *Prv*classe DataAdapter con l'istruzione SQL SELECT specificata.  
  
 </description></item><item><term> *Prv*DataAdapter (stringa *selectCommandText*, stringa *selectConnectionString*)  
  
 </term><description> Inizializza una nuova istanza di *Prv*classe DataAdapter con un'istruzione SQL SELECT e una stringa di connessione.  
  
 </description></item><item><term> *Prv*DataAdapter (stringa *selectCommandText*, *Prv*connessione *selectConnection*)  
  
 </term><description> Inizializza una nuova istanza di *Prv*classe DataAdapter con un'istruzione SQL SELECT e un *Prv*oggetto connessione.  
  
 </description></item></list>  
  
 Per promuovere la coerenza fra i provider di dati .NET Framework, è necessario assegnare un nome alla classe che eredita il form *Prv*DataAdapter, in cui *Prv* è il prefisso uniforme assegnato a tutte le classi in una specifica di .NET Spazio dei nomi del provider dati Framework. Ad esempio, "Sql" è il prefisso del <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> classe il **SqlClient** dello spazio dei nomi.</para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza di una classe <see langword="DataAdapter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza di una classe **DataAdapter**.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si crea un'istanza di <xref:System.Data.Common.DbDataAdapter>, le seguenti proprietà di lettura/scrittura vengono impostate per i seguenti valori iniziali.  
  
|Proprietà|Valore iniziale|  
|----------------|-------------------|  
|<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|Nuovo oggetto <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|Nuovo oggetto <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|Nuovo oggetto <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|Nuovo oggetto <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 È possibile modificare il valore di una di queste proprietà tramite una chiamata distinta per la proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">Oggetto <see langword="DataAdapter" /> utilizzato per creare il nuovo <see langword="DataAdapter" />.</param>
        <summary>Inizializza una nuova istanza di una classe <see langword="DataAdapter" /> da un oggetto esistente dello stesso tipo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload del metodo di <xref:System.Data.Common.DbDataAdapter> costruttore è progettato per l'uso da un provider di dati .NET Framework, quando si implementa un costruttore simile da utilizzare in un'implementazione di clone.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToBatch">
      <MemberSignature Language="C#" Value="protected virtual int AddToBatch (System.Data.IDbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 AddToBatch(class System.Data.IDbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AddToBatch (command As IDbCommand) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int AddToBatch(System::Data::IDbCommand ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.IDbCommand" />
      </Parameters>
      <Docs>
        <param name="command">Interfaccia <see cref="T:System.Data.IDbCommand" /> da aggiungere al batch.</param>
        <summary>Aggiunge un'interfaccia <see cref="T:System.Data.IDbCommand" /> al batch corrente.</summary>
        <returns>Numero di comandi nel batch prima di aggiungere l'interfaccia <see cref="T:System.Data.IDbCommand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>, questo metodo genera <xref:System.NotSupportedException>. Le classi che ereditano da <xref:System.Data.Common.DbDataAdapter> eseguire l'override di questo metodo per fornire il supporto per i batch.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">L'adattatore non supporta i batch.</exception>
        <block subset="none" type="overrides">
          <para>Questo metodo è protetto e progettato per l'uso da un provider di dati .NET Framework.  
  
 Se una classe che eredita da <see cref="T:System.Data.Common.DbDataAdapter" /> supporta i batch, che classe esegue l'override di questo metodo per consentire agli utenti di aggiungere un comando a un batch.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ClearBatch">
      <MemberSignature Language="C#" Value="protected virtual void ClearBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ClearBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearBatch ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearBatch();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rimuove tutti gli oggetti <see cref="T:System.Data.IDbCommand" /> dal batch.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>, questo metodo genera <xref:System.NotSupportedException>. Le classi che ereditano da <xref:System.Data.Common.DbDataAdapter> eseguire l'override di questo metodo per fornire il supporto per i batch.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">L'adattatore non supporta i batch.</exception>
        <block subset="none" type="overrides">
          <para>Questo metodo è protetto e progettato per l'uso da un provider di dati .NET Framework.  
  
 Se una classe che eredita da <see cref="T:System.Data.Common.DbDataAdapter" /> supporta i batch, che classe esegue l'override di questo metodo per consentire agli utenti di rimuovere tutti i comandi da un batch.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">L'oggetto <see cref="T:System.Data.DataRow" /> utilizzato per aggiornare l'origine dati.</param>
        <param name="command">L'oggetto <see cref="T:System.Data.IDbCommand" /> eseguito durante l'applicazione del metodo <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Se il comando è un'istruzione UPDATE, INSERT, DELETE o SELECT.</param>
        <param name="tableMapping">Un oggetto <see cref="T:System.Data.Common.DataTableMapping" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.Common.RowUpdatedEventArgs" />.</summary>
        <returns>Nuova istanza della classe <see cref="T:System.Data.Common.RowUpdatedEventArgs" />.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> metodo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">Oggetto <see cref="T:System.Data.DataRow" /> che aggiorna l'origine dati.</param>
        <param name="command">L'oggetto <see cref="T:System.Data.IDbCommand" /> da eseguire durante l'applicazione del metodo <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Se il comando è un'istruzione UPDATE, INSERT, DELETE o SELECT.</param>
        <param name="tableMapping">Un oggetto <see cref="T:System.Data.Common.DataTableMapping" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.Common.RowUpdatingEventArgs" />.</summary>
        <returns>Nuova istanza della classe <see cref="T:System.Data.Common.RowUpdatingEventArgs" />.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> metodo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DefaultSourceTableName">
      <MemberSignature Language="C#" Value="public const string DefaultSourceTableName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultSourceTableName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultSourceTableName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultSourceTableName;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nome predefinito utilizzato dall'oggetto <see cref="T:System.Data.Common.DataAdapter" /> per i mapping di tabella.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "Table" è il nome predefinito utilizzato per il <xref:System.Data.Common.DataAdapter> oggetto per il mapping di tabella.  
  
 <xref:System.Data.Common.DbDataAdapter.DefaultSourceTableName> Quando un'applicazione viene aggiunto un mapping di tabella da utilizzare con <xref:System.Data.Common.DbDataAdapter.Fill%2A>, ma non specifica un <xref:System.Data.DataTable> nome.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ DeleteCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un comando per l'eliminazione di record dal set di dati.</summary>
        <value>Interfaccia <see cref="T:System.Data.IDbCommand" /> utilizzata durante l'utilizzo del metodo <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> per eliminare i record nell'origine dati relativi alle righe eliminate dal set di dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durante la <xref:System.Data.Common.DbDataAdapter.Update%2A>, se questa proprietà non è impostata e informazioni sulla chiave primarie è presente nel <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> viene generato automaticamente.  
  
   
  
## Examples  
 Nell'esempio seguente viene creata la classe derivata <xref:System.Data.OleDb.OleDbDataAdapter> e vengono impostate alcune delle relative proprietà.  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
        <summary>Rilascia le risorse non gestite usate da <see cref="T:System.Data.Common.DbDataAdapter" /> e, facoltativamente, le risorse gestite.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteBatch">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ExecuteBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteBatch () As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteBatch();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Esegue il batch corrente.</summary>
        <returns>Il valore restituito dall'ultimo comando nel batch.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>, questo metodo genera <xref:System.NotSupportedException>. Le classi che ereditano da <xref:System.Data.Common.DbDataAdapter> eseguire l'override di questo metodo per fornire il supporto per i batch.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Questo metodo è protetto e progettato per l'uso da un provider di dati .NET Framework.  
  
 Se una classe che eredita da <see cref="T:System.Data.Common.DbDataAdapter" /> supporta i batch, che classe esegue l'override di questo metodo per consentire agli utenti di eseguire un batch. Un'implementazione di questo metodo consente di combinare i comandi nell'adapter in un batch, quindi esegue il batch e restituisce il valore restituito del batch.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Riempie un <see cref="T:System.Data.DataSet" /> o un <see cref="T:System.Data.DataTable" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public override int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Fill(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Oggetto <see cref="T:System.Data.DataSet" /> in cui inserire i record e, se necessario, lo schema.</param>
        <summary>Aggiunge o aggiorna righe nell'oggetto <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Numero di righe aggiunte o aggiornate correttamente nell'oggetto <see cref="T:System.Data.DataSet" />. Non sono incluse righe modificate da istruzioni che non restituiscono righe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodo recupera i dati dall'origine dati utilizzando un'istruzione SELECT. Il <xref:System.Data.IDbConnection> oggetto associato al comando select deve essere valido, ma non devono essere aperte. Se il <xref:System.Data.IDbConnection> viene chiuso prima <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato, verrà aperto per recuperare i dati, quindi viene chiusa. Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato, rimane aperto.  
  
 Se durante il popolamento delle tabelle di dati viene rilevata un errore o un'eccezione, le righe aggiunte prima occorrenza dell'errore restano nelle tabelle di dati. Il resto dell'operazione viene interrotta.  
  
 Se un comando non restituisce alcuna riga, non vengono aggiunte tabelle per il <xref:System.Data.DataSet>, e viene generata alcuna eccezione.  
  
 Se il <xref:System.Data.Common.DbDataAdapter> oggetto rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive utilizzando il modello "*columnname*1","*columnname*2", " *columnname*3" e così via. Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet> secondo il criterio "Column1", "Column2" e così via.  
  
 Quando la query specificata restituisce più risultati, il set di risultati per ciascuna riga viene inserito in una tabella separata. Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, "Table", "Table1", "Table2" e così via). Perché se si effettua una query di inserimento seguita da una query select, per una query che non restituisce righe, viene creata alcuna tabella, tabella creata per la query select è denominata "Table" perché è la prima tabella creata. Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.  
  
 Quando l'istruzione SELECT utilizzata per popolare il <xref:System.Data.DataSet> restituisce più risultati, ad esempio le istruzioni SQL batch, se uno dei risultati contiene un errore, tutti i risultati successivi vengono ignorati e non vengono aggiunti per il <xref:System.Data.DataSet>.  
  
 Quando si utilizza successive <xref:System.Data.Common.DbDataAdapter.Fill%2A> chiamate per aggiornare il contenuto del <xref:System.Data.DataSet>, è necessario soddisfare due condizioni:  
  
1.  L'istruzione SQL deve corrispondere a quello inizialmente utilizzato per popolare il <xref:System.Data.DataSet>.  
  
2.  Il **chiave** informazioni di colonna devono essere presente.  
  
 Se le informazioni sulla chiave primarie è presente, tutte le righe duplicate sono risolte e comparire una sola volta nel <xref:System.Data.DataTable> che corrisponde alla <xref:System.Data.DataSet>. Informazioni sulla chiave primarie possono essere impostate mediante <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, specificando il <xref:System.Data.DataTable.PrimaryKey%2A> proprietà del <xref:System.Data.DataTable>, oppure tramite l'impostazione di <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> proprietà `AddWithKey`.  
  
 Se `SelectCommand` restituisce i risultati di un OUTER JOIN, mediante `DataAdapter` non viene impostato un valore di <xref:System.Data.DataTable.PrimaryKey%2A> per l'oggetto <xref:System.Data.DataTable> risultante. È necessario definire in modo esplicito la chiave primaria per garantire che le righe duplicate vengano risolte correttamente. Per ulteriori informazioni, vedere [la definizione di chiavi primarie](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l'implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato. Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A> con il <xref:System.Data.MissingSchemaAction> impostato su `AddWithKey`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataTable ^ dataTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">Nome di <see cref="T:System.Data.DataTable" /> da utilizzare per il mapping di tabella.</param>
        <summary>Aggiunge o aggiorna righe in un intervallo specificato nell'oggetto <see cref="T:System.Data.DataSet" /> affinché corrispondano a quelle nell'origine dati mediante il nome di <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Numero di righe aggiunte o aggiornate correttamente nell'oggetto <see cref="T:System.Data.DataSet" />. Non sono incluse righe modificate da istruzioni che non restituiscono righe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.Common.DbDataAdapter.Fill%2A> che consente di recuperare le righe dall'origine dati utilizzando l'istruzione SELECT specificata da un oggetto associato <xref:System.Data.IDbDataAdapter.SelectCommand%2A> proprietà. L'oggetto connessione associato con l'istruzione SELECT deve essere valido, ma non devono essere aperte. Se la connessione viene chiusa prima <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato, verrà aperta per recuperare i dati, quindi chiusa. Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato, rimane aperto.  
  
 Il <xref:System.Data.Common.DbDataAdapter.Fill%2A> aggiunge quindi le righe di destinazione <xref:System.Data.DataTable> gli oggetti di <xref:System.Data.DataSet>, creando il <xref:System.Data.DataTable> oggetti se non sono già presenti. Quando si creano <xref:System.Data.DataTable> oggetti, il <xref:System.Data.Common.DbDataAdapter.Fill%2A> operazione consente di creare solo i metadati dei nomi di colonna. Tuttavia, se il <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> è impostata su `AddWithKey`, chiavi primarie appropriate e i vincoli vengono creati.  
  
 Se il <xref:System.Data.Common.DbDataAdapter> rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, usando il modello "*columnname*1", "*columnname*2", "*columnname*3" e così via. Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet> secondo il criterio "Column1", "Column2" e così via. Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet> ogni set di risultati viene inserito in una tabella separata.  
  
 L'overload di <xref:System.Data.Common.DbDataAdapter.Fill%2A> che accetta `DataTable` come parametro ottiene solo il primo risultato. Usare un overload di <xref:System.Data.Common.DbDataAdapter.Fill%2A> che accetta `DataSet` come parametro per ottenere più risultati.  
  
 Il <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodo supporta scenari in cui il <xref:System.Data.DataSet> contiene più <xref:System.Data.DataTable> oggetti i cui nomi differiscono solo dalle maiuscole o minuscole. In tali situazioni, <xref:System.Data.Common.DbDataAdapter.Fill%2A> esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e crea una nuova tabella se non esiste alcuna corrispondenza esatta. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
 dataset.Tables.Add("AAA");  
 adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
    adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Se <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato e <xref:System.Data.DataSet> contiene solo <xref:System.Data.DataTable> il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable> viene aggiornato. In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 È possibile utilizzare il <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodo più volte sullo stesso <xref:System.Data.DataTable>. Se esiste una chiave primaria, le righe in ingresso vengono unite con le righe corrispondenti che esistono già. Se è presente alcuna chiave primaria, le righe in ingresso vengono aggiunti per il <xref:System.Data.DataTable>.  
  
 Se `SelectCommand` restituisce i risultati di un OUTER JOIN, mediante `DataAdapter` non viene impostato un valore di <xref:System.Data.DataTable.PrimaryKey%2A> per l'oggetto <xref:System.Data.DataTable> risultante. È necessario definire in modo esplicito la chiave primaria per garantire che le righe duplicate vengano risolte correttamente. Per ulteriori informazioni, vedere [la definizione di chiavi primarie](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l'implementazione di <xref:System.Data.Common.DbDataAdapter.Fill%2A> e <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> per i dati di .NET Framework provider recupera le informazioni sullo schema solo per il primo risultato.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Tabella di origine non valida.</exception>
        <block subset="none" type="overrides">
          <para>Questo overload del metodo di <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> metodo è protetto e progettato per l'uso da un provider di dati .NET Framework.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Oggetto <see cref="T:System.Data.DataSet" /> in cui inserire i record e, se necessario, lo schema.</param>
        <param name="srcTable">Nome della tabella di origine da usare per il mapping di tabelle.</param>
        <summary>Aggiunge o aggiorna righe in un oggetto <see cref="T:System.Data.DataSet" /> affinché corrispondano a quelle nell'origine dati mediante l'oggetto <see cref="T:System.Data.DataSet" /> e i relativi nomi <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Numero di righe aggiunte o aggiornate correttamente nell'oggetto <see cref="T:System.Data.DataSet" />. Non sono incluse righe modificate da istruzioni che non restituiscono righe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodo recupera i dati dall'origine dati utilizzando un'istruzione SELECT. Il <xref:System.Data.IDbConnection> oggetto associato al comando select deve essere valido, ma non devono essere aperte. Se il <xref:System.Data.IDbConnection> viene chiuso prima <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato, verrà aperta per recuperare i dati, quindi chiusa. Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato, rimane aperto.  
  
 Se un comando non restituisce alcuna riga, non vengono aggiunte tabelle per il <xref:System.Data.DataSet>, e viene generata alcuna eccezione.  
  
 Se il <xref:System.Data.Common.DbDataAdapter> oggetto rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, utilizzando il modello "columnname1", "columnname2", "columnname3" e così via. Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet> secondo il criterio "Column1", "Column2" e così via.  
  
 Quando la query specificata restituisce più risultati, ogni set di risultati viene inserito in una tabella separata. Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, "Table", "Table1", "Table2" e così via). Poiché se fosse necessario elaborare una query di inserimento seguita da una query select, per una query che non restituisce righe, viene creata alcuna tabella, tabella creata per la query select verrebbe denominata perché si tratta della prima tabella creata "Tabella". Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.  
  
 Il <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodo supporta scenari in cui il <xref:System.Data.DataSet> contiene più <xref:System.Data.DataTable> oggetti i cui nomi differiscono solo dalle maiuscole o minuscole. In tali situazioni, <xref:System.Data.Common.DbDataAdapter.Fill%2A> esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e crea una nuova tabella se non esiste alcuna corrispondenza esatta. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Se <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato e <xref:System.Data.DataSet> contiene solo <xref:System.Data.DataTable> il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable> viene aggiornato. In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Se durante il popolamento delle tabelle di dati viene rilevata un errore o un'eccezione, le righe aggiunte prima occorrenza dell'errore restano nelle tabelle di dati. Il resto dell'operazione viene interrotta.  
  
 Quando l'istruzione SELECT utilizzata per popolare il <xref:System.Data.DataSet> restituisce più risultati, come un batch di istruzione SQL, è necessario tenere presente quanto segue:  
  
-   Se uno dei risultati contiene un errore, tutti i risultati successivi vengono ignorati e non aggiunti al <xref:System.Data.DataSet>.  
  
 Quando si utilizza successive <xref:System.Data.Common.DbDataAdapter.Fill%2A> chiamate per aggiornare il contenuto del <xref:System.Data.DataSet>, è necessario soddisfare due condizioni:  
  
1.  L'istruzione SQL deve corrispondere a quello inizialmente utilizzato per popolare il <xref:System.Data.DataSet>.  
  
2.  Il **chiave** informazioni di colonna devono essere presente. Se le informazioni sulla chiave primarie è presente, tutte le righe duplicate sono risolte e comparire una sola volta nel <xref:System.Data.DataTable> che corrisponde alla <xref:System.Data.DataSet>. Informazioni sulla chiave primarie possono essere impostate mediante <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, specificando il <xref:System.Data.DataTable.PrimaryKey%2A> proprietà del <xref:System.Data.DataTable>, oppure tramite l'impostazione di <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> proprietà `AddWithKey`.  
  
 Se `SelectCommand` restituisce i risultati di un OUTER JOIN, mediante `DataAdapter` non viene impostato un valore di <xref:System.Data.DataTable.PrimaryKey%2A> per l'oggetto <xref:System.Data.DataTable> risultante. È necessario definire in modo esplicito la chiave primaria per garantire che le righe duplicate vengano risolte correttamente. Per ulteriori informazioni, vedere [la definizione di chiavi primarie](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l'implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato. Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A> con il <xref:System.Data.MissingSchemaAction> impostato su `AddWithKey`.  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzata la classe derivata, <xref:System.Data.OleDb.OleDbDataAdapter>, per riempire un <xref:System.Data.DataSet> con le righe dalla tabella categories. Questo esempio si presuppone che sia stato creato un <xref:System.Data.OleDb.OleDbDataAdapter> e <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">Tabella di origine non valida.</exception>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> metodo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">Oggetto <see cref="T:System.Data.DataTable" /> in cui inserire i record e, se necessario, lo schema.</param>
        <param name="command">Istruzione SQL SELECT utilizzata per recuperare righe dall'origine dati.</param>
        <param name="behavior">Uno dei valori di <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Aggiunge o aggiorna righe in un oggetto <see cref="T:System.Data.DataTable" /> affinché corrispondano a quelle dell'origine dati, utilizzando gli oggetti <see cref="T:System.Data.DataTable" />, <see cref="T:System.Data.IDbCommand" /> e <see cref="T:System.Data.CommandBehavior" /> specificati.</summary>
        <returns>Numero di righe aggiunte o aggiornate correttamente nell'oggetto <see cref="T:System.Data.DataTable" />. Non sono incluse righe modificate da istruzioni che non restituiscono righe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.Common.DbDataAdapter.Fill%2A> che consente di recuperare le righe dall'origine dati utilizzando l'istruzione SELECT specificata da un oggetto associato <xref:System.Data.IDbDataAdapter.SelectCommand%2A> proprietà. L'oggetto connessione associato con l'istruzione SELECT deve essere valido, ma non devono essere aperte. Se la connessione viene chiusa prima <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato, verrà aperto per recuperare i dati, quindi viene chiusa. Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato, rimane aperto.  
  
 Il <xref:System.Data.Common.DbDataAdapter.Fill%2A> aggiunge quindi le righe nella destinazione specificata <xref:System.Data.DataTable> oggetto di <xref:System.Data.DataSet>, creando il <xref:System.Data.DataTable> dell'oggetto se non già esiste. Quando si crea un <xref:System.Data.DataTable> oggetto, il <xref:System.Data.Common.DbDataAdapter.Fill%2A> operazione consente di creare solo i metadati dei nomi di colonna. Tuttavia, se il <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> è impostata su `AddWithKey`, chiavi primarie appropriate e i vincoli vengono creati.  
  
 Se il <xref:System.Data.Common.DbDataAdapter> oggetto rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genererà nomi per le colonne successive, usando il modello "*columnname*1", "*columnname*2 ","*columnname*3 "e così via. Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet> secondo il criterio "Column1", "Column2" e così via.  
  
 L'overload di <xref:System.Data.Common.DbDataAdapter.Fill%2A> che accetta `DataTable` come parametro ottiene solo il primo risultato. Usare un overload di <xref:System.Data.Common.DbDataAdapter.Fill%2A> che accetta `DataSet` come parametro per ottenere più risultati.  
  
 È possibile utilizzare il <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodo più volte sullo stesso <xref:System.Data.DataTable>. Se esiste una chiave primaria, le righe in ingresso vengono unite con le righe corrispondenti che esistono già. Se è presente alcuna chiave primaria, le righe in ingresso vengono aggiunti per il <xref:System.Data.DataTable>.  
  
 Se `SelectCommand` restituisce i risultati di un OUTER JOIN, mediante `DataAdapter` non viene impostato un valore di <xref:System.Data.DataTable.PrimaryKey%2A> per l'oggetto <xref:System.Data.DataTable> risultante. È necessario definire in modo esplicito la chiave primaria per garantire che le righe duplicate vengano risolte correttamente. Per ulteriori informazioni, vedere [la definizione di chiavi primarie](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l'implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato. Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A> con il <xref:System.Data.MissingSchemaAction> impostato su `AddWithKey`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Questo overload del metodo di <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> metodo è protetto e progettato per l'uso da un provider di dati .NET Framework.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (int startRecord, int maxRecords, params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(int32 startRecord, int32 maxRecords, class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (startRecord As Integer, maxRecords As Integer, ParamArray dataTables As DataTable()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(int startRecord, int maxRecords, ... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="dataTables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startRecord">Numero di record in base zero con cui iniziare.</param>
        <param name="maxRecords">Numero massimo di record da recuperare.</param>
        <param name="dataTables">Oggetti <see cref="T:System.Data.DataTable" /> da riempire dall'origine dati.</param>
        <summary>Aggiunge o aggiorna righe in un oggetto <see cref="T:System.Data.DataTable" /> affinché corrispondano a quelle dell'origine dati, partendo dal record specificato e recuperando fino al numero massimo di record specificato.</summary>
        <returns>Numero di righe aggiunte o aggiornate correttamente nell'oggetto <see cref="T:System.Data.DataTable" />. Questo valore non include le righe modificate da istruzioni che non restituiscono righe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.Common.DataAdapter.Fill%2A> che consente di recuperare le righe dall'origine dati utilizzando l'istruzione SELECT specificata da un oggetto associato <xref:System.Data.IDbDataAdapter.SelectCommand%2A> proprietà. L'oggetto connessione associato con l'istruzione SELECT deve essere valido, ma non devono essere aperte. Se la connessione viene chiusa prima <xref:System.Data.Common.DataAdapter.Fill%2A> viene chiamato, viene aperto per recuperare i dati e quindi viene chiuso. Se la connessione è aperta prima <xref:System.Data.Common.DataAdapter.Fill%2A> viene chiamato, rimane aperto.  
  
 Il <xref:System.Data.Common.DataAdapter.Fill%2A> aggiunge quindi le righe di destinazione <xref:System.Data.DataTable> gli oggetti di <xref:System.Data.DataSet>, creando il <xref:System.Data.DataTable> oggetti se non sono già presenti. Quando si creano <xref:System.Data.DataTable> oggetti, il <xref:System.Data.Common.DataAdapter.Fill%2A> operazione consente di creare solo i metadati dei nomi di colonna. Tuttavia, se il <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> è impostata su `AddWithKey`, chiavi primarie appropriate e i vincoli vengono creati.  
  
 Se `SelectCommand` restituisce i risultati di un OUTER JOIN, mediante `DataAdapter` non viene impostato un valore di <xref:System.Data.DataTable.PrimaryKey%2A> per l'oggetto <xref:System.Data.DataTable> risultante. È necessario definire in modo esplicito la chiave primaria per garantire che le righe duplicate vengano risolte correttamente. Per ulteriori informazioni, vedere [la definizione di chiavi primarie](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Se l'adattatore dati di rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, utilizzando il modello "columnname1", "columnname2", "columnname3" e così via. Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet> secondo il criterio "Column1", "Column2" e così via. Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet>, ogni set di risultati viene inserito in una tabella separata. Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, "Table", "Table1", "Table2" e così via). Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.  
  
 Quando l'istruzione SELECT utilizzata per popolare il <xref:System.Data.DataSet> restituisce più risultati, ad esempio istruzioni batch SQL, se uno dei risultati contiene un errore, tutti i risultati successivi vengono ignorati e non aggiunti al <xref:System.Data.DataSet>.  
  
 È possibile utilizzare il <xref:System.Data.Common.DataAdapter.Fill%2A> metodo più volte sullo stesso <xref:System.Data.DataTable>. Se esiste una chiave primaria, le righe in ingresso vengono unite con le righe corrispondenti che esistono già. Se è presente alcuna chiave primaria, le righe in ingresso vengono aggiunti per il <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l'implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato. Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A> con il <xref:System.Data.MissingSchemaAction> impostato su `AddWithKey`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Oggetto <see cref="T:System.Data.DataSet" /> in cui inserire i record e, se necessario, lo schema.</param>
        <param name="startRecord">Numero di record in base zero con cui iniziare.</param>
        <param name="maxRecords">Numero massimo di record da recuperare.</param>
        <param name="srcTable">Nome della tabella di origine da usare per il mapping di tabelle.</param>
        <summary>Aggiunge o aggiorna righe in un intervallo specificato nell'oggetto <see cref="T:System.Data.DataSet" /> affinché corrispondano a quelle nell'origine dati mediante <see cref="T:System.Data.DataSet" /> e i nomi di <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Numero di righe aggiunte o aggiornate correttamente nell'oggetto <see cref="T:System.Data.DataSet" />. Non sono incluse righe modificate da istruzioni che non restituiscono righe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto `maxRecords` valore pari a 0 Ottiene tutti i record trovati dopo il record iniziale. Se `maxRecords` è maggiore del numero di righe restanti, solo le righe rimanenti vengono restituite e viene generato alcun errore.  
  
 Se il comando select corrispondente è un'istruzione che restituisce più risultati, <xref:System.Data.Common.DbDataAdapter.Fill%2A> si applica solo `maxRecords` al primo risultato.  
  
 Il <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodo recupera i dati dall'origine dati utilizzando un'istruzione SELECT. Il <xref:System.Data.IDbConnection> oggetto associato all'istruzione SELECT deve essere valido, ma non devono essere aperte. Se il <xref:System.Data.IDbConnection> viene chiuso prima <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato, verrà aperto per recuperare i dati, quindi viene chiusa. Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato, rimane aperto.  
  
 Se un comando non restituisce alcuna riga, non vengono aggiunte tabelle per il <xref:System.Data.DataSet>, ma viene generata alcuna eccezione.  
  
 Se il <xref:System.Data.Common.DbDataAdapter> oggetto rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genererà nomi per le colonne successive, usando il modello "*columnname*1", "*columnname*2 ","*columnname*3 "e così via. Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet> secondo il criterio "Column1", "Column2" e così via.  
  
 Quando la query specificata restituisce più risultati, ogni set di risultati viene inserito in una tabella separata. Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, "Table", "Table1", "Table2" e così via). Perché se si effettua una query di inserimento seguita da una query select, per una query che non restituisce righe, viene creata alcuna tabella, tabella creata per la query select è denominata "Table", perché si tratta della prima tabella creata. Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.  
  
 Il <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodo supporta scenari in cui il <xref:System.Data.DataSet> contiene più <xref:System.Data.DataTable> oggetti i cui nomi differiscono solo dalle maiuscole o minuscole. In tali situazioni, <xref:System.Data.Common.DbDataAdapter.Fill%2A> esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e crea una nuova tabella se non esiste alcuna corrispondenza esatta. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Se <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato e <xref:System.Data.DataSet> contiene solo <xref:System.Data.DataTable> il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable> viene aggiornato. In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Se durante il popolamento delle tabelle di dati viene rilevata un errore o un'eccezione, le righe aggiunte prima occorrenza dell'errore restano nelle tabelle di dati. Il resto dell'operazione viene interrotta.  
  
 Quando l'istruzione SELECT utilizzata per popolare il <xref:System.Data.DataSet> restituisce più risultati, ad esempio istruzioni batch SQL, tenere presente quanto segue:  
  
-   Durante l'elaborazione di più risultati da un'istruzione SQL, batch `maxRecords` si applica solo al primo risultato. Lo stesso vale per le righe che contengono risultati con capitoli (Provider di dati .NET Framework per OLE DB solo). Il risultato di primo livello è limitato da `maxRecords`, ma vengono aggiunte tutte le righe figlio.  
  
-   Se uno dei risultati contiene un errore, tutti i risultati successivi vengono ignorati e non aggiunti al <xref:System.Data.DataSet>.  
  
 Quando si utilizza successive <xref:System.Data.Common.DbDataAdapter.Fill%2A> chiamate per aggiornare il contenuto del <xref:System.Data.DataSet>, è necessario soddisfare due condizioni:  
  
1.  L'istruzione SQL deve corrispondere a quello inizialmente utilizzato per popolare il <xref:System.Data.DataSet>.  
  
2.  Il **chiave** informazioni di colonna devono essere presente.  
  
 Se le informazioni sulla chiave primarie è presente, tutte le righe duplicate verranno risolte e comparire una sola volta nel <xref:System.Data.DataTable> che corrisponde alla <xref:System.Data.DataSet>. Informazioni sulla chiave primarie possono essere impostate mediante <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, specificando il <xref:System.Data.DataTable.PrimaryKey%2A> proprietà del <xref:System.Data.DataTable>, oppure tramite l'impostazione di <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> proprietà `AddWithKey`.  
  
 Se `SelectCommand` restituisce i risultati di un OUTER JOIN, mediante `DataAdapter` non viene impostato un valore di <xref:System.Data.DataTable.PrimaryKey%2A> per l'oggetto <xref:System.Data.DataTable> risultante. È necessario definire in modo esplicito la chiave primaria per garantire che le righe duplicate vengano risolte correttamente. Per ulteriori informazioni, vedere [la definizione di chiavi primarie](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l'implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato. Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A> con il <xref:System.Data.MissingSchemaAction> impostato su `AddWithKey`.  
  
> [!NOTE]
>  Il `DataSet` non conterrà più il numero di record indicato da `maxRecords`. Tuttavia, l'intero set di risultati generato dalla query viene comunque restituito dal server.  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzata la classe derivata, <xref:System.Data.OleDb.OleDbDataAdapter>, per riempire un <xref:System.Data.DataSet> con 15 righe, a partire dalla riga 10, dal **categorie** tabella. Questo esempio si presuppone che sia stato creato un <xref:System.Data.OleDb.OleDbDataAdapter> e <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">
          <see cref="T:System.Data.DataSet" /> non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">Tabella di origine non valida.  
  
 oppure  
  
 Connessione non valida.</exception>
        <exception cref="T:System.InvalidCastException">Impossibile trovare la connessione.</exception>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="startRecord" /> è minore di 0.  
  
 oppure  
  
 Il parametro <paramref name="maxRecords" /> è minore di 0.</exception>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> metodo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, int32 startRecord, int32 maxRecords, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTables As DataTable(), startRecord As Integer, maxRecords As Integer, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables, int startRecord, int maxRecords, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTables">Oggetti <see cref="T:System.Data.DataTable" /> da riempire dall'origine dati.</param>
        <param name="startRecord">Numero di record in base zero con cui iniziare.</param>
        <param name="maxRecords">Numero massimo di record da recuperare.</param>
        <param name="command">Enumerazione <see cref="T:System.Data.IDbCommand" /> eseguita per riempire gli oggetti <see cref="T:System.Data.DataTable" />.</param>
        <param name="behavior">Uno dei valori di <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Aggiunge o aggiorna righe in un intervallo specificato nell'oggetto <see cref="T:System.Data.DataSet" /> affinché corrispondano a quelle nell'origine dati mediante <see cref="T:System.Data.DataSet" /> e i nomi di <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Numero di righe aggiunte o aggiornate nelle tabelle di dati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto `maxRecords` valore pari a 0 Ottiene tutti i record trovati dopo il record iniziale. Se `maxRecords` è maggiore del numero di righe restanti, solo le righe rimanenti vengono restituite e viene generato alcun errore.  
  
 Il <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodo recupera i dati dall'origine dati utilizzando un'istruzione SELECT. Il <xref:System.Data.IDbConnection> oggetto associato all'istruzione SELECT deve essere valido, ma non devono essere aperte. Se il <xref:System.Data.IDbConnection> viene chiuso prima <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato, verrà aperta per recuperare i dati, quindi chiusa. Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato, rimane aperto.  
  
 Se un comando non restituisce alcuna riga, non vengono aggiunte tabelle per il <xref:System.Data.DataSet>, ma viene generata alcuna eccezione.  
  
 Se il <xref:System.Data.Common.DbDataAdapter> oggetto rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genererà nomi per le colonne successive, usando il modello "*columnname*1", "*columnname*2 ","*columnname*3 "e così via. Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet> secondo il criterio "Column1", "Column2" e così via.  
  
 Quando la query specificata restituisce più risultati, ogni set di risultati viene inserito in una tabella separata. Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, "Table", "Table1", "Table2" e così via). Poiché se fosse necessario elaborare una query di inserimento seguita da una query select, per una query che non restituisce righe, viene creata alcuna tabella, tabella creata per la query select verrebbe denominata perché si tratta della prima tabella creata "Tabella". Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.  
  
 Il <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodo supporta scenari in cui il <xref:System.Data.DataSet> contiene più <xref:System.Data.DataTable> oggetti i cui nomi differiscono solo dalle maiuscole o minuscole. In tali situazioni, <xref:System.Data.Common.DbDataAdapter.Fill%2A> esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e crea una nuova tabella se non esiste alcuna corrispondenza esatta. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Se <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato e <xref:System.Data.DataSet> contiene solo <xref:System.Data.DataTable> il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable> viene aggiornato. In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Se durante il popolamento delle tabelle di dati viene rilevata un errore o un'eccezione, le righe aggiunte prima occorrenza dell'errore restano nelle tabelle di dati. Il resto dell'operazione viene interrotta.  
  
 Quando l'istruzione SELECT utilizzata per popolare il <xref:System.Data.DataTable> oggetti restituisce più risultati, come un batch di istruzione SQL, è necessario tenere presente quanto segue:  
  
-   Durante l'elaborazione di più risultati da un'istruzione SQL, batch `maxRecords` si applica solo al primo risultato. Lo stesso vale per le righe che contengono risultati con capitoli (Provider di dati .NET Framework per OLE DB solo). Il risultato di primo livello è limitato da `maxRecords`, ma vengono aggiunte tutte le righe figlio.  
  
-   Se uno dei risultati contiene un errore, tutti i risultati successivi vengono ignorati.  
  
> [!NOTE]
>  Il `DataSet` non conterrà più il numero di record indicato da `maxRecords`. Tuttavia, l'intero set di risultati generato dalla query viene comunque restituito dal server.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">
          <see cref="T:System.Data.DataSet" /> non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">Tabella di origine non valida.  
  
 oppure  
  
 Connessione non valida.</exception>
        <exception cref="T:System.InvalidCastException">Impossibile trovare la connessione.</exception>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="startRecord" /> è minore di 0.  
  
 oppure  
  
 Il parametro <paramref name="maxRecords" /> è minore di 0.</exception>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> metodo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">Oggetto <see cref="T:System.Data.DataSet" /> in cui inserire i record e, se necessario, lo schema.</param>
        <param name="startRecord">Numero di record in base zero con cui iniziare.</param>
        <param name="maxRecords">Numero massimo di record da recuperare.</param>
        <param name="srcTable">Nome della tabella di origine da usare per il mapping di tabelle.</param>
        <param name="command">Istruzione SQL SELECT utilizzata per recuperare righe dall'origine dati.</param>
        <param name="behavior">Uno dei valori di <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Aggiunge o aggiorna righe in un intervallo specificato nell'oggetto <see cref="T:System.Data.DataSet" /> affinché corrispondano a quelle nell'origine dati utilizzando i nomi, la stringa di comando e le funzioni di comando dell'oggetto <see cref="T:System.Data.DataSet" /> e della tabella di origine.</summary>
        <returns>Numero di righe aggiunte o aggiornate correttamente nell'oggetto <see cref="T:System.Data.DataSet" />. Non sono incluse righe modificate da istruzioni che non restituiscono righe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.Common.DbDataAdapter.Fill%2A> che consente di recuperare le righe dall'origine dati utilizzando l'istruzione SELECT specificata da un oggetto associato <xref:System.Data.IDbDataAdapter.SelectCommand%2A> proprietà. L'oggetto connessione associato con l'istruzione SELECT deve essere valido, ma non devono essere aperte. Se la connessione viene chiusa prima <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato, verrà aperta per recuperare i dati, quindi chiusa. Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato, rimane aperto.  
  
 Il <xref:System.Data.Common.DbDataAdapter.Fill%2A> aggiunge quindi le righe di destinazione <xref:System.Data.DataTable> gli oggetti di <xref:System.Data.DataSet>, creando il <xref:System.Data.DataTable> oggetti se non sono già presenti. Quando si creano <xref:System.Data.DataTable> oggetti, il <xref:System.Data.Common.DbDataAdapter.Fill%2A> operazione consente di creare solo i metadati dei nomi di colonna. Tuttavia, se il <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> è impostata su `AddWithKey`, chiavi primarie appropriate e i vincoli vengono creati.  
  
 Se il <xref:System.Data.Common.DbDataAdapter> rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, usando il modello "*columnname*1", "*columnname*2", "*columnname*3" e così via. Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet> secondo il criterio "Column1", "Column2" e così via. Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet> ogni set di risultati viene inserito in una tabella separata. Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, "Table", "Table1", "Table2" e così via). Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.  
  
 Il <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodo supporta scenari in cui il <xref:System.Data.DataSet> contiene più <xref:System.Data.DataTable> oggetti i cui nomi differiscono solo dalle maiuscole o minuscole. In tali situazioni, <xref:System.Data.Common.DbDataAdapter.Fill%2A> esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e crea una nuova tabella se non esiste alcuna corrispondenza esatta. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Se <xref:System.Data.Common.DbDataAdapter.Fill%2A> viene chiamato e <xref:System.Data.DataSet> contiene solo <xref:System.Data.DataTable> il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable> viene aggiornato. In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 È possibile utilizzare il <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodo più volte sullo stesso <xref:System.Data.DataTable>. Se esiste una chiave primaria, le righe in ingresso vengono unite con le righe corrispondenti che esistono già. Se è presente alcuna chiave primaria, le righe in ingresso vengono aggiunti per il <xref:System.Data.DataTable>.  
  
 Se `SelectCommand` restituisce i risultati di un OUTER JOIN, mediante `DataAdapter` non viene impostato un valore di <xref:System.Data.DataTable.PrimaryKey%2A> per l'oggetto <xref:System.Data.DataTable> risultante. È necessario definire in modo esplicito la chiave primaria per garantire che le righe duplicate vengano risolte correttamente. Per ulteriori informazioni, vedere [la definizione di chiavi primarie](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l'implementazione di <xref:System.Data.Common.DbDataAdapter.Fill%2A> e <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> per i dati di .NET Framework provider recupera le informazioni sullo schema solo per il primo risultato.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Tabella di origine non valida.</exception>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="startRecord" /> è minore di 0.  
  
 oppure  
  
 Il parametro <paramref name="maxRecords" /> è minore di 0.</exception>
        <block subset="none" type="overrides">
          <para>Questo overload del metodo di <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> metodo è protetto e progettato per l'uso da un provider di dati .NET Framework.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FillCommandBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Data.CommandBehavior FillCommandBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandBehavior FillCommandBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property FillCommandBehavior As CommandBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Data::CommandBehavior FillCommandBehavior { System::Data::CommandBehavior get(); void set(System::Data::CommandBehavior value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.CommandBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il comportamento del comando utilizzato per riempire l'adattatore dati.</summary>
        <value>Enumerazione <see cref="T:System.Data.CommandBehavior" /> del comando utilizzato per riempire l'adattatore dati.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge un oggetto <see cref="T:System.Data.DataTable" /> a un <see cref="T:System.Data.DataSet" /> e configura lo schema affinché corrisponda a quello dell'origine dati.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">Oggetto <see cref="T:System.Data.DataSet" /> in cui inserire lo schema.</param>
        <param name="schemaType">Uno dei valori di <see cref="T:System.Data.SchemaType" /> che specifica la modalità di inserimento dello schema.</param>
        <summary>Aggiunge un oggetto <see cref="T:System.Data.DataTable" /> denominato "Table" all'oggetto <see cref="T:System.Data.DataSet" /> specificato e configura lo schema perché corrisponda a quello presente nell'origine dati basato sull'oggetto <see cref="T:System.Data.SchemaType" /> specificato.</summary>
        <returns>Riferimento a un insieme di oggetti <see cref="T:System.Data.DataTable" /> che sono stati aggiunti al <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo recupera le informazioni sullo schema dall'origine dati mediante il <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 Oggetto <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> consente di aggiungere un <xref:System.Data.DataTable> alla destinazione <xref:System.Data.DataSet>. Aggiunge quindi le colonne per la <xref:System.Data.DataColumnCollection> del <xref:System.Data.DataTable>e configura gli elementi seguenti <xref:System.Data.DataColumn> proprietà, se sono presenti nell'origine dati:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. È necessario impostare <xref:System.Data.DataColumn.AutoIncrementStep%2A> e <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separatamente.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Configura inoltre la <xref:System.Data.DataTable.PrimaryKey%2A> e <xref:System.Data.DataTable.Constraints%2A> proprietà secondo le regole seguenti:  
  
-   Se vengono restituite uno o più colonne chiave primaria per la <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, verranno utilizzate come colonne chiave primaria per la <xref:System.Data.DataTable>.  
  
-   Se viene restituita alcuna colonna di chiave primaria, ma sono colonne univoche, le colonne univoche vengono utilizzate come chiave primaria se e solo se tutte le colonne univoche sono ammessi valori null. Se una o più colonne ammettono valori null, un <xref:System.Data.UniqueConstraint> viene aggiunto per il <xref:System.Data.ConstraintCollection>, ma la <xref:System.Data.DataTable.PrimaryKey%2A> non è impostata.  
  
-   Se vengono restituite sia colonne chiave primaria che colonne univoche, le colonne chiave primaria vengono utilizzate come colonne chiave primaria per la <xref:System.Data.DataTable>.  
  
 Si noti che le chiavi primarie e i vincoli unique vengono aggiunti il <xref:System.Data.ConstraintCollection> in base alle regole precedenti, ma altri vincoli non vengono aggiunti i tipi.  
  
 Se il cluster univoco viene definito l'indice in una colonna o colonne in una tabella di SQL Server e il vincolo di chiave primaria è definito in un set diverso di colonne, quindi verranno restituiti i nomi delle colonne nell'indice cluster. Per restituire il nome o i nomi delle colonne chiave primaria, utilizzare un hint per la query con l'istruzione SELECT che specifica il nome dell'indice di chiave primaria. Per ulteriori informazioni sulla specifica di hint per la query, vedere [Hint per la Query (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Informazioni sulla chiave primarie viene utilizzati durante <xref:System.Data.Common.DbDataAdapter.Fill%2A> per trovare e sostituire tutte le righe le cui colonne chiave corrispondono. Se non si tratta del comportamento, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A> senza richiedere informazioni sullo schema.  
  
 Se il <xref:System.Data.IDataAdapter> rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, usando il modello "*columnname*1", "*columnname*2", "*columnname*3" e così via. Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet> secondo il criterio "Column1", "Column2" e così via. Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet> ogni set di risultati viene inserito in una tabella separata. Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, "Table", "Table1", "Table2" e così via.). Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.  
  
 Il <xref:System.Data.IDbConnection> oggetto associato al comando select deve essere valido, ma non è necessario aprire. Se il <xref:System.Data.IDbConnection> viene chiuso prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> viene chiamato, verrà aperta per recuperare i dati, quindi chiusa. Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> viene chiamato, viene lasciato aperto.  
  
> [!NOTE]
>  Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l'implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato. Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A> con il <xref:System.Data.MissingSchemaAction> impostato su `AddWithKey`.  
  
 Quando si utilizza <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, il provider di dati .NET Framework di SQL Server aggiunge una clausola FOR BROWSE all'istruzione da eseguire. È necessario essere consapevoli dei potenziali effetti secondari, quale ad esempio un'interferenza con l'utilizzo delle istruzioni SET FMTONLY ON. Per ulteriori informazioni vedere la documentazione online di SQL Server.  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzata la classe derivata, <xref:System.Data.SqlClient.SqlDataAdapter>, per riempire un <xref:System.Data.DataSet> con lo schema e restituisce un <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataTable">Oggetto <see cref="T:System.Data.DataTable" /> in cui inserire lo schema dall'origine dati.</param>
        <param name="schemaType">Uno dei valori di <see cref="T:System.Data.SchemaType" />.</param>
        <summary>Configura lo schema dell'oggetto <see cref="T:System.Data.DataTable" /> specificato in base all'oggetto <see cref="T:System.Data.SchemaType" /> specificato.</summary>
        <returns>Oggetto <see cref="T:System.Data.DataTable" /> che contiene informazioni di schema restituite dall'origine dati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> che consente di recuperare lo schema dell'origine dati utilizzando il <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. L'oggetto connessione associato il <xref:System.Data.IDbDataAdapter.SelectCommand%2A> deve essere valido, ma non deve essere aperto. Se la connessione viene chiusa prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> viene chiamato, verrà aperta per recuperare i dati, quindi chiusa. Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> viene chiamato, rimane aperto.  
  
 Oggetto <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operazione restituisce un <xref:System.Data.DataTable>. Aggiunge quindi le colonne per la <xref:System.Data.DataColumnCollection> del <xref:System.Data.DataTable>e configura gli elementi seguenti <xref:System.Data.DataColumn> proprietà, se sono presenti nell'origine dati:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. È necessario impostare <xref:System.Data.DataColumn.AutoIncrementStep%2A> e <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separatamente.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Configura inoltre la <xref:System.Data.DataTable.PrimaryKey%2A> e <xref:System.Data.DataTable.Constraints%2A> proprietà secondo le regole seguenti:  
  
-   Se un <xref:System.Data.DataTable.PrimaryKey%2A> è già stato definito per il `DataTable`, o `DataTable` contiene dati, il `PrimaryKey` verrà non impostata.  
  
-   Se vengono restituite uno o più colonne chiave primaria per la <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, verranno utilizzate come colonne chiave primaria per la `DataTable`.  
  
-   Se viene restituita alcuna colonna di chiave primaria, ma sono colonne univoche, le colonne univoche vengono utilizzate come chiave primaria se e solo se tutte le colonne univoche sono ammessi valori null. Se una o più colonne ammettono valori null, un <xref:System.Data.UniqueConstraint> viene aggiunto per il <xref:System.Data.ConstraintCollection>, ma la `PrimaryKey` non è impostata.  
  
-   Se vengono restituite sia colonne chiave primaria che colonne univoche, le colonne chiave primaria vengono utilizzate come colonne chiave primaria per la `DataTable`.  
  
 Si noti che le chiavi primarie e i vincoli unique vengono aggiunti il <xref:System.Data.ConstraintCollection> in base alle regole precedenti, ma altri vincoli non vengono aggiunti i tipi. Questo processo può richiedere più round trip al server.  
  
 Se il cluster univoco viene definito l'indice in una colonna o colonne in una tabella di SQL Server e il vincolo di chiave primaria è definito in un set diverso di colonne, quindi verranno restituiti i nomi delle colonne nell'indice cluster. Per restituire il nome o i nomi delle colonne chiave primaria, utilizzare un hint per la query con l'istruzione SELECT che specifica il nome dell'indice di chiave primaria. Per ulteriori informazioni sulla specifica di hint per la query, vedere [Hint per la Query (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Se il <xref:System.Data.Common.DbDataAdapter> rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, usando il modello "*columnname*1", "*columnname*2", "*columnname*3" e così via. Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet> secondo il criterio "Column1", "Column2" e così via. Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet> ogni set di risultati viene inserito in una tabella separata. Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, "Table", "Table1", "Table2" e così via.). Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> non restituisce alcuna riga. Utilizzare il <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodo per aggiungere righe a un <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l'implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato. Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A> con il <xref:System.Data.MissingSchemaAction> impostato su `AddWithKey`.  
  
 Quando si utilizza <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, il provider di dati .NET Framework di SQL Server aggiunge una clausola FOR BROWSE all'istruzione da eseguire. È necessario essere consapevoli dei potenziali effetti secondari, quale ad esempio un'interferenza con l'utilizzo delle istruzioni SET FMTONLY ON. Per ulteriori informazioni vedere la documentazione online di SQL Server.  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzata la classe derivata, <xref:System.Data.SqlClient.SqlDataAdapter>, per riempire un <xref:System.Data.DataSet> con lo schema e restituisce un <xref:System.Data.DataTable>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::String ^ srcTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Oggetto <see cref="T:System.Data.DataSet" /> in cui inserire lo schema.</param>
        <param name="schemaType">Uno dei valori di <see cref="T:System.Data.SchemaType" /> che specifica la modalità di inserimento dello schema.</param>
        <param name="srcTable">Nome della tabella di origine da usare per il mapping di tabelle.</param>
        <summary>Aggiunge un oggetto <see cref="T:System.Data.DataTable" /> all'oggetto <see cref="T:System.Data.DataSet" /> specificato e configura lo schema in modo che corrisponda a quello dell'origine dati in base a <see cref="T:System.Data.SchemaType" /> e <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Riferimento a un insieme di oggetti <see cref="T:System.Data.DataTable" /> che sono stati aggiunti al <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo recupera le informazioni sullo schema dall'origine dati mediante il <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 Oggetto <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> consente di aggiungere un <xref:System.Data.DataTable> alla destinazione <xref:System.Data.DataSet>. Aggiunge quindi le colonne per la <xref:System.Data.DataColumnCollection> del <xref:System.Data.DataTable>e configura gli elementi seguenti <xref:System.Data.DataColumn> proprietà, se sono presenti nell'origine dati:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. È necessario impostare <xref:System.Data.DataColumn.AutoIncrementStep%2A> e <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separatamente.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Configura inoltre la <xref:System.Data.DataTable.PrimaryKey%2A> e <xref:System.Data.DataTable.Constraints%2A> proprietà secondo le regole seguenti:  
  
-   Se vengono restituite uno o più colonne chiave primaria per la <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, verranno utilizzate come colonne chiave primaria per la <xref:System.Data.DataTable>.  
  
-   Se viene restituita alcuna colonna di chiave primaria, ma sono colonne univoche, le colonne univoche vengono utilizzate come chiave primaria se e solo se tutte le colonne univoche sono ammessi valori null. Se una o più colonne ammettono valori null, un <xref:System.Data.UniqueConstraint> viene aggiunto per il <xref:System.Data.ConstraintCollection>, ma la <xref:System.Data.DataTable.PrimaryKey%2A> non è impostata.  
  
-   Se vengono restituite sia colonne chiave primaria che colonne univoche, le colonne chiave primaria vengono utilizzate come colonne chiave primaria per la <xref:System.Data.DataTable>.  
  
 Si noti che le chiavi primarie e i vincoli unique vengono aggiunti il <xref:System.Data.ConstraintCollection> in base alle regole precedenti, ma altri vincoli non vengono aggiunti i tipi.  
  
 Se il cluster univoco viene definito l'indice in una colonna o colonne in una tabella di SQL Server e il vincolo di chiave primaria è definito in un set diverso di colonne, quindi verranno restituiti i nomi delle colonne nell'indice cluster. Per restituire il nome o i nomi delle colonne chiave primaria, utilizzare un hint per la query con l'istruzione SELECT che specifica il nome dell'indice di chiave primaria. Per ulteriori informazioni sulla specifica di hint per la query, vedere [Hint per la Query (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Informazioni sulla chiave primarie viene utilizzati durante <xref:System.Data.Common.DbDataAdapter.Fill%2A> per trovare e sostituire tutte le righe le cui colonne chiave corrispondono. Se non si tratta del comportamento, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A> senza richiedere informazioni sullo schema.  
  
 Se il <xref:System.Data.Common.DbDataAdapter> rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, usando il modello "*columnname*1", "*columnname*2", "*columnname*3" e così via. Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet> secondo il criterio "Column1", "Column2" e così via. Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet> ogni set di risultati viene inserito in una tabella separata. Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, "Table", "Table1", "Table2" e così via.). Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.  
  
 Il <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> metodo supporta scenari in cui il <xref:System.Data.DataSet> contiene più <xref:System.Data.DataTable> oggetti i cui nomi differiscono solo dalle maiuscole o minuscole. In tali situazioni, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e crea una nuova tabella se non esiste alcuna corrispondenza esatta. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Se <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> viene chiamato e <xref:System.Data.DataSet> contiene solo <xref:System.Data.DataTable> il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable> viene aggiornato. In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Il <xref:System.Data.IDbConnection> oggetto associato al comando select deve essere valido, ma non è necessario aprire. Se il <xref:System.Data.IDbConnection> viene chiuso prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> viene chiamato, verrà aperta per recuperare i dati, quindi chiusa. Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> viene chiamato, viene lasciato aperto.  
  
> [!NOTE]
>  Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l'implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato. Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A> con il <xref:System.Data.MissingSchemaAction> impostato su `AddWithKey`.  
  
 Quando si utilizza <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, il provider di dati .NET Framework di SQL Server aggiunge una clausola FOR BROWSE all'istruzione da eseguire. È necessario essere consapevoli dei potenziali effetti secondari, quale ad esempio un'interferenza con l'utilizzo delle istruzioni SET FMTONLY ON. Per ulteriori informazioni vedere la documentazione online di SQL Server.  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzata la classe derivata, <xref:System.Data.SqlClient.SqlDataAdapter>, per riempire un <xref:System.Data.DataSet> con lo schema e restituisce un <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Impossibile trovare una tabella di origine da cui ottenere lo schema.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">Oggetto <see cref="T:System.Data.DataTable" /> in cui inserire lo schema dall'origine dati.</param>
        <param name="schemaType">Uno dei valori di <see cref="T:System.Data.SchemaType" />.</param>
        <param name="command">Istruzione SQL SELECT utilizzata per recuperare righe dall'origine dati.</param>
        <param name="behavior">Uno dei valori di <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Configura lo schema dell'oggetto <see cref="T:System.Data.DataTable" /> specificato, una stringa di comando <see cref="T:System.Data.SchemaType" /> e valori di <see cref="T:System.Data.CommandBehavior" />.</summary>
        <returns>Oggetto <see cref="T:System.Data.DataTable" /> che contiene informazioni di schema restituite dall'origine dati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> che consente di recuperare lo schema dell'origine dati utilizzando il <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. L'oggetto connessione associato il <xref:System.Data.IDbDataAdapter.SelectCommand%2A> deve essere valido, ma non deve essere aperto. Se la connessione viene chiusa prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> viene chiamato, verrà aperta per recuperare i dati, quindi chiusa. Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> viene chiamato, rimane aperto.  
  
 Oggetto <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> consente di aggiungere un <xref:System.Data.DataTable> alla destinazione <xref:System.Data.DataSet>. Aggiunge quindi le colonne per la <xref:System.Data.DataColumnCollection> del <xref:System.Data.DataTable>e configura gli elementi seguenti <xref:System.Data.DataColumn> proprietà, se sono presenti nell'origine dati:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. È necessario impostare <xref:System.Data.DataColumn.AutoIncrementStep%2A> e <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separatamente.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Configura inoltre la <xref:System.Data.DataTable.PrimaryKey%2A> e <xref:System.Data.DataTable.Constraints%2A> proprietà secondo le regole seguenti:  
  
-   Se vengono restituite uno o più colonne chiave primaria per la <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, verranno utilizzate come colonne chiave primaria per la <xref:System.Data.DataTable>.  
  
-   Se viene restituita alcuna colonna di chiave primaria, ma sono colonne univoche, le colonne univoche vengono utilizzate come chiave primaria se e solo se tutte le colonne univoche sono ammessi valori null. Se una o più colonne ammettono valori null, un <xref:System.Data.UniqueConstraint> viene aggiunto per il <xref:System.Data.ConstraintCollection>, ma la <xref:System.Data.DataTable.PrimaryKey%2A> non è impostata.  
  
-   Se vengono restituite sia colonne chiave primaria che colonne univoche, le colonne chiave primaria vengono utilizzate come colonne chiave primaria per la <xref:System.Data.DataTable>.  
  
 Si noti che le chiavi primarie e i vincoli unique vengono aggiunti il <xref:System.Data.ConstraintCollection> in base alle regole precedenti, ma altri vincoli non vengono aggiunti i tipi.  
  
 Se il cluster univoco viene definito l'indice in una colonna o colonne in una tabella di SQL Server e il vincolo di chiave primaria è definito in un set diverso di colonne, quindi verranno restituiti i nomi delle colonne nell'indice cluster. Per restituire il nome o i nomi delle colonne chiave primaria, utilizzare un hint per la query con l'istruzione SELECT che specifica il nome dell'indice di chiave primaria. Per ulteriori informazioni sulla specifica di hint per la query, vedere [Hint per la Query (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Se il <xref:System.Data.IDataAdapter> rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, usando il modello "*columnname*1", "*columnname*2", "*columnname*3" e così via. Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet> secondo il criterio "Column1", "Column2" e così via. Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet> ogni set di risultati viene inserito in una tabella separata. Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, "Table", "Table1", "Table2" e così via.). Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> non restituisce alcuna riga. Utilizzare il <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodo per aggiungere righe a un <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l'implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato. Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A> con il <xref:System.Data.MissingSchemaAction> impostato su `AddWithKey`.  
  
 Quando si utilizza <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, il provider di dati .NET Framework di SQL Server aggiunge una clausola FOR BROWSE all'istruzione da eseguire. È necessario essere consapevoli dei potenziali effetti secondari, quale ad esempio un'interferenza con l'utilizzo delle istruzioni SET FMTONLY ON. Per ulteriori informazioni vedere la documentazione online di SQL Server.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Questa implementazione del <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> metodo è protetto e progettato per l'uso da un provider di dati .NET Framework.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, string srcTable, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::String ^ srcTable, System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">Oggetto <see cref="T:System.Data.DataSet" /> in cui inserire lo schema dall'origine dati.</param>
        <param name="schemaType">Uno dei valori di <see cref="T:System.Data.SchemaType" />.</param>
        <param name="command">Istruzione SQL SELECT utilizzata per recuperare righe dall'origine dati.</param>
        <param name="srcTable">Nome della tabella di origine da usare per il mapping di tabelle.</param>
        <param name="behavior">Uno dei valori di <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Aggiunge un oggetto <see cref="T:System.Data.DataTable" /> all'oggetto <see cref="T:System.Data.DataSet" /> specificato e di configurare lo schema in modo che corrisponda a quello dell'origine dati basato sull'oggetto <see cref="T:System.Data.SchemaType" /> specificato.</summary>
        <returns>Matrice di oggetti <see cref="T:System.Data.DataTable" /> che contiene informazioni di schema restituite dall'origine dati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> che consente di recuperare lo schema dell'origine dati utilizzando il <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. L'oggetto connessione associato il <xref:System.Data.IDbDataAdapter.SelectCommand%2A> deve essere valido, ma non deve essere aperto. Se la connessione viene chiusa prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> viene chiamato, verrà aperta per recuperare i dati, quindi chiusa. Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> viene chiamato, rimane aperto.  
  
 Oggetto <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> consente di aggiungere un <xref:System.Data.DataTable> alla destinazione <xref:System.Data.DataSet>. Aggiunge quindi le colonne per la <xref:System.Data.DataColumnCollection> del <xref:System.Data.DataTable>e configura gli elementi seguenti <xref:System.Data.DataColumn> proprietà, se sono presenti nell'origine dati:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. È necessario impostare <xref:System.Data.DataColumn.AutoIncrementStep%2A> e <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separatamente.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Configura inoltre la <xref:System.Data.DataTable.PrimaryKey%2A> e <xref:System.Data.DataTable.Constraints%2A> proprietà secondo le regole seguenti:  
  
-   Se vengono restituite uno o più colonne chiave primaria per la <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, verranno utilizzate come colonne chiave primaria per la <xref:System.Data.DataTable>.  
  
-   Se viene restituita alcuna colonna di chiave primaria, ma sono colonne univoche, le colonne univoche vengono utilizzate come chiave primaria se e solo se tutte le colonne univoche sono ammessi valori null. Se una o più colonne ammettono valori null, un <xref:System.Data.UniqueConstraint> viene aggiunto per il <xref:System.Data.ConstraintCollection>, ma la <xref:System.Data.DataTable.PrimaryKey%2A> non è impostata.  
  
-   Se vengono restituite sia colonne chiave primaria che colonne univoche, le colonne chiave primaria vengono utilizzate come colonne chiave primaria per la <xref:System.Data.DataTable>.  
  
 Si noti che le chiavi primarie e i vincoli unique vengono aggiunti il <xref:System.Data.ConstraintCollection> in base alle regole precedenti, ma altri vincoli non vengono aggiunti i tipi.  
  
 Se il cluster univoco viene definito l'indice in una colonna o colonne in una tabella di SQL Server e il vincolo di chiave primaria è definito in un set diverso di colonne, quindi verranno restituiti i nomi delle colonne nell'indice cluster. Per restituire il nome o i nomi delle colonne chiave primaria, utilizzare un hint per la query con l'istruzione SELECT che specifica il nome dell'indice di chiave primaria. Per ulteriori informazioni sulla specifica di hint per la query, vedere [Hint per la Query (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Se il <xref:System.Data.IDataAdapter> rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, usando il modello "*columnname*1", "*columnname*2", "*columnname*3" e così via. Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet> secondo il criterio "Column1", "Column2" e così via. Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet> ogni set di risultati viene inserito in una tabella separata. Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, "Table", "Table1", "Table2" e così via.). Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.  
  
 Il <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> metodo supporta scenari in cui il <xref:System.Data.DataSet> contiene più <xref:System.Data.DataTable> oggetti i cui nomi differiscono solo dalle maiuscole o minuscole. In tali situazioni, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e crea una nuova tabella se non esiste alcuna corrispondenza esatta. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Se <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> viene chiamato e <xref:System.Data.DataSet> contiene solo <xref:System.Data.DataTable> il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable> viene aggiornato. In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> non restituisce alcuna riga. Utilizzare il <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodo per aggiungere righe a un <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l'implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato. Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A> con il <xref:System.Data.MissingSchemaAction> impostato su `AddWithKey`.  
  
 Quando si utilizza <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, il provider di dati .NET Framework di SQL Server aggiunge una clausola FOR BROWSE all'istruzione da eseguire. È necessario essere consapevoli dei potenziali effetti secondari, quale ad esempio un'interferenza con l'utilizzo delle istruzioni SET FMTONLY ON. Per ulteriori informazioni vedere la documentazione online di SQL Server.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Questa implementazione del <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> metodo è protetto e progettato per l'uso da un provider di dati .NET Framework.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedParameter">
      <MemberSignature Language="C#" Value="protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.IDataParameter GetBatchedParameter(int32 commandIdentifier, int32 parameterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedParameter (commandIdentifier As Integer, parameterIndex As Integer) As IDataParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::IDataParameter ^ GetBatchedParameter(int commandIdentifier, int parameterIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="parameterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">Indice del comando da cui recuperare il parametro.</param>
        <param name="parameterIndex">Indice del parametro all'interno del comando.</param>
        <summary>Restituisce un'interfaccia <see cref="T:System.Data.IDataParameter" /> da uno dei comandi nel batch corrente.</summary>
        <returns>Oggetto <see cref="T:System.Data.IDataParameter" /> specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>, questo metodo genera <xref:System.NotSupportedException>. Le classi che ereditano da <xref:System.Data.Common.DbDataAdapter> eseguire l'override di questo metodo per fornire il supporto per i batch.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">L'adattatore non supporta i batch.</exception>
        <block subset="none" type="overrides">
          <para>Questo metodo è protetto e progettato per l'uso da un provider di dati .NET Framework.  
  
 Se una classe che eredita da <see cref="T:System.Data.Common.DbDataAdapter" /> supporta i batch, che classe esegue l'override di questo metodo per consentire agli utenti di eseguire un batch. Usa un'implementazione di <paramref name="commandIdentifier" /> fornito per individuare il comando richiesto, quindi utilizza il <paramref name="parameterIndex" /> fornito per individuare il parametro richiesto. Ad esempio, un <paramref name="commandIdentifier" /> pari a 0 e un <paramref name="parameterIndex" /> 0 restituisce il primo parametro dal primo comando nel batch.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedRecordsAffected">
      <MemberSignature Language="C#" Value="protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetBatchedRecordsAffected(int32 commandIdentifier, [out] int32&amp; recordsAffected, [out] class System.Exception&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedRecordsAffected (commandIdentifier As Integer, ByRef recordsAffected As Integer, ByRef error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetBatchedRecordsAffected(int commandIdentifier, [Runtime::InteropServices::Out] int % recordsAffected, [Runtime::InteropServices::Out] Exception ^ % error);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="recordsAffected" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="error" Type="System.Exception&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">Ordinale della colonna in base zero del comando singolo all’interno del batch.</param>
        <param name="recordsAffected">Numero di righe interessate nell’archivio dati dal comando specificato all’interno del batch.</param>
        <param name="error">Oggetto <see cref="T:System.Exception" /> generato durante l’esecuzione del comando specificato. Se non viene generata alcuna eccezione, il metodo restituisce <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).</param>
        <summary>Restituisce informazioni su un tentativo di aggiornamento singolo all’interno di un aggiornamento in batch di dimensioni maggiori.</summary>
        <returns>Informazioni su un tentativo di aggiornamento singolo all'interno di un aggiornamento in batch di dimensioni maggiori.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Provider di dati che supportano la logica di aggiornamento in batch devono eseguire l'override di una serie di metodi virtuali sulla <xref:System.Data.Common.DbDataAdapter> classe. `GetBatchedRecordsAffected` rappresenta uno di questi metodi virtuali. Il `DbDataAdapter` classe si basa su `GetBatchedRecordsAffected` per determinare l'esito positivo o negativo dei tentativi di aggiornamento singolo all'interno di un batch in modo da poter contrassegnare ogni corrispondente <xref:System.Data.DataRow> di conseguenza.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public override System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.GetFillParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene i parametri impostati dall'utente durante l'esecuzione di un'istruzione SQL SELECT.</summary>
        <returns>Matrice di oggetti <see cref="T:System.Data.IDataParameter" /> che contiene i parametri impostati dall'utente.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeBatching">
      <MemberSignature Language="C#" Value="protected virtual void InitializeBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.InitializeBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeBatching();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inizializza i batch per la classe <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>, questo metodo genera <xref:System.NotSupportedException>. Le classi che ereditano da <xref:System.Data.Common.DbDataAdapter> eseguire l'override di questo metodo per fornire il supporto per i batch.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">L'adattatore non supporta i batch.</exception>
        <block subset="none" type="overrides">
          <para>Questo metodo è protetto e progettato per l'uso da un provider di dati .NET Framework.  
  
 Se una classe che eredita da <see cref="T:System.Data.Common.DbDataAdapter" /> supporta i batch, che classe esegue l'override di questo metodo. Questo metodo fornisce la classe la possibilità di inizializzare le risorse necessarie per supportare l'invio in batch. Ad esempio, una classe può essere allocata a una struttura di dati per contenere il set di comandi nel batch.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ InsertCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un comando utilizzato per inserire nuovi record nell'origine dati.</summary>
        <value>Interfaccia <see cref="T:System.Data.IDbCommand" /> utilizzata durante l'applicazione del metodo <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />, per l'inserimento nell'origine dati dei record relativi alle nuove righe nel set di dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durante la <xref:System.Data.Common.DbDataAdapter.Update%2A>, se questa proprietà non è impostata e informazioni sulla chiave primarie è presente nel <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.InsertCommand%2A> verrà generato automaticamente.  
  
   
  
## Examples  
 Nell'esempio seguente viene creata la classe derivata <xref:System.Data.OleDb.OleDbDataAdapter> e vengono impostate alcune delle relative proprietà.  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdated (value As RowUpdatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">Oggetto <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see langword="RowUpdated" /> di un provider di dati .NET Framework.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per una panoramica, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> metodo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdating (value As RowUpdatingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">Oggetto <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see langword="RowUpdating" /> di un provider di dati .NET Framework.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per una panoramica, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe di base <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> metodo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ SelectCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un comando utilizzato per selezionare i record nell'origine dati.</summary>
        <value>Interfaccia <see cref="T:System.Data.IDbCommand" /> utilizzata durante l'applicazione del metodo <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> per selezionare i record dall'origine dati e posizionarli nel set di dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene creata la classe derivata <xref:System.Data.OleDb.OleDbDataAdapter> e vengono impostate alcune delle relative proprietà.  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un'istruzione SQL per l'eliminazione di record dal set di dati.</summary>
        <value>Interfaccia <see cref="T:System.Data.IDbCommand" /> utilizzata durante l'utilizzo del metodo <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> per eliminare i record nell'origine dati relativi alle righe eliminate dal set di dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Data.Common.DbDataAdapter> a un'interfaccia <xref:System.Data.IDbDataAdapter>.  
  
 Per ulteriori informazioni, vedere <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un'istruzione SQL utilizzata per inserire nuovi record nell'origine dati.</summary>
        <value>Interfaccia <see cref="T:System.Data.IDbCommand" /> utilizzata durante l'operazione di <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> per immettere i record nell'origine dati relativi alle nuove righe aggiunge al set di dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Data.Common.DbDataAdapter> a un'interfaccia <xref:System.Data.IDbDataAdapter>.  
  
 Per ulteriori informazioni, vedere <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un'istruzione SQL utilizzata per selezionare i record nell'origine dati.</summary>
        <value>Interfaccia <see cref="T:System.Data.IDbCommand" /> utilizzata durante l'operazione di <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> per selezionare i record dall'origine dati e posizionarli nel dataset.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Data.Common.DbDataAdapter> a un'interfaccia <xref:System.Data.IDbDataAdapter>.  
  
 Per ulteriori informazioni, vedere <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un'istruzione SQL utilizzata per aggiornare i record nell'origine dati.</summary>
        <value>Interfaccia <see cref="T:System.Data.IDbCommand" /> utilizzata durante l'operazione di <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> per aggiornare i record nell'origine dati relativi alle righe modificate nel set di dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Data.Common.DbDataAdapter> a un'interfaccia <xref:System.Data.IDbDataAdapter>.  
  
 Per ulteriori informazioni, vedere <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un nuovo oggetto che è una copia dell'istanza corrente.</summary>
        <returns>Nuovo oggetto che è una copia dell'istanza corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Data.Common.DbDataAdapter> a un'interfaccia <xref:System.ICloneable>.  
  
 Per ulteriori informazioni, vedere <xref:System.ICloneable.Clone%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TerminateBatching">
      <MemberSignature Language="C#" Value="protected virtual void TerminateBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TerminateBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.TerminateBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TerminateBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TerminateBatching();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Termina l'operazione in batch per la classe <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In <xref:System.Data.Common.DbDataAdapter>, questo metodo genera <xref:System.NotSupportedException>. Le classi che ereditano da <xref:System.Data.Common.DbDataAdapter> eseguire l'override di questo metodo per fornire il supporto per i batch.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">L'adattatore non supporta i batch.</exception>
        <block subset="none" type="overrides">
          <para>Questo metodo è protetto e progettato per l'uso da un provider di dati .NET Framework.  
  
 Se una classe che eredita da <see cref="T:System.Data.Common.DbDataAdapter" /> supporta i batch, che classe esegue l'override di questo metodo. Questo metodo fornisce la classe l'opportunità di eliminare tutte le risorse allocate per supportare l'invio in batch. Ad esempio, la classe può deallocare la struttura di dati che contiene i comandi nel batch.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Update">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiorna il valore nel database eseguendo le rispettive istruzioni INSERT, UPDATE o DELETE per ciascuna riga inserita, aggiornata o eliminata nell'oggetto <see cref="T:System.Data.DataSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataRow[] dataRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataRow[] dataRows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataRows As DataRow()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="dataRows">Matrice di oggetti <see cref="T:System.Data.DataRow" /> utilizzata per aggiornare l'origine dati.</param>
        <summary>Aggiorna il valore nel database eseguendo le rispettive istruzioni INSERT, UPDATE o DELETE per ciascuna riga inserita, aggiornata o eliminata nella matrice specificata nell'oggetto <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Numero di righe aggiornate correttamente dall'oggetto <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un'applicazione chiama il <xref:System.Data.Common.DbDataAdapter.Update%2A> (metodo), il <xref:System.Data.Common.DbDataAdapter> esamina il <xref:System.Data.DataRow.RowState%2A> , proprietà ed esegue le istruzioni INSERT, UPDATE o DELETE necessarie in modo iterativo per ogni riga, in base all'ordine degli indici configurati nel <xref:System.Data.DataSet>. Ad esempio, <xref:System.Data.Common.DbDataAdapter.Update%2A> potrebbe eseguire un'istruzione DELETE, seguita da un'istruzione INSERT e quindi un'altra istruzione DELETE, a causa dell'ordinamento delle righe di <xref:System.Data.DataTable>.  
  
 Si noti che queste istruzioni non vengono eseguite come un processo batch. ogni riga viene aggiornata singolarmente. Un'applicazione può chiamare il <xref:System.Data.DataSet.GetChanges%2A> in situazioni in cui è necessario controllare la sequenza di tipi di istruzione (ad esempio, gli inserimenti prima degli aggiornamenti). Per ulteriori informazioni, vedere [l'aggiornamento di origini dati con DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Se le istruzioni INSERT, UPDATE o DELETE non sono state specificate, il <xref:System.Data.Common.DbDataAdapter.Update%2A> metodo genera un'eccezione. Tuttavia, è possibile creare un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> oggetto per generare automaticamente le istruzioni SQL per gli aggiornamenti a tabella singola, se si imposta la `SelectCommand` proprietà di un provider di dati .NET Framework. Quindi, generate da tutte le istruzioni SQL aggiuntive non si imposta la **CommandBuilder**. Questa logica di generazione richiede informazioni della colonna chiave deve essere presente nel <xref:System.Data.DataSet>. Per ulteriori informazioni vedere [la generazione di comandi tramite commandbuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Il <xref:System.Data.Common.DbDataAdapter.Update%2A> che consente di recuperare le righe dalla tabella elencata nel primo mapping prima di eseguire un aggiornamento. Il <xref:System.Data.Common.DbDataAdapter.Update%2A> quindi aggiorna la riga utilizzando il valore di <xref:System.Data.IDbCommand.UpdatedRowSource%2A> proprietà. Tutte le eventuali righe restituite vengono ignorate.  
  
 Dopo che tutti i dati vengono caricati nuovamente il <xref:System.Data.DataSet>, il <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> evento viene generato, consentendo all'utente di controllare il riconciliato <xref:System.Data.DataSet> riga e le eventuali parametri di output restituiti dal comando. Dopo una riga viene aggiornata correttamente, vengono accettate le modifiche di tale riga.  
  
 Quando si utilizza <xref:System.Data.Common.DbDataAdapter.Update%2A>, l'ordine di esecuzione è il seguente:  
  
1.  I valori di <xref:System.Data.DataRow> vengono spostati i valori dei parametri.  
  
2.  Viene generato l'evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Esegue il comando.  
  
4.  Se il comando è impostato su `FirstReturnedRecord`, il primo risultato restituito è inserito nel <xref:System.Data.DataRow>.  
  
5.  Se sono presenti parametri di output, questi vengono collocati nel <xref:System.Data.DataRow>.  
  
6.  Viene generato l'evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Chiamata del metodo <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Ogni comando associato il <xref:System.Data.Common.DbDataAdapter> in genere è una raccolta di parametri associata. I parametri sono mappati alla riga corrente tramite il `SourceColumn` e `SourceVersion` le proprietà di un provider di dati .NET Framework `Parameter` classe. `SourceColumn` fa riferimento a un <xref:System.Data.DataTable> colonna che il <xref:System.Data.Common.DbDataAdapter> riferimenti per ottenere i valori dei parametri per la riga corrente.  
  
 `SourceColumn` fa riferimento al nome della colonna non mappata prima i mapping delle tabelle sono stati applicati. Se `SourceColumn` fa riferimento a una colonna inesistente, l'azione eseguita dipende da uno dei seguenti <xref:System.Data.MissingMappingAction> valori.  
  
|Valore di enumerazione|Azione eseguita|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Utilizzare i nomi di tabella in e i nomi di colonna di origine di <xref:System.Data.DataSet> se è presente alcun mapping.|  
|`MissingMappingAction.Ignore`|Oggetto <xref:System.SystemException> viene generato. Quando i mapping vengono impostati in modo esplicito, la mancanza di mapping per un parametro di input è in genere il risultato di un errore.|  
|`MissingMappingAction.Error`|Oggetto <xref:System.SystemException> viene generato.|  
  
 Il `SourceColumn` proprietà viene utilizzata anche per il mapping del valore per l'output o i parametri di input/output del `DataSet`. Se fa riferimento a una colonna inesistente, viene generata un'eccezione.  
  
 Il `SourceVersion` proprietà di un provider di dati .NET Framework `Parameter` classe determina se utilizzare la versione Original, Current o Proposed del valore della colonna. Questa funzionalità viene spesso utilizzata per includere i valori originali nella clausola WHERE di un'istruzione UPDATE per verificare la presenza di eventuali violazioni alla concorrenza ottimistica.  
  
> [!NOTE]
>  Se si verifica un errore durante l'aggiornamento di una riga, viene generata un'eccezione e l'esecuzione dell'aggiornamento non è più disponibile. Per continuare l'operazione di aggiornamento senza generare eccezioni quando viene rilevato un errore, impostare il <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> proprietà `true` prima di chiamare <xref:System.Data.Common.DbDataAdapter.Update%2A>. È anche possibile rispondere agli errori in una riga all'interno di `RowUpdated` evento di un oggetto DataAdapter. Per continuare l'operazione di aggiornamento senza generare un'eccezione all'interno di `RowUpdated` set di eventi, il <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> proprietà del <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzata la classe derivata, <xref:System.Data.OleDb.OleDbDataAdapter>, per aggiornare l'origine dati.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">Tabella di origine non valida.</exception>
        <exception cref="T:System.SystemException">Non è presente alcuna classe <see cref="T:System.Data.DataRow" /> da aggiornare.  
  
 oppure  
  
 Non è presente alcuna classe <see cref="T:System.Data.DataTable" /> da aggiornare.  
  
 oppure  
  
 Non è presente alcun oggetto <see cref="T:System.Data.DataSet" /> da utilizzare come origine.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Un tentativo di esecuzione di un'istruzione INSERT, UPDATE o DELETE non ha avuto effetto su alcun record.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Update(System::Data::DataSet ^ dataSet);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Update(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">L'oggetto <see cref="T:System.Data.DataSet" /> utilizzato per aggiornare l'origine dati.</param>
        <summary>Aggiorna il valore nel database eseguendo le rispettive istruzioni INSERT, UPDATE o DELETE per ciascuna riga inserita, aggiornata o eliminata nell'oggetto <see cref="T:System.Data.DataSet" /> specificato.</summary>
        <returns>Numero di righe aggiornate correttamente dall'oggetto <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un'applicazione chiama il <xref:System.Data.Common.DbDataAdapter.Update%2A> (metodo), il <xref:System.Data.Common.DbDataAdapter> esamina il <xref:System.Data.DataRow.RowState%2A> , proprietà ed esegue le istruzioni INSERT, UPDATE o DELETE necessarie in modo iterativo per ogni riga, in base all'ordine degli indici configurati nel <xref:System.Data.DataSet>. Ad esempio, <xref:System.Data.Common.DbDataAdapter.Update%2A> potrebbe eseguire un'istruzione DELETE, seguita da un'istruzione INSERT e quindi un'altra istruzione DELETE, a causa dell'ordinamento delle righe di <xref:System.Data.DataTable>.  
  
 Si noti che queste istruzioni non vengono eseguite come un processo batch. ogni riga viene aggiornata singolarmente. Un'applicazione può chiamare il <xref:System.Data.DataSet.GetChanges%2A> in situazioni in cui è necessario controllare la sequenza di tipi di istruzione (ad esempio, gli inserimenti prima degli aggiornamenti). Per ulteriori informazioni, vedere [l'aggiornamento di origini dati con DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Se le istruzioni INSERT, UPDATE o DELETE non sono state specificate, il <xref:System.Data.Common.DbDataAdapter.Update%2A> metodo genera un'eccezione. Tuttavia, è possibile creare un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> oggetto per generare automaticamente le istruzioni SQL per gli aggiornamenti a tabella singola, se si imposta la `SelectCommand` proprietà di un provider di dati .NET Framework. Quindi, generate da tutte le istruzioni SQL aggiuntive non si imposta la **CommandBuilder**. Questa logica di generazione richiede informazioni della colonna chiave deve essere presente nel <xref:System.Data.DataSet>. Per ulteriori informazioni vedere [la generazione di comandi tramite commandbuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Il <xref:System.Data.Common.DbDataAdapter.Update%2A> che consente di recuperare le righe dalla tabella elencata nel primo mapping prima di eseguire un aggiornamento. Il <xref:System.Data.Common.DbDataAdapter.Update%2A> quindi aggiorna la riga utilizzando il valore di <xref:System.Data.IDbCommand.UpdatedRowSource%2A> proprietà. Tutte le eventuali righe restituite vengono ignorate.  
  
 Dopo che tutti i dati vengono caricati nuovamente il <xref:System.Data.DataSet>, il <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> evento viene generato, consentendo all'utente di controllare il riconciliato <xref:System.Data.DataSet> riga e le eventuali parametri di output restituiti dal comando. Dopo una riga viene aggiornata correttamente, vengono accettate le modifiche di tale riga.  
  
 Quando si utilizza <xref:System.Data.Common.DbDataAdapter.Update%2A>, l'ordine di esecuzione è il seguente:  
  
1.  I valori di <xref:System.Data.DataRow> vengono spostati i valori dei parametri.  
  
2.  Viene generato l'evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Esegue il comando.  
  
4.  Se il comando è impostato su `FirstReturnedRecord`, quindi il primo risultato restituito è inserito nel <xref:System.Data.DataRow>.  
  
5.  Se sono presenti parametri di output, questi vengono collocati nel <xref:System.Data.DataRow>.  
  
6.  Viene generato l'evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Chiamata del metodo <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Ogni comando associato il <xref:System.Data.Common.DbDataAdapter> in genere è una raccolta di parametri associata. I parametri sono mappati alla riga corrente tramite il `SourceColumn` e `SourceVersion` le proprietà di un provider di dati .NET Framework `Parameter` classe. `SourceColumn` fa riferimento a un <xref:System.Data.DataTable> colonna che il <xref:System.Data.Common.DbDataAdapter> riferimenti per ottenere i valori dei parametri per la riga corrente.  
  
 `SourceColumn` fa riferimento al nome della colonna non mappata prima i mapping delle tabelle sono stati applicati. Se `SourceColumn` fa riferimento a una colonna inesistente, l'azione eseguita dipende da uno dei seguenti <xref:System.Data.MissingMappingAction> valori.  
  
|Valore di enumerazione|Azione eseguita|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Utilizzare i nomi di tabella in e i nomi di colonna di origine di <xref:System.Data.DataSet> se è presente alcun mapping.|  
|`MissingMappingAction.Ignore`|Oggetto <xref:System.SystemException> viene generato. Quando i mapping vengono impostati in modo esplicito, la mancanza di mapping per un parametro di input è in genere il risultato di un errore.|  
|`MissingMappingAction.Error`|Oggetto <xref:System.SystemException> viene generato.|  
  
 Il `SourceColumn` proprietà viene utilizzata anche per il mapping del valore per l'output o i parametri di input/output del `DataSet`. Se fa riferimento a una colonna inesistente, viene generata un'eccezione.  
  
 Il `SourceVersion` proprietà di un provider di dati .NET Framework `Parameter` classe determina se utilizzare la versione Original, Current o Proposed del valore della colonna. Questa funzionalità viene spesso utilizzata per includere i valori originali nella clausola WHERE di un'istruzione UPDATE per verificare la presenza di eventuali violazioni alla concorrenza ottimistica.  
  
> [!NOTE]
>  Se si verifica un errore durante l'aggiornamento di una riga, viene generata un'eccezione e l'esecuzione dell'aggiornamento non è più disponibile. Per continuare l'operazione di aggiornamento senza generare eccezioni quando viene rilevato un errore, impostare il <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> proprietà `true` prima di chiamare <xref:System.Data.Common.DbDataAdapter.Update%2A>. È anche possibile rispondere agli errori in una riga all'interno di `RowUpdated` evento di un oggetto DataAdapter. Per continuare l'operazione di aggiornamento senza generare un'eccezione all'interno di `RowUpdated` set di eventi, il <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> proprietà del <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzata la classe derivata, <xref:System.Data.OleDb.OleDbDataAdapter>, per aggiornare l'origine dati.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Tabella di origine non valida.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Un tentativo di esecuzione di un'istruzione INSERT, UPDATE o DELETE non ha avuto effetto su alcun record.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataTable ^ dataTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">L'oggetto <see cref="T:System.Data.DataTable" /> utilizzato per aggiornare l'origine dati.</param>
        <summary>Aggiorna il valore nel database eseguendo le rispettive istruzioni INSERT, UPDATE o DELETE per ciascuna riga inserita, aggiornata o eliminata nell'oggetto <see cref="T:System.Data.DataTable" /> specificato.</summary>
        <returns>Numero di righe aggiornate correttamente dall'oggetto <see cref="T:System.Data.DataTable" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un'applicazione chiama il <xref:System.Data.Common.DbDataAdapter.Update%2A> (metodo), il <xref:System.Data.Common.DbDataAdapter> esamina il <xref:System.Data.DataRow.RowState%2A> , proprietà ed esegue le istruzioni INSERT, UPDATE o DELETE necessarie in modo iterativo per ogni riga, in base all'ordine degli indici configurati nel <xref:System.Data.DataSet>. Ad esempio, <xref:System.Data.Common.DbDataAdapter.Update%2A> potrebbe eseguire un'istruzione DELETE, seguita da un'istruzione INSERT e quindi un'altra istruzione DELETE, a causa dell'ordinamento delle righe di <xref:System.Data.DataTable>.  
  
 Si noti che queste istruzioni non vengono eseguite come un processo batch. ogni riga viene aggiornata singolarmente. Un'applicazione può chiamare il <xref:System.Data.DataSet.GetChanges%2A> in situazioni in cui è necessario controllare la sequenza di tipi di istruzione (ad esempio, gli inserimenti prima degli aggiornamenti). Per ulteriori informazioni, vedere [l'aggiornamento di origini dati con DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Se le istruzioni INSERT, UPDATE o DELETE non sono state specificate, il <xref:System.Data.Common.DbDataAdapter.Update%2A> metodo genera un'eccezione. Tuttavia, è possibile creare un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> oggetto per generare automaticamente le istruzioni SQL per gli aggiornamenti a tabella singola, se si imposta la `SelectCommand` proprietà di un provider di dati .NET Framework. Quindi, generate da tutte le istruzioni SQL aggiuntive non si imposta la **CommandBuilder**. Questa logica di generazione richiede informazioni della colonna chiave deve essere presente nel <xref:System.Data.DataSet>. Per ulteriori informazioni vedere [la generazione di comandi tramite commandbuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Il <xref:System.Data.Common.DbDataAdapter.Update%2A> che consente di recuperare le righe dalla tabella elencata nel primo mapping prima di eseguire un aggiornamento. Il <xref:System.Data.Common.DbDataAdapter.Update%2A> quindi aggiorna la riga utilizzando il valore di <xref:System.Data.IDbCommand.UpdatedRowSource%2A> proprietà. Tutte le eventuali righe restituite vengono ignorate.  
  
 Dopo che tutti i dati vengono caricati nuovamente il <xref:System.Data.DataSet>, il <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> evento viene generato, consentendo all'utente di controllare il riconciliato <xref:System.Data.DataSet> riga e le eventuali parametri di output restituiti dal comando. Dopo una riga viene aggiornata correttamente, vengono accettate le modifiche di tale riga.  
  
 Quando si utilizza <xref:System.Data.Common.DbDataAdapter.Update%2A>, l'ordine di esecuzione è il seguente:  
  
1.  I valori di <xref:System.Data.DataRow> vengono spostati i valori dei parametri.  
  
2.  Viene generato l'evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Esegue il comando.  
  
4.  Se il comando è impostato su `FirstReturnedRecord`, quindi il primo risultato restituito è inserito nel <xref:System.Data.DataRow>.  
  
5.  Se sono presenti parametri di output, questi vengono collocati nel <xref:System.Data.DataRow>.  
  
6.  Viene generato l'evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Chiamata del metodo <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Ogni comando associato il <xref:System.Data.Common.DbDataAdapter> in genere è una raccolta di parametri associata. I parametri sono mappati alla riga corrente tramite il `SourceColumn` e `SourceVersion` le proprietà di un provider di dati .NET Framework `Parameter` classe. `SourceColumn` fa riferimento a un <xref:System.Data.DataTable> colonna che il <xref:System.Data.Common.DbDataAdapter> riferimenti per ottenere i valori dei parametri per la riga corrente.  
  
 `SourceColumn` fa riferimento al nome della colonna non mappata prima i mapping delle tabelle sono stati applicati. Se `SourceColumn` fa riferimento a una colonna inesistente, l'azione eseguita dipende da uno dei seguenti <xref:System.Data.MissingMappingAction> valori.  
  
|Valore di enumerazione|Azione eseguita|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Utilizzare i nomi di tabella in e i nomi di colonna di origine di <xref:System.Data.DataSet> se è presente alcun mapping.|  
|`MissingMappingAction.Ignore`|Oggetto <xref:System.SystemException> viene generato. Quando i mapping vengono impostati in modo esplicito, la mancanza di mapping per un parametro di input è in genere il risultato di un errore.|  
|`MissingMappingAction.Error`|Oggetto <xref:System.SystemException> viene generato.|  
  
 Il `SourceColumn` proprietà viene utilizzata anche per il mapping del valore per l'output o i parametri di input/output del `DataSet`. Se fa riferimento a una colonna inesistente, viene generata un'eccezione.  
  
 Il `SourceVersion` proprietà di un provider di dati .NET Framework `Parameter` classe determina se utilizzare la versione Original, Current o Proposed del valore della colonna. Questa funzionalità viene spesso utilizzata per includere i valori originali nella clausola WHERE di un'istruzione UPDATE per verificare la presenza di eventuali violazioni alla concorrenza ottimistica.  
  
> [!NOTE]
>  Se si verifica un errore durante l'aggiornamento di una riga, viene generata un'eccezione e l'esecuzione dell'aggiornamento non è più disponibile. Per continuare l'operazione di aggiornamento senza generare eccezioni quando viene rilevato un errore, impostare il <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> proprietà `true` prima di chiamare <xref:System.Data.Common.DbDataAdapter.Update%2A>. È anche possibile rispondere agli errori in una riga all'interno di `RowUpdated` evento di un oggetto DataAdapter. Per continuare l'operazione di aggiornamento senza generare un'eccezione all'interno di `RowUpdated` set di eventi, il <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> proprietà del <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzata la classe derivata, <xref:System.Data.OleDb.OleDbDataAdapter>, per aggiornare l'origine dati.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">Tabella di origine non valida.</exception>
        <exception cref="T:System.SystemException">Non è presente alcuna classe <see cref="T:System.Data.DataRow" /> da aggiornare.  
  
 oppure  
  
 Non è presente alcuna classe <see cref="T:System.Data.DataTable" /> da aggiornare.  
  
 oppure  
  
 Non è presente alcun oggetto <see cref="T:System.Data.DataSet" /> da utilizzare come origine.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Un tentativo di esecuzione di un'istruzione INSERT, UPDATE o DELETE non ha avuto effetto su alcun record.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Update(class System.Data.DataRow[] dataRows, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Update (dataRows As DataRow(), tableMapping As DataTableMapping) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRows">Matrice di oggetti <see cref="T:System.Data.DataRow" /> utilizzata per aggiornare l'origine dati.</param>
        <param name="tableMapping">Insieme <see cref="P:System.Data.IDataAdapter.TableMappings" /> da utilizzare.</param>
        <summary>Aggiorna i valore nel database eseguendo le rispettive istruzioni INSERT, UPDATE o DELETE per ciascuna riga inserita, aggiornata o eliminata nella matrice specificata degli oggetti <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Numero di righe aggiornate correttamente dall'oggetto <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un'applicazione chiama il <xref:System.Data.Common.DbDataAdapter.Update%2A> (metodo), il <xref:System.Data.Common.DbDataAdapter> esamina il <xref:System.Data.DataRow.RowState%2A> , proprietà ed esegue le istruzioni INSERT, UPDATE o DELETE necessarie in modo iterativo per ogni riga, in base all'ordine degli indici configurati nel <xref:System.Data.DataSet>. Ad esempio, <xref:System.Data.Common.DbDataAdapter.Update%2A> potrebbe eseguire un'istruzione DELETE, seguita da un'istruzione INSERT e quindi un'altra istruzione DELETE, a causa dell'ordinamento delle righe di <xref:System.Data.DataTable>.  
  
 Si noti che queste istruzioni non vengono eseguite come un processo batch. ogni riga viene aggiornata singolarmente. Un'applicazione può chiamare il <xref:System.Data.DataSet.GetChanges%2A> in situazioni in cui è necessario controllare la sequenza di tipi di istruzione (ad esempio, gli inserimenti prima degli aggiornamenti). Per ulteriori informazioni, vedere [l'aggiornamento di origini dati con DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Se le istruzioni INSERT, UPDATE o DELETE non sono state specificate, il <xref:System.Data.Common.DbDataAdapter.Update%2A> metodo genera un'eccezione. Tuttavia, è possibile creare un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> oggetto per generare automaticamente le istruzioni SQL per gli aggiornamenti a tabella singola, se si imposta la `SelectCommand` proprietà di un provider di dati .NET Framework. Quindi, generate da tutte le istruzioni SQL aggiuntive non si imposta la **CommandBuilder**. Questa logica di generazione richiede informazioni della colonna chiave deve essere presente nel <xref:System.Data.DataSet>. Per ulteriori informazioni vedere [la generazione di comandi tramite commandbuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Il <xref:System.Data.Common.DbDataAdapter.Update%2A> che consente di recuperare le righe dalla tabella elencata nel primo mapping prima di eseguire un aggiornamento. Il <xref:System.Data.Common.DbDataAdapter.Update%2A> quindi aggiorna la riga utilizzando il valore di <xref:System.Data.IDbCommand.UpdatedRowSource%2A> proprietà. Tutte le eventuali righe restituite vengono ignorate.  
  
 Dopo che tutti i dati vengono caricati nuovamente il <xref:System.Data.DataSet>, il <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> evento viene generato, consentendo all'utente di controllare il riconciliato <xref:System.Data.DataSet> riga e le eventuali parametri di output restituiti dal comando. Dopo una riga viene aggiornata correttamente, vengono accettate le modifiche di tale riga.  
  
 Quando si utilizza <xref:System.Data.Common.DbDataAdapter.Update%2A>, l'ordine di esecuzione è il seguente:  
  
1.  I valori di <xref:System.Data.DataRow> vengono spostati i valori dei parametri.  
  
2.  Viene generato l'evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Esegue il comando.  
  
4.  Se il comando è impostato su `FirstReturnedRecord`, quindi il primo risultato restituito è inserito nel <xref:System.Data.DataRow>.  
  
5.  Se sono presenti parametri di output, questi vengono collocati nel <xref:System.Data.DataRow>.  
  
6.  Viene generato l'evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Chiamata del metodo <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Ogni comando associato il <xref:System.Data.Common.DbDataAdapter> in genere è una raccolta di parametri associata. I parametri sono mappati alla riga corrente tramite il `SourceColumn` e `SourceVersion` le proprietà di un provider di dati .NET Framework `Parameter` classe. `SourceColumn` fa riferimento a un <xref:System.Data.DataTable> colonna che il <xref:System.Data.Common.DbDataAdapter> riferimenti per ottenere i valori dei parametri per la riga corrente.  
  
 `SourceColumn` fa riferimento al nome della colonna non mappata prima i mapping delle tabelle sono stati applicati. Se `SourceColumn` fa riferimento a una colonna inesistente, l'azione eseguita dipende da uno dei seguenti <xref:System.Data.MissingMappingAction> valori.  
  
|Valore di enumerazione|Azione eseguita|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Utilizzare i nomi di tabella in e i nomi di colonna di origine di <xref:System.Data.DataSet> se è presente alcun mapping.|  
|`MissingMappingAction.Ignore`|Oggetto <xref:System.SystemException> viene generato. Quando i mapping vengono impostati in modo esplicito, la mancanza di mapping per un parametro di input è in genere il risultato di un errore.|  
|`MissingMappingAction.Error`|Oggetto <xref:System.SystemException> viene generato.|  
  
 Il `SourceColumn` proprietà viene utilizzata anche per il mapping del valore per l'output o i parametri di input/output del `DataSet`. Se fa riferimento a una colonna inesistente, viene generata un'eccezione.  
  
 Il `SourceVersion` proprietà di un provider di dati .NET Framework `Parameter` classe determina se utilizzare la versione Original, Current o Proposed del valore della colonna. Questa funzionalità viene spesso utilizzata per includere i valori originali nella clausola WHERE di un'istruzione UPDATE per verificare la presenza di eventuali violazioni alla concorrenza ottimistica.  
  
> [!NOTE]
>  Se si verifica un errore durante l'aggiornamento di una riga, viene generata un'eccezione e l'esecuzione dell'aggiornamento non è più disponibile. Per continuare l'operazione di aggiornamento senza generare eccezioni quando viene rilevato un errore, impostare il <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> proprietà `true` prima di chiamare <xref:System.Data.Common.DbDataAdapter.Update%2A>. È anche possibile rispondere agli errori in una riga all'interno di `RowUpdated` evento di un oggetto DataAdapter. Per continuare l'operazione di aggiornamento senza generare un'eccezione all'interno di `RowUpdated` set di eventi, il <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> proprietà del <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">Tabella di origine non valida.</exception>
        <exception cref="T:System.SystemException">Non è presente alcuna classe <see cref="T:System.Data.DataRow" /> da aggiornare.  
  
 oppure  
  
 Non è presente alcuna classe <see cref="T:System.Data.DataTable" /> da aggiornare.  
  
 oppure  
  
 Non è presente alcun oggetto <see cref="T:System.Data.DataSet" /> da utilizzare come origine.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Un tentativo di esecuzione di un'istruzione INSERT, UPDATE o DELETE non ha avuto effetto su alcun record.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">L'oggetto <see cref="T:System.Data.DataSet" /> da utilizzare per aggiornare l'origine dati.</param>
        <param name="srcTable">Nome della tabella di origine da usare per il mapping di tabelle.</param>
        <summary>Aggiorna i valori nel database eseguendo le rispettive istruzioni INSERT, UPDATE o DELETE per ogni riga inserita, aggiornata o eliminata nell'oggetto <see cref="T:System.Data.DataSet" /> con il nome <see cref="T:System.Data.DataTable" /> specificato.</summary>
        <returns>Numero di righe aggiornate correttamente dall'oggetto <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un'applicazione chiama il <xref:System.Data.Common.DbDataAdapter.Update%2A> (metodo), il <xref:System.Data.Common.DbDataAdapter> esamina il <xref:System.Data.DataRow.RowState%2A> , proprietà ed esegue le istruzioni INSERT, UPDATE o DELETE necessarie in modo iterativo per ogni riga, in base all'ordine degli indici configurati nel <xref:System.Data.DataSet>. Ad esempio, <xref:System.Data.Common.DbDataAdapter.Update%2A> potrebbe eseguire un'istruzione DELETE, seguita da un'istruzione INSERT e quindi un'altra istruzione DELETE, a causa dell'ordinamento delle righe di <xref:System.Data.DataTable>.  
  
 Si noti che queste istruzioni non vengono eseguite come un processo batch. ogni riga viene aggiornata singolarmente. Un'applicazione può chiamare il <xref:System.Data.DataSet.GetChanges%2A> in situazioni in cui è necessario controllare la sequenza di tipi di istruzione (ad esempio, inserire prima dell'aggiornamento). Per ulteriori informazioni, vedere [l'aggiornamento di origini dati con DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Se le istruzioni INSERT, UPDATE o DELETE non sono state specificate, il <xref:System.Data.Common.DbDataAdapter.Update%2A> metodo genera un'eccezione. Tuttavia, è possibile creare un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> oggetto per generare automaticamente le istruzioni SQL per gli aggiornamenti a tabella singola, se si imposta la `SelectCommand` proprietà di un provider di dati .NET Framework. Quindi, generate da tutte le istruzioni SQL aggiuntive non si imposta la **CommandBuilder**. Questa logica di generazione richiede informazioni della colonna chiave deve essere presente nel <xref:System.Data.DataSet>. Per ulteriori informazioni vedere [la generazione di comandi tramite commandbuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Il <xref:System.Data.Common.DbDataAdapter.Update%2A> metodo supporta scenari in cui il <xref:System.Data.DataSet> contiene più <xref:System.Data.DataTable> oggetti i cui nomi differiscono solo dalle maiuscole o minuscole. Quando sono presenti più tabelle con lo stesso nome ma con maiuscole/minuscole diverse, in un `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A> esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e genera un'eccezione se non esiste alcuna corrispondenza esatta. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet ds = new DataSet();  
 ds.Tables.Add("aaa");  
 ds.Tables.Add("AAA");  
 adapter.Update(ds, "aaa"); // Updates "aaa", which already exists in the DataSet.  
 adapter.Update(ds, "AAA"); // Updates "AAA", which already exists in the DataSet.  
    adapter.Update(ds, "Aaa"); // Results in an exception.  
```  
  
 Se <xref:System.Data.Common.DbDataAdapter.Update%2A> viene chiamato e <xref:System.Data.DataSet> contiene solo <xref:System.Data.DataTable> il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable> viene aggiornato. In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Update(dataset, "AAA"); // Updates table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Il <xref:System.Data.Common.DbDataAdapter.Update%2A> che consente di recuperare le righe dalla tabella elencata nel primo mapping prima di eseguire un aggiornamento. Il <xref:System.Data.Common.DbDataAdapter.Update%2A> quindi aggiorna la riga utilizzando il valore di <xref:System.Data.IDbCommand.UpdatedRowSource%2A> proprietà. Tutte le eventuali righe restituite vengono ignorate.  
  
 Dopo che tutti i dati vengono caricati nuovamente il <xref:System.Data.DataSet>, il <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> evento viene generato, consentendo all'utente di controllare il riconciliato <xref:System.Data.DataSet> riga e le eventuali parametri di output restituiti dal comando. Dopo una riga viene aggiornata correttamente, vengono accettate le modifiche di tale riga.  
  
 Quando si utilizza <xref:System.Data.Common.DbDataAdapter.Update%2A>, l'ordine di esecuzione è il seguente:  
  
1.  I valori di <xref:System.Data.DataRow> vengono spostati i valori dei parametri.  
  
2.  Viene generato l'evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Esegue il comando.  
  
4.  Se il comando è impostato su `FirstReturnedRecord`, quindi il primo risultato restituito è inserito nel <xref:System.Data.DataRow>.  
  
5.  Se sono presenti parametri di output, questi vengono collocati nel <xref:System.Data.DataRow>.  
  
6.  Viene generato l'evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Chiamata del metodo <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Ogni comando associato il <xref:System.Data.Common.DbDataAdapter> in genere è una raccolta di parametri associata. I parametri sono mappati alla riga corrente tramite il `SourceColumn` e `SourceVersion` le proprietà di un provider di dati .NET Framework `Parameter` classe. `SourceColumn` fa riferimento a un <xref:System.Data.DataTable> colonna che il <xref:System.Data.Common.DbDataAdapter> riferimenti per ottenere i valori dei parametri per la riga corrente.  
  
 `SourceColumn` fa riferimento al nome della colonna non mappata prima i mapping delle tabelle sono stati applicati. Se `SourceColumn` fa riferimento a una colonna inesistente, l'azione eseguita dipende da uno dei seguenti <xref:System.Data.MissingMappingAction> valori.  
  
|Valore di enumerazione|Azione eseguita|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Utilizzare i nomi di tabella in e i nomi di colonna di origine di <xref:System.Data.DataSet> se è presente alcun mapping.|  
|`MissingMappingAction.Ignore`|Oggetto <xref:System.SystemException> viene generato. Quando i mapping vengono impostati in modo esplicito, la mancanza di mapping per un parametro di input è in genere il risultato di un errore.|  
|`MissingMappingAction.Error`|Oggetto <xref:System.SystemException> viene generato.|  
  
 Il `SourceColumn` proprietà viene utilizzata anche per il mapping del valore per l'output o i parametri di input/output del `DataSet`. Se fa riferimento a una colonna inesistente, viene generata un'eccezione.  
  
 Il `SourceVersion` proprietà di un provider di dati .NET Framework `Parameter` classe determina se utilizzare la versione Original, Current o Proposed del valore della colonna. Questa funzionalità viene spesso utilizzata per includere i valori originali nella clausola WHERE di un'istruzione UPDATE per verificare la presenza di eventuali violazioni alla concorrenza ottimistica.  
  
> [!NOTE]
>  Se si verifica un errore durante l'aggiornamento di una riga, viene generata un'eccezione e l'esecuzione dell'aggiornamento non è più disponibile. Per continuare l'operazione di aggiornamento senza generare eccezioni quando viene rilevato un errore, impostare il <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> proprietà `true` prima di chiamare <xref:System.Data.Common.DbDataAdapter.Update%2A>. È anche possibile rispondere agli errori in una riga all'interno di `RowUpdated` evento di un oggetto DataAdapter. Per continuare l'operazione di aggiornamento senza generare un'eccezione all'interno di `RowUpdated` set di eventi, il <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> proprietà del <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzata la classe derivata, <xref:System.Data.OleDb.OleDbDataAdapter>, per aggiornare l'origine dati.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">Tabella di origine non valida.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Un tentativo di esecuzione di un'istruzione INSERT, UPDATE o DELETE non ha avuto effetto su alcun record.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateBatchSize">
      <MemberSignature Language="C#" Value="public virtual int UpdateBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UpdateBatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateBatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UpdateBatchSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che attiva o disabilita il supporto dell'elaborazione batch e specifica il numero di comandi che è possibile eseguire in un batch.</summary>
        <value>Numero di righe da elaborare per batch.  
  
 <list type="table"><listheader><term> Valore è  
  
 </term><description> Effetto  
  
 </description></listheader><item><term> 0  
  
 </term><description> Non sussiste alcun limite alla dimensione del batch.  
  
 </description></item><item><term> 1  
  
 </term><description> Disabilita l'aggiornamento in batch.  
  
 </description></item><item><term> &gt; 1  
  
 </term><description> Le modifiche vengono inviate utilizzando i batch di <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> operazioni alla volta.  
  
 </description></item></list>  
  
 Quando si imposta un valore diverso da 1, tutti i comandi associati il <see cref="T:System.Data.Common.DbDataAdapter" /> deve avere i <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> proprietà impostata su **Nessuno** o **OutputParameters**. In caso contrario, viene generata un'eccezione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Data.Common.DbDataAdapter.UpdateBatchSize%2A> proprietà per aggiornare un'origine dati con le modifiche da un <xref:System.Data.DataSet>. Se il provider di dati supporta l'elaborazione batch, questo può migliorare le prestazioni dell'applicazione riducendo il numero di round trip al server. In ADO.NET 2.0, questa proprietà è supportata per i provider di dati .NET per SQL Server (SqlClient) e Oracle (OracleClient).  
  
 Le prestazioni risulteranno ridotte se si esegue un batch di dimensioni molto elevate. Pertanto, prima di implementare l'applicazione è consigliabile verificare quale sia la dimensione ottimale per i batch.  
  
 Un <xref:System.ArgumentOutOfRangeException> verrà generata un'eccezione se il valore è impostato su un numero minore di zero.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ UpdateCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un comando utilizzato per aggiornare i record nell'origine dati.</summary>
        <value>Interfaccia <see cref="T:System.Data.IDbCommand" /> utilizzata durante l'applicazione del metodo <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />, per l'aggiornamento nell'origine dati dei record relativi alle righe modificate nel set di dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durante la <xref:System.Data.Common.DbDataAdapter.Update%2A>, se questa proprietà non è impostata e informazioni sulla chiave primarie è presente nel <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> verrà generato automaticamente.  
  
   
  
## Examples  
 Nell'esempio seguente viene creata la classe derivata <xref:System.Data.OleDb.OleDbDataAdapter> e vengono impostate alcune delle relative proprietà.  
  
 [!code-csharp[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>