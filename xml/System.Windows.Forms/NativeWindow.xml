<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="547a0fa86ff2ce303d6c98e4bb8cd3b372c52847" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36517314" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fornisce un'inclusione di basso livello di un handle di finestra e di una routine di finestra.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa classe gestisce automaticamente la registrazione e la creazione della classe di finestra.  
  
 Una finestra non è idonea per l'operazione di garbage collection quando è associato a un handle di finestra. Per garantire una corretta operazione di garbage collection, gli handle devono essere eliminati manualmente tramite <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> o liberata usando <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  
  
> [!NOTE]
>  Il <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> metodo viene chiamato quando viene elaborato il messaggio WM_NCDESTROY. Ciò significa che esistono casi in cui non è necessario chiamare manualmente <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, ma è consigliabile farlo.  
  
 Il <xref:System.Windows.Forms.NativeWindow> classe fornisce proprietà e metodi per gestire gli handle di seguenti: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, e <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'intercettazione di messaggi di finestra sistema operativo in una routine della finestra e creazione di una finestra con un nome di classe di finestra specifico del sistema operativo. L'esempio crea due classi che ereditano da <xref:System.Windows.Forms.NativeWindow> che tale scopo.  
  
 Il `MyNativeWindowListener` classe hook routine della finestra del form passato al costruttore ed esegue l'override di <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metodo per intercettare la `WM_ACTIVATEAPP` messaggio della finestra. La classe illustra l'uso del <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> e <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> metodi per identificare l'handle di finestra di <xref:System.Windows.Forms.NativeWindow> utilizzerà. L'handle viene assegnato in base al <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> e <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventi. Quando il `WM_ACTIVATEAPP` finestra di messaggio viene ricevuto, la classe chiama il `form1.ApplicationActivated` metodo.  
  
 Il `MyNativeWindow` classe crea una nuova finestra con il <xref:System.Windows.Forms.CreateParams.ClassName%2A> impostato su `BUTTON`. La classe viene illustrato come utilizzare il <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> metodo e si esegue l'override il <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metodo per intercettare i messaggi di finestra che sono state ricevute.  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">per il chiamante immediato chiamare codice non gestito. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza un'istanza della classe <see cref="T:System.Windows.Forms.NativeWindow" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa è l'impostazione predefinita <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> costruttore fornito dal compilatore. Il <xref:System.Windows.Forms.NativeWindow> classe ha anche un costruttore statico che inizializza i gestori di messaggi a livello di dominio di applicazione e le tabelle hash.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Handle da assegnare a questa finestra.</param>
        <summary>Assegna un handle a questa finestra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> Consente di intercettare messaggi finestra inviati per la `handle` parametro. Utilizzare <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> per reimpostare la routine dell'handle finestra alla routine della finestra predefinita.  
  
 Il <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> chiamate al metodo il <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> metodo per indicare che il valore della <xref:System.Windows.Forms.NativeWindow.Handle%2A> proprietà modificata.  
  
> [!NOTE]
>  L'handle per l'assegnazione non può essere in un altro processo dell'applicazione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'intercettazione di messaggi finestra sistema operativo in una routine della finestra. Nell'esempio viene creata una classe che eredita da <xref:System.Windows.Forms.NativeWindow> a tale scopo.  
  
 Il `MyNativeWindowListener` classe hook routine della finestra del form passato al costruttore ed esegue l'override di <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metodo intercetta il `WM_ACTIVATEAPP` messaggio della finestra. La classe viene illustrato come utilizzare il <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> e <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> metodi per identificare quale finestra gestiscono il <xref:System.Windows.Forms.NativeWindow> utilizzerà. L'handle viene assegnato in base al <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> e <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventi. Quando il `WM_ACTIVATEAPP` finestra di messaggio viene ricevuto, la classe chiama il `form1.ApplicationActivated` metodo.  
  
 Questo codice è tratto dall'esempio illustrato nel <xref:System.Windows.Forms.NativeWindow> Cenni preliminari sulla classe. Parte del codice non viene visualizzato allo scopo di brevità. Vedere <xref:System.Windows.Forms.NativeWindow> per il listato di codice completo.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Questa finestra dispone già di un handle.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Non è possibile recuperare la routine di finestra per la finestra nativa associata.</exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">
          <see cref="T:System.Windows.Forms.CreateParams" /> che specifica i parametri di creazione per la finestra corrente.</param>
        <summary>Crea una finestra e il relativo handle con i parametri di creazione specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `cp` parametro specifica i valori che vengono passati a Win32 nativo `CreateWindowEx` i metodi per creare una finestra e il relativo handle.  
  
 Quando il <xref:System.Windows.Forms.CreateParams.ClassName%2A> campo non `null`, l'handle di finestra appena creato eredita dalla classe specificata. Ad esempio, se <xref:System.Windows.Forms.CreateParams.ClassName%2A> è impostata su `BUTTON`, la finestra appena creata è basata su Win32 `BUTTON` classe della finestra. Il <xref:System.Windows.Forms.CreateParams.Param%2A> proprietà del <xref:System.Windows.Forms.CreateParams.ClassName%2A> oggetto deve essere `null` o fare riferimento a un'istanza di una classe che è stata dichiarata come una struttura.  
  
 Questo codice è tratto dall'esempio illustrato nel <xref:System.Windows.Forms.NativeWindow> Cenni preliminari sulla classe. Parte del codice non viene visualizzato allo scopo di brevità. Vedere <xref:System.Windows.Forms.NativeWindow> per il listato di codice completo.  
  
> [!NOTE]
>  Il nome di classe specificato è registrato con il sistema operativo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrata la creazione di una finestra con un nome di classe di finestra specifico del sistema operativo. Nell'esempio viene creata una classe che eredita da <xref:System.Windows.Forms.NativeWindow> a tale scopo.  
  
 Il `MyNativeWindow` classe crea una nuova finestra con il <xref:System.Windows.Forms.CreateParams.ClassName%2A> impostato su `BUTTON`. Crea una finestra del pulsante Win32. La posizione e dimensioni del pulsante è impostata, insieme a si specificano gli stili di finestra aggiuntiva. La classe viene illustrato come utilizzare il <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> ed eseguire l'override di <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metodo per intercettare i messaggi di finestra che sono state ricevute. Sebbene nell'esempio viene cercato il WM_ACTIVATEAPP, ciò può sostituito in un'applicazione reale con i messaggi della finestra specifici del tipo creato.  
  
> [!NOTE]
>  Alcuni tipi di controllo inviano i messaggi di finestra alla finestra padre anziché nella finestra. Windows Platform SDK per ulteriori informazioni, vedere.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Nel tentativo di creare la finestra nativa, il sistema operativo ha esaurito le risorse.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">L'API Win32 nativa non è in grado di creare la finestra specificata.</exception>
        <exception cref="T:System.InvalidOperationException">L'handle della finestra nativa corrente è già stato assegnato; in altri termini, la proprietà <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> è diversa da <see cref="F:System.IntPtr.Zero" />.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per creare una finestra di primo livello. Questa autorizzazione è richiesta solo se lo stile della finestra non è un elemento figlio o se la finestra non ha un padre. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Messaggio correntemente in fase di elaborazione.</param>
        <summary>Richiama la routine di finestra predefinita associata a questa finestra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, si chiama solo il <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> metodo quando si intercettano i messaggi della finestra e si desidera la procedura di finestra predefinito per gestire il messaggio. <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> non deve essere chiamato per inviare un messaggio della finestra alla finestra. chiamare Win32 `SendMessage` funzione.  
  
 È consentito chiamare <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> quando il <xref:System.Windows.Forms.NativeWindow.Handle%2A> proprietà è 0.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Eseguire l'override di questo metodo in una classe derivata per implementare generalizzato personalizzati di messaggi per una specifica finestra nativa o Windows Form .NET <see cref="T:System.Windows.Forms.Control" />. L'elaborazione personalizzata può essere eseguita prima, dopo o invece di una chiamata all'implementazione della classe base di questo metodo, che esegue l'elaborazione dei messaggi standard.  Al contrario, aggiunta personalizzate per un'applicazione può essere eseguita tramite la gestione dei messaggi il <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> metodo del <see cref="T:System.Windows.Forms.Application" /> classe.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Elimina la finestra e il relativo handle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo elimina la finestra associata la <xref:System.Windows.Forms.NativeWindow.Handle%2A>, imposta la <xref:System.Windows.Forms.NativeWindow.Handle%2A> proprietà su 0, quindi chiama il <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> metodo in modo da riflettere la modifica. In genere, si chiama solo <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> termine con la finestra nativa.  
  
> [!NOTE]
>  Il <xref:System.Windows.Forms.NativeWindow> classe verrà automaticamente distruggere la finestra associata e rilasciare le risorse in risposta a un messaggio WM_DESTROY.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia le risorse associate a questa finestra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.NativeWindow.Finalize%2A> metodo rimuove la classe derivata Win32 associata all'oggetto corrente <xref:System.Windows.Forms.NativeWindow> rilascia l'handle di istanza e invia un messaggio WM_CLOSE associato alla finestra.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Handle di una finestra.</param>
        <summary>Recupera la finestra associata all'handle specificato.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.NativeWindow" /> associato all'handle specificato. Questo metodo restituisce <see langword="null" /> quando nessuna finestra è associata all'handle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se si riceve un handle da un altro metodo, utilizzare questo metodo per recuperare la finestra associata all'handle. L'handle deve già essere proprietario un altro <xref:System.Windows.Forms.NativeWindow> nell'oggetto processo; in caso contrario, `null` viene restituito.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'handle di questa finestra.</summary>
        <value>In caso di esito positivo, oggetto <see cref="T:System.IntPtr" /> che rappresenta l'handle associato alla finestra Win32 nativa; in caso contrario, 0 se non esistono handle associati alla finestra.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo quando si chiamano metodi API di Windows che richiedono un handle per una finestra o un controllo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrata la creazione di una finestra con un nome di classe di finestra specifico del sistema operativo. Nell'esempio viene creata una classe che eredita da <xref:System.Windows.Forms.NativeWindow> a tale scopo. Nell'esempio viene illustrato anche l'override di <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> metodo ricevere una notifica quando il <xref:System.Windows.Forms.NativeWindow.Handle%2A> le modifiche.  
  
 Il `MyNativeWindow` classe crea una nuova finestra con il <xref:System.Windows.Forms.CreateParams.ClassName%2A> impostato al pulsante. Crea una finestra del pulsante Win32. La posizione e dimensioni del pulsante è impostata, insieme a si specificano gli stili di finestra aggiuntiva. La classe viene illustrato come utilizzare il <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> ed eseguire l'override di <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metodo per intercettare i messaggi di finestra che sono state ricevute. Sebbene nell'esempio viene cercato il WM_ACTIVATEAPP, questo è stato sostituito in un'applicazione reale con i messaggi della finestra specifici del tipo creato.  
  
> [!NOTE]
>  Alcuni tipi di controllo inviano i messaggi di finestra alla finestra padre anziché nella finestra. Windows Platform SDK per ulteriori informazioni, vedere.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Specifica un metodo di notifica che viene chiamato quando varia l'handle di una finestra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene richiamato quando il valore della <xref:System.Windows.Forms.NativeWindow.Handle%2A> proprietà modificata.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrata la creazione di una finestra con un nome di classe di finestra specifico del sistema operativo. Nell'esempio viene creata una classe che eredita da <xref:System.Windows.Forms.NativeWindow> a tale scopo. Nell'esempio viene illustrato anche l'override di <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> metodo ricevere una notifica quando il <xref:System.Windows.Forms.NativeWindow.Handle%2A> le modifiche.  
  
 Il `MyNativeWindow` classe crea una nuova finestra con il <xref:System.Windows.Forms.CreateParams.ClassName%2A> impostato su `BUTTON`. Crea una finestra del pulsante Win32. La posizione e dimensioni del pulsante è impostata, insieme a si specificano gli stili di finestra aggiuntiva. La classe viene illustrato come utilizzare il <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> ed eseguire l'override di <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metodo per intercettare i messaggi di finestra che sono state ricevute. Sebbene nell'esempio viene cercato il WM_ACTIVATEAPP, ciò può sostituito in un'applicazione reale con i messaggi della finestra specifici del tipo creato.  
  
 Questo codice è tratto dall'esempio illustrato nel <xref:System.Windows.Forms.NativeWindow> Cenni preliminari sulla classe. Parte del codice non viene visualizzato allo scopo di brevità. Vedere <xref:System.Windows.Forms.NativeWindow> per il listato di codice completo.  
  
> [!NOTE]
>  Alcuni tipi di controllo inviano i messaggi di finestra alla finestra padre anziché nella finestra. Windows Platform SDK per ulteriori informazioni, vedere.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Eseguire l'override di questo metodo per rilevare le modifiche apportate agli handle di finestra.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Exception" /> che specifica le eccezioni di thread non gestite.</param>
        <summary>Quando è sottoposto a override in una classe derivata, gestisce un'eccezione di thread non gestita.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, <xref:System.Windows.Forms.Application.OnThreadException%2A> gestisce le eccezioni tra thread.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia l'handle associato a questa finestra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non elimina definitivamente l'handle di finestra. Imposta invece la routine dell'handle finestra alla routine della finestra predefinita. Imposta il <xref:System.Windows.Forms.NativeWindow.Handle%2A> proprietà su 0 e chiamate <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> in modo da riflettere la modifica.  
  
 Una finestra automaticamente chiama questo metodo se riceve un messaggio WM_NCDESTROY nativo Win32, che indica che Windows ha eliminato l'handle.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'intercettazione di messaggi finestra sistema operativo in una routine della finestra. Nell'esempio viene creata una classe che eredita da <xref:System.Windows.Forms.NativeWindow> a tale scopo.  
  
 Il `MyNativeWindowListener` classe hook routine della finestra del form passato al costruttore ed esegue l'override di <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metodo intercetta il `WM_ACTIVATEAPP` messaggio della finestra. La classe viene illustrato come utilizzare il <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> e <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> metodi per identificare l'handle di finestra il <xref:System.Windows.Forms.NativeWindow> utilizzerà. L'handle viene assegnato in base al <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> e <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventi. Quando il `WM_ACTIVATEAPP` finestra di messaggio viene ricevuto, la classe chiama il `form1.ApplicationActivated` metodo.  
  
 Questo codice è tratto dall'esempio illustrato nel <xref:System.Windows.Forms.NativeWindow> Cenni preliminari sulla classe. Parte del codice non viene visualizzato allo scopo di brevità. Vedere <xref:System.Windows.Forms.NativeWindow> per il listato di codice completo.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Oggetto <see cref="T:System.Windows.Forms.Message" /> associato al messaggio corrente di Windows.</param>
        <summary>Richiama la routine di finestra predefinita associata a questa finestra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato quando viene inviato un messaggio della finestra per l'handle della finestra.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'intercettazione di messaggi finestra sistema operativo in una routine della finestra. Nell'esempio viene creata una classe che eredita da <xref:System.Windows.Forms.NativeWindow> a tale scopo.  
  
 Il `MyNativeWindowListener` classe hook routine della finestra del form passato al costruttore ed esegue l'override di <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metodo per intercettare la `WM_ACTIVATEAPP` messaggio della finestra. La classe viene illustrato come utilizzare il <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> e <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> metodi per identificare l'handle di finestra il <xref:System.Windows.Forms.NativeWindow> utilizzerà. L'handle viene assegnato in base al <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> e <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> eventi. Quando il `WM_ACTIVATEAPP` finestra di messaggio viene ricevuto, la classe chiama il `form1.ApplicationActivated` metodo.  
  
 Questo codice è tratto dall'esempio illustrato nel <xref:System.Windows.Forms.NativeWindow> Cenni preliminari sulla classe. Parte del codice non viene visualizzato allo scopo di brevità. Vedere <xref:System.Windows.Forms.NativeWindow> per il listato di codice completo.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Eseguire l'override di questo metodo per implementare l'elaborazione del messaggio specifico. Chiamare <c>base. WndProc</c> per messaggi non gestiti.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>