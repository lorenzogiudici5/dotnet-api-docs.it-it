<Type Name="HtmlDocument" FullName="System.Windows.Forms.HtmlDocument">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="de61a40d29466f5571748e067903d4dbe58bd524" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36521312" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HtmlDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlDocument extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlDocument" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlDocument" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlDocument sealed" />
  <TypeSignature Language="F#" Value="type HtmlDocument = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce l'accesso a livello di codice al primo livello della struttura di un documento HTML contenuto nel controllo <see cref="T:System.Windows.Forms.WebBrowser" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument> fornisce un wrapper gestito per oggetto documento di Internet Explorer, noto anche come documento oggetto Model (DOM) HTML. Per ottenere un'istanza di <xref:System.Windows.Forms.HtmlDocument> tramite il <xref:System.Windows.Forms.WebBrowser.Document%2A> proprietà del <xref:System.Windows.Forms.WebBrowser> controllo.  
  
 I tag HTML all'interno di un documento HTML possono essere annidati all'interno di altri. <xref:System.Windows.Forms.HtmlDocument> pertanto rappresenta la struttura del documento, il cui gli elementi figlio sono istanze del <xref:System.Windows.Forms.HtmlElement> classe. Esempio di codice seguente viene illustrato un semplice file HTML.  
  
```  
<HTML>  
    <BODY>  
        <DIV name="Span1">Simple HTML Form</DIV>  
        <FORM>  
            <SPAN name="TextLabel">Enter Your Name:</SPAN>  
            <INPUT type="text" size="20" name="Text1">  
        </FORM>  
    </BODY>  
</HTML>  
```  
  
 In questo esempio, <xref:System.Windows.Forms.HtmlDocument> rappresenta l'intero documento all'interno di `HTML` tag. Il `BODY`, `DIV`, `FORM` e `SPAN` tag sono rappresentati da singoli <xref:System.Windows.Forms.HtmlElement> oggetti.  
  
 Esistono diversi modi accedere agli elementi di questa struttura ad albero. Usare la <xref:System.Windows.Forms.HtmlDocument.Body%2A> proprietà a cui accedere il `BODY` tag e tutti i relativi figli. Il <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> proprietà offre il <xref:System.Windows.Forms.HtmlElement> per l'elemento in una pagina HTML che ha lo stato attivo dell'input utente. Tutti gli elementi all'interno di una pagina HTML possono avere un nome; il <xref:System.Windows.Forms.HtmlDocument.All%2A> insieme fornisce l'accesso a ogni <xref:System.Windows.Forms.HtmlElement> utilizzando il nome di un indice. <xref:System.Windows.Forms.HtmlDocument.GetElementsByTagName%2A> verrà restituito un <xref:System.Windows.Forms.HtmlElementCollection> di tutti i <xref:System.Windows.Forms.HtmlElement> oggetti con un determinato nome di tag HTML, ad esempio `DIV` o `TABLE`. <xref:System.Windows.Forms.HtmlDocument.GetElementById%2A> verrà restituito il singolo <xref:System.Windows.Forms.HtmlElement> corrispondente all'ID univoco che viene fornito. <xref:System.Windows.Forms.HtmlDocument.GetElementFromPoint%2A> verrà restituito il <xref:System.Windows.Forms.HtmlElement> è presente sullo schermo del puntatore del mouse fornito.  
  
 È anche possibile usare il <xref:System.Windows.Forms.HtmlDocument.Forms%2A> e <xref:System.Windows.Forms.HtmlDocument.Images%2A> insieme per scorrere gli elementi che rappresentano l'utente di input form e le immagini, rispettivamente.  
  
 <xref:System.Windows.Forms.HtmlDocument> si basa sulle interfacce non gestite implementate da DHTML DOM di Internet Explorer: `IHTMLDocument`, `IHTMLDocument2`, `IHTMLDocument3`, e `IHTMLDocument4`. Solo le proprietà utilizzati più di frequente e i metodi su queste interfacce non gestite vengono esposti da <xref:System.Windows.Forms.HtmlDocument>. È possibile accedere a tutte le altre proprietà e metodi direttamente usando il <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A> proprietà, che è possibile eseguire il cast al puntatore dell'interfaccia non gestita desiderato.  
  
 Un documento HTML può contenere frame, ossia windows diverso all'interno del <xref:System.Windows.Forms.WebBrowser> controllo. Ogni frame consente di visualizzare la propria pagina HTML. Il <xref:System.Windows.Forms.HtmlWindow.Frames%2A> insieme è disponibile tramite il <xref:System.Windows.Forms.HtmlDocument.Window%2A> proprietà. È inoltre possibile utilizzare il <xref:System.Windows.Forms.HtmlDocument.Window%2A> proprietà per ridimensionare la pagina visualizzata, scorre il documento o visualizzare gli avvisi e viene richiesto all'utente.  
  
 <xref:System.Windows.Forms.HtmlDocument> espone gli eventi più comuni che si aspetta gestire quando si utilizzano pagine HTML. Per gli eventi non esposti direttamente dall'interfaccia, è possibile aggiungere un gestore per l'evento utilizzando <xref:System.Windows.Forms.HtmlDocument.AttachEventHandler%2A>.  
  
 File HTML possono contenere `SCRIPT` tag che incapsulano codice scritto in uno dei linguaggi di script, ad esempio VBScript o JScript. Il <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> metodo disponibile per l'esecuzione delle proprietà e metodi definiti in un `SCRIPT` tag.  
  
> [!NOTE]
>  Mentre la maggior parte delle proprietà, metodi ed eventi in <xref:System.Windows.Forms.HtmlDocument> hanno mantenuto lo stesso nome utilizzato nel DOM non gestito, alcuni sono state modificate per garantire la coerenza con la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
   
  
## Examples  
 Esempio di codice seguente usa i dati dal database Northwind per creare un `HTML TABLE` in modo dinamico utilizzando <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>. Il <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> innanzitutto metodo inoltre è utilizzato per aggiungere celle (`TD` elementi) alle righe (`TR` elementi), quindi per aggiungere righe alla tabella e infine per aggiungere la tabella alla fine del documento corrente. L'esempio di codice richiede che l'applicazione dispone di un <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`. Il codice deve essere chiamato dopo che è stato caricato un documento.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ActiveElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement ActiveElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement ActiveElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.ActiveElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActiveElement As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ ActiveElement { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ActiveElement : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlDocument.ActiveElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Fornisce l'oggetto <see cref="T:System.Windows.Forms.HtmlElement" /> che ha attualmente lo stato attivo per l'input dell'utente.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.HtmlElement" /> che ha attualmente lo stato attivo per l'input dell'utente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando il documento ha lo stato attivo, ma nessun elemento del documento non è stato assegnato lo stato attivo, <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> restituisce l'elemento corrispondente di `<BODY>` tag.  
  
 Se il documento non è attivo, <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> restituisce `null`.  
  
 Se l'elemento corrente con stato attivo di input è una cella (`TD`) in un elemento HTML `TABLE` tag <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> restituirà l'elemento che contiene il `TABLE` elemento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ActiveLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ActiveLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.ActiveLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property ActiveLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ActiveLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ActiveLinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.ActiveLinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'oggetto <see cref="T:System.Drawing.Color" /> di un collegamento ipertestuale quando un utente vi fa clic.</summary>
        <value>Oggetto <see cref="T:System.Drawing.Color" /> per i collegamenti attivi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un collegamento è attivo quando un utente fa clic su di esso. Modificare questa proprietà per modificare il colore del collegamento prima della navigazione.  
  
 Il <xref:System.Drawing.Color> digitare il [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] supporta una `Alpha` valore, ma DOM HTML non. Pertanto, `Alpha` non avrà alcun effetto quando viene assegnato a questa proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection All { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection All" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.All" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property All As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ All { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.All : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.All" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un'istanza di <see cref="T:System.Windows.Forms.HtmlElementCollection" />, in cui sono memorizzati tutti gli oggetti <see cref="T:System.Windows.Forms.HtmlElement" /> per il documento.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.HtmlElementCollection" /> contenente tutti gli elementi del documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.HtmlDocument.All%2A> raccolta fornisce l'accesso casuale a qualsiasi elemento nel documento HTML, indipendentemente dalla relativa posizione nell'albero del documento. Usarlo per accedere a qualsiasi elemento in un documento HTML in base al nome, ID, o un indice. È inoltre possibile scorrere tutti gli elementi all'interno di un documento.  
  
 Alcuni elementi, ad esempio `HEAD` e `TITLE`, non sarà mai necessario ripristinare i nomi associati. Tutti gli altri elementi avranno nomi solo se l'autore del file HTML di cui sono state assegnate. È possibile accedere agli elementi senza nome per ID o indice.  
  
 Non è possibile aggiungere direttamente a elementi di <xref:System.Windows.Forms.HtmlDocument.All%2A> insieme, perché tutti gli elementi in un elemento HTML del file all'esterno del `HTML` tag deve contenere un elemento padre. Utilizzare il <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> metodo o il <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> proprietà su <xref:System.Windows.Forms.HtmlElement> per aggiungere nuovi elementi nell'albero.  
  
   
  
## Examples  
 Esempio di codice seguente scorre tutti gli elementi in un documento e set `Enabled=True`, l'abilitazione di tutti gli elementi che potrebbero essere stati disabilitati per impostazione predefinita per evitare l'input utente durante il caricamento del documento. L'esempio di codice richiede che l'applicazione contiene un <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.HtmlDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlDocument.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nome dell'evento da gestire.</param>
        <param name="eventHandler">Codice gestito che gestisce l'evento.</param>
        <summary>Aggiunge un gestore eventi per l'evento HTML DOM specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non connettersi un evento al documento o a uno dei relativi oggetti fino a quando il documento ha completato il caricamento. È necessario chiamare questo metodo prima la <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> evento del <xref:System.Windows.Forms.WebBrowser> controllo.  
  
 Questo metodo consente di associare gestori di eventi DOM non gestiti non esposti da <xref:System.Windows.Forms.HtmlDocument>. Per ulteriori informazioni sugli eventi DOM non gestiti disponibili, vedere [l'accesso a membri non esposti sul modello a oggetti documento HTML gestito](~/docs/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model.md) e le interfacce IHTMLDocument: [IHTMLDocument](http://go.microsoft.com/fwlink/?LinkId=104882), [IHTMLDocument2](http://go.microsoft.com/fwlink/?LinkId=104884), [IHTMLDocument3](http://go.microsoft.com/fwlink/?LinkId=104886), [IHTMLDocument4](http://go.microsoft.com/fwlink/?LinkId=104887), [IHTMLDocument5](http://go.microsoft.com/fwlink/?LinkId=104888).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il colore di sfondo del documento HTML.</summary>
        <value>Oggetto <see cref="T:System.Drawing.Color" /> dello sfondo del documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.BackColor%2A> verrà visualizzato quando nessun altro elemento occupa quell'area dello schermo.  
  
 Il <xref:System.Drawing.Color> digitare il [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] supporta una `Alpha` valore, ma DOM HTML non. Pertanto, `Alpha` non avrà alcun effetto quando viene assegnato a questa proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.ForeColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.LinkColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement Body { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement Body" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Body" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Body As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ Body { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Body : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlDocument.Body" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Windows.Forms.HtmlElement" /> per il tag <c>BODY</c>.</summary>
        <value>Il <see cref="T:System.Windows.Forms.HtmlElement" /> dell'oggetto per il <c>corpo</c> tag.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un documento HTML viene suddivisa in due sezioni principali:  
  
-   `HEAD`, che contiene il titolo del documento, eventuali metadati, e `SCRIPT` elementi.  
  
-   `BODY`, che contiene tutti gli elementi coinvolti nella sullo schermo l'aspetto del documento.  
  
 È disponibile un equivalente `Head` proprietà <xref:System.Windows.Forms.HtmlDocument>. Per ottenere il `HEAD` elemento, utilizzare <xref:System.Windows.Forms.HtmlDocument.GetElementsByTagName%2A>.  
  
   
  
## Examples  
 Esempio di codice seguente crea un nuovo `DIV` elemento e lo aggiunge alla fine del documento utilizzando il <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> metodo.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlDocument#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Click : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente fa clic in un qualsiasi punto del documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente rileva un clic sul documento, individua l'elemento e utilizza <xref:System.Windows.Forms.HtmlElement.ScrollIntoView%2A> per allineare l'elemento alla parte superiore della pagina Web.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuShowing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler ContextMenuShowing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler ContextMenuShowing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.ContextMenuShowing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuShowing As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ ContextMenuShowing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuShowing : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.ContextMenuShowing : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente richiede la visualizzazione del menu contestuale del documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, se clic il pulsante destro del mouse su un documento o un elemento in un documento, verrà visualizzato un determinato menu di contesto predefinito per l'elemento. Usare questo evento per annullare la visualizzazione del menu di scelta rapida e visualizzare uno proprio.  
  
   
  
## Examples  
 Le acquisizioni di esempio di codice seguente il <xref:System.Windows.Forms.HtmlDocument.ContextMenuShowing> evento e viene utilizzato per visualizzare un <xref:System.Windows.Forms.ContextMenuStrip>.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cookie">
      <MemberSignature Language="C#" Value="public string Cookie { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Cookie" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Cookie" />
      <MemberSignature Language="VB.NET" Value="Public Property Cookie As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Cookie { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cookie : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Cookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta i cookie HTTP associati al documento corrente.</summary>
        <value>Oggetto <see cref="T:System.String" /> contenente un elenco di cookie separati da un punto e virgola.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.HtmlDocument.Cookie%2A> proprietà di <xref:System.Windows.Forms.HtmlDocument> espone tutti i cookie impostato per una pagina Web.  
  
 Un *cookie* è una coppia nome/valore arbitrario associata a una pagina Web specificata. Gli sviluppatori Web usare i cookie per rilevare quando gli utenti visitano o ripristinare un sito Web. Un cookie è costituito da più parti, chiamate cookie che consentono di determinare quanto segue:  
  
-   Il documento impostato su cui viene applicato il cookie; il dominio e il percorso.  
  
-   Il nome e il valore del cookie.  
  
-   La data di scadenza del cookie.  
  
-   Indica se il cookie può essere inviato solo tramite una connessione protetta.  
  
 Il <xref:System.Windows.Forms.HtmlDocument.Cookie%2A> proprietà può contenere più cookie.  
  
 È possibile utilizzare solo il <xref:System.Windows.Forms.HtmlDocument.Cookie%2A> proprietà per impostare un cookie alla volta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement CreateElement (string elementTag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement CreateElement(string elementTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.CreateElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateElement (elementTag As String) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ CreateElement(System::String ^ elementTag);" />
      <MemberSignature Language="F#" Value="member this.CreateElement : string -&gt; System.Windows.Forms.HtmlElement" Usage="htmlDocument.CreateElement elementTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementTag">Nome dell'elemento HTML da creare.</param>
        <summary>Crea un nuovo elemento <see langword="HtmlElement" /> del tipo di tag HTML specificato.</summary>
        <returns>Nuovo elemento del tipo di tag specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `elementTag` può essere uno qualsiasi dei tag HTML supportati in Internet Explorer, ad eccezione di `FRAME` o `IFRAME`.  
  
 <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> Restituisce un elemento non associati alla struttura del documento corrente. Per aggiungere l'elemento al documento, usare il <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> o <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> metodi.  
  
 Questo metodo non avrà alcun effetto lo stato del codice sorgente di un documento esistente quando si usa il <xref:System.Windows.Forms.WebBrowser> del controllo **Visualizza origine** comando del menu di scelta rapida o la <xref:System.Windows.Forms.WebBrowser.DocumentText%2A> e <xref:System.Windows.Forms.WebBrowser.DocumentStream%2A> le proprietà del <xref:System.Windows.Forms.WebBrowser> controllo.  
  
 Quando si creano nuovi elementi con <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>, non sarà in grado di impostare determinate proprietà, ad esempio `Name`. Nei casi in cui è necessario impostare l'attributo Name, assegnarli come HTML per il <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> proprietà di un altro oggetto nel documento.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare i dati dal database Northwind per creare un elemento HTML di tabella utilizzando <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>. Il <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> innanzitutto metodo inoltre è utilizzato per aggiungere celle (`TD` elementi) alle righe (`TR` elementi), quindi per aggiungere righe alla tabella e infine per aggiungere la tabella alla fine del documento corrente. L'esempio di codice richiede che l'applicazione dispone di un <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultEncoding">
      <MemberSignature Language="C#" Value="public string DefaultEncoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.DefaultEncoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultEncoding As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultEncoding { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultEncoding : string" Usage="System.Windows.Forms.HtmlDocument.DefaultEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la codifica usata per impostazione predefinita nel documento corrente.</summary>
        <value>Oggetto <see cref="T:System.String" /> che rappresenta la codifica usata dal browser la prima volta che la pagina viene visualizzata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La codifica predefinita è la codifica il documento oggetto Model (DOM) HTML gestito tenterà di utilizzare quando viene caricata inizialmente la pagina. Questa codifica è derivata da Internet Explorer **Encoding** le impostazioni, o da un `META` tag incorporato all'interno della pagina.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlDocument.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nome dell'evento che non si vuole più gestire.</param>
        <param name="eventHandler">Codice gestito che gestisce l'evento.</param>
        <summary>Rimuove un gestore eventi da un evento specifico in HTML DOM.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public string Domain { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Domain { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Domain : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la stringa che descrive il dominio del documento corrente, a scopo di sicurezza.</summary>
        <value>Dominio valido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, le due pagine Web in fotogrammi diversi non è consentite accedere reciproci contenuto mediante script. in questa istanza, anche www.microsoft.com e msdn.microsoft.com sono considerati domini diversi. Per abilitare lo scripting tra frame per le pagine dello stesso dominio di primo livello, è possibile assegnare un nuovo valore per il <xref:System.Windows.Forms.HtmlDocument.Domain%2A> proprietà. Nell'esempio di URL precedente, l'impostazione <xref:System.Windows.Forms.HtmlDocument.Domain%2A> a microsoft.com consentirebbe a entrambe le pagine comunicare tra loro.  
  
 Le stringhe assegnate al <xref:System.Windows.Forms.HtmlDocument.Domain%2A> proprietà deve essere validi domini di primo livello. Nell'esempio di URL precedente, è possibile impostare <xref:System.Windows.Forms.HtmlDocument.Domain%2A> su microsoft.com, ma non a COM, che consentirebbe qualsiasi pagina su Internet per il contenuto della pagina di script.  
  
 Non è possibile utilizzare il <xref:System.Windows.Forms.HtmlDocument.Domain%2A> proprietà per abilitare lo scripting tra frame per pagine a cui accede utilizzando due protocolli diversi. Se un frame della pagina proviene da un server Web (il protocollo http://) e un altro dal file system (file://) protocollo, non saranno in grado di comunicare tra loro, indipendentemente dal valore della <xref:System.Windows.Forms.HtmlDocument.Domain%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">L'argomento della proprietà <c>Domain</c> deve essere un nome di dominio valido in base alle convenzioni DNS (Domain Name System).</exception>
      </Docs>
    </Member>
    <Member MemberName="DomDocument">
      <MemberSignature Language="C#" Value="public object DomDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomDocument" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.DomDocument" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomDocument As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomDocument { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomDocument : obj" Usage="System.Windows.Forms.HtmlDocument.DomDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il puntatore a interfaccia non gestita per <see cref="T:System.Windows.Forms.HtmlDocument" />.</summary>
        <value>Un' <see cref="T:System.Object" /> che rappresenta un <c>IDispatch</c> puntatore per il documento non gestito.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument> è un wrapper per il Internet Explorer modello DOM (Document Object), che viene scritto in COM. Se si desidera accedere alle proprietà non esposti o metodi su interfacce COM sottostanti, ad esempio `IHTMLDocument2`, è possibile utilizzare query di questo oggetto di essi.  
  
 Per utilizzare le interfacce non gestite, importare la libreria MSHTML (MSHTML) nell'applicazione. Tuttavia, è possibile eseguire anche metodi e proprietà non esposti mediante il `IDispatch::Invoke` metodo.  
  
   
  
## Examples  
 I cast di esempio di codice seguente il <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A> a un `IHTMLDocument2` puntatore e visualizza il valore della `lastModified` proprietà, che indica quando il proprietario del documento ha aggiornato il contenuto. L'esempio di codice è necessario un <xref:System.Windows.Forms.Button> sul form denominato `Button6`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlDocument#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Per <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> l'autorizzazione. Enumerazione associata: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public string Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Encoding { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la codifica dei caratteri per il documento corrente.</summary>
        <value>Oggetto <see cref="T:System.String" /> che rappresenta la codifica dei caratteri corrente.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlDocument.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto da testare.</param>
        <summary>Verifica l'uguaglianza dell'oggetto relativamente a quello corrente.</summary>
        <returns>
          <see langword="true" /> se gli oggetti sono uguali. In caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecCommand">
      <MemberSignature Language="C#" Value="public void ExecCommand (string command, bool showUI, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecCommand(string command, bool showUI, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.ExecCommand(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecCommand (command As String, showUI As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecCommand(System::String ^ command, bool showUI, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.ExecCommand : string * bool * obj -&gt; unit" Usage="htmlDocument.ExecCommand (command, showUI, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="command">Nome del comando da eseguire.</param>
        <param name="showUI">Indica se devono essere visualizzate all'utente le finestre di dialogo o le finestre di messaggio specifiche del comando.</param>
        <param name="value">Valore da assegnare mediante il comando. Non applicabile a tutti i comandi.</param>
        <summary>Esegue il comando specificato sul documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.ExecCommand%2A> espone un'ampia gamma di comandi per i quali sono sono metodi esposti in <xref:System.Windows.Forms.HtmlDocument>. Utilizzando <xref:System.Windows.Forms.HtmlDocument.ExecCommand%2A> è possibile inserire nuovi elementi HTML, selezionare e formattare il testo e deselezionare le memorizzati nella cache le credenziali di autenticazione. Per un elenco completo dei comandi, vedere [identificatori di comando](http://go.microsoft.com/fwlink/?LinkId=198814).  
  
> [!NOTE]
>  Alcuni comandi, quali copia, avranno valori restituiti. Nell'implementazione corrente di <xref:System.Windows.Forms.HtmlDocument.ExecCommand%2A>, è possibile ottenere un valore restituito dalla chiamata. Per recuperare i valori restituiti, utilizzare il metodo non gestito corrispondente su un <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A> alternativa, fare riferimento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlDocument.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Imposta lo stato attivo per l'input dell'utente sul documento corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chiamata <xref:System.Windows.Forms.HtmlDocument.Focus%2A> imposterà lo stato attivo sul <xref:System.Windows.Forms.WebBrowser> il controllo, se il controllo non è attualmente attivo. Se il documento è ospitato all'interno di un `FRAME`, questo metodo assegnerà lo stato attivo su quel `FRAME` all'interno di `FRAMESET`.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Per <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /> delle autorizzazioni necessarie per impostare lo stato attivo in un form. Enumerazione associata: <see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Focused">
      <MemberSignature Language="C#" Value="public bool Focused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Focused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Focused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Focused : bool" Usage="System.Windows.Forms.HtmlDocument.Focused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il documento dispone dello stato attivo per l'input dell'utente.</summary>
        <value>
          <see langword="true" /> se il documento dispone dello stato attivo; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.Focus" />
        <altmember cref="E:System.Windows.Forms.HtmlDocument.Focusing" />
        <altmember cref="E:System.Windows.Forms.HtmlDocument.LosingFocus" />
      </Docs>
    </Member>
    <Member MemberName="Focusing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Focusing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Focusing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.Focusing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Focusing As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Focusing;" />
      <MemberSignature Language="F#" Value="member this.Focusing : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Focusing : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica prima che lo stato attivo venga assegnato al documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio report sull'occorrenza di un gestore eventi di <xref:System.Windows.Forms.HtmlDocument.Focusing> evento. Questo report consente di capire quando l'evento si verifica e può semplificare il debug.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlDocument> denominato `HtmlDocument1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlDocument.Focusing> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#424](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#424)]
 [!code-vb[System.Windows.Forms.EventExamples#424](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#424)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il colore del testo del documento.</summary>
        <value>Colore del testo nel documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Drawing.Color> <xref:System.Drawing.Color> digitare il [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] supporta un `Alpha` valore, ma DOM HTML non. Pertanto, `Alpha` non avrà alcun effetto quando viene assegnato a questa proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.BackColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.LinkColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
      </Docs>
    </Member>
    <Member MemberName="Forms">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Forms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Forms" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Forms" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Forms As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Forms { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Forms : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.Forms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una raccolta di tutti gli elementi <c>&lt;FORM&gt;</c> nel documento.</summary>
        <value>Un' <see cref="T:System.Windows.Forms.HtmlElementCollection" /> del <c> &lt;modulo&gt; </c> elementi all'interno del documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un documento HTML può contenere uno o più `FORM` nuovamente gli elementi con campi di input per l'invio di dati a un server.  
  
 A livello di programmazione, è possibile inviare un `FORM` ottenendo relativi <xref:System.Windows.Forms.HtmlElement> e chiamando il relativo `Submit` metodo usando il <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> (metodo).  
  
 Per aggiungere un nuovo `FORM` a un documento, è possibile creare un nuovo `FORM` tag sotto forma di stringa e assegnarlo al <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> proprietà di un elemento aggiunto in precedenza al DOM HTML; oppure è possibile usare il <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> (metodo), impostare le relative proprietà utilizzando <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>, e aggiungerlo come elemento figlio di un elemento esistente utilizzando <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>.  
  
   
  
## Examples  
 Esempio di codice seguente scorre tutte le `Form` elementi in una pagina Web pagina e Cancella tutti gli input dell'utente, i moduli nei relativi valori predefiniti.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.HtmlDocument#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementById">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement GetElementById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement GetElementById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetElementById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementById (id As String) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ GetElementById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.GetElementById : string -&gt; System.Windows.Forms.HtmlElement" Usage="htmlDocument.GetElementById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Attributo ID dell'elemento da recuperare.</param>
        <summary>Recupera un singolo oggetto <see cref="T:System.Windows.Forms.HtmlElement" /> usando l'attributo <c>ID</c> dell'elemento come chiave di ricerca.</summary>
        <returns>Restituisce il primo oggetto con lo stesso attributo <c>ID</c> del valore specificato oppure <see langword="null" /> se non è possibile trovare l'attributo <paramref name="id" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se sono presenti più elementi nel documento con lo stesso valore di ID, <xref:System.Windows.Forms.HtmlDocument.GetElementById%2A> verrà restituito il primo elemento trovato.  
  
   
  
## Examples  
 Esempio di codice seguente recupera un oggetto denominato `TABLE` da un documento, il conteggio del numero di righe e viene visualizzato il risultato nella pagina Web. L'esempio di codice è necessario un <xref:System.Windows.Forms.WebBrowser> controllo nel progetto denominato `WebBrowser1`, e che è stata caricata una pagina Web con un `TABLE` cui `ID` attributo `Table1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlDocument#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementFromPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement GetElementFromPoint (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement GetElementFromPoint(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetElementFromPoint(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ GetElementFromPoint(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.GetElementFromPoint : System.Drawing.Point -&gt; System.Windows.Forms.HtmlElement" Usage="htmlDocument.GetElementFromPoint point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Posizione x,y dell'elemento sullo schermo, rispetto all'angolo superiore sinistro del documento.</param>
        <summary>Recupera l'elemento HTML nella posizione indicata dalle coordinate client specificate.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.HtmlElement" /> nel documento in corrispondenza della posizione sullo schermo specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.GetElementFromPoint%2A> utilizza le coordinate client, in cui l'angolo superiore sinistro del documento viene assegnato il valore (0,0). È possibile ottenere le coordinate client per la posizione corrente del cursore mediante il <xref:System.Windows.Forms.HtmlWindow.Position%2A> proprietà.  
  
   
  
## Examples  
 Esempio di codice seguente rileva un clic sul documento, individua l'elemento e utilizza <xref:System.Windows.Forms.HtmlElement.ScrollIntoView%2A> per allineare l'elemento alla parte superiore della pagina Web.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElementCollection GetElementsByTagName(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetElementsByTagName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementsByTagName (tagName As String) As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElementCollection ^ GetElementsByTagName(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="member this.GetElementsByTagName : string -&gt; System.Windows.Forms.HtmlElementCollection" Usage="htmlDocument.GetElementsByTagName tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Nome del tag HTML per gli oggetti <see cref="T:System.Windows.Forms.HtmlElement" /> da recuperare.</param>
        <summary>Recupera una raccolta di elementi con il tag HTML specificato.</summary>
        <returns>Raccolta degli elementi per i quali il nome del tag corrisponde all'argomento <paramref name="tagName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Pagine HTML usano spesso il `META` tag per incorporare informazioni arbitrarie sul documento. L'esempio di codice HTML seguente recupera tutte le `META` tag all'interno di un documento HTML, trova il `META` tag con il nome `Description`e visualizza all'utente. L'esempio di codice richiede che l'applicazione dispone di un <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlDocument.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera il codice hash per questo oggetto.</summary>
        <returns>Oggetto <see cref="T:System.Int32" /> che è una rappresentazione hash in memoria di questo oggetto.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Images">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Images { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Images" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Images" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Images As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Images { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Images : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.Images" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una raccolta di tutti i tag di immagine nel documento.</summary>
        <value>Raccolta di oggetti <see cref="T:System.Windows.Forms.HtmlElement" />, uno per ciascun tag IMG nel documento. Gli elementi della raccolta vengono restituiti nell'ordine originario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.Images%2A> Restituisce una raccolta di <xref:System.Windows.Forms.HtmlElement> oggetti. Per accedere agli attributi, ad esempio `ALT` e `SRC`, che non sono direttamente esposti dal <xref:System.Windows.Forms.HtmlElement>, usare il <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> metodo.  
  
 Per aggiungere una nuova immagine a un documento, creare una nuova `IMG` tag sotto forma di stringa e assegnarlo al <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> proprietà di un elemento aggiunto in precedenza al DOM HTML; o utilizzare il <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> metodo, impostarne le proprietà utilizzando <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>e aggiungerlo come un elemento figlio di un elemento esistente utilizzando <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>.  
  
   
  
## Examples  
 Esempio di codice seguente esamina il `ALT` attributo di tutte le immagini nel documento e imposta un valore predefinito `ALT` se non è già impostato un valore di attributo.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlDocument#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeScript">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Esegue una funzione di scripting definita in una pagina HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente esegue il contenuto di uno script in una pagina Web. L'esempio di codice richiede che sia stata caricata la seguente pagina Web.  
  
```  
<HTML>  
<SCRIPT>  
function test(name, address) {  
window.alert("Name is " + name + "; address is " + address);  
}  
</SCRIPT>  
  
<BODY>  
</BODY>  
</HTML>  
  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeScript">
      <MemberSignature Language="C#" Value="public object InvokeScript (string scriptName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeScript(string scriptName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.InvokeScript(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeScript (scriptName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeScript(System::String ^ scriptName);" />
      <MemberSignature Language="F#" Value="member this.InvokeScript : string -&gt; obj" Usage="htmlDocument.InvokeScript scriptName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scriptName">Nome del metodo di script da richiamare.</param>
        <summary>Esegue una funzione di scripting definita in una pagina HTML.</summary>
        <returns>Oggetto restituito dalla chiamata dello script attivo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il tipo sottostante dell'oggetto restituito da <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> potrà variare. Se la funzione di Scripting chiamata restituisce dati scalari, ad esempio una stringa o un numero intero, verrà restituiva sotto forma di stringa. Se viene restituito un oggetto basato su script, ad esempio un oggetto creato utilizzando VBScript o JScript `new` operatore, sarà di tipo `Object`. (È possibile effettuare chiamate su tali oggetti chiamando <xref:System.Object.GetType%2A> e l'utilizzo di <xref:System.Type.InvokeMember%2A>.) Se, ad esempio restituisce un elemento DOM HTML, un `DIV` o un `TABLE`, sarà di tipo `Object`; se è stato aggiunto un riferimento progetto a MSHTML. DLL, verranno eseguire il cast al relativo tipo DOM non gestito.  
  
 È possibile chiamare qualsiasi funzione scritta in qualsiasi linguaggio di Scripting installato nel computer dell'utente, inclusi JScript e VBScript.  
  
 Il <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> non eseguirà alcuna operazione se l'utente è disattivato in modo esplicito l'esecuzione degli script in Internet Explorer o se la configurazione di sicurezza corrente per la pagina Web non lo consente.  
  
   
  
## Examples  
 Esempio di codice seguente esegue il contenuto di uno script in una pagina Web. L'esempio di codice è necessario un <xref:System.Windows.Forms.WebBrowser> nell'applicazione denominata `WebBrowser1`, e che sia stata caricata la seguente pagina Web.  
  
```  
<HTML>  
  
    <HEAD>  
        <TITLE>Invoke Script Sample</TITLE>  
  
        <SCRIPT>  
            function MyObject() {  
                this.Data = "Data for my private object.";  
            }  
            // Return a string.  
            function test() {  
                return("This is a test.");  
            }  
            // Return a JScript object.  
            function testJScriptObject() {  
                return(new(MyObject));  
            }  
            // Return a DOM element.  
            function testElement() {  
                return(div1);  
            }  
        </SCRIPT>  
    </HEAD>  
  
    <BODY>  
  
        <DIV id="div1">  
        </DIV>  
  
    </BODY>  
  
</HTML>  
  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#12)]
 [!code-vb[System.Windows.Forms.HtmlDocument#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeScript">
      <MemberSignature Language="C#" Value="public object InvokeScript (string scriptName, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeScript(string scriptName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.InvokeScript(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeScript (scriptName As String, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeScript(System::String ^ scriptName, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.InvokeScript : string * obj[] -&gt; obj" Usage="htmlDocument.InvokeScript (scriptName, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="scriptName">Nome del metodo di script da richiamare.</param>
        <param name="args">Argomenti da passare al metodo di script.</param>
        <summary>Esegue una funzione di scripting definita in una pagina HTML.</summary>
        <returns>Oggetto restituito dalla chiamata dello script attivo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il tipo sottostante dell'oggetto restituito da <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A> potrà variare. Se la funzione di Scripting chiamata restituisce dati scalari, ad esempio una stringa o un numero intero, verrà restituiva sotto forma di stringa. Se viene restituito un oggetto basato su script, ad esempio un oggetto creato utilizzando VBScript o JScript `new` operatore, sarà di tipo `Object`. (È possibile effettuare chiamate su tali oggetti chiamando <xref:System.Object.GetType%2A> e l'utilizzo di <xref:System.Type.InvokeMember%2A>.) Se, ad esempio restituisce un elemento DOM HTML, un `DIV` o un `TABLE`, sarà di tipo `Object`; se è stato aggiunto un riferimento progetto a MSHTML. DLL, verranno eseguire il cast al relativo tipo DOM non gestito.  
  
 È possibile chiamare qualsiasi funzione scritta in qualsiasi linguaggio di Scripting installato nel computer dell'utente, inclusi JScript e VBScript.  
  
 Questo metodo non eseguirà alcuna operazione se l'utente è disattivato in modo esplicito l'esecuzione degli script in Internet Explorer o se la configurazione di sicurezza corrente per la pagina Web non lo consente.  
  
   
  
## Examples  
 Esempio di codice seguente esegue il contenuto di uno script in una pagina Web. L'esempio di codice è necessario un <xref:System.Windows.Forms.WebBrowser> nell'applicazione denominata `WebBrowser1`, e che sia stata caricata la seguente pagina Web.  
  
```  
<HTML>  
    <SCRIPT>  
        function test(name, address) {  
            window.alert("Name is " + name + "; address is " + address);  
        }  
    </SCRIPT>  
  
    <BODY>  
    </BODY>  
</HTML>  
  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.LinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property LinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color LinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.LinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.LinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il colore dei collegamenti ipertestuali.</summary>
        <value>Colore dei collegamenti ipertestuali nel documento corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Drawing.Color> digitare il [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] supporta una `Alpha` valore, ma DOM HTML non. Pertanto, `Alpha` non avrà alcun effetto quando viene assegnato a questa proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.ForeColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.BackColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
      </Docs>
    </Member>
    <Member MemberName="Links">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Links { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Links" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Links" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Links As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Links { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Links : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.Links" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un elenco di tutti i collegamenti ipertestuali nel documento HTML corrente.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.HtmlElementCollection" /> di oggetti <see cref="T:System.Windows.Forms.HtmlElement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa raccolta conterrà tutti i collegamenti creati usando il `A`, `LINK`, e `AREA` tag in HTML.  
  
 Il <xref:System.Windows.Forms.HtmlElement> gli oggetti contenuti nella raccolta incapsulano non gestita `IHTMLLinkElement` interfaccia. Per accedere alle proprietà dell'interfaccia sottostante in modo sicuro, usare il <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LosingFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LosingFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.LosingFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LosingFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LosingFocus;" />
      <MemberSignature Language="F#" Value="member this.LosingFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LosingFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un controllo sta perdendo lo stato attivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio report sull'occorrenza di un gestore eventi di <xref:System.Windows.Forms.HtmlDocument.LosingFocus> evento. Questo report consente di capire quando l'evento si verifica e può semplificare il debug.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlDocument> denominato `HtmlDocument1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlDocument.LosingFocus> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#425](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#425)]
 [!code-vb[System.Windows.Forms.EventExamples#425](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#425)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseDown : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente fa clic con il pulsante sinistro del mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.HtmlDocument.MouseDown> evento si verifica prima il <xref:System.Windows.Forms.HtmlDocument.Click> evento.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio report sull'occorrenza di un gestore eventi di <xref:System.Windows.Forms.HtmlDocument.MouseDown> evento. Questo report consente di capire quando l'evento si verifica e può semplificare il debug. Per generare report su più eventi o per gli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlDocument> denominato `HtmlDocument1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlDocument.MouseDown> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#426](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#426)]
 [!code-vb[System.Windows.Forms.EventExamples#426](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#426)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseLeave : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il mouse non è più posizionato sul documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio report sull'occorrenza di un gestore eventi di <xref:System.Windows.Forms.HtmlDocument.MouseLeave> evento. Questo report consente di capire quando l'evento si verifica e può semplificare il debug. Per generare report su più eventi o per gli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlDocument> denominato `HtmlDocument1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlDocument.MouseLeave> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#427](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#427)]
 [!code-vb[System.Windows.Forms.EventExamples#427](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#427)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseMove : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il puntatore del mouse viene spostato sul documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio report sull'occorrenza di un gestore eventi di <xref:System.Windows.Forms.HtmlDocument.MouseMove> evento. Questo report consente di capire quando l'evento si verifica e può semplificare il debug. Per generare report su più eventi o per gli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlDocument> denominato `HtmlDocument1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlDocument.MouseMove> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#428](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#428)]
 [!code-vb[System.Windows.Forms.EventExamples#428](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#428)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseOver As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseOver;" />
      <MemberSignature Language="F#" Value="member this.MouseOver : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseOver : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il puntatore del mouse viene spostato sul documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sulla gestione degli eventi, [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio report sull'occorrenza di un gestore eventi di <xref:System.Windows.Forms.HtmlDocument.MouseOver> evento. Questo report consente di capire quando l'evento si verifica e può semplificare il debug. Per generare report su più eventi o per gli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlDocument> denominato `HtmlDocument1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlDocument.MouseOver> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#429](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#429)]
 [!code-vb[System.Windows.Forms.EventExamples#429](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#429)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseUp : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente rilascia il pulsante sinistro del mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio report sull'occorrenza di un gestore eventi di <xref:System.Windows.Forms.HtmlDocument.MouseUp> evento. Questo report consente di capire quando l'evento si verifica e può semplificare il debug. Per generare report su più eventi o per gli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlDocument> denominato `HtmlDocument1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlDocument.MouseUp> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#430](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#430)]
 [!code-vb[System.Windows.Forms.EventExamples#430](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#430)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlDocument left, System.Windows.Forms.HtmlDocument right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlDocument left, class System.Windows.Forms.HtmlDocument right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.op_Equality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlDocument, right As HtmlDocument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlDocument ^ left, System::Windows::Forms::HtmlDocument ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlDocument * System.Windows.Forms.HtmlDocument -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlDocument" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlDocument" />
      </Parameters>
      <Docs>
        <param name="left">Prima istanza da confrontare.</param>
        <param name="right">Seconda istanza da confrontare.</param>
        <summary>Restituisce un valore che indica se le istanze di <see cref="T:System.Windows.Forms.HtmlDocument" /> specificate rappresentano lo stesso valore.</summary>
        <returns>
          <see langword="true" /> se le istanze specificate sono uguali; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Il metodo equivalente per l'operatore è <xref:System.Windows.Forms.HtmlDocument.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlDocument left, System.Windows.Forms.HtmlDocument right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlDocument left, class System.Windows.Forms.HtmlDocument right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.op_Inequality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlDocument, right As HtmlDocument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlDocument ^ left, System::Windows::Forms::HtmlDocument ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlDocument * System.Windows.Forms.HtmlDocument -&gt; bool" Usage="System.Windows.Forms.HtmlDocument.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlDocument" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlDocument" />
      </Parameters>
      <Docs>
        <param name="left">Prima istanza da confrontare.</param>
        <param name="right">Seconda istanza da confrontare.</param>
        <summary>Restituisce un valore che indica se le istanze di <see cref="T:System.Windows.Forms.HtmlDocument" /> specificate non rappresentano lo stesso valore.</summary>
        <returns>
          <see langword="true" /> se le istanze specificate non sono uguali; in caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument OpenNew (bool replaceInHistory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlDocument OpenNew(bool replaceInHistory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (replaceInHistory As Boolean) As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlDocument ^ OpenNew(bool replaceInHistory);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : bool -&gt; System.Windows.Forms.HtmlDocument" Usage="htmlDocument.OpenNew replaceInHistory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replaceInHistory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="replaceInHistory">Indica se la nuova navigazione della finestra deve sostituire l'elemento precedente nella cronologia di navigazione di DOM.</param>
        <summary>Ottiene un nuovo oggetto <see cref="T:System.Windows.Forms.HtmlDocument" /> da usare con il metodo <see cref="M:System.Windows.Forms.HtmlDocument.Write(System.String)" />.</summary>
        <returns>Nuovo documento per la scrittura.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.OpenNew%2A> cancellerà il documento precedentemente caricato, inclusi gli stati associati, ad esempio variabili. Non genera eventi di spostamento in <xref:System.Windows.Forms.WebBrowser> da generare.  
  
 <xref:System.Windows.Forms.HtmlDocument.OpenNew%2A> Crea sempre un nuovo documento nella finestra corrente. Per aprire un documento in una nuova finestra, utilizzare il <xref:System.Windows.Forms.HtmlWindow.Open%2A> metodo sul <xref:System.Windows.Forms.HtmlWindow> classe.  
  
   
  
## Examples  
 Esempio di codice seguente preparato il DOM per la scrittura e scrive un nuovo documento usando il <xref:System.Windows.Forms.HtmlDocument.Write%2A> metodo.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public bool RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property RightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RightToLeft { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : bool with get, set" Usage="System.Windows.Forms.HtmlDocument.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la direzione del testo nel documento corrente.</summary>
        <value>
          <see langword="true" /> se il testo viene visualizzato da destra a sinistra; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.RightToLeft%2A> non avrà alcun valore, a meno che è stato impostato in modo esplicito, nel codice o in formato HTML.  
  
 A differenza di <xref:System.Windows.Forms.HtmlDocument.RightToLeft%2A> proprietà sui controlli Windows Form, <xref:System.Windows.Forms.HtmlDocument.RightToLeft%2A> in DOM HTML gestito non avrà effetto sulla direzione del testo in caratteri latini.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Stop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Stop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Stop As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Stop;" />
      <MemberSignature Language="F#" Value="member this.Stop : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Stop : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando la navigazione in un'altra pagina Web viene interrotta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il caricamento di una pagina Web verrà interrotto se il codice programma chiama i <xref:System.Windows.Forms.WebBrowser.Stop%2A> metodo il <xref:System.Windows.Forms.WebBrowser> controllo. Gli errori di navigazione causati da interruzioni della rete o siti Web non funziona correttamente non causino <xref:System.Windows.Forms.HtmlDocument.Stop> si verifichi.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente Reimposta la barra di stato in un'applicazione Windows Form quando il `Stop` si è verificato un evento. L'esempio di codice è necessario un <xref:System.Windows.Forms.StatusBar> controllo denominato `StatusBar1` nell'applicazione.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore del testo del tag <c>&lt;TITLE&gt;</c> nel documento HTML corrente.</summary>
        <value>Titolo del documento corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Windows.Forms.HtmlDocument.Title%2A> proprietà per identificare il documento con un nome leggibile dall'utente.  
  
 Modifiche di questa proprietà verranno applicata anche nel <xref:System.Windows.Forms.WebBrowser.DocumentTitle%2A> proprietà del <xref:System.Windows.Forms.WebBrowser> controllo.  
  
   
  
## Examples  
 Esempio di codice seguente crea un collegamento ipertestuale HTML al documento corrente utilizzando l'URL del documento come percorso del collegamento e il titolo del documento come testo del collegamento. L'esempio di codice richiede che l'applicazione dispone di un <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#14)]
 [!code-vb[System.Windows.Forms.HtmlDocument#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.WebBrowser.DocumentTitle" />
        <altmember cref="T:System.Windows.Forms.WebBrowser" />
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Url : Uri" Usage="System.Windows.Forms.HtmlDocument.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'URL che descrive la posizione del documento corrente.</summary>
        <value>Oggetto <see cref="T:System.Uri" /> che rappresenta l'URL del documento corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà è di sola lettura. Per passare a un nuovo documento, usare il <xref:System.Windows.Forms.WebBrowser.Url%2A> proprietà di <xref:System.Windows.Forms.WebBrowser> controllo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitedLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color VisitedLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color VisitedLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property VisitedLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color VisitedLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.VisitedLinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il colore dei collegamenti alle pagine HTML che l'utente ha già visitato.</summary>
        <value>Colore dei collegamenti visitati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `Color` digitare il [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] supporta una `Alpha` valore, ma DOM HTML non. Pertanto, `Alpha` non avrà alcun effetto quando viene assegnato a questa proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.BackColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.ForeColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.LinkColor" />
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Window { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Window" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Window" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Window As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Window { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Window : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlDocument.Window" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Windows.Forms.HtmlWindow" /> associato al documento corrente.</summary>
        <value>Finestra del documento corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tutti i documenti HTML dispongono di un oggetto DOM HTML denominato una finestra che può essere utilizzata per modificare le dimensioni dello schermo del documento e per aprire nuove finestre, nonché accedere ad altri oggetti importanti, ad esempio un <xref:System.Windows.Forms.HtmlHistory>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.Write : string -&gt; unit" Usage="htmlDocument.Write text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Testo HTML da scrivere nel documento.</param>
        <summary>Scrive una nuova pagina HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tutte le chiamate a <xref:System.Windows.Forms.HtmlDocument.Write%2A> deve essere preceduto da una chiamata a <xref:System.Windows.Forms.HtmlDocument.OpenNew%2A>, che verrà cancellato il documento corrente e tutte le relative variabili. Le chiamate a <xref:System.Windows.Forms.HtmlDocument.Write%2A> creerà un nuovo documento HTML al suo posto. Per modificare solo una parte specifica del documento, ottenere l'appropriato <xref:System.Windows.Forms.HtmlElement> e impostare il relativo <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> proprietà.  
  
 Si consiglia di scrivere un documento valido HTML intero usando la <xref:System.Windows.Forms.HtmlDocument.Write%2A> metodo, inclusi `HTML` e `BODY` tag. Tuttavia, se si scrivono solo gli elementi HTML, il modello DOM (Document Object) fornirà questi elementi per l'utente.  
  
   
  
## Examples  
 Esempio di codice seguente consente di aprire un nuovo <xref:System.Windows.Forms.HtmlDocument> e scrive in un nuovo file HTML.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>