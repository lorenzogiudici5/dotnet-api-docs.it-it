<Type Name="ToolBar+ToolBarButtonCollection" FullName="System.Windows.Forms.ToolBar+ToolBarButtonCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b7a6e5dfc07bf5097bd1452e0a5c48463268b6fb" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36513135" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ToolBar.ToolBarButtonCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit ToolBar/ToolBarButtonCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ToolBar.ToolBarButtonCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public: ref class ToolBar::ToolBarButtonCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type ToolBar.ToolBarButtonCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Encapsulates a collection of <see cref="T:System.Windows.Forms.ToolBarButton" /> controls for use by the <see cref="T:System.Windows.Forms.ToolBar" /> class.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> è una raccolta indicizzata in base zero utilizzata dal <xref:System.Windows.Forms.ToolBar> classe per contenere tutti i <xref:System.Windows.Forms.ToolBarButton> controlli assegnati alla barra degli strumenti. Usare la <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> metodo per aggiungere singoli pulsanti e <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A> metodo eliminarli. Chiamare il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> metodo utile per rimuovere tutti i pulsanti dalla raccolta.  
  
   
  
## Examples  
 Esempio di codice seguente crea e Inizializza un <xref:System.Windows.Forms.ToolBar> e tre <xref:System.Windows.Forms.ToolBarButton> controlli. I pulsanti della barra degli strumenti vengono assegnati alla barra degli strumenti e la barra degli strumenti viene aggiunto al form. Questo codice si presuppone che un <xref:System.Windows.Forms.Form> è già stato creato.  
  
 [!code-cpp[Classic ToolBar.Buttons Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.Buttons Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.Buttons Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.Buttons Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.Buttons Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.Buttons Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ToolBar" />
    <altmember cref="T:System.Windows.Forms.ToolBarButton" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ToolBarButtonCollection (System.Windows.Forms.ToolBar owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.ToolBar owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.#ctor(System.Windows.Forms.ToolBar)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As ToolBar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ToolBarButtonCollection(System::Windows::Forms::ToolBar ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ToolBar.ToolBarButtonCollection : System.Windows.Forms.ToolBar -&gt; System.Windows.Forms.ToolBar.ToolBarButtonCollection" Usage="new System.Windows.Forms.ToolBar.ToolBarButtonCollection owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.ToolBar" />
      </Parameters>
      <Docs>
        <param name="owner">The <see cref="T:System.Windows.Forms.ToolBar" /> that is the parent of the collection of <see cref="T:System.Windows.Forms.ToolBarButton" /> controls.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection" /> class and assigns it to the specified toolbar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non si crea in genere un <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> e chiamare in modo esplicito il relativo costruttore. Facendo riferimento il <xref:System.Windows.Forms.ToolBar.Buttons%2A> proprietà del <xref:System.Windows.Forms.ToolBar> (controllo), un <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> viene creato. È quindi possibile accedere alle relative proprietà e metodi e assegnare <xref:System.Windows.Forms.ToolBarButton> controlli alla raccolta.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ToolBarButton" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Adds a new toolbar button to the end of the toolbar button collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (text As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.Add : string -&gt; int" Usage="toolBarButtonCollection.Add text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text to display on the new <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Adds a new toolbar button to the end of the toolbar button collection with the specified <see cref="P:System.Windows.Forms.ToolBarButton.Text" /> property value.</summary>
        <returns>The zero-based index value of the <see cref="T:System.Windows.Forms.ToolBarButton" /> added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È inoltre possibile aggiungere nuovi <xref:System.Windows.Forms.ToolBarButton> oggetti alla raccolta utilizzando il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> o <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> metodi o le altre versioni del <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> metodo.  
  
 Per rimuovere un <xref:System.Windows.Forms.ToolBarButton> aggiunto in precedenza, utilizzare il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> o <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> metodi.  
  
   
  
## Examples  
 Esempio di codice seguente rimuove un oggetto esistente <xref:System.Windows.Forms.ToolBarButton> da un <xref:System.Windows.Forms.ToolBar> controllare eventualmente esistente e aggiunge e inserisce quattro nuove <xref:System.Windows.Forms.ToolBarButton> oggetti per il <xref:System.Windows.Forms.ToolBar>. In questo esempio si suppone una <xref:System.Windows.Forms.Form> con un <xref:System.Windows.Forms.ToolBar> controllo su di esso.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove(System.Windows.Forms.ToolBarButton)" />
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.Windows.Forms.ToolBarButton)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (button As ToolBarButton) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::Windows::Forms::ToolBarButton ^ button);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.Forms.ToolBarButton -&gt; int" Usage="toolBarButtonCollection.Add button" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">The <see cref="T:System.Windows.Forms.ToolBarButton" /> to be added after all existing buttons.</param>
        <summary>Adds the specified toolbar button to the end of the toolbar button collection.</summary>
        <returns>The zero-based index value of the <see cref="T:System.Windows.Forms.ToolBarButton" /> added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È inoltre possibile aggiungere nuovi <xref:System.Windows.Forms.ToolBarButton> oggetti alla raccolta utilizzando il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> o <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> metodi o le altre versioni del <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> metodo.  
  
 Per rimuovere un <xref:System.Windows.Forms.ToolBarButton> aggiunto in precedenza, utilizzare il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> o <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> metodi.  
  
   
  
## Examples  
 Esempio di codice seguente aggiunge un nuovo <xref:System.Windows.Forms.ToolBarButton> il controllo a un oggetto esistente <xref:System.Windows.Forms.ToolBar> con pulsanti esistenti. Pulsante della barra degli strumenti verrà aggiunto alla fine del <xref:System.Windows.Forms.ToolBar.Buttons%2A?displayProperty=nameWithType> insieme.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Add Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove(System.Windows.Forms.ToolBarButton)" />
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Windows.Forms.ToolBarButton[] buttons);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Windows.Forms.ToolBarButton[] buttons) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange(System.Windows.Forms.ToolBarButton[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (buttons As ToolBarButton())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(cli::array &lt;System::Windows::Forms::ToolBarButton ^&gt; ^ buttons);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.Windows.Forms.ToolBarButton[] -&gt; unit" Usage="toolBarButtonCollection.AddRange buttons" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buttons" Type="System.Windows.Forms.ToolBarButton[]" />
      </Parameters>
      <Docs>
        <param name="buttons">The collection of <see cref="T:System.Windows.Forms.ToolBarButton" /> controls to add to this <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection" /> contained in an array.</param>
        <summary>Adds a collection of toolbar buttons to this toolbar button collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.ToolBarButton> gli oggetti contenuti nel `nodes` matrice vengono aggiunti alla fine della raccolta.  
  
 È possibile utilizzare metodo per aggiungere rapidamente un gruppo di creato in precedenza <xref:System.Windows.Forms.ToolBarButton> oggetti alla raccolta invece di aggiungere manualmente ciascun <xref:System.Windows.Forms.ToolBarButton> alla raccolta tramite il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> metodo.  
  
 Per rimuovere un <xref:System.Windows.Forms.ToolBarButton> aggiunto in precedenza, utilizzare il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> o <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> metodi.  
  
   
  
## Examples  
 Esempio di codice seguente rimuove un oggetto esistente <xref:System.Windows.Forms.ToolBarButton> da un <xref:System.Windows.Forms.ToolBar> controllare eventualmente esistente e aggiunge e inserisce quattro nuove <xref:System.Windows.Forms.ToolBarButton> oggetti per il <xref:System.Windows.Forms.ToolBar>. In questo esempio si suppone una <xref:System.Windows.Forms.Form> con un <xref:System.Windows.Forms.ToolBar> controllo su di esso.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.Windows.Forms.ToolBarButton)" />
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="toolBarButtonCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all buttons from the toolbar button collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> metodo scorre la raccolta e rimuove tutti i pulsanti della barra degli strumenti assegnati per il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 Per rimuovere un pulsante della barra degli strumenti singoli dalla raccolta, usare il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A> o <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> metodi.  
  
 Per aggiungere nuovi <xref:System.Windows.Forms.ToolBarButton> oggetti alla raccolta, usare il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> o <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> metodi.  
  
   
  
## Examples  
 Consente di visualizzare esempio di codice seguente il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> del <xref:System.Windows.Forms.ToolBar.Buttons%2A> prima e dopo il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> metodo viene chiamato. Questo codice si presuppone che un <xref:System.Windows.Forms.ToolBar> con almeno un <xref:System.Windows.Forms.ToolBarButton> è stato creato.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove(System.Windows.Forms.ToolBarButton)" />
        <altmember cref="T:System.Windows.Forms.ToolBarButton" />
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.Windows.Forms.ToolBarButton)" />
        <altmember cref="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Contains(System.Windows.Forms.ToolBarButton)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (button As ToolBarButton) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::ToolBarButton ^ button);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Forms.ToolBarButton -&gt; bool" Usage="toolBarButtonCollection.Contains button" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">The <see cref="T:System.Windows.Forms.ToolBarButton" /> to locate in the collection.</param>
        <summary>Determines if the specified toolbar button is a member of the collection.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Windows.Forms.ToolBarButton" /> is a member of the collection; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di determinare se un <xref:System.Windows.Forms.ToolBarButton> membro della raccolta prima di provare a eseguire le operazioni di <xref:System.Windows.Forms.ToolBarButton>. È possibile utilizzare questo metodo per verificare che un <xref:System.Windows.Forms.ToolBarButton> è stato aggiunto a o è ancora un membro della raccolta.  
  
   
  
## Examples  
 Esempio di codice seguente rimuove un oggetto esistente <xref:System.Windows.Forms.ToolBarButton> da un <xref:System.Windows.Forms.ToolBar> controllare eventualmente esistente e aggiunge e inserisce quattro nuove <xref:System.Windows.Forms.ToolBarButton> oggetti per il <xref:System.Windows.Forms.ToolBar>. In questo esempio si suppone una <xref:System.Windows.Forms.Form> con un <xref:System.Windows.Forms.ToolBar> controllo su di esso.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="toolBarButtonCollection.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the <see cref="T:System.Windows.Forms.ToolBarButton" /> to search for.</param>
        <summary>Determines if a <see cref="T:System.Windows.Forms.ToolBarButton" /> with the specified key is contained in the collection.</summary>
        <returns>
          <see langword="true" /> to indicate a <see cref="T:System.Windows.Forms.ToolBarButton" /> with the specified key is found; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.ToolBarButton.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.ToolBarButton> nel <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 Il confronto delle chiavi non è più distinzione maiuscole/minuscole. Se il `key` parametro `null` o una stringa vuota, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item%2A> restituisce `false.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of buttons in the toolbar button collection.</summary>
        <value>Il numero del <see cref="T:System.Windows.Forms.ToolBarButton" /> controlli assegnati alla barra degli strumenti.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> proprietà contiene il numero effettivo di <xref:System.Windows.Forms.ToolBarButton> controlli assegnati alla raccolta. È comune per utilizzare il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> valore della proprietà come limite superiore di un ciclo per scorrere una raccolta. Il valore di indice di una raccolta è un indice in base zero, pertanto è necessario sottrarre uno dalla variabile di ciclo in caso contrario, si verrà oltrepassare il limite superiore della raccolta e generare un'eccezione.  
  
   
  
## Examples  
 Consente di visualizzare esempio di codice seguente il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> del <xref:System.Windows.Forms.ToolBar.Buttons%2A> prima e dopo il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> metodo viene chiamato. Questo codice si presuppone che un <xref:System.Windows.Forms.ToolBar> con almeno un <xref:System.Windows.Forms.ToolBarButton> è stato creato.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ToolBarButton" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="toolBarButtonCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that can be used to iterate through the toolbar button collection.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> that represents the tree node collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente rimuove un oggetto esistente <xref:System.Windows.Forms.ToolBarButton> da un <xref:System.Windows.Forms.ToolBar> controllare eventualmente esistente e aggiunge e inserisce quattro nuove <xref:System.Windows.Forms.ToolBarButton> oggetti per il <xref:System.Windows.Forms.ToolBar>. In questo esempio si suppone una <xref:System.Windows.Forms.Form> con un <xref:System.Windows.Forms.ToolBar> controllo su di esso.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOf(System.Windows.Forms.ToolBarButton)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (button As ToolBarButton) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Forms::ToolBarButton ^ button);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Windows.Forms.ToolBarButton -&gt; int" Usage="toolBarButtonCollection.IndexOf button" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">The <see cref="T:System.Windows.Forms.ToolBarButton" /> to locate in the collection.</param>
        <summary>Retrieves the index of the specified toolbar button in the collection.</summary>
        <returns>The zero-based index of the item found in the collection; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo fornisce un facile accesso al valore di indice del <xref:System.Windows.Forms.ToolBarButton> nella raccolta. Il valore di indice consente di determinare facilmente le <xref:System.Windows.Forms.ToolBarButton> è stato fatto clic sul <xref:System.Windows.Forms.ToolBar>. Il <xref:System.Windows.Forms.ToolBarButton> fatto clic su può essere determinato valutando il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOf%2A> valore il <xref:System.Windows.Forms.ToolBarButtonClickEventArgs.Button%2A?displayProperty=nameWithType> proprietà.  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Windows.Forms.ToolBar> e tre <xref:System.Windows.Forms.ToolBarButton> controlli. I pulsanti della barra degli strumenti vengono assegnati alla raccolta pulsante, la raccolta viene assegnata alla barra degli strumenti e la barra degli strumenti viene aggiunto al form. Nel <xref:System.Windows.Forms.ToolBar.ButtonClick> eventi della barra degli strumenti, la <xref:System.Windows.Forms.ToolBarButtonClickEventArgs.Button%2A> proprietà del <xref:System.Windows.Forms.ToolBarButtonClickEventArgs> viene valutato, e aperta la finestra di dialogo appropriata. Questo codice si presuppone che un <xref:System.Windows.Forms.Form>, una <xref:System.Windows.Forms.OpenFileDialog>, un <xref:System.Windows.Forms.SaveFileDialog>e un <xref:System.Windows.Forms.PrintDialog> siano stati creati.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.IndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.IndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.IndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ToolBarButtonClickEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOfKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfKey : string -&gt; int&#xA;override this.IndexOfKey : string -&gt; int" Usage="toolBarButtonCollection.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the <see cref="T:System.Windows.Forms.ToolBarButton" /> to search for.</param>
        <summary>Retrieves the index of the first occurrence of a <see cref="T:System.Windows.Forms.ToolBarButton" /> with the specified key.</summary>
        <returns>The index of the first occurrence of a <see cref="T:System.Windows.Forms.ToolBarButton" /> with the specified key, if found; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOfKey%2A> viene chiamato successivamente, l'ultima restituito indice verrà innanzitutto verificato la corrispondenza delle chiavi e se non esiste alcuna corrispondenza, la ricerca inizia all'inizio della raccolta.  
  
 Il <xref:System.Windows.Forms.ToolBarButton.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.ToolBarButton> nel <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 Il confronto delle chiavi non è più distinzione maiuscole/minuscole. Se il `key` parametro `null` o una stringa vuota, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item%2A> restituisce -1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert(System.Int32,System.Windows.Forms.ToolBarButton)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, button As ToolBarButton)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, System::Windows::Forms::ToolBarButton ^ button);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * System.Windows.Forms.ToolBarButton -&gt; unit" Usage="toolBarButtonCollection.Insert (index, button)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="index">The indexed location within the collection to insert the toolbar button.</param>
        <param name="button">The <see cref="T:System.Windows.Forms.ToolBarButton" /> to insert.</param>
        <summary>Inserts an existing toolbar button in the toolbar button collection at the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È inoltre possibile aggiungere nuovi <xref:System.Windows.Forms.ToolBarButton> oggetti alla raccolta utilizzando il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> o <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> metodi.  
  
 Per rimuovere un <xref:System.Windows.Forms.ToolBarButton> aggiunto in precedenza, utilizzare il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> o <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> metodi.  
  
   
  
## Examples  
 Esempio di codice seguente rimuove un oggetto esistente <xref:System.Windows.Forms.ToolBarButton> da un <xref:System.Windows.Forms.ToolBar> controllare eventualmente esistente e aggiunge e inserisce quattro nuove <xref:System.Windows.Forms.ToolBarButton> oggetti per il <xref:System.Windows.Forms.ToolBar>. In questo esempio si suppone una <xref:System.Windows.Forms.Form> con un <xref:System.Windows.Forms.ToolBar> controllo su di esso.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.Windows.Forms.ToolBarButton)" />
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange(System.Windows.Forms.ToolBarButton[])" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Forms.ToolBar.ToolBarButtonCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the collection is read-only.</summary>
        <value>
          <see langword="true" /> se la raccolta è di sola lettura; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente rimuove un oggetto esistente <xref:System.Windows.Forms.ToolBarButton> da un <xref:System.Windows.Forms.ToolBar> controllare eventualmente esistente e aggiunge e inserisce quattro nuove <xref:System.Windows.Forms.ToolBarButton> oggetti per il <xref:System.Windows.Forms.ToolBar>. In questo esempio si suppone una <xref:System.Windows.Forms.Form> con un <xref:System.Windows.Forms.ToolBar> controllo su di esso.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets or sets a <see cref="T:System.Windows.Forms.ToolBarButton" /> within the collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ToolBarButton this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolBarButton Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(index As Integer) As ToolBarButton" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ToolBarButton ^ default[int] { System::Windows::Forms::ToolBarButton ^ get(int index); void set(int index, System::Windows::Forms::ToolBarButton ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.Forms.ToolBarButton with get, set" Usage="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolBarButton</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The indexed location of the <see cref="T:System.Windows.Forms.ToolBarButton" /> in the collection.</param>
        <summary>Gets or sets the toolbar button at the specified indexed location in the toolbar button collection.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.ToolBarButton" /> che rappresenta il pulsante della barra degli strumenti nella posizione indicizzata specificata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per assegnare <xref:System.Windows.Forms.ToolBarButton> controlli in un percorso specifico o per recuperarli dal <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>, è possibile fare riferimento all'oggetto insieme con un valore di indice specifico. Il valore di indice di <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> è un indice in base zero.  
  
   
  
## Examples  
 Esempio di codice seguente sostituisce l'ultimo pulsante della barra degli strumenti a una barra degli strumenti. Questo codice si presuppone che un <xref:System.Windows.Forms.ToolBar> e almeno un <xref:System.Windows.Forms.ToolBarButton> sono stati creati. L'esempio Ottiene il numero di pulsanti sulla barra degli strumenti e sostituisce l'ultimo pulsante con uno appena creato. Il `index` valore del pulsante della barra degli strumenti verrà sostituito è impostato sul <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> proprietà meno uno, poiché il <xref:System.Windows.Forms.ToolBarButton> raccolta è di un indice in base zero.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.this Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.this Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.this Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.this Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.this Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.this Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="index" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> value is less than zero.  -or-  The <paramref name="index" /> value is greater than the number of buttons in the collection, and the collection of buttons is not <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count" />
        <altmember cref="T:System.Windows.Forms.ToolBarButton" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ToolBarButton this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolBarButton Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(key As String) As ToolBarButton" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ToolBarButton ^ default[System::String ^] { System::Windows::Forms::ToolBarButton ^ get(System::String ^ key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Windows.Forms.ToolBarButton" Usage="System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolBarButton</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the <see cref="T:System.Windows.Forms.ToolBarButton" /> to retrieve.</param>
        <summary>Gets a <see cref="T:System.Windows.Forms.ToolBarButton" /> with the specified key from the collection.</summary>
        <value>Il <see cref="T:System.Windows.Forms.ToolBarButton" /> cui <see cref="P:System.Windows.Forms.ToolBarButton.Name" /> proprietà corrisponde alla chiave specificata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.ToolBarButton.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.ToolBarButton> nel <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 Il confronto delle chiavi non è più distinzione maiuscole/minuscole. Se il `key` parametro `null` o una stringa vuota <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item%2A> restituisce `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove(System.Windows.Forms.ToolBarButton)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (button As ToolBarButton)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::Forms::ToolBarButton ^ button);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.Forms.ToolBarButton -&gt; unit" Usage="toolBarButtonCollection.Remove button" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">The <see cref="T:System.Windows.Forms.ToolBarButton" /> to remove from the collection.</param>
        <summary>Removes a given button from the toolbar button collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per rimuovere i pulsanti della barra degli strumenti dalla raccolta, usare il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A>, o <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> metodi.  
  
 Per aggiungere nuovi <xref:System.Windows.Forms.ToolBarButton> oggetti alla raccolta, usare il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> o <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> metodi.  
  
   
  
## Examples  
 Esempio di codice seguente rimuove un oggetto esistente <xref:System.Windows.Forms.ToolBarButton> da un <xref:System.Windows.Forms.ToolBar> controllare eventualmente esistente e aggiunge e inserisce quattro nuove <xref:System.Windows.Forms.ToolBarButton> oggetti per il <xref:System.Windows.Forms.ToolBar>. In questo esempio si suppone una <xref:System.Windows.Forms.Form> con un <xref:System.Windows.Forms.ToolBar> controllo su di esso.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear" />
        <altmember cref="T:System.Windows.Forms.ToolBarButton" />
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.Windows.Forms.ToolBarButton)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="toolBarButtonCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The indexed location of the <see cref="T:System.Windows.Forms.ToolBarButton" /> in the collection.</param>
        <summary>Removes a given button from the toolbar button collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A> metodo rimuove il <xref:System.Windows.Forms.ToolBarButton> nella posizione specificata nel <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>. Se si desidera rimuovere tutti i <xref:System.Windows.Forms.ToolBarButton> controlli dalla raccolta, utilizzare il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> metodo.  
  
   
  
## Examples  
 Esempio di codice seguente rimuove l'ultima <xref:System.Windows.Forms.ToolBarButton> su un <xref:System.Windows.Forms.ToolBar>. Il valore di indice del pulsante della barra degli strumenti in corso la rimozione è impostato per il <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> proprietà meno uno, poiché il <xref:System.Windows.Forms.ToolBarButton> raccolta è di un indice in base zero.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> value is less than 0, or it is greater than the number of buttons in the collection.</exception>
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear" />
        <altmember cref="T:System.Windows.Forms.ToolBarButton" />
        <altmember cref="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.Windows.Forms.ToolBarButton)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveByKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveByKey (key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveByKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member RemoveByKey : string -&gt; unit&#xA;override this.RemoveByKey : string -&gt; unit" Usage="toolBarButtonCollection.RemoveByKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The name of the <see cref="T:System.Windows.Forms.ToolBarButton" /> to remove from the collection.</param>
        <summary>Removes the <see cref="T:System.Windows.Forms.ToolBarButton" /> with the specified key from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.ToolBarButton.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.ToolBarButton> nel <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (dest As Array, index As Integer) Implements ICollection.CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ dest, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
        <param name="index">The zero-based index in <c>dest</c> at which copying begins.</param>
        <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast della classe <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> su un'interfaccia <xref:System.Collections.ICollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Forms.ToolBar.ToolBarButtonCollection.System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
        <value>
          <see langword="false" /> in tutti i casi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast della classe <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> su un'interfaccia <xref:System.Collections.ICollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Forms.ToolBar.ToolBarButtonCollection.System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that can be used to synchronize access to the collection of buttons.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast della classe <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> su un'interfaccia <xref:System.Collections.ICollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (button As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ button) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">The <see cref="T:System.Windows.Forms.ToolBarButton" /> to be added after all existing buttons.</param>
        <summary>Adds the specified toolbar button to the end of the toolbar button collection.</summary>
        <returns>The zero-based index value of the <see cref="T:System.Windows.Forms.ToolBarButton" /> added to the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast della classe <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> su un'interfaccia <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="button" /> is not a <see cref="T:System.Windows.Forms.ToolBarButton" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (button As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ button) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">The item to locate in the collection.</param>
        <summary>Determines whether the collection contains a specific value.</summary>
        <returns>
          <see langword="true" /> if the item is found in the collection; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast della classe <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> su un'interfaccia <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (button As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ button) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">The item to locate in the collection.</param>
        <summary>Determines the index of a specific item in the collection.</summary>
        <returns>The index of <paramref name="button" /> if found in the list; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast della classe <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> su un'interfaccia <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, button As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ button) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">The indexed location within the collection to insert the toolbar button.</param>
        <param name="button">The <see cref="T:System.Windows.Forms.ToolBarButton" /> to insert.</param>
        <summary>Inserts an existing toolbar button in the toolbar button collection at the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast della classe <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> su un'interfaccia <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="button" /> is not a <see cref="T:System.Windows.Forms.ToolBarButton" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Forms.ToolBar.ToolBarButtonCollection.System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the collection has a fixed size.</summary>
        <value>
          <see langword="false" /> in tutti i casi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast della classe <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> su un'interfaccia <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Forms.ToolBar.ToolBarButtonCollection.System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the element to get or set.</param>
        <summary>Gets or sets the item at a specified index.</summary>
        <value>Elemento in corrispondenza dell'indice specificato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast della classe <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> su un'interfaccia <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (button As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ button) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
        <summary>Removes the first occurrence of an item from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast della classe <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> su un'interfaccia <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>