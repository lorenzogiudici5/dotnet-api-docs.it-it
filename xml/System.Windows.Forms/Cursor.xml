<Type Name="Cursor" FullName="System.Windows.Forms.Cursor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e8cf468bc493a426f0c909ac5571fe37cd37eb18" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30640365" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Cursor : IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit Cursor extends System.Object implements class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Cursor" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Cursor&#xA;Implements IDisposable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Cursor sealed : IDisposable, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Drawing.Design.CursorEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.CursorConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta l'immagine usata per disegnare il puntatore del mouse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un cursore è una piccola immagine la cui posizione sullo schermo è controllata da un dispositivo di puntamento, ad esempio un mouse, una penna o trackball. Quando l'utente sposta il dispositivo di puntamento, il sistema operativo sposta il cursore di conseguenza.  
  
 Forme diverse di cursore vengono utilizzate per informare l'utente quale operazione avrà il mouse. Ad esempio, durante la modifica o si seleziona il testo, un <xref:System.Windows.Forms.Cursors.IBeam%2A?displayProperty=nameWithType> cursore viene in genere visualizzato. Un cursore di attesa viene comunemente utilizzato per informare l'utente che un processo è attualmente in esecuzione. Esempi di processi che richiedono un'attesa per l'utente apre un file, salvataggio di un file o la compilazione di un controllo, ad esempio un <xref:System.Windows.Forms.DataGrid>, <xref:System.Windows.Forms.ListBox> o <xref:System.Windows.Forms.TreeView> con una grande quantità di dati.  
  
 Tutti i controlli che derivano dal <xref:System.Windows.Forms.Control> classe dispone di un <xref:System.Windows.Forms.Control.Cursor%2A> proprietà. Per modificare il cursore visualizzato per il puntatore del mouse quando si trova entro i limiti del controllo, assegnare un <xref:System.Windows.Forms.Cursor> per il <xref:System.Windows.Forms.Control.Cursor%2A> proprietà del controllo. In alternativa, è possibile visualizzare i cursori a livello di applicazione tramite l'assegnazione di un <xref:System.Windows.Forms.Cursor> per il <xref:System.Windows.Forms.Cursor.Current%2A> proprietà. Lo scopo dell'applicazione consiste nel modificare un file di testo, ad esempio, è possibile impostare il <xref:System.Windows.Forms.Cursor.Current%2A> proprietà <xref:System.Windows.Forms.Cursors.WaitCursor%2A?displayProperty=nameWithType> per visualizzare un cursore di attesa dell'applicazione mentre il file viene caricato o salvato per impediscono l'elaborazione di tutti gli eventi del mouse. Una volta completato il processo, impostare il <xref:System.Windows.Forms.Cursor.Current%2A> proprietà <xref:System.Windows.Forms.Cursors.Default%2A?displayProperty=nameWithType> per l'applicazione venga visualizzato il cursore appropriato su ogni tipo di controllo.  
  
> [!NOTE]
>  Se si chiama <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> prima di reimpostare il <xref:System.Windows.Forms.Cursor.Current%2A> proprietà eseguire il backup per il <xref:System.Windows.Forms.Cursors.Default%2A?displayProperty=nameWithType> cursore, l'applicazione verrà ripresa in ascolto degli eventi del mouse e riprenderà la visualizzazione appropriata <xref:System.Windows.Forms.Cursor> per ogni controllo nell'applicazione.  
  
 È possibile creare oggetti cursore da diverse origini, ad esempio l'handle di un oggetto esistente <xref:System.Windows.Forms.Cursor>, uno standard <xref:System.Windows.Forms.Cursor> file, una risorsa o un flusso di dati.  
  
> [!NOTE]
>  La <xref:System.Windows.Forms.Cursor> classe non supporta i cursori animati (file ANI) o i cursori con colori diversi dal bianco e nero.  
  
 Se l'immagine si utilizza un cursore è troppo piccolo, è possibile utilizzare il <xref:System.Windows.Forms.Cursor.DrawStretched%2A> metodo per forzare l'immagine per riempire i limiti del cursore. È possibile nascondere temporaneamente il cursore tramite una chiamata di <xref:System.Windows.Forms.Cursor.Hide%2A> (metodo) e ripristinarlo chiamando il <xref:System.Windows.Forms.Cursor.Show%2A> metodo.  
  
 A partire da .NET Framework 4.5.2, il <xref:System.Windows.Forms.Cursor> verrà ridimensionata in base all'impostazione DPI di sistema quando il file app. config contiene la voce seguente:  
  
```  
<appSettings>  
  <add key="EnableWindowsFormsHighDpiAutoResizing" value="true" />  
</appSettings>  
```  
  
   
  
## Examples  
 Esempio di codice seguente consente di visualizzare un form che illustra l'uso di un cursore personalizzato. L'oggetto personalizzato <xref:System.Windows.Forms.Cursor> è incorporato nel file di risorse dell'applicazione. L'esempio richiede un cursore contenuto in un file cursore denominato `MyCursor.cur`. Per compilare questo esempio dalla riga di comando, includere il flag seguente: `/res:MyCursor.Cur, CustomCursor.MyCursor.Cur`  
  
 [!code-csharp[System.Windows.Forms.Cursor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor/CS/customcursor.cs#1)]
 [!code-vb[System.Windows.Forms.Cursor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor/VB/customcursor.vb#1)]  
  
 Esempio di codice seguente consente di visualizzare informazioni sui clienti in un <xref:System.Windows.Forms.TreeView> controllo. I nomi dei clienti di visualizzare i nodi radice e i nodi figlio di visualizzare i numeri di ordine assegnati a ciascun cliente. In questo esempio, con 15 ordini vengono visualizzati 1.000 clienti. Per evitare di ridisegnare il <xref:System.Windows.Forms.TreeView> , utilizzare il <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> e <xref:System.Windows.Forms.TreeView.EndUpdate%2A> e in un periodo di attesa <xref:System.Windows.Forms.Cursor> viene visualizzato durante il <xref:System.Windows.Forms.TreeView> crea e disegna il <xref:System.Windows.Forms.TreeNode> oggetti. In questo esempio si suppone un file cursore denominato `MyWait.cur` nella directory dell'applicazione. Richiede inoltre un `Customer` oggetto che può contenere una raccolta di `Order` oggetti e creata un'istanza di un <xref:System.Windows.Forms.TreeView> control per un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Cursors" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.Cursor" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cursor (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.#ctor(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Cursor(IntPtr handle);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Oggetto <see cref="T:System.IntPtr" /> che rappresenta il punto di controllo Windows per il cursore che deve essere creato.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.Cursor" /> dal punto di controllo di Windows specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al termine con esso, è necessario liberare l'handle del cursore. Per ulteriori informazioni sull'eliminazione delle risorse, vedere [la pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md).  
  
   
  
## Examples  
 L'esempio di codice seguente viene creato un cursore dal <xref:System.Windows.Forms.Cursor.Current%2A> del cursore <xref:System.Windows.Forms.Cursor.Handle%2A>, modificata la posizione e il rettangolo di ridimensionamento. Il risultato è che il cursore si sposterà alto e verso sinistra di 50 pixel da quando viene eseguito il codice. Inoltre, il rettangolo di ridimensionamento del cursore viene modificato in base ai limiti del form (per impostazione predefinita è intero schermo dell'utente). In questo esempio si suppone una <xref:System.Windows.Forms.Form> e <xref:System.Windows.Forms.Button> che chiama il codice quando viene selezionato.  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#1)]
 [!code-csharp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#1)]
 [!code-vb[System.Windows.Forms.Cursor Members#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="handle" /> è <see cref="F:System.IntPtr.Zero" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cursor (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Cursor(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Flusso di dati da cui caricare l'oggetto <see cref="T:System.Windows.Forms.Cursor" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.Cursor" /> dal flusso dei dati specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il flusso di dati specificato da `stream` deve contenere un file cursore (cur).  
  
> [!NOTE]
>  I cursori animati (file ANI) non sono supportati per la <xref:System.Windows.Forms.Cursor> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene caricato un cursore da un <xref:System.IO.Stream> creati il <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> metodo di un <xref:System.Windows.Forms.OpenFileDialog>. Quando viene chiamato il metodo, un <xref:System.Windows.Forms.OpenFileDialog> viene visualizzato all'utente e quando una. Viene selezionato il file corrente e chiuso la finestra di dialogo, il file viene aperto e <xref:System.IO.Stream> restituito viene utilizzato per creare un <xref:System.Windows.Forms.Cursor>.  
  
 [!code-cpp[CursorFromResource#1](~/samples/snippets/cpp/VS_Snippets_Winforms/CursorFromResource/CPP/mycursor.cpp#1)]
 [!code-csharp[CursorFromResource#1](~/samples/snippets/csharp/VS_Snippets_Winforms/CursorFromResource/CS/mycursor.cs#1)]
 [!code-vb[CursorFromResource#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CursorFromResource/VB/mycursor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cursor (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Cursor(System::String ^ fileName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">File di cursore da caricare.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.Cursor" /> dal file specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `fileName` parametro deve fare riferimento a un file cursore (cur) standard.  
  
> [!NOTE]
>  I cursori animati (file ANI) non sono supportati per la <xref:System.Windows.Forms.Cursor> classe.  
  
   
  
## Examples  
 Esempio di codice seguente consente di visualizzare informazioni sui clienti in un <xref:System.Windows.Forms.TreeView> controllo. I nomi dei clienti di visualizzare i nodi radice e i nodi figlio di visualizzare i numeri di ordine assegnati a ciascun cliente. In questo esempio, con 15 ordini vengono visualizzati 1.000 clienti. Per evitare di ridisegnare il <xref:System.Windows.Forms.TreeView> , utilizzare il <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> e <xref:System.Windows.Forms.TreeView.EndUpdate%2A> e in un periodo di attesa <xref:System.Windows.Forms.Cursor> viene visualizzato durante il <xref:System.Windows.Forms.TreeView> crea e disegna il <xref:System.Windows.Forms.TreeNode> oggetti. In questo esempio si suppone una `Customer` oggetto che può contenere una raccolta di `Order` oggetti. Inoltre, è necessario avere creato un'istanza di un <xref:System.Windows.Forms.TreeView> control per un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cursor (Type type, string resource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, string resource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.#ctor(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Cursor(Type ^ type, System::String ^ resource);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resource" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Oggetto <see cref="T:System.Type" /> della risorsa.</param>
        <param name="resource">Nome della risorsa.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.Cursor" /> dalla risorsa specificata con il tipo di risorsa definito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Di seguito è riportato un esempio di come incorporare un cursore come una risorsa all'interno dell'applicazione. Per incorporare la risorsa, fare riferimento al nome della risorsa seguito da una virgola, quindi il relativo percorso completo dell'assembly. Vedere la sezione di esempio per informazioni su come caricare il cursore dalla risorsa incorporata.  
  
```  
Using the C# compiler:  
csc /resource:"MyWaitCursor.cur","MyCursors.MyWaitCursor.cur" MyCursor.cs  
Using the Visual Basic compiler:  
vbc /resource:"MyWaitCursor.cur","MyCursors.MyWaitCursor.cur" MyCursor.vb  
```  
  
> [!NOTE]
>  Durante la compilazione, nonché quando riferimento nel codice, il riferimento di risorsa è tra maiuscole e minuscole per i compilatori c# e Visual Basic.  
  
   
  
## Examples  
 Esempio di codice seguente consente di visualizzare un form che illustra l'uso di un cursore personalizzato utilizzando la <xref:System.Windows.Forms.Cursor.%23ctor%2A> costruttore. L'oggetto personalizzato <xref:System.Windows.Forms.Cursor> è incorporato nel file di risorse dell'applicazione. Nell'esempio si presuppone di disporre di un cursore contenuto in un file cursore denominato `MyCursor.cur`. Per compilare questo esempio dalla riga di comando, includere il flag seguente: `/res:MyCursor.Cur, CustomCursor.MyCursor.Cur`  
  
 [!code-csharp[System.Windows.Forms.Cursor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor/CS/customcursor.cs#1)]
 [!code-vb[System.Windows.Forms.Cursor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor/VB/customcursor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public static System.Drawing.Rectangle Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Rectangle Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Cursor.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Clip As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Rectangle Clip { System::Drawing::Rectangle get(); void set(System::Drawing::Rectangle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta i limiti che rappresentano il rettangolo di ridimensionamento per il cursore.</summary>
        <value>Oggetto <see cref="T:System.Drawing.Rectangle" /> che rappresenta il rettangolo di ridimensionamento per l'oggetto <see cref="T:System.Windows.Forms.Cursor" />, espresso in coordinate dello schermo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un cursore è consentito spostare solo all'interno del rettangolo di ritaglio. In genere, il sistema consente solo se il mouse viene attualmente acquisito. Se attualmente il cursore non viene troncato, il rettangolo risulta contiene le dimensioni dello schermo intero.  
  
   
  
## Examples  
 L'esempio di codice seguente viene creato un cursore dal <xref:System.Windows.Forms.Cursor.Current%2A> del cursore <xref:System.Windows.Forms.Cursor.Handle%2A>, modificata la posizione e il rettangolo di ridimensionamento. Il risultato è che il cursore si sposterà alto e verso sinistra di 50 pixel da quando viene eseguito il codice. Inoltre, il rettangolo di ridimensionamento del cursore viene modificato in base ai limiti del form (per impostazione predefinita è intero schermo dell'utente). In questo esempio si suppone una <xref:System.Windows.Forms.Form> e <xref:System.Windows.Forms.Button> che chiama il codice quando viene selezionato.  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#1)]
 [!code-csharp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#1)]
 [!code-vb[System.Windows.Forms.Cursor Members#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">per tutte le finestre impostare questa proprietà. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CopyHandle">
      <MemberSignature Language="C#" Value="public IntPtr CopyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int CopyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.CopyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr CopyHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Copia l'handle di questo oggetto <see cref="T:System.Windows.Forms.Cursor" />.</summary>
        <returns>Oggetto <see cref="T:System.IntPtr" /> che rappresenta il punto di controllo del cursore.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'handle creato come risultato della chiamata di questo metodo deve essere eliminato di quando necessaria perché si verrà non eliminato dal garbage collector.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IntPtr" />
        <altmember cref="M:System.Windows.Forms.Cursor.Dispose" />
        <altmember cref="T:System.GC" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Cursor Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.Cursor Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Cursor.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::Cursor ^ Current { System::Windows::Forms::Cursor ^ get(); void set(System::Windows::Forms::Cursor ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'oggetto cursore che rappresenta il cursore del mouse.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.Cursor" /> che rappresenta il cursore del mouse. Il valore predefinito è <see langword="null" />, se il cursore del mouse non è visibile.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'impostazione di <xref:System.Windows.Forms.Cursor.Current%2A> Modifica proprietà del cursore attualmente visualizzato. L'applicazione può o non può continuare per l'ascolto degli eventi del mouse. Per segnalare che l'applicazione potrebbe non rispondere agli eventi del mouse durante un'operazione con esecuzione prolungata, utilizzare il <xref:System.Windows.Forms.Application.UseWaitCursor%2A> proprietà. Nella maggior parte dei casi, tuttavia, è preferibile utilizzare un thread in background per gestire un'operazione con esecuzione prolungata e lasciare accessibili all'utente un'interfaccia utente. Per ulteriori informazioni sull'implementazione facilmente un'attività in background, vedere <xref:System.ComponentModel.BackgroundWorker>.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">per le sottofinestre impostare questa proprietà. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate da <see cref="T:System.Windows.Forms.Cursor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il metodo <xref:System.Windows.Forms.Cursor.Dispose%2A> dopo aver terminato di utilizzare l'oggetto <xref:System.Windows.Forms.Cursor>. Il metodo `Dispose` lascia l'oggetto <xref:System.Windows.Forms.Cursor> in una condizione di inutilizzabilità. Dopo la chiamata <xref:System.Windows.Forms.Cursor.Dispose%2A>, è necessario rilasciare tutti i riferimenti al <xref:System.Windows.Forms.Cursor> in modo che il garbage collector può recuperare la memoria che di <xref:System.Windows.Forms.Cursor> occupata. Per ulteriori informazioni, vedere [la pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Chiamare sempre il metodo <xref:System.Windows.Forms.Cursor.Dispose%2A> prima di rilasciare l'ultimo riferimento a <xref:System.Windows.Forms.Cursor>. In caso contrario, le risorse utilizzate non vengono liberate fino a quando il garbage collector libera.  
  
   
  
## Examples  
 Nell'esempio seguente disegna il cursore specificato nel form di dimensioni normali in modalità estesa, due volte la dimensione. Questo esempio è richiesto un <xref:System.Windows.Forms.Form> e <xref:System.Windows.Forms.Cursor> da passare quando viene chiamato il metodo.  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#2)]
 [!code-csharp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#2)]
 [!code-vb[System.Windows.Forms.Cursor Members#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public void Draw (System.Drawing.Graphics g, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Draw(class System.Drawing.Graphics g, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Draw (g As Graphics, targetRect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Draw(System::Drawing::Graphics ^ g, System::Drawing::Rectangle targetRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="g">Superficie dell'oggetto <see cref="T:System.Drawing.Graphics" /> su cui disegnare l'oggetto <see cref="T:System.Windows.Forms.Cursor" />.</param>
        <param name="targetRect">Oggetto <see cref="T:System.Drawing.Rectangle" /> che rappresenta i limiti dell'oggetto <see cref="T:System.Windows.Forms.Cursor" />.</param>
        <summary>Disegna il cursore sulla superficie specificata e all'interno dei limiti definiti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il comando di disegno ha origine sulla superficie grafica rappresentata dal `g` parametro, ma un <xref:System.Drawing.Graphics> non contiene informazioni su come eseguire il rendering di una determinata immagine, passa la chiamata al <xref:System.Windows.Forms.Cursor>. Il <xref:System.Windows.Forms.Cursor.Draw%2A> metodo ritaglia l'immagine in corrispondenza delle dimensioni e consente di specificare un <xref:System.Drawing.Rectangle> all'interno del quale disegnare la <xref:System.Windows.Forms.Cursor>. Questo metodo viene in genere utilizzato se si desidera creare il cursore su una superficie grafica. Ad esempio, potrebbe essere una finestra di dialogo che consente all'utente di selezionare dei cursori da un <xref:System.Windows.Forms.ListBox> controllo o un gruppo di <xref:System.Windows.Forms.RadioButton> controlli.  
  
   
  
## Examples  
 Nell'esempio seguente disegna il cursore specificato nel form di dimensioni normali in modalità estesa, due volte la dimensione. In questo esempio si suppone una <xref:System.Windows.Forms.Form> e <xref:System.Windows.Forms.Cursor> oggetto a cui passare quando viene chiamato il metodo.  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#2)]
 [!code-csharp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#2)]
 [!code-vb[System.Windows.Forms.Cursor Members#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Cursor.DrawStretched(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="DrawStretched">
      <MemberSignature Language="C#" Value="public void DrawStretched (System.Drawing.Graphics g, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawStretched(class System.Drawing.Graphics g, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.DrawStretched(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DrawStretched (g As Graphics, targetRect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawStretched(System::Drawing::Graphics ^ g, System::Drawing::Rectangle targetRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="g">Superficie dell'oggetto <see cref="T:System.Drawing.Graphics" /> su cui disegnare l'oggetto <see cref="T:System.Windows.Forms.Cursor" />.</param>
        <param name="targetRect">Oggetto <see cref="T:System.Drawing.Rectangle" /> che rappresenta i limiti dell'oggetto <see cref="T:System.Windows.Forms.Cursor" />.</param>
        <summary>Disegna il cursore in formato ingrandito sulla superficie specificata e all'interno dei limiti definiti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il comando di disegno ha origine sulla superficie grafica rappresentata dal `g` parametro, ma un <xref:System.Drawing.Graphics> non contengono informazioni su come eseguire il rendering di una determinata immagine, passa la chiamata al <xref:System.Windows.Forms.Cursor> oggetto. Il <xref:System.Windows.Forms.Cursor.DrawStretched%2A> metodo estende l'immagine per riempire l'oggetto specificato <xref:System.Drawing.Rectangle> quando viene disegnato il cursore.  
  
   
  
## Examples  
 Nell'esempio seguente disegna il cursore specificato nel form di dimensioni normali in modalità estesa, due volte la dimensione. In questo esempio si suppone una <xref:System.Windows.Forms.Form> e <xref:System.Windows.Forms.Cursor> oggetto a cui passare quando viene chiamato il metodo.  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#2)]
 [!code-csharp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#2)]
 [!code-vb[System.Windows.Forms.Cursor Members#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Cursor.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto <see cref="T:System.Windows.Forms.Cursor" /> da confrontare.</param>
        <summary>Restituisce un valore che indica se il cursore è uguale all'oggetto <see cref="T:System.Windows.Forms.Cursor" /> specificato.</summary>
        <returns>
          <see langword="true" /> se il cursore è uguale all'oggetto <see cref="T:System.Windows.Forms.Cursor" /> specificato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio di codice seguente viene creato un cursore dal <xref:System.Windows.Forms.Cursor.Current%2A> del cursore <xref:System.Windows.Forms.Cursor.Handle%2A>, modificata la posizione e il rettangolo di ridimensionamento. Il risultato è che il cursore si sposterà alto e verso sinistra di 50 pixel da quando viene eseguito il codice. Inoltre, il rettangolo di ridimensionamento del cursore viene modificato in base ai limiti del form (per impostazione predefinita è intero schermo dell'utente). Questo esempio è richiesto un <xref:System.Windows.Forms.Form> e <xref:System.Windows.Forms.Button> che chiama il codice quando viene selezionato.  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#1)]
 [!code-csharp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#1)]
 [!code-vb[System.Windows.Forms.Cursor Members#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Cursor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Cursor ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Consente a un oggetto di effettuare un tentativo di liberare risorse ed eseguire altre operazioni di pulizia prima che venga recuperato da Garbage Collection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera il codice hash per l'oggetto <see cref="T:System.Windows.Forms.Cursor" /> corrente.</summary>
        <returns>Codice hash per l'oggetto <see cref="T:System.Windows.Forms.Cursor" /> corrente.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Cursor.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il punto di controllo del cursore.</summary>
        <value>Oggetto <see cref="T:System.IntPtr" /> che rappresenta il punto di controllo del cursore.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non si tratta di una copia dell'handle; non eliminarlo.  
  
   
  
## Examples  
 L'esempio di codice seguente viene creato un cursore dal <xref:System.Windows.Forms.Cursor.Current%2A> del cursore <xref:System.Windows.Forms.Cursor.Handle%2A>, modificata la posizione e il rettangolo di ridimensionamento. Il risultato è che il cursore si sposterà alto e verso sinistra di 50 pixel da quando viene eseguito il codice. Inoltre, il rettangolo di ridimensionamento del cursore viene modificato in base ai limiti del form (per impostazione predefinita è intero schermo dell'utente). Questo esempio è richiesto un <xref:System.Windows.Forms.Form> e <xref:System.Windows.Forms.Button> che chiama il codice quando viene selezionato.  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#1)]
 [!code-csharp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#1)]
 [!code-vb[System.Windows.Forms.Cursor Members#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Il valore dell'handle è <see cref="F:System.IntPtr.Zero" />.</exception>
        <altmember cref="M:System.Windows.Forms.Cursor.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public static void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.Hide" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Hide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Hide();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Nasconde il cursore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.Cursor.Show%2A> e <xref:System.Windows.Forms.Cursor.Hide%2A> devono essere bilanciate. Per ogni chiamata al <xref:System.Windows.Forms.Cursor.Hide%2A> deve esistere una chiamata corrispondente al metodo di <xref:System.Windows.Forms.Cursor.Show%2A> metodo.  
  
   
  
## Examples  
 Esempio di codice seguente nasconde il cursore quando il puntatore del mouse entra area client del pulsante. Analogamente, quando il puntatore del mouse esce dall'area client del pulsante, verrà nuovamente visualizzato il cursore. Questo esempio è richiesto un <xref:System.Windows.Forms.Form> con un <xref:System.Windows.Forms.Button> denominato `myButton`.  
  
 [!code-cpp[CursorFromResource#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CursorFromResource/CPP/mycursor.cpp#3)]
 [!code-csharp[CursorFromResource#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CursorFromResource/CS/mycursor.cs#3)]
 [!code-vb[CursorFromResource#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CursorFromResource/VB/mycursor.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">per tutte le finestre di chiamare questo metodo. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="M:System.Windows.Forms.Cursor.Show" />
      </Docs>
    </Member>
    <Member MemberName="HotSpot">
      <MemberSignature Language="C#" Value="public System.Drawing.Point HotSpot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point HotSpot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Cursor.HotSpot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HotSpot As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point HotSpot { System::Drawing::Point get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'area sensibile di un cursore.</summary>
        <value>Classe <see cref="T:System.Drawing.Point" /> che rappresenta l'area sensibile di un cursore.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.Cursor.HotSpot%2A> è il <xref:System.Drawing.Point> del cursore che interagisce con altri elementi sullo schermo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.Cursor left, System.Windows.Forms.Cursor right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.Cursor left, class System.Windows.Forms.Cursor right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.op_Equality(System.Windows.Forms.Cursor,System.Windows.Forms.Cursor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Cursor, right As Cursor) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::Cursor ^ left, System::Windows::Forms::Cursor ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.Cursor" />
        <Parameter Name="right" Type="System.Windows.Forms.Cursor" />
      </Parameters>
      <Docs>
        <param name="left">Oggetto <see cref="T:System.Windows.Forms.Cursor" /> da confrontare.</param>
        <param name="right">Oggetto <see cref="T:System.Windows.Forms.Cursor" /> da confrontare.</param>
        <summary>Restituisce un valore che indica se due istanze di una classe <see cref="T:System.Windows.Forms.Cursor" /> sono uguali.</summary>
        <returns>
          <see langword="true" /> se le due istanze della classe <see cref="T:System.Windows.Forms.Cursor" /> sono uguali; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Il metodo equivalente per l'operatore è <xref:System.Windows.Forms.Cursor.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 Nell'esempio seguente disegna il cursore specificato nel form di dimensioni normali in modalità estesa, due volte la dimensione. Questo esempio è richiesto un <xref:System.Windows.Forms.Form> e <xref:System.Windows.Forms.Cursor> oggetto a cui passare quando viene chiamato il metodo.  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#2)]
 [!code-csharp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#2)]
 [!code-vb[System.Windows.Forms.Cursor Members#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Cursor.op_Inequality(System.Windows.Forms.Cursor,System.Windows.Forms.Cursor)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.Cursor left, System.Windows.Forms.Cursor right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.Cursor left, class System.Windows.Forms.Cursor right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.op_Inequality(System.Windows.Forms.Cursor,System.Windows.Forms.Cursor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Cursor, right As Cursor) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::Cursor ^ left, System::Windows::Forms::Cursor ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.Cursor" />
        <Parameter Name="right" Type="System.Windows.Forms.Cursor" />
      </Parameters>
      <Docs>
        <param name="left">Oggetto <see cref="T:System.Windows.Forms.Cursor" /> da confrontare.</param>
        <param name="right">Oggetto <see cref="T:System.Windows.Forms.Cursor" /> da confrontare.</param>
        <summary>Restituisce un valore che indica se due istanze di <see cref="T:System.Windows.Forms.Cursor" /> non sono uguali.</summary>
        <returns>
          <see langword="true" /> se le due istanze della classe <see cref="T:System.Windows.Forms.Cursor" /> non sono uguali; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Il metodo equivalente per l'operatore è <xref:System.Windows.Forms.Cursor.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 Nell'esempio seguente disegna il cursore specificato nel form di dimensioni normali in modalità estesa, due volte la dimensione. Questo esempio è richiesto un <xref:System.Windows.Forms.Form> e <xref:System.Windows.Forms.Cursor> da passare quando viene chiamato il metodo.  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#2)]
 [!code-csharp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#2)]
 [!code-vb[System.Windows.Forms.Cursor Members#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Cursor.op_Equality(System.Windows.Forms.Cursor,System.Windows.Forms.Cursor)" />
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Point Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Cursor.Position" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Position As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Point Position { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la posizione del cursore.</summary>
        <value>Oggetto <see cref="T:System.Drawing.Point" /> che rappresenta la posizione del cursore, espressa in coordinate dello schermo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.Cursor.Position%2A> è identica al <xref:System.Windows.Forms.Control.MousePosition%2A?displayProperty=nameWithType> proprietà.  
  
   
  
## Examples  
 L'esempio di codice seguente viene creato un cursore dal <xref:System.Windows.Forms.Cursor.Current%2A> del cursore <xref:System.Windows.Forms.Cursor.Handle%2A>, modificata la posizione e il rettangolo di ridimensionamento. Il risultato è che il cursore si sposterà alto e verso sinistra di 50 pixel da quando viene eseguito il codice. Inoltre, il rettangolo di ridimensionamento del cursore viene modificato in base ai limiti del form (per impostazione predefinita è intero schermo dell'utente). Questo esempio è richiesto un <xref:System.Windows.Forms.Form> e <xref:System.Windows.Forms.Button> che chiama il codice quando viene selezionato.  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#1)]
 [!code-csharp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#1)]
 [!code-vb[System.Windows.Forms.Cursor Members#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public static void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.Show" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Show ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Show();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Visualizza il cursore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.Cursor.Show%2A> e <xref:System.Windows.Forms.Cursor.Hide%2A> devono essere bilanciate. Per ogni chiamata al <xref:System.Windows.Forms.Cursor.Hide%2A> deve esistere una chiamata corrispondente al metodo di <xref:System.Windows.Forms.Cursor.Show%2A> metodo.  
  
   
  
## Examples  
 Esempio di codice seguente nasconde il cursore quando il puntatore del mouse entra area client del pulsante. Analogamente, quando il puntatore del mouse esce dall'area client del pulsante, verrà nuovamente visualizzato il cursore. Questo esempio è richiesto un <xref:System.Windows.Forms.Form> con un <xref:System.Windows.Forms.Button> denominato `myButton`.  
  
 [!code-cpp[CursorFromResource#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CursorFromResource/CPP/mycursor.cpp#3)]
 [!code-csharp[CursorFromResource#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CursorFromResource/CS/mycursor.cs#3)]
 [!code-vb[CursorFromResource#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CursorFromResource/VB/mycursor.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Cursor.Hide" />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Cursor.Size" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la dimensione dell'oggetto cursore.</summary>
        <value>Oggetto <see cref="T:System.Drawing.Size" /> che rappresenta la larghezza e l'altezza dell'oggetto <see cref="T:System.Windows.Forms.Cursor" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente disegna il cursore specificato nel form di dimensioni normali in modalità estesa, due volte la dimensione. Questo esempio è richiesto un <xref:System.Windows.Forms.Form> e <xref:System.Windows.Forms.Cursor> oggetto a cui passare quando viene chiamato il metodo.  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#2)]
 [!code-csharp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#2)]
 [!code-vb[System.Windows.Forms.Cursor Members#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Size" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (si As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ si, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">Classe <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
        <param name="context">Classe <see cref="T:System.Runtime.Serialization.StreamingContext" />.</param>
        <summary>Serializza l'oggetto.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Cursor.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'oggetto che contiene i dati relativi all'oggetto <see cref="T:System.Windows.Forms.Cursor" />.</summary>
        <value>Oggetto <see cref="T:System.Object" /> che contiene i dati relativi all'oggetto <see cref="T:System.Windows.Forms.Cursor" />. Il valore predefinito è <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una stringa leggibile che rappresenta questo oggetto <see cref="T:System.Windows.Forms.Cursor" />.</summary>
        <returns>Oggetto <see cref="T:System.String" /> che rappresenta questo oggetto <see cref="T:System.Windows.Forms.Cursor" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>