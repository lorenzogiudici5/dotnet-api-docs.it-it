<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8c9d000578e8ade0326c86daf432d3d053ae8ce3" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39882921" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornisce un meccanismo indipendente dal formato per il trasferimento dei dati.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `IDataObject` interfaccia viene utilizzata dal <xref:System.Windows.Forms.Clipboard> classe e nelle operazioni di trascinamento e rilascio.  
  
 Una volta implementato in una classe, il <xref:System.Windows.Forms.IDataObject> metodi consentono all'utente di archiviare i dati in più formati in un'istanza della classe. L'archiviazione dei dati in più formati aumenta la probabilità che un'applicazione di destinazione, i cui requisiti di formato non è noto, è possibile recuperare i dati archiviati. Per archiviare i dati in un'istanza di <xref:System.Windows.Forms.IDataObject>, chiamare il <xref:System.Windows.Forms.IDataObject.SetData%2A> metodo e specificare il formato di dati nel `format` parametro. Impostare il `autoConvert` parametro per `false` se non si desidera convertire in un altro formato quando vengono recuperati i dati memorizzati. Richiamare <xref:System.Windows.Forms.IDataObject.SetData%2A> più volte in un'istanza di <xref:System.Windows.Forms.IDataObject> per archiviare i dati in più formati.  
  
 Recuperare i dati archiviati da un' <xref:System.Windows.Forms.IDataObject> chiamando il <xref:System.Windows.Forms.IDataObject.GetData%2A> metodo e specificando i dati formato nella `format` parametro. Impostare il `autoConvert` parametro per `false` per recuperare solo i dati archiviati nel formato specificato. Per convertire i dati archiviati nel formato specificato, impostare `autoConvert` al `true`, o non utilizzare `autoConvert`.  
  
 Per determinare il formato dei dati archiviati in un' <xref:System.Windows.Forms.IDataObject>, usare il comando seguente <xref:System.Windows.Forms.IDataObject> metodi.  
  
-   Chiamare il <xref:System.Windows.Forms.IDataObject.GetFormats%2A> metodo per recuperare una matrice di tutti i formati in cui i dati sono disponibili. Impostare il `autoConvert` parametro per `false` per ottenere solo i formati in cui i dati vengono archiviati. Per ottenere tutti i formati in cui i dati sono disponibili, impostare `autoConvert` a `true`, o non si utilizza questo parametro.  
  
-   Chiamare il <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> metodo per determinare se i dati archiviati sono disponibili in un formato specifico. Se non si desidera che i dati archiviati da convertire nel formato specificato, impostare il `autoConvert` parametro per `false`.  
  
 Vedere il <xref:System.Windows.Forms.DataObject> classe per l'implementazione di questa interfaccia. Vedere le <xref:System.Windows.Forms.DataFormats> classe per oggetto predefinito <xref:System.Windows.Forms.Clipboard> formati di dati.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Recupera i dati associati al formato dati specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Formato dei dati da recuperare. Per i formati predefiniti, vedere <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Recupera i dati associati al formato dati specificato.</summary>
        <returns>Dati associati al formato specificato, oppure <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se questo metodo non è possibile trovare i dati nel formato specificato, tenta di convertire i dati nel formato. Se i dati non possono essere convertiti nel formato specificato, questo metodo restituisce `null`.  
  
 Per determinare se i dati sono associati, o possono essere convertiti in tale formato, chiamare <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> prima di chiamare <xref:System.Windows.Forms.IDataObject.GetData%2A>. Chiamare <xref:System.Windows.Forms.IDataObject.GetFormats%2A> per un elenco dei formati validi per i dati archiviati in questa istanza.  
  
> [!NOTE]
>  Dati possono essere convertiti in un altro formato, se è stato archiviato che specifica che la conversione è consentita, e se il formato richiesto è compatibile con il formato archiviati. Ad esempio, i dati archiviati come Unicode può essere convertito in testo.  
  
 Per un'implementazione di questo metodo, vedere <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Questo esempio Usa la <xref:System.Windows.Forms.DataObject> classe che implementa `IDataObject,` per illustrare l'uso del `GetData` (metodo). Il metodo viene utilizzato per recuperare i dati archiviati `myDataObject`, che è associata la `Text` formato. Nell'esempio si presuppone che abbia già creato un <xref:System.Windows.Forms.Form> denominate `Form1` e una <xref:System.Windows.Forms.TextBox> denominato `textBox1`.  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">Oggetto <see cref="T:System.Type" /> che rappresenta il formato dei dati da recuperare. Per i formati predefiniti, vedere <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Recupera i dati associati al formato del tipo di classe specificato.</summary>
        <returns>Dati associati al formato specificato, oppure <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se questo metodo non è possibile trovare i dati nel formato specificato, tenta di convertire i dati nel formato. Se i dati non possono essere convertiti nel formato specificato, questo metodo restituisce `null`.  
  
 Per determinare se i dati sono associati, o possono essere convertiti in tale formato, chiamare <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> prima di chiamare <xref:System.Windows.Forms.IDataObject.GetData%2A>. Chiamare <xref:System.Windows.Forms.IDataObject.GetFormats%2A> per un elenco dei formati validi per i dati archiviati in questa istanza.  
  
> [!NOTE]
>  Dati possono essere convertiti in un altro formato, se è stato archiviato che specifica che la conversione è consentita, e se il formato richiesto è compatibile con il formato archiviati. Ad esempio, i dati archiviati come Unicode può essere convertito in testo.  
  
 Per un'implementazione di questo metodo, vedere <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Questo esempio Usa la <xref:System.Windows.Forms.DataObject> classe che implementa `IDataObject`, per illustrare l'uso del `GetData` (metodo). Il metodo viene utilizzato per recuperare i dati archiviati `myObject`, cui è associato a un tipo specifico, `myType`. Il tipo di dati recuperati viene visualizzato in una finestra di messaggio. Nell'esempio si presuppone che abbia già creato un <xref:System.Windows.Forms.Form> denominato `Form1`.  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Formato dei dati da recuperare. Per i formati predefiniti, vedere <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="autoConvert">
          <see langword="true" /> per convertire i dati nel formato specificato; in caso contrario, <see langword="false" />.</param>
        <summary>Recupera i dati associati al formato dati specificato, utilizzando un valore Boolean per determinare se convertire i dati in tale formato.</summary>
        <returns>Dati associati al formato specificato, oppure <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il `autoConvert` parametro è `true` e questo metodo non è possibile trovare i dati nel formato specificato, tenta di convertire i dati nel formato. Se i dati non possono essere convertiti nel formato specificato o se i dati sono stati memorizzati con il `autoConvert` parametro è impostato su `false`, questo metodo restituisce `null`.  
  
 Se il `autoConvert` parametro è `false`, questo metodo restituisce i dati nel formato specificato, o `null` se non viene trovato alcun dato nel formato seguente.  
  
 Per determinare se i dati sono associati, o possono essere convertiti in tale formato, chiamare <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> prima di chiamare <xref:System.Windows.Forms.IDataObject.GetData%2A>. Chiamare <xref:System.Windows.Forms.IDataObject.GetFormats%2A> per un elenco dei formati validi per i dati archiviati in questa istanza.  
  
> [!NOTE]
>  Dati possono essere convertiti in un altro formato, se è stato archiviato che specifica che la conversione è consentita, e se il formato richiesto è compatibile con il formato archiviati. Ad esempio, i dati archiviati come Unicode può essere convertito in testo.  
  
 Per un'implementazione di questo metodo, vedere <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Questo esempio Usa la <xref:System.Windows.Forms.DataObject> classe che implementa `IDataObject`, per illustrare l'uso del `GetData` (metodo). Nell'esempio vengono recuperati i dati archiviati in un `DataObject`, usando il `autoConvert` parametro per specificare se visualizzare o meno convertire il formato dei dati. Prima di tutto, `myDataObject` viene creato con i dati di testo. Successivamente, viene tentato due volte recuperare i dati. Nella prima versione di valutazione, specifica un formato come una stringa e imposta il `autoConvert` parametro per `false`. Questa versione di valutazione ha esito negativo e il risultato viene visualizzato in una finestra di messaggio con l'etichetta "Messaggio #1". Nella seconda versione di valutazione, l'esempio recupera gli stessi dati con il `autoConvert` parametro è impostato su `true`. Questa versione di valutazione ha esito positivo e il risultato viene visualizzato in una finestra di messaggio con l'etichetta "Messaggio #2." Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Form> denominato `Form1`.  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se i dati memorizzati nell'istanza sono associati al formato specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Il formato da ricercare. Per i formati predefiniti, vedere <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Determina se i dati memorizzati in questa istanza sono associati al formato specificato o vi possono essere convertiti.</summary>
        <returns>
          <see langword="true" /> se i dati memorizzati nell'istanza sono associati al formato specificato o possono essere convertiti in tale formato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo per determinare la presenza di un formato in questo <xref:System.Windows.Forms.DataObject> prima di chiamare <xref:System.Windows.Forms.IDataObject.GetData%2A>. Chiamare <xref:System.Windows.Forms.IDataObject.GetFormats%2A> per i formati disponibili in questa istanza.  
  
> [!NOTE]
>  Dati possono essere convertiti in un altro formato, se è stato archiviato che specifica che la conversione è consentita, e se il formato richiesto è compatibile con il formato archiviati. Ad esempio, i dati archiviati come Unicode può essere convertito in testo.  
  
 Per un'implementazione di questo metodo, vedere <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Questo esempio Usa la <xref:System.Windows.Forms.DataObject> classe che implementa `IDataObject`, per illustrare l'uso del `GetDataPresent` (metodo). In primo luogo, crea un oggetto dati usando una stringa e il `Text` formato. Quindi, viene verificato che i dati sono presenti nel `Text` formattare e visualizzare i risultati in una finestra di messaggio. Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Form> denominato `Form1`.  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">Oggetto <see cref="T:System.Type" /> che rappresenta il formato da ricercare. Per i formati predefiniti, vedere <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <summary>Determina se i dati memorizzati in questa istanza sono associati al formato specificato o vi possono essere convertiti.</summary>
        <returns>
          <see langword="true" /> se i dati memorizzati nell'istanza sono associati o possono essere convertiti nel formato specificato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo per determinare la presenza di un formato in questo <xref:System.Windows.Forms.DataObject> prima di chiamare <xref:System.Windows.Forms.IDataObject.GetData%2A>. Chiamare <xref:System.Windows.Forms.IDataObject.GetFormats%2A> per i formati disponibili in questa istanza.  
  
> [!NOTE]
>  Dati possono essere convertiti in un altro formato, se è stato archiviato che specifica che la conversione è consentita, e se il formato richiesto è compatibile con il formato archiviati. Ad esempio, i dati archiviati come Unicode può essere convertito in testo.  
  
 Per un'implementazione di questo metodo, vedere <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Questo esempio Usa la <xref:System.Windows.Forms.DataObject> classe che implementa `IDataObject`, per illustrare l'uso del `GetDataPresent` (metodo). Innanzitutto, crea un componente (`myComponent`) e lo archivia in un oggetto dati (`myDataObject`). Quindi viene controllato se i dati specificati sono archiviati `myDataObject`. Se il test restituisce `true`, viene visualizzato il risultato in una finestra di messaggio e visualizza il tipo di dati in una casella di testo. Questo esempio si presuppone che abbia già creato un <xref:System.Windows.Forms.Form> denominate `Form1` e una <xref:System.Windows.Forms.TextBox> denominato `textBox1`.  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Il formato da ricercare. Per i formati predefiniti, vedere <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="autoConvert">
          <see langword="true" /> per determinare se i dati memorizzati in questa istanza possono essere convertiti nel formato specificato; <see langword="false" /> per verificare se i dati sono nel formato specificato.</param>
        <summary>Determina se i dati memorizzati nell'istanza sono associati al formato dati specificato, utilizzando un valore Boolean per determinare se convertire i dati in tale formato.</summary>
        <returns>
          <see langword="true" /> se i dati sono nel formato specificato o possono essere convertiti in tale formato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo per determinare la presenza di un formato in questo <xref:System.Windows.Forms.DataObject> prima di chiamare <xref:System.Windows.Forms.IDataObject.GetData%2A>. Chiamare <xref:System.Windows.Forms.IDataObject.GetFormats%2A> per i formati disponibili in questa istanza.  
  
 Questo metodo restituisce `true` quando:  
  
-   Il `autoConvert` parametro è `true` e i dati si trova in un formato che può essere convertito nel formato appropriato.  
  
-   Il `autoConvert` parametro è `false` e i dati sono nel formato appropriato.  
  
 Questo metodo restituisce `false` quando:  
  
-   Il `autoConvert` parametro è `true` e questo metodo non è possibile trovare i dati nel formato specificato e non può convertire i dati nel formato specificato o i dati sono stati memorizzati con `autoConvert` impostato su `false`.  
  
-   Il `autoConvert` parametro è `false`, e i dati non esiste in questa istanza nel formato specificato.  
  
> [!NOTE]
>  Dati possono essere convertiti in un altro formato, se è stato archiviato che specifica che la conversione è consentita, e se il formato richiesto è compatibile con il formato archiviati. Ad esempio, i dati archiviati come Unicode può essere convertito in testo.  
  
 Per un'implementazione di questo metodo, vedere <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Questo esempio Usa la <xref:System.Windows.Forms.DataObject> classe che implementa `IDataObject`, per illustrare l'uso del `GetDataPresent` (metodo). In primo luogo, crea un oggetto dati (`myDataObject`) usando una stringa e il `Text` formato. Quindi viene eseguita una query di oggetto per i dati associati con la `Text` formato, con il `autoConvert` parametro impostato su `false`. Questa versione di valutazione ha esito negativo e il risultato viene visualizzato in una finestra di messaggio con l'etichetta "Messaggio #1". La seconda versione di valutazione viene impostato il `autoConvert` parametro per `true`. Questa versione di valutazione ha esito positivo e il risultato viene visualizzato in una finestra di messaggio con l'etichetta "Messaggio #2." Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Form> denominato `Form1`.  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un elenco di tutti i formati ai quali sono associati i dati memorizzati in questa istanza o nei quali possono essere convertiti.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un elenco di tutti i formati ai quali sono associati i dati memorizzati in questa istanza o nei quali possono essere convertiti.</summary>
        <returns>Matrice di nomi che rappresenta un elenco di tutti i formati supportati dai dati memorizzati nell'oggetto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo per ottenere formati dati supportati prima di chiamare il <xref:System.Windows.Forms.IDataObject.GetData%2A> (metodo). Vedere il <xref:System.Windows.Forms.DataFormats> classe per i formati predefiniti.  
  
> [!NOTE]
>  Dati possono essere convertiti in un altro formato, se è stato archiviato che specifica che la conversione è consentita, e se il formato richiesto è compatibile con il formato archiviati. Ad esempio, i dati archiviati come Unicode può essere convertito in testo.  
  
 Per un'implementazione di questo metodo, vedere <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Questo esempio Usa la <xref:System.Windows.Forms.DataObject> classe che implementa `IDataObject`, per illustrare l'uso del `GetFormats` (metodo). In primo luogo, crea un oggetto dati (`myDataObject`) usando una stringa e il `Text` formato. Quindi recupera tutti i formati di dati e formati di conversione dei dati nell'oggetto dati e visualizza l'elenco risultante in una finestra di messaggio. Questo esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Form> denominato `Form1`.  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert">
          <see langword="true" /> per recuperare tutti i formati ai quali sono associati i dati memorizzati in questa istanza o nei quali possono essere convertiti; <see langword="false" /> per recuperare solo i formati nativi dei dati.</param>
        <summary>Ottiene un elenco di tutti i formati ai quali i dati memorizzati in questa istanza sono associati o nei quali possono essere convertiti, utilizzando un valore Boolean per determinare se recuperare tutti i formati in cui possono essere convertiti i dati o solo i formati nativi dei dati.</summary>
        <returns>Matrice di nomi che rappresenta un elenco di tutti i formati supportati dai dati memorizzati nell'oggetto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo per ottenere formati dati supportati prima di chiamare il <xref:System.Windows.Forms.IDataObject.GetData%2A> (metodo). Vedere il <xref:System.Windows.Forms.DataFormats> classe per i formati predefiniti.  
  
> [!NOTE]
>  Dati possono essere convertiti in un altro formato, se è stato archiviato che specifica che la conversione è consentita, e se il formato richiesto è compatibile con il formato archiviati. Ad esempio, i dati archiviati come Unicode può essere convertito in testo.  
  
 Per un'implementazione di questo metodo, vedere <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Questo esempio Usa la <xref:System.Windows.Forms.DataObject> classe che implementa `IDataObject`, per illustrare l'uso del `GetFormats` (metodo). In primo luogo, crea un oggetto dati (`myDataObject`) usando una stringa e il `UnicodeText` formato. Quindi vengono eseguite due query per ottenere i formati associati ai dati. La prima query, viene impostato il `autoConvert` parametro per `false` : in questo caso, viene restituito solo il formato nativo di dati. Nella seconda query, si imposta la `autoConvert` parametro per `true`, in modo da ottenere un elenco di formati, inclusi i formati di dati possono essere convertiti in. In ogni caso, viene visualizzato l'elenco risulta in una finestra di messaggio. Questo esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Form> denominato `Form1`.  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Memorizza nell'istanza i dati specificati e il formato associato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">Dati da memorizzare.</param>
        <summary>Memorizza i dati specificati in questa istanza, utilizzando la classe dei dati per il formato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il formato è derivato dalla classe di dati.  
  
 Dati archiviati usando questo metodo possono essere convertiti in un formato compatibile quando vengono recuperati.  
  
 Per un'implementazione di questo metodo, vedere <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Questo esempio Usa la <xref:System.Windows.Forms.DataObject> classe che implementa `IDataObject`, per illustrare l'uso del `SetData` (metodo). Innanzitutto, crea un componente (`myComponent`) e lo archivia in un oggetto dati (`myDataObject`). Quindi viene controllato se i dati specificati vengono archiviati nell'oggetto dati e visualizza il risultato in una finestra di messaggio. Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Form> denominato `Form1`.  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Formato associato ai dati. Per i formati predefiniti, vedere <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="data">Dati da memorizzare.</param>
        <summary>Memorizza nell'istanza i dati specificati e il formato associato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non si conosce il formato dell'applicazione di destinazione, è possibile archiviare i dati in più formati con questo metodo.  
  
 Dati archiviati usando questo metodo possono essere convertiti in un formato compatibile quando vengono recuperati.  
  
 Per un'implementazione di questo metodo, vedere <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Questo esempio Usa la <xref:System.Windows.Forms.DataObject> classe che implementa `IDataObject`, per illustrare l'uso del `SetData` (metodo). In primo luogo, crea un oggetto dati (`myDataObject`) e archivia una stringa nell'oggetto specificando il `UnicodeText` formato. Quindi recupera i dati archiviati nell'oggetto specificando il `Text` formattare, in modo che i dati viene convertiti nel `Text` formato. Il risultato viene visualizzato in una finestra di messaggio. Questo esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Form> denominato `Form1`.  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Oggetto <see cref="T:System.Type" /> che rappresenta il formato associato ai dati. Per i formati predefiniti, vedere <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="data">Dati da memorizzare.</param>
        <summary>Memorizza i dati specificati e il tipo di classe associata in questa istanza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non si conosce il formato dell'applicazione di destinazione, è possibile archiviare i dati in più formati con questo metodo.  
  
 Dati archiviati usando questo metodo possono essere convertiti in un formato compatibile quando vengono recuperati.  
  
 Per un'implementazione di questo metodo, vedere <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Questo esempio Usa la <xref:System.Windows.Forms.DataObject> classe che implementa `IDataObject`, per illustrare l'uso del `SetData` (metodo). Innanzitutto, crea un componente (`myComponent`) e lo archivia in un oggetto dati (`myDataObject`), usando `myType` per specificare il formato dei dati. Quindi viene controllato se viene archiviati nell'oggetto dati del tipo specificato e visualizza il risultato in una finestra di messaggio. Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Form> denominato `Form1`.  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Formato associato ai dati. Per i formati predefiniti, vedere <see cref="T:System.Windows.Forms.DataFormats" />.</param>
        <param name="autoConvert">
          <see langword="true" /> per consentire la conversione dei dati in un altro formato; in caso contrario, <see langword="false" />.</param>
        <param name="data">Dati da memorizzare.</param>
        <summary>Memorizza i dati specificati e il formato associato nell'istanza utilizzando un valore Boolean per specificare se i dati possono essere convertiti in un altro formato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non si conosce il formato dell'applicazione di destinazione, è possibile archiviare i dati in più formati con questo metodo.  
  
 Per un'implementazione di questo metodo, vedere <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Questo esempio Usa la <xref:System.Windows.Forms.DataObject> classe che implementa `IDataObject`, per illustrare l'uso del `SetData` (metodo). In primo luogo, crea un oggetto dati (`myDataObject`) e archivia una `UnicodeText` stringa, con la `autoConvert` parametro impostato su `false`. Quindi recupera i formati associati i dati archiviati nell'oggetto e viene visualizzato il risultato in una finestra di messaggio. È l'unico formato associato ai dati di `UnicodeText` formato. Questo esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Form> denominato `Form1`.  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>