<Type Name="KeyPressEventArgs" FullName="System.Windows.Forms.KeyPressEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a9a608d40d05807744b762b50eb85c4cb38ac606" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30647455" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class KeyPressEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyPressEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyPressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyPressEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyPressEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornisce dati per l'evento <see cref="E:System.Windows.Forms.Control.KeyPress" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Forms.KeyPressEventArgs> specifica il carattere che è costituito da quando l'utente preme un tasto. Ad esempio, quando l'utente preme MAIUSC + K, il <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> restituirà k in maiuscolo.  
  
 Oggetto <xref:System.Windows.Forms.Control.KeyPress> evento si verifica quando l'utente preme un tasto. Due eventi che sono strettamente correlati di <xref:System.Windows.Forms.Control.KeyPress> evento <xref:System.Windows.Forms.Control.KeyUp> e <xref:System.Windows.Forms.Control.KeyDown>. Il <xref:System.Windows.Forms.Control.KeyDown> evento precede ogni <xref:System.Windows.Forms.Control.KeyPress> evento quando l'utente preme un tasto e un <xref:System.Windows.Forms.Control.KeyUp> evento si verifica quando l'utente rilascia un tasto. Quando l'utente tiene premuto un tasto, duplicare <xref:System.Windows.Forms.Control.KeyDown> e <xref:System.Windows.Forms.Control.KeyPress> gli eventi si verificano ogni volta che si ripete il carattere. Un <xref:System.Windows.Forms.Control.KeyUp> viene generato l'evento al rilascio.  
  
 Con ogni <xref:System.Windows.Forms.Control.KeyPress> evento, un <xref:System.Windows.Forms.KeyPressEventArgs> viene passato. Oggetto <xref:System.Windows.Forms.KeyEventArgs> viene passato a ogni <xref:System.Windows.Forms.Control.KeyDown> e <xref:System.Windows.Forms.Control.KeyUp> evento. Oggetto <xref:System.Windows.Forms.KeyEventArgs> specifica se insieme a un'altra chiave sono stati premuti i tasti di modifica (CTRL, MAIUSC o ALT). (Queste informazioni modificatore possono anche essere ottenute tramite il <xref:System.Windows.Forms.Control.ModifierKeys%2A> proprietà la <xref:System.Windows.Forms.Control> classe.)  
  
 Impostare <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> a `true` per annullare il `KeyPress` evento. In questo modo il controllo di elaborare la pressione del tasto.  
  
> [!NOTE]
>  Alcuni controlli determinate sequenze di tasti vengono elaborate in <xref:System.Windows.Forms.Control.KeyDown>. Ad esempio, <xref:System.Windows.Forms.RichTextBox> elabora il tasto INVIO prima <xref:System.Windows.Forms.Control.KeyPress> viene chiamato. In questi casi, è possibile annullare il <xref:System.Windows.Forms.Control.KeyPress> evento e deve annullare la sequenza di tasti da <xref:System.Windows.Forms.Control.KeyDown> invece.  
  
 Per informazioni sul modello di eventi, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo di <xref:System.Windows.Forms.KeyPressEventArgs> per contare come vengono premuti i tasti e visualizzare i risultati dopo ogni pressione di tasto. <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> viene quindi impostato su true per mantenere il sistema operativo di ulteriori elabora il tasto. Nell'esempio si presuppone un form con un <xref:System.Windows.Forms.TextBox> posizionato su di esso.  
  
 [!code-cpp[Classic KeyPressEventArgs Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source.cpp#1)]
 [!code-csharp[Classic KeyPressEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic KeyPressEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source.vb#1)]  
  
 È necessario creare una nuova istanza di questa classe. È inoltre necessario impostare il gestore dell'evento. È possibile farlo nel costruttore per la classe.  
  
 [!code-cpp[Classic KeyPressEventArgs Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic KeyPressEventArgs Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source2.cs#2)]
 [!code-vb[Classic KeyPressEventArgs Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source2.vb#2)]  
  
 Quando nel controllo, viene generato l'evento specificato, viene chiamato il metodo associato e l'applicazione può eseguire codice in risposta all'evento.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
    <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyPressEventArgs (char keyChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char keyChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyPressEventArgs(char keyChar);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keyChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="keyChar">Il carattere ASCII corrispondente al tasto premuto dall'utente.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.KeyPressEventArgs" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=nameWithType> proprietà da ottenere lo stato corrente dei tasti di modifica.  
  
   
  
## Examples  
 L'esempio seguente mostra una finestra di messaggio che mostra lo stato corrente del tasto MAIUSC.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se l'evento <see cref="E:System.Windows.Forms.Control.KeyPress" /> è stato gestito.</summary>
        <value>
          <see langword="true" /> se l'evento è gestito; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'evento non viene gestita, verrà inviato al sistema operativo per l'elaborazione predefinita. Impostare <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> a `true` per annullare il `KeyPress` evento.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Windows.Forms.TextBox> controllo. Il `keypressed` metodo utilizza il <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> proprietà per verificare se è premuto il tasto INVIO. Se viene premuto il tasto INVIO, il <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> è impostata su `true`, che indica l'evento viene gestito.  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyChar">
      <MemberSignature Language="C#" Value="public char KeyChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char KeyChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.KeyChar" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char KeyChar { char get(); void set(char value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il carattere corrispondente al tasto premuto.</summary>
        <value>Carattere ASCII che viene composto. Quando l'utente preme MAIUSC + K, ad esempio, viene restituita la lettera K in maiuscolo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> proprietà per campionare le sequenze di tasti in fase di esecuzione e modificarle in circostanze speciali in fase di esecuzione. Ad esempio, è possibile utilizzare <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> per disabilitare le sequenze di tasti non numerico quando l'utente immette un codice postale, modificare alfabetiche tutti in lettere maiuscole in un campo di immissione di dati o monitorare la tastiera o altri dispositivi di input per determinate combinazioni di tasti.  
  
 È possibile ottenere o impostare le seguenti chiavi:  
  
-   a-z, A-Z.  
  
-   CTRL.  
  
-   Segni di punteggiatura.  
  
-   Numero di chiavi, sia nella parte superiore della tastiera e del tastierino numerico.  
  
-   IMMETTERE.  
  
 Non è possibile ottenere o impostare le seguenti chiavi:  
  
-   Tasto TAB.  
  
-   INSERT e DELETE.  
  
-   HOME.  
  
-   FINE.  
  
-   PGSU e PGGIÙ.  
  
-   F1-F2.  
  
-   ALT.  
  
-   Tasti di direzione  
  
> [!NOTE]
>  Per informazioni su come rilevare eventuali chiavi non carattere indicate in precedenza, vedere la <xref:System.Windows.Forms.KeyEventArgs> classe.  
  
-  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Windows.Forms.TextBox> controllo. Il `keypressed` metodo utilizza il <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> proprietà per verificare se è premuto il tasto INVIO. Se viene premuto il tasto INVIO, il <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> è impostata su `true`, che indica l'evento viene gestito.  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
      </Docs>
    </Member>
  </Members>
</Type>