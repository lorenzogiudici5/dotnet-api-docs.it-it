<Type Name="Binding" FullName="System.Windows.Forms.Binding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3e4984d03b4d295a484905b4224f78cefcf41340" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36348811" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Binding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Binding" />
  <TypeSignature Language="VB.NET" Value="Public Class Binding" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binding" />
  <TypeSignature Language="F#" Value="type Binding = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ListBindingConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the simple binding between the property value of an object and the property value of a control.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare la <xref:System.Windows.Forms.Binding> classe per creare e gestire un'associazione semplice tra la proprietà di un controllo e la proprietà di un oggetto o la proprietà dell'oggetto corrente in un elenco di oggetti.  
  
 Un esempio del primo caso, è possibile associare il <xref:System.Windows.Forms.Control.Text%2A> proprietà di un <xref:System.Windows.Forms.TextBox> il controllo al `FirstName` proprietà di un `Customer` oggetto. Ad esempio del secondo caso, è possibile associare il <xref:System.Windows.Forms.Control.Text%2A> proprietà di un <xref:System.Windows.Forms.TextBox> il controllo al `FirstName` proprietà di un <xref:System.Data.DataTable> contenente i clienti.  
  
 Il <xref:System.Windows.Forms.Binding> classe consente inoltre di formattare i valori per la visualizzazione mediante il <xref:System.Windows.Forms.Binding.Format> evento e recuperare valori formattati tramite il <xref:System.Windows.Forms.Binding.Parse> evento.  
  
 Durante la costruzione di un <xref:System.Windows.Forms.Binding> dell'istanza con <xref:System.Windows.Forms.Binding.%23ctor%2A> costruttore, è necessario specificare tre elementi:  
  
-   Il nome della proprietà del controllo da associare.  
  
-   Origine dati.  
  
-   Il percorso di navigazione che viene risolta in un elenco o una proprietà dell'origine dati. Il percorso di navigazione viene inoltre utilizzato per creare l'oggetto <xref:System.Windows.Forms.Binding.BindingMemberInfo%2A> proprietà.  
  
 In primo luogo, è necessario specificare il nome della proprietà del controllo che si desidera associare i dati. Ad esempio, per visualizzare i dati in un <xref:System.Windows.Forms.TextBox> controllare, specificare il <xref:System.Windows.Forms.TextBoxBase.Text%2A> proprietà.  
  
 In secondo luogo, è possibile specificare un'istanza di una delle classi nella tabella seguente come origine dati.  
  
  In terzo luogo, è necessario specificare il percorso di navigazione, che può essere una stringa vuota (""), nome di una singola proprietà o una gerarchia delimitata da virgole dei nomi. Se si imposta il percorso di navigazione su una stringa vuota, il <xref:System.Object.ToString%2A> metodo verrà chiamato sull'oggetto origine dati sottostante.  
  
 Se l'origine dati è un <xref:System.Data.DataTable>, che può contenere più <xref:System.Data.DataColumn> oggetti, il percorso di navigazione deve essere utilizzato per risolvere una colonna specifica.  
  
> [!NOTE]
>  Quando l'origine dati è un <xref:System.Data.DataSet>, <xref:System.Data.DataViewManager>, o <xref:System.Data.DataTable>, si esegue l'associazione a un <xref:System.Data.DataView>. Di conseguenza, le righe associate sono effettivamente <xref:System.Data.DataRowView> oggetti.  
  
 Quando l'origine dati è impostata su un oggetto che contiene più, è necessario un percorso di navigazione delimitato <xref:System.Data.DataTable> oggetti (ad esempio un <xref:System.Data.DataSet> o <xref:System.Data.DataViewManager>). È inoltre possibile utilizzare un percorso di navigazione separato dal punto quando si associa a un oggetto le cui proprietà restituiscono riferimenti ad altri oggetti (ad esempio una classe con le proprietà che restituiscono altri oggetti di classe). Ad esempio, tutti i percorsi di navigazione seguenti descrivono i campi di dati validi:  
  
-   "Size. Height"  
  
-   "Suppliers.CompanyName"  
  
-   "Regions.regionsToCustomers.CustomerFirstName"  
  
-   "Regions.regionsToCustomers.customersToOrders.ordersToDetails.Quantity"  
  
 Ogni membro del percorso può restituire una proprietà che si risolve in un singolo valore (ad esempio, un numero intero) o un elenco di valori (ad esempio, una matrice di stringhe). Anche se ogni membro nel percorso può essere un elenco o una proprietà, il membro finale deve essere risolto in una proprietà. Ciascun membro viene generato sul membro precedente: "Size. Height" viene risolto il <xref:System.Drawing.Size.Height%2A> proprietà per l'oggetto corrente <xref:System.Drawing.Size>; "Regions.regionsToCustomers.CustomerFirstName" viene risolto nel nome per il cliente corrente, in cui il cliente è uno dei clienti per l'area corrente.  
  
 Un <xref:System.Data.DataRelation> restituisce un elenco di valori tramite il collegamento a uno <xref:System.Data.DataTable> a un secondo <xref:System.Data.DataTable> in un <xref:System.Data.DataSet>. Se il <xref:System.Data.DataSet> contiene <xref:System.Data.DataRelation> oggetti, è possibile specificare il membro dati come una <xref:System.Data.DataTable.TableName%2A> seguito da un <xref:System.Data.DataRelation.RelationName%2A>, quindi un <xref:System.Data.DataColumn.ColumnName%2A>. Ad esempio, se il <xref:System.Data.DataTable> denominato "Suppliers" contiene un <xref:System.Data.DataRelation> denominato "suppliers2products", il membro dati potrebbe essere "Suppliers2products".  
  
 L'origine dati può essere costituito da un set di classi correlate. Si supponga, ad esempio, un set di classi che cataloga solare sistemi. La classe denominata `System` contiene una proprietà denominata `Stars` che restituisce una raccolta di `Star` oggetti. Ogni `Star` oggetto ha `Name` e `Mass` delle proprietà, nonché una `Planets` proprietà che restituisce una raccolta di `Planet` oggetti. In questo sistema, ogni pianeta include anche `Mass` e `Name` proprietà. Ogni `Planet` ulteriormente l'oggetto ha un `Moons` proprietà che restituisce una raccolta di `Moon` oggetti, ognuno dei quali ha inoltre `Name` e `Mass` proprietà. Se si specifica un `System` un oggetto origine dati, è possibile specificare quanto segue come il membro dei dati:  
  
-   "Stars.Name"  
  
-   "Stars.Mass"  
  
-   "Stars.Planets.Name"  
  
-   "Stars.Planets.Mass"  
  
-   "Stars.Planets.Moons.Name"  
  
-   "Stars.Planets.Moons.Mass"  
  
 I controlli che possono essere con associazione semplice includono una raccolta di <xref:System.Windows.Forms.Binding> gli oggetti in un <xref:System.Windows.Forms.ControlBindingsCollection>, che è possibile accedere tramite il controllo <xref:System.Windows.Forms.Control.DataBindings%2A> proprietà. Si aggiunge un <xref:System.Windows.Forms.Binding> alla raccolta chiamando il <xref:System.Windows.Forms.ControlBindingsCollection.Add%2A> metodo, in tal modo associazione di una proprietà del controllo a una proprietà di un oggetto (o a una proprietà dell'oggetto corrente in un elenco).  
  
 È possibile un'associazione semplice per qualsiasi oggetto che deriva dal <xref:System.Windows.Forms.Control?displayProperty=nameWithType> classe, ad esempio, i controlli di Windows seguenti:  
  
-   <xref:System.Windows.Forms.Button>  
  
-   <xref:System.Windows.Forms.CheckBox>  
  
-   <xref:System.Windows.Forms.CheckedListBox>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.DomainUpDown>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.LinkLabel>  
  
-   <xref:System.Windows.Forms.ListBox>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.NumericUpDown>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.RadioButton>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.ScrollBar>  
  
-   <xref:System.Windows.Forms.StatusBar>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
> [!NOTE]
>  Solo il <xref:System.Windows.Forms.ListControl.SelectedValue%2A> proprietà del <xref:System.Windows.Forms.ComboBox>, <xref:System.Windows.Forms.CheckedListBox>, e <xref:System.Windows.Forms.ListBox> controllo è associato a semplice.  
  
 Il <xref:System.Windows.Forms.BindingManagerBase> classe è una classe astratta che gestisce tutti i <xref:System.Windows.Forms.Binding> oggetti per una determinata origine dati e dei membri dati. Le classi che derivano da <xref:System.Windows.Forms.BindingManagerBase> sono le <xref:System.Windows.Forms.CurrencyManager> e il <xref:System.Windows.Forms.PropertyManager> classi. Come un <xref:System.Windows.Forms.Binding> gestito dipende dal fatto che il <xref:System.Windows.Forms.Binding> è un'associazione di elenco o un'associazione di proprietà. Ad esempio, se si tratta di un'associazione di elenco, è possibile utilizzare il <xref:System.Windows.Forms.BindingManagerBase> per specificare un <xref:System.Windows.Forms.BindingManagerBase.Position%2A> nell'elenco; il <xref:System.Windows.Forms.BindingManagerBase.Position%2A>, pertanto, determina quale elemento (tra tutti gli elementi nell'elenco) è effettivamente associato a un controllo. Per restituire l'appropriato <xref:System.Windows.Forms.BindingManagerBase>, utilizzare il <xref:System.Windows.Forms.BindingContext>.  
  
 Per aggiungere una nuova riga a un set di controlli associati alla stessa <xref:System.Windows.Forms.Binding.DataSource%2A>, usare il <xref:System.Windows.Forms.BindingManagerBase.AddNew%2A> metodo la <xref:System.Windows.Forms.BindingManagerBase> classe. Usare la <xref:System.Windows.Forms.BindingContext.Item%2A> proprietà del <xref:System.Windows.Forms.BindingContext> classe per restituire l'oggetto appropriato <xref:System.Windows.Forms.CurrencyManager>. Per annullare l'aggiunta della nuova riga, utilizzare il <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> metodo.  
  
   
  
## Examples  
 Esempio di codice seguente crea un Windows Form con diversi controlli che illustrano l'associazione dati semplice. Nell'esempio viene creata una <xref:System.Data.DataSet> con due tabelle denominate `Customers` e `Orders`e un <xref:System.Data.DataRelation> denominato `custToOrders`. Quattro controlli (un <xref:System.Windows.Forms.DateTimePicker> e tre <xref:System.Windows.Forms.TextBox> controlli) sono dati associati a colonne nelle tabelle. Per ogni controllo, l'esempio crea e aggiunge un <xref:System.Windows.Forms.Binding> per il controllo tramite la <xref:System.Windows.Forms.Control.DataBindings%2A> proprietà. Nell'esempio viene restituito un <xref:System.Windows.Forms.BindingManagerBase> per ogni tabella tramite il modulo <xref:System.Windows.Forms.BindingContext>. Quattro <xref:System.Windows.Forms.Button> controlla l'incremento o decremento il <xref:System.Windows.Forms.BindingManagerBase.Position%2A> proprietà di <xref:System.Windows.Forms.BindingManagerBase> oggetti.  
  
 [!code-cpp[Classic Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.BindingContext" />
    <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
    <altmember cref="T:System.Windows.Forms.ComboBox" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Binding" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the control property to bind.</param>
        <param name="dataSource">An <see cref="T:System.Object" /> that represents the data source.</param>
        <param name="dataMember">The property or list to bind to.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Binding" /> class that simple-binds the indicated control property to the specified data member of the data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile specificare un'istanza di una qualsiasi delle seguenti classi per l'origine dati:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Qualsiasi classe che implementa il <xref:System.Collections.IList> interfaccia  
  
-   Qualsiasi classe  
  
 Vedere la <xref:System.Windows.Forms.Binding> classe per ulteriori informazioni sulla creazione di `dataMember` stringa.  
  
 Quando si crea un'associazione a una proprietà del controllo, il nuovo <xref:System.Windows.Forms.Binding> esamina gli eventi esposti dal controllo associato e la collega due particolari eventi:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Un evento denominato *PropertyName* `Changed` (ad esempio, <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 Se si tenta di associare a una proprietà che non esiste, un' <xref:System.ArgumentException> verrà generata quando il <xref:System.Windows.Forms.Binding> viene aggiunto al controllo <xref:System.Windows.Forms.Control.DataBindings%2A?displayProperty=nameWithType> insieme.  
  
   
  
## Examples  
 Associazioni di esempio di codice seguente una <xref:System.Windows.Forms.TextBox> controllo a una colonna di tabella in un <xref:System.Data.DataSet> denominato `myDataSet`. L'esempio presenta i requisiti che sono state dichiarate `myDataSet` nella sezione delle dichiarazioni del modulo.  
  
 [!code-cpp[Classic Binding.Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Binding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <paramref name="propertyName" /> is neither a valid property of a control nor an empty string ("").</exception>
        <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control.</exception>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
        <altmember cref="T:System.Windows.Forms.CurrencyManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String, formattingEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the control property to bind.</param>
        <param name="dataSource">An <see cref="T:System.Object" /> that represents the data source.</param>
        <param name="dataMember">The property or list to bind to.</param>
        <param name="formattingEnabled">
          <see langword="true" /> to format the displayed data; otherwise, <see langword="false" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Binding" /> class that binds the indicated control property to the specified data member of the data source, and optionally enables formatting to be applied.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control.  -or-  The property given is a read-only property.</exception>
        <exception cref="T:System.Exception">Formatting is disabled and <paramref name="propertyName" /> is neither a valid property of a control nor an empty string ("").</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the control property to bind.</param>
        <param name="dataSource">An <see cref="T:System.Object" /> representing the data source.</param>
        <param name="dataMember">The property or list to bind to.</param>
        <param name="formattingEnabled">
          <see langword="true" /> to format the displayed data; otherwise, <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">One of the <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> values.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Binding" /> class that binds the specified control property to the specified data member of the specified data source. Optionally enables formatting and propagates values to the data source based on the specified update setting.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile specificare un'istanza di una qualsiasi delle seguenti classi per l'origine dati:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Qualsiasi classe che implementa il <xref:System.Collections.IList> interfaccia  
  
-   Qualsiasi classe  
  
 Vedere la <xref:System.Windows.Forms.Binding> classe per ulteriori informazioni sulla creazione di `dataMember` stringa.  
  
 Quando si crea un'associazione a una proprietà del controllo, il nuovo <xref:System.Windows.Forms.Binding> esamina gli eventi esposti dal controllo associato e la collega due particolari eventi:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>.  
  
-   Un evento denominato *PropertyName* `Changed` (ad esempio, <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control.  -or-  The data source or data member or control property specified are associated with another binding in the collection.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the control property to bind.</param>
        <param name="dataSource">An <see cref="T:System.Object" /> representing the data source.</param>
        <param name="dataMember">The property or list to bind to.</param>
        <param name="formattingEnabled">
          <see langword="true" /> to format the displayed data; otherwise, <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">One of the <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> values.</param>
        <param name="nullValue">The <see cref="T:System.Object" /> to be applied to the bound control property if the data source value is <see cref="T:System.DBNull" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Binding" /> class that binds the indicated control property to the specified data member of the specified data source. Optionally enables formatting, propagates values to the data source based on the specified update setting, and sets the property to the specified value when a <see cref="T:System.DBNull" /> is returned from the data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile specificare un'istanza di una qualsiasi delle seguenti classi per l'origine dati:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Qualsiasi classe che implementa il <xref:System.Collections.IList> interfaccia  
  
-   Qualsiasi classe  
  
 Vedere la <xref:System.Windows.Forms.Binding> classe per ulteriori informazioni sulla creazione di `dataMember` stringa.  
  
 Quando si crea un'associazione a una proprietà del controllo, il nuovo <xref:System.Windows.Forms.Binding> esamina gli eventi esposti dal controllo associato e la collega due particolari eventi:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Un evento denominato *PropertyName* `Changed` (ad esempio, <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control.  -or-  The data source or data member or control property specified are associated with another binding in the collection.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj * string -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, formatString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the control property to bind.</param>
        <param name="dataSource">An <see cref="T:System.Object" /> representing the data source.</param>
        <param name="dataMember">The property or list to bind to.</param>
        <param name="formattingEnabled">
          <see langword="true" /> to format the displayed data; otherwise, <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">One of the <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> values.</param>
        <param name="nullValue">The <see cref="T:System.Object" /> to be applied to the bound control property if the data source value is <see cref="T:System.DBNull" />.</param>
        <param name="formatString">One or more format specifier characters that indicate how a value is to be displayed.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Binding" /> class that binds the specified control property to the specified data member of the specified data source. Optionally enables formatting with the specified format string; propagates values to the data source based on the specified update setting; and sets the property to the specified value when a <see cref="T:System.DBNull" /> is returned from the data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile specificare un'istanza di una qualsiasi delle seguenti classi per l'origine dati:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Qualsiasi classe che implementa il <xref:System.Collections.IList> interfaccia  
  
-   Qualsiasi classe  
  
 Vedere la <xref:System.Windows.Forms.Binding> classe per ulteriori informazioni sulla creazione di `dataMember` stringa.  
  
 Quando si crea un'associazione a una proprietà del controllo, il nuovo <xref:System.Windows.Forms.Binding> esamina gli eventi esposti dal controllo associato e la collega due particolari eventi:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Un evento denominato *PropertyName* `Changed` (ad esempio, <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control.  -or-  The data source or data member or control property specified are associated with another binding in the collection.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, IFormatProvider formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, class System.IFormatProvider formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString, IFormatProvider ^ formatInfo);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj * string * IFormatProvider -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, formatString, formatInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the control property to bind.</param>
        <param name="dataSource">An <see cref="T:System.Object" /> representing the data source.</param>
        <param name="dataMember">The property or list to bind to.</param>
        <param name="formattingEnabled">
          <see langword="true" /> to format the displayed data; otherwise, <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">One of the <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> values.</param>
        <param name="nullValue">The <see cref="T:System.Object" /> to be applied to the bound control property if the data source value is <see cref="T:System.DBNull" />.</param>
        <param name="formatString">One or more format specifier characters that indicate how a value is to be displayed.</param>
        <param name="formatInfo">An implementation of <see cref="T:System.IFormatProvider" /> to override default formatting behavior.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.Binding" /> class with the specified control property to the specified data member of the specified data source. Optionally enables formatting with the specified format string; propagates values to the data source based on the specified update setting; enables formatting with the specified format string; sets the property to the specified value when a <see cref="T:System.DBNull" /> is returned from the data source; and sets the specified format provider.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile specificare un'istanza di una qualsiasi delle seguenti classi per l'origine dati:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Qualsiasi classe che implementa il <xref:System.Collections.IList> interfaccia  
  
-   Qualsiasi classe  
  
 Vedere la <xref:System.Windows.Forms.Binding> classe per ulteriori informazioni sulla creazione di `dataMember` stringa.  
  
 Quando si crea un'associazione a una proprietà del controllo, il nuovo <xref:System.Windows.Forms.Binding> esamina gli eventi esposti dal controllo associato e la collega due particolari eventi:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Un evento denominato *PropertyName* `Changed` (ad esempio, <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The property given by <paramref name="propertyName" /> does not exist on the control.  -or-  The data source or data member or control property specified are associated with another binding in the collection.</exception>
      </Docs>
    </Member>
    <Member MemberName="BindableComponent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IBindableComponent BindableComponent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IBindableComponent BindableComponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindableComponent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindableComponent As IBindableComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IBindableComponent ^ BindableComponent { System::Windows::Forms::IBindableComponent ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindableComponent : System.Windows.Forms.IBindableComponent" Usage="System.Windows.Forms.Binding.BindableComponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IBindableComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the control the <see cref="T:System.Windows.Forms.Binding" /> is associated with.</summary>
        <value>Il <see cref="T:System.Windows.Forms.IBindableComponent" /> il <see cref="T:System.Windows.Forms.Binding" /> è associato.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingCompleteEventHandler BindingComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.BindingCompleteEventHandler BindingComplete" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.BindingComplete" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BindingComplete As BindingCompleteEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::BindingCompleteEventHandler ^ BindingComplete;" />
      <MemberSignature Language="F#" Value="member this.BindingComplete : System.Windows.Forms.BindingCompleteEventHandler " Usage="member this.BindingComplete : System.Windows.Forms.BindingCompleteEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="P:System.Windows.Forms.Binding.FormattingEnabled" /> property is set to <see langword="true" /> and a binding operation is complete, such as when data is pushed from the control to the data source or vice versa</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene generato in presenza delle seguenti condizioni quando <xref:System.Windows.Forms.Binding.FormattingEnabled%2A> è `true`:  
  
-   I dati dall'origine dati vengono inseriti nella proprietà del controllo.  
  
-   I dati dalla proprietà del controllo, viene inseriti l'origine dati.  
  
 Questo evento viene generato al completamento di queste operazioni, indipendente dallo stato di completamento. Se, ad esempio, un'operazione di associazione associa un valore null in una <xref:System.Windows.Forms.DateTimePicker.Value%2A> proprietà, viene generata un'eccezione, ma la <xref:System.Windows.Forms.Binding.BindingComplete> evento si verifica ancora. Il gestore dell'evento può intraprendere l'azione appropriata, in base all'esito corretto, errore o eccezioni nel processo di associazione, esaminando la <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> proprietà del <xref:System.Windows.Forms.BindingCompleteEventArgs> parametro.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come gestire il <xref:System.Windows.Forms.Binding.BindingComplete> evento.  
  
 [!code-cpp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.FormattingEnabled" />
        <altmember cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BindingManagerBase">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingManagerBase BindingManagerBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingManagerBase BindingManagerBase" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingManagerBase As BindingManagerBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingManagerBase ^ BindingManagerBase { System::Windows::Forms::BindingManagerBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingManagerBase : System.Windows.Forms.BindingManagerBase" Usage="System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingManagerBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Windows.Forms.BindingManagerBase" /> for this <see cref="T:System.Windows.Forms.Binding" />.</summary>
        <value>Il <see cref="T:System.Windows.Forms.BindingManagerBase" /> che gestisce questa <see cref="T:System.Windows.Forms.Binding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Windows.Forms.BindingManagerBase> per scorrere un elenco associato a dati aumentando o diminuendo il <xref:System.Windows.Forms.BindingManagerBase.Position%2A> proprietà. Il <xref:System.Windows.Forms.BindingManagerBase> classe è astratta. Il <xref:System.Windows.Forms.CurrencyManager> (classe), che gestisce gli elenchi associati a dati, eredita la <xref:System.Windows.Forms.BindingManagerBase> classe.  
  
   
  
## Examples  
 Nel codice seguente vengono ottenuti i <xref:System.Windows.Forms.BindingManagerBase> di ogni <xref:System.Windows.Forms.Binding> sul form e vengono visualizzati il <xref:System.Windows.Forms.BindingManagerBase.Position%2A> proprietà per ogni <xref:System.Windows.Forms.BindingManagerBase>.  
  
 [!code-cpp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingMemberInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingMemberInfo BindingMemberInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BindingMemberInfo BindingMemberInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingMemberInfo As BindingMemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingMemberInfo BindingMemberInfo { System::Windows::Forms::BindingMemberInfo get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingMemberInfo : System.Windows.Forms.BindingMemberInfo" Usage="System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingMemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that contains information about this binding based on the <paramref name="dataMember" /> parameter in the <see cref="Overload:System.Windows.Forms.Binding.#ctor" /> constructor.</summary>
        <value>Un <see cref="T:System.Windows.Forms.BindingMemberInfo" /> che contiene informazioni su questo <see cref="T:System.Windows.Forms.Binding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.BindingMemberInfo> viene creato dal `dataMember` stringa passata per la <xref:System.Windows.Forms.Binding.%23ctor%2A> costruttore.  
  
   
  
## Examples  
 Nel codice seguente vengono ottenuti i <xref:System.Windows.Forms.BindingMemberInfo> di ogni <xref:System.Windows.Forms.Binding> in un form e vengono visualizzati il <xref:System.Windows.Forms.BindingMemberInfo.BindingPath%2A>, <xref:System.Windows.Forms.BindingMemberInfo.BindingField%2A>, e <xref:System.Windows.Forms.BindingMemberInfo.BindingMember%2A> i valori delle proprietà per tale <xref:System.Windows.Forms.Binding>.  
  
 [!code-cpp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Control { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Control : System.Windows.Forms.Control" Usage="System.Windows.Forms.Binding.Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the control that the binding belongs to.</summary>
        <value>Il <see cref="T:System.Windows.Forms.Control" /> a cui appartiene l'associazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nel codice seguente vengono ottenuti i <xref:System.Windows.Forms.BindingManagerBase> per un'origine dati specifica e vengono visualizzate le informazioni su ogni <xref:System.Windows.Forms.Binding.Control%2A> proprietà a cui è associato all'origine dati. Nell'esempio viene utilizzata la <xref:System.Windows.Forms.BindingManagerBase.Bindings%2A> proprietà del <xref:System.Windows.Forms.BindingManagerBase> per ottenere tutti i controlli.  
  
 [!code-cpp[Classic Binding.Control Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Control Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Control Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Control Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Control Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Control Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlUpdateMode ControlUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ControlUpdateMode ControlUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlUpdateMode As ControlUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ControlUpdateMode ControlUpdateMode { System::Windows::Forms::ControlUpdateMode get(); void set(System::Windows::Forms::ControlUpdateMode value); };" />
      <MemberSignature Language="F#" Value="member this.ControlUpdateMode : System.Windows.Forms.ControlUpdateMode with get, set" Usage="System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets when changes to the data source are propagated to the bound control property.</summary>
        <value>Uno dei valori di <see cref="T:System.Windows.Forms.ControlUpdateMode" />. Il valore predefinito è <see cref="F:System.Windows.Forms.ControlUpdateMode.OnPropertyChanged" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSource { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSource : obj" Usage="System.Windows.Forms.Binding.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data source for this binding.</summary>
        <value>Oggetto <see cref="T:System.Object" /> che rappresenta l'origine dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Origini dati possibili includono:  
  
-   Elemento <xref:System.Data.DataSet>  
  
-   Elemento <xref:System.Data.DataTable>  
  
-   Elemento <xref:System.Data.DataView>  
  
-   Elemento <xref:System.Data.DataViewManager>  
  
-   Qualsiasi oggetto che implementa il <xref:System.Collections.IList> interfaccia  
  
-   Qualsiasi oggetto  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Windows.Forms.Binding.DataSource%2A> proprietà per restituire un <xref:System.Data.DataSet>.  
  
 [!code-cpp[Classic Binding.DataSource Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.DataSource Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.DataSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceNullValue">
      <MemberSignature Language="C#" Value="public object DataSourceNullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSourceNullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceNullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSourceNullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceNullValue : obj with get, set" Usage="System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value to be stored in the data source if the control value is <see langword="null" /> or empty.</summary>
        <value>Il <see cref="T:System.Object" /> da archiviare nell'origine dati quando la proprietà del controllo è vuota o <see langword="null" />. Il valore predefinito è <see cref="T:System.DBNull" /> per i tipi di valore e <see langword="null" /> per tipi non di valore.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare il <xref:System.Windows.Forms.Binding.NullValue%2A> proprietà per specificare il valore visualizzato in un controllo associato quando l'origine dati contiene <xref:System.DBNull>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.NullValue" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceUpdateMode As DataSourceUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataSourceUpdateMode DataSourceUpdateMode { System::Windows::Forms::DataSourceUpdateMode get(); void set(System::Windows::Forms::DataSourceUpdateMode value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceUpdateMode : System.Windows.Forms.DataSourceUpdateMode with get, set" Usage="System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataSourceUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates when changes to the bound control property are propagated to the data source.</summary>
        <value>Valore che indica quando vengono propagate le modifiche. Il valore predefinito è <see cref="F:System.Windows.Forms.DataSourceUpdateMode.OnValidation" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si noti che anche se questa proprietà è impostata su <xref:System.Windows.Forms.DataSourceUpdateMode.Never>, l'associazione verrà aggiornata almeno una volta, quando viene innanzitutto stabilito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Format;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Format" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Format" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Format As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Format;" />
      <MemberSignature Language="F#" Value="member this.Format : System.Windows.Forms.ConvertEventHandler " Usage="member this.Format : System.Windows.Forms.ConvertEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the property of a control is bound to a data value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.Binding.Format> evento viene generato quando i dati vengono inseriti dall'origine dati nel controllo. È possibile gestire il <xref:System.Windows.Forms.Binding.Format> evento per convertire i dati non formattati dall'origine dei dati in formato dati per la visualizzazione. Quando vengono estratti i dati dal controllo nell'origine dati, il <xref:System.Windows.Forms.Binding.Parse> evento viene generato per annullare la formattazione del valore visualizzato, il <xref:System.Windows.Forms.Binding.Format> evento si verifica per riformattare i dati da visualizzare. In questo modo si garantisce che il controllo associato visualizza dati formattati correttamente a prescindere se l'utente immette formattati o dati nel controllo.  
  
 Il <xref:System.Windows.Forms.Binding.Format> e <xref:System.Windows.Forms.Binding.Parse> eventi consentono di creare formati personalizzati per la visualizzazione dei dati. Se, ad esempio, i dati in una tabella sono di tipo <xref:System.Decimal>, è possibile visualizzare i dati nel formato della valuta locale impostando il <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> proprietà del <xref:System.Windows.Forms.ConvertEventArgs> sul valore formattato nel <xref:System.Windows.Forms.Binding.Format> evento. È quindi necessario annullare la formattazione del valore visualizzato nel <xref:System.Windows.Forms.Binding.Parse> evento.  
  
 Il <xref:System.Windows.Forms.Binding.Format> evento si verifica ogni volta che il <xref:System.Windows.Forms.BindingManagerBase.Current%2A> valore il <xref:System.Windows.Forms.BindingManagerBase> modifiche, che include:  
  
-   La prima volta che la proprietà associata.  
  
-   Ogni volta che il <xref:System.Windows.Forms.BindingManagerBase.Position%2A> le modifiche.  
  
-   Ogni volta che l'elenco associato a dati è ordinato o vengono filtrato, che viene eseguita quando un <xref:System.Data.DataView> fornisce l'elenco.  
  
 Il <xref:System.Windows.Forms.Binding.Format> evento si verifica anche dopo il <xref:System.Windows.Forms.Binding.Parse> evento. Ad esempio, quando un controllo perde lo stato attivo, il relativo contenuto viene analizzato. Immediatamente dopo, quando nuovi dati viene inseriti nel controllo, il <xref:System.Windows.Forms.Binding.Format> evento viene generato, consentendo il contenuto da formattare.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Windows.Forms.Binding>, aggiunge un <xref:System.Windows.Forms.ConvertEventHandler> delegato a entrambi i <xref:System.Windows.Forms.Binding.Parse> e <xref:System.Windows.Forms.Binding.Format> eventi e aggiunge il <xref:System.Windows.Forms.Binding> per il <xref:System.Windows.Forms.BindingsCollection> di un <xref:System.Windows.Forms.TextBox> controllare tramite il <xref:System.Windows.Forms.Control.DataBindings%2A> proprietà. Il `DecimalToCurrencyString` delegato dell'evento, aggiungere il <xref:System.Windows.Forms.Binding.Format> evento, formatta il valore associato (un <xref:System.Decimal> tipo) come valuta utilizzando il <xref:System.Decimal.ToString%2A> metodo. Il `CurrencyStringToDecimal` delegato dell'evento, aggiungere il <xref:System.Windows.Forms.Binding.Parse> evento, converte il valore visualizzato dal controllo torna al <xref:System.Decimal> tipo.  
  
 Questo esempio si presuppone la presenza di un <xref:System.Data.DataSet> denominato `ds`.  
  
 [!code-cpp[Classic Binding.Format Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Format Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Format Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Format Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Format Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Format Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="FormatInfo">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatInfo As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatInfo { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatInfo : IFormatProvider with get, set" Usage="System.Windows.Forms.Binding.FormatInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.IFormatProvider" /> that provides custom formatting behavior.</summary>
        <value>Il <see cref="T:System.IFormatProvider" /> implementazione che fornisce il comportamento di formattazione personalizzato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostazione di questa proprietà sostituiranno il comportamento predefinito della formattazione, che usa il <xref:System.Windows.Forms.Application.CurrentCulture%2A?displayProperty=nameWithType> impostazione della proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatString">
      <MemberSignature Language="C#" Value="public string FormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FormatString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatString : string with get, set" Usage="System.Windows.Forms.Binding.FormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the format specifier characters that indicate how a value is to be displayed.</summary>
        <value>Stringa di caratteri identificatori di formato che indicano il modo in cui deve essere visualizzato un valore.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di formato utilizzata deve seguire le specifiche di formato standard di .NET Framework. Per altre informazioni, vedere [formattazione dei tipi in .NET Framework](~/docs/standard/base-types/formatting-types.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormattingEnabled">
      <MemberSignature Language="C#" Value="public bool FormattingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FormattingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property FormattingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FormattingEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FormattingEnabled : bool with get, set" Usage="System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether type conversion and formatting is applied to the control property data.</summary>
        <value>
          <see langword="true" /> Se la conversione di tipo e la formattazione dei dati della proprietà controllo è abilitato; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostando questa proprietà su `true` Abilita il comportamento di gestione degli errori e fa sì che anche il <xref:System.Windows.Forms.Binding.BindingComplete> evento da generare. Il gestore dell'evento può intraprendere l'azione appropriata, in base all'esito corretto, errore o eccezioni nel processo di associazione, esaminando la <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> proprietà del <xref:System.Windows.Forms.BindingCompleteEventArgs> parametro.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.BindingComplete" />
        <altmember cref="T:System.Windows.Forms.BindingCompleteEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="IsBinding">
      <MemberSignature Language="C#" Value="public bool IsBinding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBinding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.IsBinding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBinding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBinding { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBinding : bool" Usage="System.Windows.Forms.Binding.IsBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the binding is active.</summary>
        <value>
          <see langword="true" /> Se l'associazione è attiva; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'associazione è attiva quando sono soddisfatte le condizioni seguenti:  
  
-   Tutte le relative proprietà vengono impostate.  
  
-   L'utente non ha chiamato <xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A> o <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> sul <xref:System.Windows.Forms.BindingManagerBase> che la <xref:System.Windows.Forms.Binding> a cui appartiene.  
  
-   Il controllo a cui il <xref:System.Windows.Forms.Binding> appartiene è stato creato.  
  
   
  
## Examples  
 Nell'esempio di codice viene visualizzato il <xref:System.Windows.Forms.Binding.PropertyName%2A> e <xref:System.Windows.Forms.Binding.IsBinding%2A> valore per ogni <xref:System.Windows.Forms.Binding> in un form.  
  
 [!code-cpp[Classic Binding.IsBinding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.IsBinding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.IsBinding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.IsBinding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullValue">
      <MemberSignature Language="C#" Value="public object NullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.NullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property NullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NullValue : obj with get, set" Usage="System.Windows.Forms.Binding.NullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Object" /> to be set as the control property when the data source contains a <see cref="T:System.DBNull" /> value.</summary>
        <value>Il <see cref="T:System.Object" /> da impostare come proprietà del controllo quando l'origine dati contiene un <see cref="T:System.DBNull" /> valore. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'origine dati deve contenere <xref:System.DBNull> per il <xref:System.Windows.Forms.Binding.NullValue%2A> proprietà per essere applicate correttamente. Se il tipo di origine dati è un tipo, ad esempio un numero intero o stringa il valore di <xref:System.Windows.Forms.Binding.NullValue%2A> proprietà verrà ignorata. Inoltre, il <xref:System.Windows.Forms.Binding.NullValue%2A> proprietà viene ignorata se è impostata su `null`.  
  
 Un valore null verrà aggiunto all'origine dati quando la proprietà del controllo è impostata per l'oggetto di <xref:System.Windows.Forms.Binding.NullValue%2A>. Se <xref:System.Windows.Forms.Binding.NullValue%2A> è impostata su un valore stringa, la distinzione tra maiuscole confronti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBindingComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingComplete (System.Windows.Forms.BindingCompleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingComplete(class System.Windows.Forms.BindingCompleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBindingComplete (e As BindingCompleteEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBindingComplete(System::Windows::Forms::BindingCompleteEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBindingComplete : System.Windows.Forms.BindingCompleteEventArgs -&gt; unit&#xA;override this.OnBindingComplete : System.Windows.Forms.BindingCompleteEventArgs -&gt; unit" Usage="binding.OnBindingComplete e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.BindingCompleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.BindingCompleteEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Binding.BindingComplete" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per altre informazioni, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Windows.Forms.Binding.OnBindingComplete%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFormat">
      <MemberSignature Language="C#" Value="protected virtual void OnFormat (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFormat(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFormat (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFormat(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberSignature Language="F#" Value="abstract member OnFormat : System.Windows.Forms.ConvertEventArgs -&gt; unit&#xA;override this.OnFormat : System.Windows.Forms.ConvertEventArgs -&gt; unit" Usage="binding.OnFormat cevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">A <see cref="T:System.Windows.Forms.ConvertEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Binding.Format" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per altre informazioni, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Windows.Forms.Binding.OnFormat%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="OnParse">
      <MemberSignature Language="C#" Value="protected virtual void OnParse (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParse(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParse (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParse(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberSignature Language="F#" Value="abstract member OnParse : System.Windows.Forms.ConvertEventArgs -&gt; unit&#xA;override this.OnParse : System.Windows.Forms.ConvertEventArgs -&gt; unit" Usage="binding.OnParse cevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">A <see cref="T:System.Windows.Forms.ConvertEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Binding.Parse" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per altre informazioni, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Windows.Forms.Binding.OnParse%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Parse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Parse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Parse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Parse As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Parse;" />
      <MemberSignature Language="F#" Value="member this.Parse : System.Windows.Forms.ConvertEventHandler " Usage="member this.Parse : System.Windows.Forms.ConvertEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of a data-bound control changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.Binding.Format> e <xref:System.Windows.Forms.Binding.Parse> eventi consentono di creare formati personalizzati per la visualizzazione dei dati. Se, ad esempio, i dati in una tabella sono di tipo <xref:System.Decimal>, è possibile visualizzare i dati nel formato della valuta locale impostando il <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> proprietà del <xref:System.Windows.Forms.ConvertEventArgs> sul valore formattato nel <xref:System.Windows.Forms.Binding.Format> evento. È quindi necessario annullare la formattazione del valore visualizzato nel <xref:System.Windows.Forms.Binding.Parse> evento.  
  
 Il <xref:System.Windows.Forms.Binding.Parse> evento si verifica nelle condizioni seguenti:  
  
-   Dopo il <xref:System.Windows.Forms.Control.Validated> evento del <xref:System.Windows.Forms.Control> si verifica.  
  
-   Quando il <xref:System.Windows.Forms.BindingManagerBase.EndCurrentEdit%2A> metodo il <xref:System.Windows.Forms.BindingManagerBase> viene chiamato.  
  
-   Quando il <xref:System.Windows.Forms.BindingManagerBase.Current%2A> del <xref:System.Windows.Forms.BindingManagerBase> modifiche (in altre parole, quando il <xref:System.Windows.Forms.BindingManagerBase.Position%2A> modifiche).  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Windows.Forms.Binding>, aggiunge un <xref:System.Windows.Forms.ConvertEventHandler> delegato a entrambi i <xref:System.Windows.Forms.Binding.Parse> e <xref:System.Windows.Forms.Binding.Format> eventi e aggiunge il <xref:System.Windows.Forms.Binding> per il <xref:System.Windows.Forms.BindingsCollection> di un <xref:System.Windows.Forms.TextBox> controllare tramite il <xref:System.Windows.Forms.Control.DataBindings%2A> proprietà. Il `DecimalToCurrencyString` delegato dell'evento, aggiungere il <xref:System.Windows.Forms.Binding.Format> evento, formatta il valore associato (un <xref:System.Decimal> tipo) come valuta utilizzando il <xref:System.Decimal.ToString%2A> metodo. Il `CurrencyStringToDecimal` delegato dell'evento, aggiungere il <xref:System.Windows.Forms.Binding.Parse> evento, converte il valore visualizzato dal controllo torna al <xref:System.Decimal> tipo.  
  
 [!code-cpp[Classic Binding.Parse Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Parse Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Parse Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Parse Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Parse Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Parse Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
      </Docs>
    </Member>
    <Member MemberName="PropertyName">
      <MemberSignature Language="C#" Value="public string PropertyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PropertyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.PropertyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PropertyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyName : string" Usage="System.Windows.Forms.Binding.PropertyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the control's data-bound property.</summary>
        <value>Nome di una proprietà del controllo a cui stabilire l'associazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Windows.Forms.Binding.PropertyName%2A> per specificare la proprietà del controllo che si desidera associare a un elenco in un'origine dati. In genere, è associata una proprietà di visualizzazione, ad esempio il <xref:System.Windows.Forms.Control.Text%2A> proprietà di un <xref:System.Windows.Forms.TextBox> controllo. Tuttavia, poiché è possibile associare qualsiasi proprietà di un controllo, è possibile creare a livello di codice i controlli in fase di esecuzione usando i dati di un database.  
  
   
  
## Examples  
 Nell'esempio di codice viene visualizzato il <xref:System.Windows.Forms.Binding.PropertyName%2A> valore di ogni <xref:System.Windows.Forms.Binding> per ogni controllo in un form.  
  
 [!code-cpp[Classic Binding.PropertyName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.PropertyName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.PropertyName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.PropertyName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadValue">
      <MemberSignature Language="C#" Value="public void ReadValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.ReadValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadValue();" />
      <MemberSignature Language="F#" Value="member this.ReadValue : unit -&gt; unit" Usage="binding.ReadValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the control property to the value read from the data source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public void WriteValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.WriteValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteValue();" />
      <MemberSignature Language="F#" Value="member this.WriteValue : unit -&gt; unit" Usage="binding.WriteValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the current value from the control property and writes it to the data source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>