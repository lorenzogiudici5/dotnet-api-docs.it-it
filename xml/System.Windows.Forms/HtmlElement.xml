<Type Name="HtmlElement" FullName="System.Windows.Forms.HtmlElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1a1e9c5c0c7f94106e9f08810772e05a8cdc6543" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37568838" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HtmlElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlElement extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlElement sealed" />
  <TypeSignature Language="F#" Value="type HtmlElement = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rappresenta un elemento HTML all'interno di una pagina Web.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement> rappresenta un qualsiasi tipo di elemento in un documento HTML, ad esempio `BODY`, `TABLE`, e `FORM`, tra gli altri. La classe espone le proprietà più comuni che è possibile trovare tutti gli elementi.  
  
 La maggior parte degli elementi possono avere *gli elementi figlio*: altri elementi HTML vengono posizionati di sotto di essi. Usare la <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> proprietà per verificare se un dato elemento ha elementi figlio e il <xref:System.Windows.Forms.HtmlElement.Children%2A> raccolta per scorrere gli. Il <xref:System.Windows.Forms.HtmlElement.Parent%2A> proprietà restituisce il <xref:System.Windows.Forms.HtmlElement> in cui è annidato l'elemento corrente.  
  
 È spesso necessario accedere per gli attributi, proprietà e metodi per l'elemento sottostante che non sono esposte direttamente dal <xref:System.Windows.Forms.HtmlElement>, come il `SRC` dell'attributo su un `IMG` elemento o il `Submit` metodo su un `FORM`. Il <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> e <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> metodi consentono di recuperare e modificare qualsiasi attributo o una proprietà su un elemento specifico, mentre <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> fornisce l'accesso a qualsiasi metodo non esposto nel gestito DOM Document Object Model (). Se l'applicazione dispone di autorizzazione per codice non gestito, è possibile accedere anche le proprietà non esposti e i metodi con il <xref:System.Windows.Forms.HtmlElement.DomElement%2A> attributo.  
  
 Usare il <xref:System.Windows.Forms.HtmlElement.TagName%2A> proprietà per verificare se un elemento è di un tipo specifico.  
  
 Qualsiasi documento HTML può essere modificato in fase di esecuzione. Possono creare nuovi <xref:System.Windows.Forms.HtmlElement> gli oggetti con il <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> metodo <xref:System.Windows.Forms.HtmlDocument>e aggiungerli a un altro elemento usando la <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> o <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> metodi. È anche possibile creare gli elementi come i tag HTML e assegnarli a un elemento esistente <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> proprietà.  
  
   
  
## Examples  
 Il codice seguente viene illustrato come esaminare un documento HTML arbitrario e derivare una stringa che descrive gli elementi HTML, con rientro di numeri di livello consente di indicare la profondità di annidamento degli elementi nel documento. Questo esempio si presuppone che nell'applicazione sia presente una <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.HtmlElement#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection All { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection All" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.All" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property All As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ All { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.All : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlElement.All" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Windows.Forms.HtmlElementCollection" /> di tutti gli elementi sottostanti all'elemento corrente.</summary>
        <value>Raccolta di tutti gli elementi che sono elementi figlio diretti o indiretti dell'elemento corrente. Se l'elemento corrente è un <c>tabella</c>, ad esempio <see cref="P:System.Windows.Forms.HtmlElement.All" /> restituirà ogni <c>TH</c>, <c>TR</c>, e <c>TD</c> elemento all'interno della tabella, Oltre a qualsiasi altro elemento, ad esempio <c>DIV</c> e <c>intervallo</c> elementi, contenuti nelle celle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per accedere solo gli elementi che hanno l'elemento corrente dell'elemento padre diretto, usare il <xref:System.Windows.Forms.HtmlElement.Children%2A> raccolta invece.  
  
 In questa raccolta di elementi non verranno necessariamente restituiti in ordine di origine.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.Children" />
      </Docs>
    </Member>
    <Member MemberName="AppendChild">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement AppendChild (System.Windows.Forms.HtmlElement newElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement AppendChild(class System.Windows.Forms.HtmlElement newElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendChild (newElement As HtmlElement) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ AppendChild(System::Windows::Forms::HtmlElement ^ newElement);" />
      <MemberSignature Language="F#" Value="member this.AppendChild : System.Windows.Forms.HtmlElement -&gt; System.Windows.Forms.HtmlElement" Usage="htmlElement.AppendChild newElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newElement" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="newElement">Oggetto <see cref="T:System.Windows.Forms.HtmlElement" /> da aggiungere in questa posizione dell'albero.</param>
        <summary>Aggiunge un elemento al sottoalbero di un altro elemento.</summary>
        <returns>Elemento dopo l'aggiunta all'albero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'oggetto modello DOM (Document HTML) consente di modificare il contenuto in fase di esecuzione di un file HTML in diversi modi. Usare <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> per aggiungere nuovi elementi a un documento esistente, o spostare un elemento nella pagina.  
  
 Se un elemento ha già un padre, aggiungendo un elemento a un altro elemento rimuoverà automaticamente quell'elemento dal relativo elemento padre precedente.  
  
 Tutte le aggiunte apportate a un documento in fase di esecuzione usando <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> non verrà mantenuto quando si chiama il <xref:System.Windows.Forms.WebBrowser.ShowSaveAsDialog%2A> metodo su di <xref:System.Windows.Forms.WebBrowser> controllo.  
  
   
  
## Examples  
 Esempio di codice seguente crea un nuovo collegamento ipertestuale usando il <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> (metodo) e lo aggiunge alla fine di una pagina mediante `AppendChild` nel `BODY` elemento. Nell'esempio si presuppone che l'applicazione contiene un <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlElement#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.CreateElement(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlElement.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nome dell'evento da gestire.</param>
        <param name="eventHandler">Codice gestito che gestisce l'evento.</param>
        <summary>Aggiunge un gestore eventi per un evento denominato nel DOM (Document Object Model) HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il gestiti Model (DOM) espone solo un numero limitato di eventi. La maggior parte degli eventi non esposti sono definita solo per tipi specifici di elementi. ad esempio la `submit` evento, questa operazione è valida solo su `FORM` elementi. Usare <xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A> per aggiungere un gestore eventi per questi eventi non esposti.  
  
 È necessario non collegare un evento al documento o a uno dei relativi oggetti fino a quando il documento ha terminato il caricamento. È necessario chiamare questo metodo prima la <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> eventi del <xref:System.Windows.Forms.WebBrowser> controllo.  
  
 Per altre informazioni sugli eventi non gestite disponibili, vedere [l'accesso a membri non esposti sul modello a oggetti documento HTML gestito](~/docs/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model.md) e le interfacce IHTMLElement: [IHTMLElement](http://go.microsoft.com/fwlink/?LinkId=104876), [IHTMLElement2](http://go.microsoft.com/fwlink/?LinkId=104877), [IHTMLElement3](http://go.microsoft.com/fwlink/?LinkId=104878), [IHTMLElement4](http://go.microsoft.com/fwlink/?LinkId=104879).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHaveChildren">
      <MemberSignature Language="C#" Value="public bool CanHaveChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHaveChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.CanHaveChildren" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanHaveChildren As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHaveChildren { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanHaveChildren : bool" Usage="System.Windows.Forms.HtmlElement.CanHaveChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se l'elemento corrente può avere elementi figli.</summary>
        <value>
          <see langword="true" /> se l'elemento può avere elementi figlio; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alcuni elementi, ad esempio `IMG` e `SCRIPT`, non può avere elementi figlio. Utilizzare questa proprietà prima di chiamare <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> o <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> su un elemento arbitrario.  
  
   
  
## Examples  
 Il codice seguente esempio viene gestito il <xref:System.Windows.Forms.HtmlElement.Click> evento su <xref:System.Windows.Forms.HtmlDocument>. Se un elemento non era selezionato con un clic del mouse, il codice assegna l'elemento a una variabile di classe privata denominata `MoveElement`. Se è stato selezionato un elemento, il codice tenta di aggiungerlo all'elemento appena selezionato. Questo esempio si presuppone che nell'applicazione sia presente una <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`, e di aver già aggiunto un gestore eventi per il <xref:System.Windows.Forms.HtmlElement.Click> evento su <xref:System.Windows.Forms.HtmlDocument>.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlElement#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Children" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Children" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Children As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Children { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Children : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlElement.Children" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Windows.Forms.HtmlElementCollection" /> di tutti gli elementi figlio dell'elemento corrente.</summary>
        <value>Raccolta di tutti gli oggetti <see cref="T:System.Windows.Forms.HtmlElement" /> che hanno l'elemento corrente come padre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Molti degli elementi all'interno di un file HTML può contenere altri elementi HTML sottostanti. Il <xref:System.Windows.Forms.HtmlElement.Children%2A> raccolta fornisce un meccanismo semplice per esplorare la struttura ad albero di un documento.  
  
 <xref:System.Windows.Forms.HtmlElement.Children%2A> espone solo gli elementi il cui padre diretto è l'elemento corrente. Se si dispone di un <xref:System.Windows.Forms.HtmlElement> per un `TABLE` elemento <xref:System.Windows.Forms.HtmlElement.Children%2A> fornirà tutte la `TR` elementi (riga) all'interno del `TABLE`. Per recuperare il `TD` elementi (cella) contenuti all'interno del `TR` elementi, è necessario usare una il <xref:System.Windows.Forms.HtmlElement.Children%2A> raccolta su ogni singolo `TR` elemento oppure utilizzare il <xref:System.Windows.Forms.HtmlElement.All%2A> raccolta su <xref:System.Windows.Forms.HtmlElement>.  
  
 Gli elementi in questa raccolta sono necessariamente in ordine di origine.  
  
 Se <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> viene `false`, `Children` sarà sempre vuoto.  
  
   
  
## Examples  
 Il codice seguente esamina un documento HTML arbitrario e derivare una stringa che descrive gli elementi, con rientro di numeri di livello consente di indicare la profondità di annidamento degli elementi nel documento. Tale scopo, la ricerca di `Children` ricorsiva insieme di tutti gli elementi, a partire da elemento HTML nella parte superiore del documento. Questo esempio di codice richiede che l'applicazione abbia un <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.HtmlElement#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.All" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Click : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente fa clic sull'elemento con il pulsante sinistro del mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile annullare l'azione predefinita per un <xref:System.Windows.Forms.HtmlElement.Click> evento su un elemento, impostare il <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
 Oggetto <xref:System.Windows.Forms.HtmlElement.Click> evento su un elemento verificherà anche sugli elementi padre dell'elemento e scegliere il <xref:System.Windows.Forms.HtmlDocument> classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
 Se l'utente fa clic su un elemento che non è attualmente avere input dello stato attivo, il <xref:System.Windows.Forms.HtmlElement.Click> evento verrà eseguito dopo il <xref:System.Windows.Forms.HtmlElement.Focusing> evento, ma prima di <xref:System.Windows.Forms.HtmlElement.LostFocus> evento per quell'elemento.  
  
   
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.Click> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug. Per creare report su più eventi o sugli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.Click> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#432](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#432)]
 [!code-vb[System.Windows.Forms.EventExamples#432](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#432)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ClientRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ClientRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ClientRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ClientRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.HtmlElement.ClientRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene i limiti dell'area client dell'elemento nel documento HTML.</summary>
        <value>Area client occupata dall'elemento meno qualsiasi area occupata dai bordi e dalle barre di scorrimento. Per ottenere la posizione e le dimensioni dell'elemento, inclusi i relativi elementi grafici, usare invece la proprietà <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.ClientRectangle%2A> Restituisce i dati di posizione solo per elementi che sono stati assegnati a un'altezza esplicita e la larghezza o elementi che utilizzano il posizionamento assoluto. Un documento viene posizionato in modo assoluto se proprio stile di posizione è impostato su `absolute`, dopo il quale può essere posizionata in corrispondenza di qualsiasi coordinata nella pagina HTML.  
  
   
  
## Examples  
 Si supponga la seguente pagina HTML sono stati caricati in un'istanza ospitata del <xref:System.Windows.Forms.WebBrowser> controllo.  
  
```  
<HTML>  
  
    <BODY>  
  
        <DIV id="div1" style="position:absolute;top:100px;left:100px;border-      style:solid;border-width:1px;">  
            Edit this text.  
        </DIV>  
  
    </BODY>  
  
</HTML>  
```  
  
 Esempio di codice seguente viene illustrato il recupero di questo elemento ed espansione relative dimensioni, se l'area client è inferiore a 400 pixel di larghezza di 50 pixel e imposta anche il `DIV` per il `contentEditable` in modo che l'utente può immettere testo di stato.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlElement#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlElement.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nome dell'evento da gestire.</param>
        <param name="eventHandler">Codice gestito che gestisce l'evento.</param>
        <summary>Rimuove un gestore eventi da un evento denominato nel DOM (Document Object Model) HTML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlDocument ^ Document { System::Windows::Forms::HtmlDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Document : System.Windows.Forms.HtmlDocument" Usage="System.Windows.Forms.HtmlElement.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Windows.Forms.HtmlDocument" /> a cui appartiene l'elemento.</summary>
        <value>Documento padre di questo elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alcune pagine HTML possono contenere frame utilizzando la `FRAMESET` tag. In questo caso, ogni singolo `FRAME` elemento conterrà una propria istanza di <xref:System.Windows.Forms.HtmlDocument>. Questa proprietà è particolarmente utile quando si riceve un riferimento a un elemento in un gestore eventi dal <xref:System.Windows.Forms.HtmlElementEventArgs>ed è necessario eseguire alcune azioni sul documento in cui si trova l'elemento.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.HtmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="DomElement">
      <MemberSignature Language="C#" Value="public object DomElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.DomElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomElement As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomElement { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomElement : obj" Usage="System.Windows.Forms.HtmlElement.DomElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un puntatore a un'interfaccia non gestita relativo a questo elemento.</summary>
        <value>Il modello COM <c>IUnknown</c> puntatore per l'elemento che è possibile eseguire il cast a uno dell'elemento HTML, ad esempio interfacce <c>IHTMLElement</c>.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement> è un wrapper per l'Internet Explorer modello DOM (Document Object), che viene scritta usando il modello COM (Component Object). Se è necessario accedere a non esposti proprietà o metodi su interfacce COM sottostanti, ad esempio `IHTMLElement`, è possibile utilizzare questa oggetto per eseguire query per loro.  
  
 Per usare le interfacce non gestite, è necessario importare la libreria MSHTML (Mshtml. dll) nell'applicazione. Tuttavia, è possibile eseguire anche metodi e proprietà non esposti mediante il `Invoke` (metodo).  
  
   
  
## Examples  
 Il codice seguente usa le interfacce non gestite per acquisire il testo attualmente selezionato e convertirlo in collegamento ipertestuale, con l'URL scelto dall'utente. Questo codice è stata scritta in base al presupposto che il form contenga un <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`, e che sono stati aggiunti la libreria MSHTML non gestita come un riferimento al progetto.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.HtmlElement#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.DomDocument" />
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoubleClick As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DoubleClick;" />
      <MemberSignature Language="F#" Value="member this.DoubleClick : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.DoubleClick : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente fa rapidamente doppio clic su un elemento con il pulsante sinistro del mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un doppio clic è determinato dalle impostazioni del mouse del sistema operativo dell'utente. L'utente può impostare un intervallo tra i clic effettuati con un pulsante del mouse in modo che debbano essere considerati come un doppio clic anziché come due clic distinti.  
  
 È possibile annullare l'azione predefinita per un <xref:System.Windows.Forms.HtmlElement.DoubleClick> evento su un elemento, impostare il <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
 Oggetto <xref:System.Windows.Forms.HtmlElement.DoubleClick> evento su un elemento verificherà anche sugli elementi padre dell'elemento e scegliere il <xref:System.Windows.Forms.HtmlDocument> classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
   
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.DoubleClick> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug. Per creare report su più eventi o sugli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.DoubleClick> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#433](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#433)]
 [!code-vb[System.Windows.Forms.EventExamples#433](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#433)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Drag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Drag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.Drag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drag As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Drag;" />
      <MemberSignature Language="F#" Value="member this.Drag : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Drag : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente trascina il testo in diverse posizioni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento si verifica quando il testo viene trascinato nei percorsi seguenti:  
  
-   All'interno o tra le pagine HTML ospitate nel <xref:System.Windows.Forms.WebBrowser> controllo o Internet Explorer  
  
-   In un'altra applicazione  
  
-   Sul desktop di Windows  
  
 È possibile annullare l'azione predefinita per un <xref:System.Windows.Forms.HtmlElement.Drag> evento su un elemento, impostare il <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
 Oggetto <xref:System.Windows.Forms.HtmlElement.Drag> evento su un elemento verificherà anche sugli elementi padre dell'elemento e scegliere il <xref:System.Windows.Forms.HtmlDocument> classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
   
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.Drag> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug. Per creare report su più eventi o sugli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.Drag> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#434](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#434)]
 [!code-vb[System.Windows.Forms.EventExamples#434](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#434)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragEnd">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DragEnd;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DragEnd" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DragEnd" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnd As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DragEnd;" />
      <MemberSignature Language="F#" Value="member this.DragEnd : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.DragEnd : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un utente termina un'operazione di trascinamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile annullare l'azione predefinita per un <xref:System.Windows.Forms.HtmlElement.DragEnd> evento su un elemento, impostare il <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
 Oggetto <xref:System.Windows.Forms.HtmlElement.DragEnd> evento su un elemento verificherà anche sugli elementi padre dell'elemento e scegliere il <xref:System.Windows.Forms.HtmlDocument> classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
   
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.DragEnd> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug. Per creare report su più eventi o sugli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.DragEnd> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#435](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#435)]
 [!code-vb[System.Windows.Forms.EventExamples#435](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#435)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.DragLeave : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente interrompe il trascinamento di un elemento sull'elemento corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.DragLeave> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug. Per creare report su più eventi o sugli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.DragLeave> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#436](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#436)]
 [!code-vb[System.Windows.Forms.EventExamples#436](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#436)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.DragOver : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente trascina del testo sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile annullare l'azione predefinita per un <xref:System.Windows.Forms.HtmlElement.DragOver> evento su un elemento, impostare il <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
 Oggetto <xref:System.Windows.Forms.HtmlElement.DragOver> evento su un elemento verificherà anche sugli elementi padre dell'elemento e scegliere il <xref:System.Windows.Forms.HtmlDocument> classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
   
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.DragOver> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug. Per creare report su più eventi o sugli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.DragOver> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#437](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#437)]
 [!code-vb[System.Windows.Forms.EventExamples#437](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#437)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.HtmlElement.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se l'utente può immettere dati nell'elemento corrente.</summary>
        <value>
          <see langword="true" /> se l'elemento consente l'input dell'utente; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per la `FORM` elementi quali le caselle di testo e pulsanti di opzione, l'impostazione <xref:System.Windows.Forms.HtmlElement.Enabled%2A> a `false` impedirà all'utente di utilizzo di questi campi modulo. Per gli altri elementi, ad esempio `DIV` o `SPAN`, l'impostazione <xref:System.Windows.Forms.HtmlElement.Enabled%2A> a `false` causerà tutto il testo all'interno dell'elemento di programmazione; tuttavia, il testo sarà comunque selezionabile. Per annullare la selezione, aggiungere un gestore eventi per la non esposti `onselectstart` eventi utilizzando la <xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A> (metodo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlElement.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto di cui verificare l'uguaglianza.</param>
        <summary>Verifica se l'oggetto fornito è uguale all'oggetto corrente.</summary>
        <returns>
          <see langword="true" /> se <paramref name="obj" /> è <see cref="T:System.Windows.Forms.HtmlElement" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstChild">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement FirstChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement FirstChild" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.FirstChild" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstChild As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ FirstChild { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FirstChild : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlElement.FirstChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'elemento immediatamente sottostante all'elemento corrente nell'albero del documento.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.HtmlElement" /> che rappresenta il primo elemento contenuto al di sotto dell'elemento corrente, in ordine di origine.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uso <xref:System.Windows.Forms.HtmlElement.FirstChild%2A> in combinazione con <xref:System.Windows.Forms.HtmlElement.NextSibling%2A> per esaminare l'albero del documento per un documento HTML.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlElement.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Assegna all'elemento corrente lo stato attivo per l'input.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostazione dello stato attivo su un elemento sia tale stato attivo sull'elemento e lo rende l'elemento attivo; ad esempio, verrà restituito l'elemento con lo stato attivo dal <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> proprietà di <xref:System.Windows.Forms.HtmlDocument>.  
  
 Eventuali sequenze di tasti immesse dall'utente dopo <xref:System.Windows.Forms.HtmlElement.Focus%2A> è stato chiamato verrà inviato a tale elemento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Focusing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Focusing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.Focusing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Focusing As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Focusing;" />
      <MemberSignature Language="F#" Value="member this.Focusing : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Focusing : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando all'elemento viene assegnato per la prima volta lo stato attivo per l'input dell'utente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un elemento con lo stato attivo prima che l'utente passa a un'altra applicazione utilizzando la barra delle applicazioni o i tasti ALT + TAB riceve la <xref:System.Windows.Forms.HtmlElement.Focusing> e <xref:System.Windows.Forms.HtmlElement.GotFocus> eventi nuovamente quando l'utente passa all'applicazione.  
  
 Non è possibile annullare il comportamento predefinito di questo evento. Per rimuovere lo stato attivo da un elemento, chiamare <xref:System.Windows.Forms.HtmlElement.Focus%2A> su un elemento diverso dall'interno di <xref:System.Windows.Forms.HtmlElement.GotFocus> evento.  
  
 Oggetto <xref:System.Windows.Forms.HtmlElement.Focusing> evento su un elemento verificherà anche sugli elementi padre dell'elemento e scegliere il <xref:System.Windows.Forms.HtmlDocument> classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
   
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.Focusing> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.Focusing> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#438](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#438)]
 [!code-vb[System.Windows.Forms.EventExamples#438](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#438)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public string GetAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttribute (attributeName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAttribute(System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="member this.GetAttribute : string -&gt; string" Usage="htmlElement.GetAttribute attributeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">Nome dell'attributo. L'argomento non prevede la distinzione tra maiuscole e minuscole.</param>
        <summary>Recupera il valore dell'attributo denominato sull'elemento.</summary>
        <returns>Valore di questo attributo sull'elemento, espresso come valore <see cref="T:System.String" />. Se l'attributo specificato non esiste su questo elemento, viene restituita una stringa vuota.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un attributo in formato HTML è qualsiasi coppia nome/valore valide per quell'elemento. <xref:System.Windows.Forms.HtmlElement> espone solo gli attributi che sono comuni a tutti gli elementi, escludendo quelli che si applicano solo a determinati tipi di elementi. `SRC` è un attributo predefinito per il `IMG` applicare un tag, ad esempio, ma non per il `DIV` tag. Uso <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> e <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> per modificare gli attributi non esposti nel modello oggetto di documento (DOM) gestito.  
  
 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> e <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> sono tra maiuscole e minuscole.  
  
   
  
## Examples  
 Il codice seguente recupera tutti i `META` tag all'interno di un elemento HTML del documento, usando <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> per trovare il `META` tag con il nome `Description`. Nell'esempio si presuppone che l'applicazione abbia un <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElementCollection GetElementsByTagName(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementsByTagName (tagName As String) As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElementCollection ^ GetElementsByTagName(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="member this.GetElementsByTagName : string -&gt; System.Windows.Forms.HtmlElementCollection" Usage="htmlElement.GetElementsByTagName tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Nome del tag di cui si vogliono recuperare gli oggetti <see cref="T:System.Windows.Forms.HtmlElement" />.</param>
        <summary>Recupera una raccolta di elementi rappresentati in HTML dal tag <c>HTML</c> specificato.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.HtmlElementCollection" /> contenente tutti gli elementi il cui nome di tag <c>HTML</c> coincide con <paramref name="tagName" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlElement.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Viene usato come funzione hash per un tipo specifico.</summary>
        <returns>Codice hash per l'oggetto <see cref="T:System.Object" /> corrente.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando all'elemento è stato assegnato lo stato attivo per l'input dell'utente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non è possibile annullare il comportamento predefinito di questo evento, né impedisce il bubbling. Per rimuovere lo stato attivo da un elemento, chiamare <xref:System.Windows.Forms.HtmlElement.Focus%2A> su un elemento diverso dall'interno di <xref:System.Windows.Forms.HtmlElement.GotFocus> evento.  
  
   
  
## Examples  
 Salvare il codice HTML seguente in un file e caricare il file in un <xref:System.Windows.Forms.WebBrowser> controllo in un progetto Windows Form.  
  
```  
<HTML>  
    <BODY>  
        <FORM name="form1">  
            <INPUT type="text" size=20 name="text1">  
            <INPUT type="text" size=20 name="text2">  
            <INPUT type="text" size=20 name="text3">  
        </FORM>  
    </BODY>  
</HTML>  
```  
  
 Esempio di codice seguente impedisce alla successiva `INPUT` elemento nell'ordine di tabulazione di ricevere lo stato attivo dell'input utente, se l'elemento precedente contiene meno di cinque caratteri. L'esempio richiede il caricamento di file HTML indicato in precedenza in un'istanza di <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlElement#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Id" />
      <MemberSignature Language="VB.NET" Value="Public Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Id : string with get, set" Usage="System.Windows.Forms.HtmlElement.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un'etichetta in base a cui identificare l'elemento.</summary>
        <value>Identificatore univoco per l'elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.Id%2A> deve essere univoca. non è possibile avere due elementi con lo stesso <xref:System.Windows.Forms.HtmlElement.Id%2A> all'interno dello stesso documento. Usare il <xref:System.Windows.Forms.HtmlElement.Name%2A> proprietà per assegnare lo stesso identificatore per un gruppo di elementi correlati in modo logico.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="InnerHtml">
      <MemberSignature Language="C#" Value="public string InnerHtml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerHtml" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.InnerHtml" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerHtml As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InnerHtml { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InnerHtml : string with get, set" Usage="System.Windows.Forms.HtmlElement.InnerHtml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il markup HTML sottostante dell'elemento corrente.</summary>
        <value>Markup HTML che definisce gli elementi figlio dell'elemento corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esistono diversi modi per aggiungere nuovi elementi a una pagina HTML esistente, ad esempio la <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> e <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> metodi. Usando <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> è spesso il modo più rapido per aggiungere nuovo contenuto quando è necessario impostare molti attributi o gli stili per i nuovi elementi.  
  
 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> differisce da <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> in quanto <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> non includerà il codice HTML che rappresenta l'oggetto che si sta chiamando. Vedere <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> per altre informazioni sulla differenza tra queste due proprietà.  
  
 Impostazione <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> elimina qualsiasi elemento figlio in precedenza aggiunto all'elemento. Se si recupera un elemento da DOM e quindi assegnare nuovi HTML al relativo padre <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> proprietà, il riferimento a tale elemento diventerebbe inutile e relativo comportamento quando chiama relativi metodi e proprietà non è definito.  
  
 Per alcuni elementi, l'impostazione <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> non è un'operazione valida. Alcuni tag HTML non presentano alcun tag di chiusura, ad esempio il `IMG` tag e pertanto non può contenere elementi annidati. Alcuni tag, ad esempio la `SCRIPT` tag, può contenere solo testo contenuto; impostazione <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> comporterà un errore. Per entrambi i tipi di tag, il <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> proprietà restituirà `false`. Tuttavia, non è inoltre possibile impostare <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> sul `TABLE` e `TR` elementi, come l'assegnazione di HTML in formato non corretto a questi elementi potrebbe danneggiare il rendering del documento. Uso <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> o il `insertRow` e `insertCell` metodi su non gestito `IHTMLTable` interfaccia per aggiungere righe e celle a un `TABLE`.  
  
 Se è necessario solo assegnare testo a un elemento e non il markup HTML, usare il <xref:System.Windows.Forms.HtmlElement.InnerText%2A> proprietà invece.  
  
 Assegnazione di un valore per <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> eliminerà qualsiasi precedentemente assegnati usando i valori di testo <xref:System.Windows.Forms.HtmlElement.InnerText%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">La creazione di elementi figlio di questo elemento non è consentita.</exception>
        <altmember cref="M:System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)" />
        <altmember cref="M:System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)" />
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerText" />
      </Docs>
    </Member>
    <Member MemberName="InnerText">
      <MemberSignature Language="C#" Value="public string InnerText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.InnerText" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InnerText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InnerText : string with get, set" Usage="System.Windows.Forms.HtmlElement.InnerText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il testo assegnato all'elemento.</summary>
        <value>Testo dell'elemento, senza markup HTML. Se l'elemento contiene elementi figlio, verrà mantenuto soltanto il testo presente in questi ultimi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se si tenta di assegnare un codice HTML a un elemento con <xref:System.Windows.Forms.HtmlElement.InnerText%2A>, il codice HTML verrà visualizzato come valori letterali nel documento, come se si stava visualizzando HTML all'interno di un file di testo. Se si assegna HTML a un elemento usando il <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> proprietà, <xref:System.Windows.Forms.HtmlElement.InnerText%2A> restituisce tutto il testo in quanto rimossi con il markup HTML.  
  
 Assegnare un valore a <xref:System.Windows.Forms.HtmlElement.InnerText%2A> determinerà l'eliminazione di elementi figlio che appartengono all'elemento.  
  
   
  
## Examples  
 Il codice seguente crea un nuovo collegamento ipertestuale usando <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>, viene assegnato il testo per il collegamento usando il <xref:System.Windows.Forms.HtmlElement.InnerText%2A> proprietà.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlElement#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">L'elemento specificato, ad esempio un elemento <c>IMG</c>, non può contenere testo.</exception>
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerHtml" />
      </Docs>
    </Member>
    <Member MemberName="InsertAdjacentElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement InsertAdjacentElement (System.Windows.Forms.HtmlElementInsertionOrientation orient, System.Windows.Forms.HtmlElement newElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement InsertAdjacentElement(valuetype System.Windows.Forms.HtmlElementInsertionOrientation orient, class System.Windows.Forms.HtmlElement newElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertAdjacentElement (orient As HtmlElementInsertionOrientation, newElement As HtmlElement) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ InsertAdjacentElement(System::Windows::Forms::HtmlElementInsertionOrientation orient, System::Windows::Forms::HtmlElement ^ newElement);" />
      <MemberSignature Language="F#" Value="member this.InsertAdjacentElement : System.Windows.Forms.HtmlElementInsertionOrientation * System.Windows.Forms.HtmlElement -&gt; System.Windows.Forms.HtmlElement" Usage="htmlElement.InsertAdjacentElement (orient, newElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orient" Type="System.Windows.Forms.HtmlElementInsertionOrientation" />
        <Parameter Name="newElement" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="orient">Posizione in cui viene inserito questo elemento in relazione all'elemento corrente.</param>
        <param name="newElement">Nuovo elemento da inserire.</param>
        <summary>Inserisce un nuovo elemento nel DOM (Document Object Model).</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.HtmlElement" /> appena inserito. Se l'inserimento ha esito negativo, verrà restituito il valore <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non chiamare questo metodo fino a quando la <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> evento sul <xref:System.Windows.Forms.WebBrowser> si è verificato un controllo. Chiamare questo metodo prima di tale può causare un'eccezione, come il documento non hanno completato il caricamento.  
  
 Se un valore di <xref:System.Windows.Forms.HtmlElementInsertionOrientation> valida varia in base al tipo di elemento. Ad esempio, <xref:System.Windows.Forms.HtmlElementInsertionOrientation.AfterBegin> è valido se l'elemento è una `DIV`, ma se è un `SCRIPT` o `IMG` elemento, nessuno dei quali può contenere elementi figlio.  
  
   
  
## Examples  
 Nell'esempio di codice esempio inserisce un `DIV` elemento alla parte superiore di ogni pagina che consente di visualizzare gli utenti all'esterno del server di ADatum.com. Nell'esempio si presuppone che il form contenga un <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`. È necessario inoltre importare lo spazio dei nomi <xref:System.Text.RegularExpressions>.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlElement#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Esegue un metodo univoco per l'elemento corrente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeMember(string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.InvokeMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeMember (methodName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="member this.InvokeMember : string -&gt; obj" Usage="htmlElement.InvokeMember methodName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="methodName">Nome della proprietà o del metodo da richiamare.</param>
        <summary>Esegue un metodo non esposto sull'elemento DOM sottostante di questo elemento.</summary>
        <returns>Elemento restituito dal metodo, rappresentato come un <see cref="T:System.Object" />. Se questo oggetto <see cref="T:System.Object" /> è un altro elemento HTML ed è presente un riferimento alla libreria MSHTML non gestita aggiunta al progetto, è possibile eseguire il cast di tale riferimento alla relativa interfaccia non gestita appropriata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo può essere utilizzato per chiamare i metodi dal modello DOM (Document Object) che non dispongono di equivalenti in codice gestito. Usare questa versione di <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> per l'esecuzione non esposti i metodi che non accettano argomenti. Per un esempio, vedere <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string methodName, params object[] parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeMember(string methodName, object[] parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeMember (methodName As String, ParamArray parameter As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ methodName, ... cli::array &lt;System::Object ^&gt; ^ parameter);" />
      <MemberSignature Language="F#" Value="member this.InvokeMember : string * obj[] -&gt; obj" Usage="htmlElement.InvokeMember (methodName, parameter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameter" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="methodName">Nome della proprietà o del metodo da richiamare.</param>
        <param name="parameter">Elenco di parametri da passare.</param>
        <summary>Esegue una funzione definita nella pagina HTML corrente mediante un linguaggio di script.</summary>
        <returns>Elemento restituito dalla funzione, rappresentato come un <see cref="T:System.Object" />. Se questo oggetto <see cref="T:System.Object" /> è un altro elemento HTML ed è presente un riferimento alla libreria MSHTML non gestita aggiunta al progetto, è possibile eseguire il cast di tale riferimento alla relativa interfaccia non gestita appropriata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo può essere utilizzato per chiamare i metodi dal modello DOM (Document Object) che non dispongono di equivalenti in codice gestito. Tutti gli argomenti forniti a <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> verrà convertito in Win32 `VARIANT` i tipi di dati prima che vengano passati alla funzione di scripting denominata.  
  
   
  
## Examples  
 Il codice seguente esempio ottiene una `TABLE` chiamati `dataTable` e Usa il non esposti `moveRow` metodo per spostare una riga dalla fine della tabella all'inizio.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.HtmlElement#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.KeyDown : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente preme un tasto della tastiera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.KeyDown> si verifica prima <xref:System.Windows.Forms.HtmlElement.KeyPress>, che a sua volta si verifica prima <xref:System.Windows.Forms.HtmlElement.KeyUp>.  
  
 È possibile annullare l'azione predefinita per un <xref:System.Windows.Forms.HtmlElement.KeyDown> evento su un elemento, impostare il <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
 Oggetto <xref:System.Windows.Forms.HtmlElement.KeyDown> evento su un elemento verificherà anche sugli elementi padre dell'elemento e scegliere il <xref:System.Windows.Forms.HtmlDocument> classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
   
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.KeyDown> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug. Per creare report su più eventi o sugli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.KeyDown> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#442](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#442)]
 [!code-vb[System.Windows.Forms.EventExamples#442](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#442)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyPress">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler KeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler KeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.KeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyPress As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ KeyPress;" />
      <MemberSignature Language="F#" Value="member this.KeyPress : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.KeyPress : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente preme e rilascia un tasto della tastiera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.KeyPress> si verifica dopo aver <xref:System.Windows.Forms.HtmlElement.KeyDown> e prima <xref:System.Windows.Forms.HtmlElement.KeyUp>.  
  
 È possibile annullare l'azione predefinita per un <xref:System.Windows.Forms.HtmlElement.KeyPress> evento su un elemento, impostare il <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
 Oggetto <xref:System.Windows.Forms.HtmlElement.KeyPress> evento su un elemento verificherà anche sugli elementi padre dell'elemento e scegliere il <xref:System.Windows.Forms.HtmlDocument> classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
   
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.KeyPress> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug. Per creare report su più eventi o sugli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.KeyPress> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#443](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#443)]
 [!code-vb[System.Windows.Forms.EventExamples#443](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#443)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.KeyUp : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente rilascia un tasto della tastiera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.KeyUp> si verifica dopo aver <xref:System.Windows.Forms.HtmlElement.KeyPress>, che si verifica dopo <xref:System.Windows.Forms.HtmlElement.KeyDown>.  
  
 È possibile annullare questo evento.  
  
 Oggetto <xref:System.Windows.Forms.HtmlElement.KeyUp> evento su un elemento verificherà anche sugli elementi padre dell'elemento e scegliere il <xref:System.Windows.Forms.HtmlDocument> classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
   
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.KeyUp> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug. Per creare report su più eventi o sugli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.KeyUp> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#444](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#444)]
 [!code-vb[System.Windows.Forms.EventExamples#444](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#444)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LosingFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LosingFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.LosingFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LosingFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LosingFocus;" />
      <MemberSignature Language="F#" Value="member this.LosingFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LosingFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento perde lo stato attivo per l'input dell'utente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.LosingFocus> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.LosingFocus> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#440](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#440)]
 [!code-vb[System.Windows.Forms.EventExamples#440](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#440)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento ha perso lo stato attivo per l'input dell'utente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un elemento non riceverà più gli eventi chiave dopo <xref:System.Windows.Forms.HtmlElement.LostFocus> si verifica fino a quando non viene assegnato lo stato attivo anche in questo caso, l'utente selezionandolo nella pagina oppure dall'applicazione che chiama il <xref:System.Windows.Forms.HtmlElement.Focus%2A> metodo su quell'elemento.  
  
 È possibile annullare questo evento.  
  
 Un <xref:System.Windows.Forms.HtmlElement.LostFocus> evento su un elemento verificherà anche sugli elementi padre dell'elemento e scegliere il <xref:System.Windows.Forms.HtmlDocument> classe stessa, a meno che non si imposta il <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe `true`.  
  
   
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.LostFocus> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.LostFocus> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#441](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#441)]
 [!code-vb[System.Windows.Forms.EventExamples#441](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#441)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseDown : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente preme un pulsante del mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile annullare l'azione predefinita per un <xref:System.Windows.Forms.HtmlElement.MouseDown> evento su un elemento, impostare il <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
 Oggetto <xref:System.Windows.Forms.HtmlElement.MouseDown> evento su un elemento verificherà anche sugli elementi padre dell'elemento e scegliere il <xref:System.Windows.Forms.HtmlDocument> classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
   
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.MouseDown> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug. Per creare report su più eventi o sugli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.MouseDown> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#446](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#446)]
 [!code-vb[System.Windows.Forms.EventExamples#446](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#446)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseEnter : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente sposta per la prima volta il cursore del mouse sull'elemento corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.MouseEnter> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug. Per creare report su più eventi o sugli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.MouseEnter> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#449](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#449)]
 [!code-vb[System.Windows.Forms.EventExamples#449](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#449)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseLeave : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente sposta il cursore del mouse dall'elemento corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.MouseLeave> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug. Per creare report su più eventi o sugli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.MouseLeave> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#450](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#450)]
 [!code-vb[System.Windows.Forms.EventExamples#450](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#450)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseMove : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente sposta il cursore del mouse sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile annullare questo evento.  
  
 Oggetto <xref:System.Windows.Forms.HtmlElement.MouseMove> evento su un elemento verificherà anche sugli elementi padre dell'elemento e scegliere il <xref:System.Windows.Forms.HtmlDocument> classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
   
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.MouseMove> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug. Per creare report su più eventi o sugli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.MouseMove> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#445](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#445)]
 [!code-vb[System.Windows.Forms.EventExamples#445](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#445)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseOver As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseOver;" />
      <MemberSignature Language="F#" Value="member this.MouseOver : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseOver : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il cursore del mouse entra nell'area dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile annullare l'azione predefinita per un <xref:System.Windows.Forms.HtmlElement.MouseOver> evento su un elemento, impostare il <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
 Oggetto <xref:System.Windows.Forms.HtmlElement.MouseOver> evento su un elemento verificherà anche sugli elementi padre dell'elemento e scegliere il <xref:System.Windows.Forms.HtmlDocument> classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
   
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.MouseOver> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug. Per creare report su più eventi o sugli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.MouseOver> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#447](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#447)]
 [!code-vb[System.Windows.Forms.EventExamples#447](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#447)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseUp : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente rilascia un pulsante del mouse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile annullare l'azione predefinita per un <xref:System.Windows.Forms.HtmlElement.MouseUp> evento su un elemento, impostare il <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
 Oggetto <xref:System.Windows.Forms.HtmlElement.MouseUp> evento su un elemento verificherà anche sugli elementi padre dell'elemento e scegliere il <xref:System.Windows.Forms.HtmlDocument> classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs> classe a `true`.  
  
   
  
## Examples  
 Poiché il  classe eredita da , è anche possibile usare questa proprietà se la  è associato a un form. Nell'esempio, un gestore dell'evento segnala l'occorrenza del <xref:System.Windows.Forms.HtmlElement.MouseUp> evento. Questo report consente di capire quando l'evento si verifica e può agevolare il debug. Per creare report su più eventi o sugli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di tipo <xref:System.Windows.Forms.HtmlElement> denominato `HtmlElement1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlElement.MouseUp> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#448](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#448)]
 [!code-vb[System.Windows.Forms.EventExamples#448](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#448)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.HtmlElement.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome dell'elemento.</summary>
        <value>Oggetto <see cref="T:System.String" /> che rappresenta il nome dell'elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Windows.Forms.HtmlElement.Name%2A> proprietà per recuperare gli elementi da un documento usando il <xref:System.Windows.Forms.HtmlElementCollection.GetElementsByName%2A> metodo sul <xref:System.Windows.Forms.HtmlElement.All%2A> proprietà di <xref:System.Windows.Forms.HtmlDocument>.  
  
 Quando applicato a `INPUT` elementi, <xref:System.Windows.Forms.HtmlElement.Name%2A> definisce il nome della variabile per i dati dell'elemento quando il form viene inviato al server.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSibling">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement NextSibling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement NextSibling" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.NextSibling" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextSibling As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ NextSibling { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NextSibling : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlElement.NextSibling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il successivo elemento allo stesso livello dell'elemento corrente nell'albero del documento.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.HtmlElement" /> che rappresenta l'elemento a destra dell'elemento corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uso <xref:System.Windows.Forms.HtmlElement.NextSibling%2A> in combinazione con <xref:System.Windows.Forms.HtmlElement.FirstChild%2A> per esaminare l'albero del documento per un elemento HTML.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OffsetParent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement OffsetParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement OffsetParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OffsetParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OffsetParent As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ OffsetParent { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OffsetParent : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlElement.OffsetParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'elemento a partire dal quale viene calcolata la proprietà <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />.</summary>
        <value>Elemento a partire dal quale vengono calcolati gli offset.  Se il padre di un elemento, o un altro elemento presente nella gerarchia, usa il posizionamento relativo o assoluto, <see langword="OffsetParent" /> sarà il primo elemento posizionato in modo relativo o assoluto in cui è annidato l'elemento corrente. Se nessuno degli elementi sopra l'elemento corrente è posizionato in modo assoluto o relativo, <see langword="OffsetParent" /> saranno le <c>corpo</c> tag del documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli elementi possono essere posizionati in una pagina HTML in uno dei tre modi: posizionamento predefinito di flusso; il posizionamento relativo, in cui l'elemento viene spostato di un valore fisso rispetto al padre; e il posizionamento assoluto, in cui l'elemento viene assegnato un fisso coordinano posizione rispetto all'angolo superiore sinistro del documento.  
  
 Quando gli elementi del documento usano il posizionamento relativo o assoluto, è possibile usare `OffsetParent` per calcolare la posizione di coordinate di un elemento nell'area client.  
  
 Per ulteriori informazioni sull'elemento posizionamento in formato HTML, vedere [sull'elemento posizionamento](http://msdn.microsoft.com/library/ms533005.aspx).  
  
   
  
## Examples  
 Il codice seguente esempio viene illustrato come <xref:System.Windows.Forms.HtmlElement.OffsetParent%2A> e <xref:System.Windows.Forms.HtmlElement.OffsetRectangle%2A> variano a seconda `span1`, `span2` e `span3`:  
  
```  
<HTML>  
    <BODY id="documentBody">  
  
        <DIV id="div1">  
            <SPAN id="span1">Placeholder text 1.</SPAN>  
        </DIV>  
  
        <DIV id="div2" style="position:relative;top:100px;left:100px;">  
            <SPAN id="span2">Placeholder text 2.</SPAN>  
        </DIV>  
  
        <DIV id="div3" style="position:absolute;top:200px;left:200px;">  
            <DIV id="div4" style="position:relative;top:100px;left:100px;">  
                <SPAN id="span3">Placeholder text 3.</SPAN>  
            </DIV>  
        </DIV>  
  
    </BODY>  
</HTML>  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlElement#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OffsetRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle OffsetRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle OffsetRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OffsetRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle OffsetRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.OffsetRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.HtmlElement.OffsetRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la posizione di un elemento rispetto al relativo elemento padre.</summary>
        <value>Posizione delle coordinate x e y dell'elemento e larghezza e altezza di quest'ultimo rispetto al proprio elemento padre.  Se il padre di un elemento è posizionato in modo relativo o assoluto, la proprietà <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" /> restituirà l'offset dell'elemento padre. Se l'elemento stesso è posizionato in modo relativo rispetto al proprio elemento padre, la proprietà <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" /> restituirà l'offset rispetto a quest'ultimo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli elementi possono essere posizionati in una pagina HTML in uno dei tre modi:  
  
-   Posizionamento predefinito di flusso.  
  
-   Il posizionamento relativo, in cui l'elemento viene spostato di un valore fisso rispetto al padre.  
  
-   Il posizionamento assoluto, in cui l'elemento viene assegnato un fisso coordinano posizione rispetto all'angolo superiore sinistro del documento.  
  
 Per ulteriori informazioni sull'elemento posizionamento in formato HTML, vedere [sull'elemento posizionamento](http://msdn.microsoft.com/library/ms533005.aspx).  
  
   
  
## Examples  
 Il codice seguente esempio viene illustrato come <xref:System.Windows.Forms.HtmlElement.OffsetParent%2A> e <xref:System.Windows.Forms.HtmlElement.OffsetRectangle%2A> variano a seconda `span1`, `span2` e `span3`:  
  
```  
<HTML>  
    <BODY id="documentBody">  
  
        <DIV id="div1">  
            <SPAN id="span1">Placeholder text 1.</SPAN>  
        </DIV>  
  
        <DIV id="div2" style="position:relative;top:100px;left:100px;">  
            <SPAN id="span2">Placeholder text 2.</SPAN>  
        </DIV>  
  
        <DIV id="div3" style="position:absolute;top:200px;left:200px;">  
            <DIV id="div4" style="position:relative;top:100px;left:100px;">  
                <SPAN id="span3">Placeholder text 3.</SPAN>  
            </DIV>  
        </DIV>  
  
    </BODY>  
</HTML>  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlElement#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.OffsetParent" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlElement left, class System.Windows.Forms.HtmlElement right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlElement, right As HtmlElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlElement ^ left, System::Windows::Forms::HtmlElement ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlElement * System.Windows.Forms.HtmlElement -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlElement" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="left">Primo oggetto <see cref="T:System.Windows.Forms.HtmlElement" />.</param>
        <param name="right">Secondo oggetto <see cref="T:System.Windows.Forms.HtmlElement" />.</param>
        <summary>Confronta due elementi per stabilirne l'uguaglianza.</summary>
        <returns>
          <see langword="true" /> se entrambi i parametri sono <see langword="null" /> oppure se entrambi gli elementi hanno la stessa interfaccia COM sottostante; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I test di operatore di uguaglianza il `IUnknown` puntatori degli oggetti COM sottostanti sottoposto a wrapping da fornito <xref:System.Windows.Forms.HtmlElement> classi.  
  
 È il metodo equivalente per l'operatore <xref:System.Windows.Forms.HtmlElement.Equals%2A?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlElement left, class System.Windows.Forms.HtmlElement right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlElement, right As HtmlElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlElement ^ left, System::Windows::Forms::HtmlElement ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlElement * System.Windows.Forms.HtmlElement -&gt; bool" Usage="System.Windows.Forms.HtmlElement.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlElement" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="left">Primo oggetto <see cref="T:System.Windows.Forms.HtmlElement" />.</param>
        <param name="right">Secondo oggetto <see cref="T:System.Windows.Forms.HtmlElement" />.</param>
        <summary>Confronta due oggetti <see cref="T:System.Windows.Forms.HtmlElement" /> per stabilirne la disuguaglianza.</summary>
        <returns>
          <see langword="true" /> se solo un elemento è <see langword="null" /> oppure i due oggetti non sono uguali; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Il metodo equivalente per l'operatore è la negazione del <xref:System.Windows.Forms.HtmlElement.Equals%2A?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OuterHtml">
      <MemberSignature Language="C#" Value="public string OuterHtml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OuterHtml" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OuterHtml" />
      <MemberSignature Language="VB.NET" Value="Public Property OuterHtml As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OuterHtml { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OuterHtml : string with get, set" Usage="System.Windows.Forms.HtmlElement.OuterHtml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il codice HTML dell'elemento corrente.</summary>
        <value>Codice HTML dell'elemento corrente e dei relativi figli.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Considerando <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> restituirà tutto il codice HTML contenuto nell'elemento corrente tag dell'elemento corrente, escluso <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> include tag dell'elemento corrente, nonché il codice HTML che contiene tag, ad esempio:  
  
 `<HTML>`  
  
 `<BODY>`  
  
 `<DIV id="div1">`  
  
 `Hello`  
  
 `<DIV id="div2">`  
  
 `World`  
  
 `<DIV id="div3">`  
  
 `How are you?`  
  
 `</DIV>`  
  
 `</DIV>`  
  
 `</DIV>`  
  
 `</BODY>`  
  
 `</HTML>`  
  
 In questo esempio, la chiamata <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> su `div2` restituirà:  
  
 `<DIV id="div2">`  
  
 `World`  
  
 `<DIV id="div3">`  
  
 `How are you?`  
  
 `</DIV>`  
  
 `</DIV>`  
  
 La chiamata a <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> restituirà:  
  
 `World`  
  
 `<DIV id="div3">`  
  
 `How are you?`  
  
 `</DIV>`  
  
 Se si assegna un nuovo valore da <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>, il riferimento all'elemento corrente non sarà più valido; non riflette il nome, il contenuto figlio e le proprietà del codice HTML è appena stato assegnato.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerHtml" />
      </Docs>
    </Member>
    <Member MemberName="OuterText">
      <MemberSignature Language="C#" Value="public string OuterText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OuterText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OuterText" />
      <MemberSignature Language="VB.NET" Value="Public Property OuterText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OuterText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OuterText : string with get, set" Usage="System.Windows.Forms.HtmlElement.OuterText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il testo dell'elemento corrente.</summary>
        <value>Testo contenuto nell'elemento corrente e nei relativi elementi figlio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se si tenta di assegnare un codice HTML a un elemento con <xref:System.Windows.Forms.HtmlElement.OuterText%2A>, il codice HTML verrà visualizzato come valori letterali nel documento, come se si stava visualizzando HTML all'interno di un file di testo. Se si assegna HTML a un elemento usando il <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> proprietà, <xref:System.Windows.Forms.HtmlElement.OuterText%2A> restituisce tutto il testo in quanto rimossi con il markup HTML.  
  
 Assegnare un valore a <xref:System.Windows.Forms.HtmlElement.OuterText%2A> determinerà l'eliminazione di elementi figlio che appartengono all'elemento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Non è possibile impostare testo al di fuori di questo elemento.</exception>
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerText" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ Parent { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'elemento padre dell'elemento corrente.</summary>
        <value>Elemento di livello superiore a quello dell'elemento corrente nella gerarchia del documento HTML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.HtmlElement.Parent%2A> proprietà consente l'individuazione del contesto di un elemento. È particolarmente utile all'interno di gestori eventi, ad esempio <xref:System.Windows.Forms.HtmlElement.Click>, che può essere generato per ogni elemento in un punto qualsiasi nella gerarchia di oggetti del documento.  
  
 Il <xref:System.Windows.Forms.HtmlElement.Parent%2A> proprietà dell'elemento HTML (il parte superiore di un documento HTML) fa riferimento a se stesso. Se si chiama <xref:System.Windows.Forms.HtmlElement.Parent%2A> all'interno di un ciclo, verificare che la condizione del ciclo interruzione confronta il tipo dell'elemento corrente e il tipo del `Parent` proprietà, altrimenti il codice può eseguire un ciclo infinito.  
  
   
  
## Examples  
 Il codice seguente trova tutti i `IMG` tag in un documento e Usa il <xref:System.Windows.Forms.HtmlElement.Parent%2A> proprietà da testare se il `IMG` avrà un collegamento ipertestuale a un'altra pagina; in caso affermativo, il codice assegna l'URL per il `ALT` attributo del `IMG`applicare un tag, in modo che gli utenti possono spostare il mouse sull'immagine per vedere dove richiederà li.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlElement#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (string eventName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RaiseEvent(string eventName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.RaiseEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (eventName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseEvent(System::String ^ eventName);" />
      <MemberSignature Language="F#" Value="member this.RaiseEvent : string -&gt; unit" Usage="htmlElement.RaiseEvent eventName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventName">Nome dell'evento da generare.</param>
        <summary>Determina la chiamata da parte dell'evento denominato di tutti i gestori eventi registrati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene utilizzato per accedere agli eventi di modello a oggetti documento (DOM) HTML. Chiama direttamente il [Ihtmlelement3](http://go.microsoft.com/fwlink/?LinkId=103189) (metodo). Per altre informazioni su come usare il modello DOM tramite il <xref:System.Windows.Forms.HtmlElement> classe, vedere [l'accesso a membri non esposti sul modello a oggetti documento HTML gestito](~/docs/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.RemoveFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFocus();" />
      <MemberSignature Language="F#" Value="member this.RemoveFocus : unit -&gt; unit" Usage="htmlElement.RemoveFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rimuove lo stato attivo dall'elemento corrente, se presente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo genera il <xref:System.Windows.Forms.HtmlElement.LostFocus> eventi per l'elemento.  
  
 Quando lo stato attivo viene cancellato da un elemento con questo metodo, viene assegnato al documento che contiene l'elemento, non all'elemento successivo nell'ordine di tabulazione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (bool alignWithTop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollIntoView(bool alignWithTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollIntoView (alignWithTop As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollIntoView(bool alignWithTop);" />
      <MemberSignature Language="F#" Value="member this.ScrollIntoView : bool -&gt; unit" Usage="htmlElement.ScrollIntoView alignWithTop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignWithTop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="alignWithTop">Se <see langword="true" />, la parte superiore dell'oggetto verrà visualizzata nella parte superiore della finestra. Se <see langword="false" />, la parte inferiore dell'oggetto verrà visualizzata nella parte inferiore della finestra.</param>
        <summary>Scorre il documento contenente l'elemento corrente fino a quando il bordo superiore o inferiore di tale elemento non è allineato con la finestra del documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente consente di trovare un elemento in base al nome e scorrimento della pagina in modo che la parte superiore dell'elemento è allineato alla parte superiore della pagina visibile.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#12)]
 [!code-vb[System.Windows.Forms.HtmlElement#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollLeft">
      <MemberSignature Language="C#" Value="public int ScrollLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScrollLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ScrollLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScrollLeft { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ScrollLeft : int with get, set" Usage="System.Windows.Forms.HtmlElement.ScrollLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la distanza tra il bordo dell'elemento e il bordo sinistro del relativo contenuto.</summary>
        <value>Distanza, espressa in pixel, tra il bordo sinistro dell'elemento e il bordo sinistro del relativo contenuto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le dimensioni effettive dell'area di scorrimento sono disponibili tramite <xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>; `ScrollLeft` e <xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> sono esposte in modo indipendente, poiché queste sono le proprietà dell'area di scorrimento che gli sviluppatori possono impostare solo due.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ScrollRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ScrollRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ScrollRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScrollRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ScrollRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.ScrollRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.HtmlElement.ScrollRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Imposta le dimensioni dell'area di scorrimento di un elemento.</summary>
        <value>Dimensione e posizione delle coordinate dell'area di scorrimento di un elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un elemento avrà un'area scorrevole se il relativo contenuto supera le dimensioni delle sue dimensioni, a meno che non lo stile di overflow per l'elemento non consente le barre di scorrimento per il rendering.  
  
 Non è possibile modificare direttamente le dimensioni dell'area di scorrimento, ma è possibile modificare la distanza tra i bordi dell'area di scorrimento e i bordi dell'elemento. Usare la <xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A> e <xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> proprietà per ottenere questo risultato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollTop">
      <MemberSignature Language="C#" Value="public int ScrollTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScrollTop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ScrollTop" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScrollTop { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ScrollTop : int with get, set" Usage="System.Windows.Forms.HtmlElement.ScrollTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la distanza tra il bordo dell'elemento e il bordo superiore del relativo contenuto.</summary>
        <value>Distanza, espressa in pixel, tra il bordo superiore dell'elemento e il bordo superiore del relativo contenuto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le dimensioni effettive dell'area di scorrimento sono disponibili tramite <xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>; <xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A> e `ScrollTop` sono esposte in modo indipendente, poiché queste sono le proprietà dell'area di scorrimento che gli sviluppatori possono impostare solo due.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttribute">
      <MemberSignature Language="C#" Value="public void SetAttribute (string attributeName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAttribute(string attributeName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttribute (attributeName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAttribute(System::String ^ attributeName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetAttribute : string * string -&gt; unit" Usage="htmlElement.SetAttribute (attributeName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">Nome dell'attributo da impostare.</param>
        <param name="value">Nuovo valore di questo attributo.</param>
        <summary>Imposta il valore dell'attributo denominato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un attributo in formato HTML è qualsiasi coppia nome-valore valido per questo elemento. <xref:System.Windows.Forms.HtmlElement> espone solo gli attributi che sono comuni a tutti gli elementi, escludendo quelli che si applicano solo a determinati tipi di elementi. `SRC` è un attributo predefinito per il `IMG` applicare un tag, ad esempio, ma non per il `DIV` tag. Uso <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> e <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> per modificare gli attributi non esposti nel modello oggetto di documento (DOM) gestito.  
  
 Se `attributeName` non è un attributo definito in un elemento, <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> verranno definiti nell'elemento come un nuovo attributo.  
  
 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> e <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> sono tra maiuscole e minuscole.  
  
 Per impostare il `class` dell'attributo su un <xref:System.Windows.Forms.HtmlElement> , è necessario fare riferimento all'attributo come `className` quando si specifica il primo argomento di <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>  
  
   
  
## Examples  
 Esempio di codice seguente aggiunge un nuovo `IMG` elemento corrente di documenti, usando <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> per impostare il `SRC` attributo per l'immagine.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlElement#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public string Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Style { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : string with get, set" Usage="System.Windows.Forms.HtmlElement.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un elenco delimitato da punti e virgola di stili per l'elemento corrente.</summary>
        <value>Stringa costituita da tutti gli stili dell'elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'oggetto modello DOM (Document HTML) usa gli stili come definito nella specifica World Wide Web consorzi Cascading Style Sheets per controllare la visualizzazione di un elemento. Consente di disegnare nel <xref:System.Windows.Forms.HtmlElement.Style%2A> proprietà assumono la forma di coppie nome / valore delimitata da due punti, con ogni coppia separati da punto e virgola, come indicato di seguito:  
  
 `style-name1:value1;...;[style-nameN:valueN;]`  
  
 Per impostare il tipo di carattere per un `DIV` elemento a 14 punti Times New Roman grassetto, ad esempio, è necessario assegnare la stringa seguente:  
  
 `font-face:Times New Roman;font-size:14px;font-weight:bold;`  
  
 Per un elenco completo di tutti gli stili disponibili nel DOM HTML, vedere [attributo di stile](http://msdn.microsoft.com/library/ms534651.aspx).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public short TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 TabIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.TabIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TabIndex As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short TabIndex { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.TabIndex : int16 with get, set" Usage="System.Windows.Forms.HtmlElement.TabIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la posizione dell'elemento corrente in ordine di tabulazione.</summary>
        <value>Indice numerico dell'elemento in ordine di tabulazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.TabIndex%2A> Determina quale elemento in un documento HTML riceverà lo stato attivo quando l'utente preme il tasto TAB. Per impostazione predefinita, sono i soli elementi inclusi nell'ordine di tabulazione `INPUT` elementi, il `SELECT` controllo e qualsiasi elemento cui `contentEditable` è impostata su `true`. È possibile includere qualsiasi elemento HTML nell'ordine di tabulazione, ad esempio un `DIV`, tramite l'assegnazione esplicita <xref:System.Windows.Forms.HtmlElement.TabIndex%2A>.  
  
 I valori validi per <xref:System.Windows.Forms.HtmlElement.TabIndex%2A> compreso tra -32767 a 32767.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="public string TagName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.TagName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TagName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TagName : string" Usage="System.Windows.Forms.HtmlElement.TagName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome del tag HTML.</summary>
        <value>Nome usato per creare questo elemento mediante markup HTML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Numero di elementi nel modello a oggetti documento HTML è attributi, proprietà e metodi che sono univoci per tali elementi. ad esempio la `HREF` attributo la `A` elemento, o il `Submit` metodo su `FORM`. Usare <xref:System.Windows.Forms.HtmlElement.TagName%2A> quando si dispone di un elemento di un tipo arbitrario potenzialmente e necessario eseguire un'operazione specifica del tipo.  
  
   
  
## Examples  
 Il codice seguente trova tutti i `IMG` tag in un documento e Usa il `TagName` proprietà da testare se il `IMG` avrà un collegamento ipertestuale a un'altra pagina; in caso affermativo, il codice assegna l'URL per il `ALT` attributo del `IMG`applicare un tag, in modo che gli utenti possono spostare il mouse sull'immagine per vedere dove richiederà li.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlElement#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.GetElementsByTagName(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>