<Type Name="DomainUpDown" FullName="System.Windows.Forms.DomainUpDown">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a284b348033c02016079e5488931c0b5af98d8e0" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32694169" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DomainUpDown : System.Windows.Forms.UpDownBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DomainUpDown extends System.Windows.Forms.UpDownBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DomainUpDown" />
  <TypeSignature Language="VB.NET" Value="Public Class DomainUpDown&#xA;Inherits UpDownBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class DomainUpDown : System::Windows::Forms::UpDownBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.UpDownBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("SelectedItem")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedItemChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta una casella di selezione di Windows, denominata anche controllo di scorrimento, che consente di visualizzare valori stringa.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Forms.DomainUpDown> controllo consente di visualizzare un singolo valore stringa che viene selezionato da un <xref:System.Object> insieme l'alto o verso il basso i pulsanti del controllo. L'utente può anche immettere testo nel controllo, a meno che il <xref:System.Windows.Forms.UpDownBase.ReadOnly%2A> è impostata su `true` (la stringa nella deve corrispondere a un elemento nella raccolta di essere accettati). Quando un elemento è selezionato, l'oggetto viene convertito in un valore stringa affinché possa essere visualizzato nella casella di selezione.  
  
 Per creare una raccolta di oggetti da visualizzare nel <xref:System.Windows.Forms.DomainUpDown> (controllo), è possibile aggiungere o rimuovere gli elementi singolarmente utilizzando il <xref:System.Collections.ArrayList.Add%2A> e <xref:System.Collections.ArrayList.Remove%2A> metodi. Questo può essere chiamato in un gestore eventi, ad esempio il <xref:System.Windows.Forms.Control.Click> evento di un pulsante. La raccolta di oggetti può essere ordinata alfabeticamente impostando il <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> proprietà `true`. Quando il <xref:System.Windows.Forms.DomainUpDown.Wrap%2A> è impostata su `true`, se si scorre oltre l'ultimo o il primo oggetto nella raccolta, l'elenco verrà ricominciare con il primo o ultimo oggetto rispettivamente e vengono visualizzati in un elenco continuo.  
  
 Quando il <xref:System.Windows.Forms.DomainUpDown.UpButton%2A> o <xref:System.Windows.Forms.DomainUpDown.DownButton%2A> metodi vengono chiamati nel codice o facendo clic con il pulsante freccia rivolta verso l'alto o verso il basso, pulsanti <xref:System.Windows.Forms.DomainUpDown.UpdateEditText%2A> viene chiamato per aggiornare il controllo con la nuova stringa. Se <xref:System.Windows.Forms.UpDownBase.UserEdit%2A> è impostato su `true`, la stringa corrisponde a uno dei valori nella raccolta prima di aggiornare la visualizzazione del testo del controllo.  
  
 A partire da .NET Framework 4.6, il <xref:System.Windows.Forms.DomainUpDown> controllo verrà ridimensionato in base all'impostazione DPI di sistema quando il file app. config contiene la voce seguente:  
  
```  
<appSettings>  
  <add key="EnableWindowsFormsHighDpiAutoResizing" value="true" />  
</appSettings>  
  
```  
  
   
  
## Examples  
 Esempio di codice seguente crea e Inizializza un <xref:System.Windows.Forms.DomainUpDown> controllo. L'esempio consente di impostare alcune delle relative proprietà e creare una raccolta di stringhe da visualizzare nella casella di selezione. Nel codice si presuppone che un <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, e <xref:System.Windows.Forms.Button> sia stata creata un'istanza in un form. Nell'esempio si presuppone inoltre che si dispone di una variabile membro a livello di classe dichiarato come un intero con segno a 32 bit denominato `myCounter`. È possibile immettere una stringa nella casella di testo e aggiungere il <xref:System.Windows.Forms.DomainUpDown.Items%2A> raccolta quando si fa clic sul pulsante. Selezionando la casella di controllo, è possibile attivare o disattivare la <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> proprietà e osservare la differenza nella raccolta di elementi nella casella di selezione.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.UpDownBase" />
    <altmember cref="T:System.Windows.Forms.NumericUpDown" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DomainUpDown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DomainUpDown();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.DomainUpDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente crea e Inizializza un <xref:System.Windows.Forms.DomainUpDown> controllo. L'esempio consente di impostare alcune delle relative proprietà e creare una raccolta di stringhe da visualizzare nella casella di selezione (noto anche come un controllo di scorrimento). Nel codice si presuppone che un <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, e <xref:System.Windows.Forms.Button> sia stata creata un'istanza in un form. Nell'esempio si presuppone inoltre che si dispone di una variabile membro a livello di classe dichiarato come un intero con segno a 32 bit denominato `myCounter`. È possibile immettere una stringa nella casella di testo e aggiungere il <xref:System.Windows.Forms.DomainUpDown.Items%2A> raccolta quando si fa clic sul pulsante. Selezionando la casella di controllo, è possibile attivare o disattivare la <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> proprietà e osservare la differenza nella raccolta di elementi nella casella di selezione.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.UpDownBase" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un nuovo oggetto di accessibilità per il controllo <see cref="T:System.Windows.Forms.DomainUpDown" />.</summary>
        <returns>Nuovo oggetto <see cref="T:System.Windows.Forms.DomainUpDown.DomainUpDownAccessibleObject" /> per il controllo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non si chiama in modo esplicito il metodo <xref:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance%2A>, verrà chiamato quando si crea un riferimento alla proprietà <xref:System.Windows.Forms.Control.AccessibilityObject%2A>.  
  
> [!NOTE]
>  Per ottenere o impostare la proprietà <xref:System.Windows.Forms.Control.AccessibilityObject%2A>, è necessario aggiungere un riferimento all'assembly Accessibility installato con .NET Framework.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance" /> in una classe derivata, non è necessario chiamare la classe base <see cref="M:System.Windows.Forms.DomainUpDown.CreateAccessibilityInstance" /> metodo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DownButton">
      <MemberSignature Language="C#" Value="public override void DownButton ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DownButton() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.DownButton" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub DownButton ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void DownButton();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Visualizza l'elemento successivo della raccolta di oggetti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si sposta attraverso la raccolta di elementi nel <xref:System.Windows.Forms.DomainUpDown> di controllo con il pulsante di scorrimento, verrà raggiunto l'ultimo elemento nella raccolta. Se si continua, e <xref:System.Windows.Forms.DomainUpDown.Wrap%2A> è impostato su `true`, l'elenco verrà ricominciare con il primo elemento nella raccolta e sembra essere continua. Questo comportamento si verifica anche quando si sposta all'interno dell'insieme con il pulsante di scorrimento.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DomainUpDown.UpButton" />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DomainUpDown/DomainUpDownItemCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As DomainUpDown.DomainUpDownItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DomainUpDown::DomainUpDownItemCollection ^ Items { System::Windows::Forms::DomainUpDown::DomainUpDownItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.StringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DomainUpDown+DomainUpDownItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raccolta di oggetti assegnati alla casella di selezione, denominata anche controllo di scorrimento.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection" /> che contiene una raccolta <see cref="T:System.Object" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Object> raccolta può essere compilata e reso disponibile per il <xref:System.Windows.Forms.DomainUpDown> controllo in due modi. È possibile aggiungere elementi alla raccolta utilizzando la <xref:System.Collections.ArrayList.Add%2A> o <xref:System.Collections.ArrayList.Insert%2A> metodi.  
  
   
  
## Examples  
 Esempio di codice seguente crea e Inizializza un <xref:System.Windows.Forms.DomainUpDown> controllo. L'esempio consente di impostare alcune delle relative proprietà e creare una raccolta di stringhe da visualizzare nella casella di selezione. Nel codice si presuppone che un <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, e <xref:System.Windows.Forms.Button> sia stata creata un'istanza in un form. Nell'esempio si presuppone inoltre che si dispone di una variabile membro a livello di classe dichiarato come un intero con segno a 32 bit denominato `myCounter`. È possibile immettere una stringa nella casella di testo e aggiungere il <xref:System.Windows.Forms.DomainUpDown.Items%2A> raccolta quando si fa clic sul pulsante. Selezionando la casella di controllo, è possibile attivare o disattivare la <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> proprietà e osservare la differenza nella raccolta di elementi nella casella di selezione.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.Items" />
        <altmember cref="T:System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected override void OnChanged (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChanged(object source, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.OnChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnChanged (source As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnChanged(System::Object ^ source, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">Origine dell'evento.</param>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedItemChanged">
      <MemberSignature Language="C#" Value="protected void OnSelectedItemChanged (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnSelectedItemChanged(object source, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnSelectedItemChanged (source As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnSelectedItemChanged(System::Object ^ source, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">Origine dell'evento.</param>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per ulteriori informazioni, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
   
  
## Examples  
 Esempio di codice seguente crea e Inizializza un <xref:System.Windows.Forms.DomainUpDown> controllo. L'esempio consente di impostare alcune delle relative proprietà e creare una raccolta di stringhe da visualizzare nella casella di selezione (noto anche come un controllo di scorrimento). Nel codice si presuppone che un <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, e <xref:System.Windows.Forms.Button> sia stata creata un'istanza in un form. Nell'esempio si presuppone inoltre che si dispone di una variabile membro a livello di classe dichiarato come un intero con segno a 32 bit denominato `myCounter`. È possibile immettere una stringa nella casella di testo e aggiungere il <xref:System.Windows.Forms.DomainUpDown.Items%2A> raccolta quando si fa clic sul pulsante. Selezionando la casella di controllo, è possibile attivare o disattivare la <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> proprietà e osservare la differenza nella raccolta di elementi nella casella di selezione.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged(System.Object,System.EventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Windows.Forms.DomainUpDown.OnSelectedItemChanged(System.Object,System.EventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
        <altmember cref="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextBoxKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnTextBoxKeyPress (object source, System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextBoxKeyPress(object source, class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextBoxKeyPress (source As Object, e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextBoxKeyPress(System::Object ^ source, System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="source">Origine dell'evento.</param>
        <param name="e">Oggetto <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Windows.Forms.Control.KeyPress" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Windows.Forms.UpDownBase.ReadOnly%2A> è impostata su `true`, <xref:System.Windows.Forms.DomainUpDown> controllo sceglie l'elemento dell'elenco che inizia con il carattere. Se più di un elemento nella raccolta viene avviato con lo stesso carattere, il <xref:System.Windows.Forms.DomainUpDown> controllo seleziona l'elemento successivo che inizia con il carattere digitato, a partire dalla posizione attualmente selezionata.  
  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per ulteriori informazioni, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Windows.Forms.DomainUpDown.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la spaziatura tra il contenuto e i bordi del controllo <see cref="T:System.Windows.Forms.DomainUpDown" />.</summary>
        <value>
          <see cref="F:System.Windows.Forms.Padding.Empty" /> in tutti i casi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se si imposta la <xref:System.Windows.Forms.DomainUpDown.Padding%2A> proprietà avrà un valore di <xref:System.Windows.Forms.Padding.Empty>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DomainUpDown.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.Forms.DomainUpDown.Padding" /> cambia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.SelectedIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectedIndex { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore di indice dell'elemento selezionato.</summary>
        <value>Valore dell'indice in base zero dell'elemento specificato. Il valore predefinito è -1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A> proprietà contiene il valore di indice dell'elemento della raccolta che è attualmente selezionata nella casella di selezione (noto anche come un controllo di scorrimento). Gli elementi della raccolta possono essere riassegnata nuovi valori di indice se il <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> proprietà è stata modificata da `false` a `true`. Come raccolta nuovamente è ordinata alfabeticamente, è possibile che gli elementi verranno assegnati un nuovo valore di indice.  
  
> [!NOTE]
>  Se l'utente ha immesso un elemento nella casella di selezione o se non è stato selezionato alcun elemento, il <xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A> valore sarà il valore predefinito, -1.  
  
   
  
## Examples  
 Esempio di codice seguente crea e Inizializza un <xref:System.Windows.Forms.DomainUpDown> controllo. L'esempio consente di impostare alcune delle relative proprietà e creare una raccolta di stringhe da visualizzare nella casella di selezione. Nel codice si presuppone che un <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, e <xref:System.Windows.Forms.Button> sia stata creata un'istanza in un form. Nell'esempio si presuppone inoltre che si dispone di una variabile membro a livello di classe dichiarato come un intero con segno a 32 bit denominato `myCounter`. È possibile immettere una stringa nella casella di testo e aggiungere il <xref:System.Windows.Forms.DomainUpDown.Items%2A> raccolta quando si fa clic sul pulsante. Selezionando la casella di controllo, è possibile attivare o disattivare la <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> proprietà e osservare la differenza nella raccolta di elementi nella casella di selezione.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore assegnato è minore del valore predefinito -1.  
  
 oppure  
  
 Il valore assegnato è maggiore del numero di <see cref="P:System.Windows.Forms.DomainUpDown.Items" />.</exception>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItem">
      <MemberSignature Language="C#" Value="public object SelectedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SelectedItem { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'elemento selezionato in base al valore di indice dell'elemento selezionato nella raccolta.</summary>
        <value>Elemento selezionato in base al valore di <see cref="P:System.Windows.Forms.DomainUpDown.SelectedIndex" />. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando questa proprietà è impostata, il valore viene convalidato da uno degli elementi nella raccolta e <xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A> proprietà è impostata sul valore di indice appropriato.  
  
   
  
## Examples  
 Esempio di codice seguente crea e Inizializza un <xref:System.Windows.Forms.DomainUpDown> controllo. L'esempio consente di impostare alcune delle relative proprietà e creare una raccolta di stringhe da visualizzare nella casella di selezione (noto anche come un controllo di scorrimento). Nel codice si presuppone che un <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, e <xref:System.Windows.Forms.Button> sia stata creata un'istanza in un form. Nell'esempio si presuppone inoltre che si dispone di una variabile membro a livello di classe dichiarato come un intero con segno a 32 bit denominato `myCounter`. È possibile immettere una stringa nella casella di testo e aggiungere il <xref:System.Windows.Forms.DomainUpDown.Items%2A> raccolta quando si fa clic sul pulsante. Selezionando la casella di controllo, è possibile attivare o disattivare la <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> proprietà e osservare la differenza nella raccolta di elementi nella casella di selezione.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItemChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedItemChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedItemChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedItemChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedItemChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando la proprietà <see cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" /> è stata modificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per il <xref:System.Windows.Forms.DomainUpDown.SelectedItemChanged> dell'evento, il <xref:System.Windows.Forms.DomainUpDown.SelectedItem%2A> proprietà nel codice, può essere modificata dall'utente digitando un nuovo valore oppure fare clic su verticale del controllo o pulsanti di selezione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio, un gestore eventi genera report sull'occorrenza del <xref:System.Windows.Forms.DomainUpDown.SelectedItemChanged> evento. Questo report consente di capire quando l'evento si verifica e possa agevolare il debug. Per generare un report su più eventi o per gli eventi che si verificano di frequente, è possibile sostituire <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a un controllo <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza del tipo <xref:System.Windows.Forms.DomainUpDown> denominato `DomainUpDown1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.DomainUpDown.SelectedItemChanged> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#381](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#381)]
 [!code-vb[System.Windows.Forms.EventExamples#381](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#381)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DomainUpDown.SelectedItem" />
        <altmember cref="M:System.Windows.Forms.DomainUpDown.UpButton" />
        <altmember cref="M:System.Windows.Forms.DomainUpDown.DownButton" />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public bool Sorted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sorted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Sorted" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Sorted { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se la raccolta di elementi è ordinata.</summary>
        <value>
          <see langword="true" /> se l'insieme di elementi è ordinato; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> è impostato su `true`, la raccolta è ordinata in ordine alfabetico.  
  
   
  
## Examples  
 Esempio di codice seguente crea e Inizializza un <xref:System.Windows.Forms.DomainUpDown> controllo. L'esempio consente di impostare alcune delle relative proprietà e creare una raccolta di stringhe da visualizzare nella casella di selezione (noto anche come un controllo di scorrimento). Nel codice si presuppone che un <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, e <xref:System.Windows.Forms.Button> sia stata creata un'istanza in un form. Nell'esempio si presuppone inoltre che si dispone di una variabile membro a livello di classe dichiarato come un intero con segno a 32 bit denominato `myCounter`. È possibile immettere una stringa nella casella di testo e aggiungere il <xref:System.Windows.Forms.DomainUpDown.Items%2A> raccolta quando si fa clic sul pulsante. Selezionando la casella di controllo, è possibile attivare o disattivare la <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> proprietà e osservare la differenza nella raccolta di elementi nella casella di selezione.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce una stringa che rappresenta il controllo <see cref="T:System.Windows.Forms.DomainUpDown" />.</summary>
        <returns>Stringa che rappresenta l'oggetto <see cref="T:System.Windows.Forms.DomainUpDown" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa restituita include il tipo e i valori per il <xref:System.Collections.ArrayList.Count%2A> e <xref:System.Windows.Forms.DomainUpDown.SelectedIndex%2A> proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpButton">
      <MemberSignature Language="C#" Value="public override void UpButton ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void UpButton() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.UpButton" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub UpButton ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void UpButton();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Visualizza l'elemento precedente della raccolta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si sposta attraverso la raccolta di elementi di <xref:System.Windows.Forms.DomainUpDown> controllo con il pulsante di scorrimento, si raggiungerà il primo elemento nella raccolta. Se si continua, e <xref:System.Windows.Forms.DomainUpDown.Wrap%2A> è impostato su `true`, l'elenco verrà ricominciare con l'ultimo elemento nella raccolta e sembra essere continua. Questo comportamento si verifica anche quando si sposta all'interno dell'insieme con il pulsante di scorrimento.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DomainUpDown.DownButton" />
      </Docs>
    </Member>
    <Member MemberName="UpdateEditText">
      <MemberSignature Language="C#" Value="protected override void UpdateEditText ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void UpdateEditText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DomainUpDown.UpdateEditText" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub UpdateEditText ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void UpdateEditText();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aggiorna il testo nella casella di selezione, denominata anche controllo di scorrimento, per visualizzare l'elemento selezionato.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.UpDownBase.Text" />
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public bool Wrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Wrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DomainUpDown.Wrap" />
      <MemberSignature Language="VB.NET" Value="Public Property Wrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Wrap { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se la raccolta di elementi deve continuare con il primo o con l'ultimo elemento dell'elenco quando l'utente va oltre la fine dell'elenco.</summary>
        <value>
          <see langword="true" /> se l'elenco ricomincia con il primo o con l'ultimo elemento quando l'utente raggiunge rispettivamente la fine e l'inizio dell'insieme; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando il <xref:System.Windows.Forms.DomainUpDown.Wrap%2A> è impostata su `true`, se si raggiunge l'ultimo elemento nella raccolta e si continua, l'elenco verrà ricominciare con il primo elemento e sembra essere continua. Questo comportamento funziona in senso inverso anche.  
  
   
  
## Examples  
 Esempio di codice seguente crea e Inizializza un <xref:System.Windows.Forms.DomainUpDown> controllo. L'esempio consente di impostare alcune delle relative proprietà e creare una raccolta di stringhe da visualizzare nella casella di selezione (noto anche come un controllo di scorrimento). Nel codice si presuppone che un <xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.CheckBox>, e <xref:System.Windows.Forms.Button> sia stata creata un'istanza in un form. Nell'esempio si presuppone inoltre che si dispone di una variabile membro a livello di classe dichiarato come un intero con segno a 32 bit denominato `myCounter`. È possibile immettere una stringa nella casella di testo e aggiungere il <xref:System.Windows.Forms.DomainUpDown.Items%2A> raccolta quando si fa clic sul pulsante. Selezionando la casella di controllo, è possibile attivare o disattivare la <xref:System.Windows.Forms.DomainUpDown.Sorted%2A> proprietà e osservare la differenza nella raccolta di elementi nella casella di selezione.  
  
 [!code-cpp[Classic DomainUpDown Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic DomainUpDown Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DomainUpDown Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic DomainUpDown Example/CS/source.cs#1)]
 [!code-vb[Classic DomainUpDown Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic DomainUpDown Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DomainUpDown.DownButton" />
        <altmember cref="M:System.Windows.Forms.DomainUpDown.UpButton" />
      </Docs>
    </Member>
  </Members>
</Type>