<Type Name="KeyEventArgs" FullName="System.Windows.Forms.KeyEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5034188cc4252d2600766ee8008fcaf5e7d70ab1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36519861" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class KeyEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type KeyEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornisce i dati per l'evento <see cref="E:System.Windows.Forms.Control.KeyDown" /> o <see cref="E:System.Windows.Forms.Control.KeyUp" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Forms.KeyEventArgs>, che consente di specificare la chiave, l'utente preme e se i tasti di modifica (MAIUSC, CTRL e ALT) sono stati premuti contemporaneamente, viene passato a ogni <xref:System.Windows.Forms.Control.KeyDown> o <xref:System.Windows.Forms.Control.KeyUp> evento.  
  
 Il <xref:System.Windows.Forms.Control.KeyDown> evento si verifica quando l'utente preme un tasto qualsiasi. Il <xref:System.Windows.Forms.Control.KeyUp> evento si verifica quando l'utente rilascia la chiave. Duplicare <xref:System.Windows.Forms.Control.KeyDown> eventi si verificano ogni volta che si ripete la chiave, se la chiave viene tenuta premuto, ma un solo <xref:System.Windows.Forms.Control.KeyUp> evento viene generato quando l'utente rilascia la chiave.  
  
 Il <xref:System.Windows.Forms.Control.KeyPress> evento si verifica anche quando viene premuto un tasto. Un <xref:System.Windows.Forms.KeyPressEventArgs> viene passato a ogni <xref:System.Windows.Forms.Control.KeyPress> evento che specifica il carattere che è stato composto in seguito a ogni pressione di tasto.  
  
 Per informazioni sul modello di eventi, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Gli esempi di codice seguente viene illustrato come rilevare lo stato di un tasto.  
  
 **Esempio 1**  
  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Windows.Forms.Control.KeyDown> evento con la <xref:System.Windows.Forms.Help> classe per visualizzare una finestra popup della Guida per l'utente dell'applicazione. Nell'esempio viene utilizzato il <xref:System.Windows.Forms.KeyEventArgs> proprietà passate al metodo del gestore eventi per filtrare tutte le variazioni di premere il tasto F1 con un tasto di modifica. Quando l'utente preme qualsiasi variazione di F1 che include qualsiasi tasto di modifica, il <xref:System.Windows.Forms.Help> classe visualizza una finestra popup, simile a un <xref:System.Windows.Forms.ToolTip>, accanto al controllo. Se l'utente preme ALT + F2, viene visualizzato un messaggio popup della Guida diversi con informazioni aggiuntive.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **Esempio 2**  
  
 Nell'esempio seguente determina se l'utente ha premuto ALT + E, e se il puntatore del mouse su un <xref:System.Windows.Forms.TreeNode>, consente all'utente di modifica che <xref:System.Windows.Forms.TreeNode>.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 **Esempio 3**  
  
 Nell'esempio seguente si determina se l'utente ha premuto un tasto non numerico, annullando in tal caso, il <xref:System.Windows.Forms.Control.KeyPress> evento usando il <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> proprietà.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyEventArgs (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyEventArgs.#ctor(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyData As Keys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyEventArgs(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.KeyEventArgs : System.Windows.Forms.Keys -&gt; System.Windows.Forms.KeyEventArgs" Usage="new System.Windows.Forms.KeyEventArgs keyData" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Oggetto <see cref="T:System.Windows.Forms.Keys" /> che rappresenta il tasto premuto, combinato con eventuali flag di modifica che indicano quali tra i tasti CTRL, MAIUSC e ALT sono stati premuti contemporaneamente. I possibili valori vengono ottenuti applicando l'operatore OR bit per bit (|) alle costanti dell'enumerazione <see cref="T:System.Windows.Forms.Keys" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.KeyEventArgs" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Alt">
      <MemberSignature Language="C#" Value="public virtual bool Alt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Alt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Alt" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Alt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Alt { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Alt : bool" Usage="System.Windows.Forms.KeyEventArgs.Alt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se è stato premuto il tasto ALT.</summary>
        <value>
          <see langword="true" /> se è stato premuto il tasto ALT; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 **Esempio 1**  
  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Windows.Forms.Control.KeyDown> evento con la <xref:System.Windows.Forms.Help> classe per visualizzare una finestra popup della Guida per l'utente dell'applicazione. Nell'esempio viene utilizzato il <xref:System.Windows.Forms.KeyEventArgs> proprietà passate al metodo del gestore eventi per filtrare tutte le variazioni di premere il tasto F1 con un tasto di modifica. Quando l'utente preme qualsiasi variazione di F1 che include qualsiasi tasto di modifica, il <xref:System.Windows.Forms.Help> classe visualizza una finestra popup, simile a un <xref:System.Windows.Forms.ToolTip>, accanto al controllo. Se l'utente preme ALT + F2, viene visualizzato un messaggio popup della Guida diversi con informazioni aggiuntive.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **Esempio 2**  
  
 Nell'esempio seguente determina se l'utente ha premuto ALT + E, e se il puntatore del mouse è posizionato sul <xref:System.Windows.Forms.TreeNode>, consente all'utente di modifica che <xref:System.Windows.Forms.TreeNode>.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public bool Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Control { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Control : bool" Usage="System.Windows.Forms.KeyEventArgs.Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se è stato premuto il tasto CTRL.</summary>
        <value>
          <see langword="true" /> se è stato premuto il tasto CTRL; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Windows.Forms.Control.KeyDown> evento con la <xref:System.Windows.Forms.Help> classe per visualizzare una finestra popup della Guida per l'utente dell'applicazione. Nell'esempio viene utilizzato il <xref:System.Windows.Forms.KeyEventArgs> proprietà passate al metodo del gestore eventi per filtrare tutte le variazioni di premere il tasto F1 con un tasto di modifica. Quando l'utente preme qualsiasi variazione di F1 che include qualsiasi tasto di modifica, il <xref:System.Windows.Forms.Help> classe visualizza una finestra popup, simile a un <xref:System.Windows.Forms.ToolTip>, accanto al controllo. Se l'utente preme ALT + F2, viene visualizzato un messaggio popup della Guida diversi con informazioni aggiuntive.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Windows.Forms.KeyEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se l’evento è stato gestito.</summary>
        <value>
          <see langword="true" /> per ignorare la gestione predefinita del controllo; in caso contrario, <see langword="false" /> per passare anche l'evento insieme al gestore controlli predefinito.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> viene implementata differentemente dai diversi controlli all'interno di Windows Form. Per i controlli come <xref:System.Windows.Forms.TextBox> quali sottoclasse controlli nativi Win32, viene interpretato per indicare che il messaggio relativo ai tasti non deve essere passato al controllo nativo sottostante. Se si imposta `Handled` su true in un <xref:System.Windows.Forms.TextBox>, controllo non passerà alla pressione del tasto `events` per il controllo casella di testo Win32 sottostante, ma continuerà a visualizzare i caratteri inseriti dall'utente.  
  
 Se si desidera impedire la ricezione di un tasto, utilizzare il controllo corrente il <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente si determina se l'utente ha premuto un tasto non numerico, annullando in tal caso, il <xref:System.Windows.Forms.Control.KeyPress> evento usando il <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> proprietà.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyCode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys KeyCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys KeyCode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyCode As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys KeyCode { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyCode : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.KeyCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il codice di tastiera per un evento <see cref="E:System.Windows.Forms.Control.KeyDown" /> o <see cref="E:System.Windows.Forms.Control.KeyUp" />.</summary>
        <value>Valore <see cref="T:System.Windows.Forms.Keys" /> che rappresenta il codice di tastiera per l'evento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Gli esempi di codice seguente viene illustrato come utilizzare il <xref:System.Windows.Forms.KeyEventArgs.KeyCode%2A> proprietà per determinare quale chiave è stata premuta.  
  
 **Esempio 1**  
  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Windows.Forms.Control.KeyDown> evento con la <xref:System.Windows.Forms.Help> classe per visualizzare una finestra popup della Guida per l'utente dell'applicazione. Nell'esempio viene utilizzato il <xref:System.Windows.Forms.KeyEventArgs> proprietà passate al metodo del gestore eventi per filtrare tutte le variazioni di premere il tasto F1 con un tasto di modifica. Quando l'utente preme qualsiasi variazione di F1 che include qualsiasi tasto di modifica, il <xref:System.Windows.Forms.Help> classe visualizza una finestra popup, simile a un <xref:System.Windows.Forms.ToolTip>, accanto al controllo. Se l'utente preme ALT + F2, viene visualizzato un messaggio popup della Guida diversi con informazioni aggiuntive.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **Esempio 2**  
  
 Nell'esempio seguente determina se l'utente ha premuto ALT + E, e se il puntatore del mouse su un <xref:System.Windows.Forms.TreeNode>, consente all'utente di modifica che <xref:System.Windows.Forms.TreeNode>.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 **Esempio 3**  
  
 Nell'esempio seguente si determina se l'utente ha premuto un tasto non numerico, annullando in tal caso, il <xref:System.Windows.Forms.Control.KeyPress> evento usando il <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> proprietà.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyData" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyData As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys KeyData { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyData : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene i dati del tasto relativi a un evento <see cref="E:System.Windows.Forms.Control.KeyDown" /> o <see cref="E:System.Windows.Forms.Control.KeyUp" />.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.Keys" /> che rappresenta il codice del tasto premuto, combinato con eventuali flag di modifica che indicano quali tra i tasti CTRL, MAIUSC e ALT sono stati premuti contemporaneamente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare costanti <xref:System.Windows.Forms.Keys> per estrarre informazioni dal <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> proprietà. Utilizzare l'operatore AND bit per bit per confrontare i dati restituiti da <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> con le costanti <xref:System.Windows.Forms.Keys> per ottenere informazioni sui tasti premuti l'utente. Per determinare se è stato premuto un tasto di modifica specifica, usare il <xref:System.Windows.Forms.KeyEventArgs.Control%2A>, <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>, e <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> proprietà.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio report sull'occorrenza di un gestore eventi di <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> evento. Questo report consente di capire quando l'evento si verifica e può semplificare il debug. Per generare report su più eventi o per gli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di un tipo che eredita da <xref:System.Windows.Forms.Control>, ad esempio un <xref:System.Windows.Forms.Button> o <xref:System.Windows.Forms.ComboBox>. Quindi assegnare un nome dell'istanza `Control1` e assicurarsi che il gestore dell'evento è associato il <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]
 [!code-vb[System.Windows.Forms.EventExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      </Docs>
    </Member>
    <Member MemberName="KeyValue">
      <MemberSignature Language="C#" Value="public int KeyValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyValue As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyValue { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyValue : int" Usage="System.Windows.Forms.KeyEventArgs.KeyValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il valore di tastiera relativo a un evento <see cref="E:System.Windows.Forms.Control.KeyDown" /> o <see cref="E:System.Windows.Forms.Control.KeyUp" />.</summary>
        <value>La rappresentazione in Integer della proprietà <see cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio report sull'occorrenza di un gestore eventi di <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> evento. Questo report consente di capire quando l'evento si verifica e può semplificare il debug. Per generare report su più eventi o per gli eventi che si verificano di frequente, prendere in considerazione la sostituzione <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a una proprietà multiline <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza di un tipo che eredita da <xref:System.Windows.Forms.Control>, ad esempio un <xref:System.Windows.Forms.Button> o <xref:System.Windows.Forms.ComboBox>. Quindi assegnare un nome dell'istanza `Control1` e assicurarsi che il gestore dell'evento è associato il <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]
 [!code-vb[System.Windows.Forms.EventExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyData" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modifiers As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys Modifiers { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene i flag di modifica relativi a un evento <see cref="E:System.Windows.Forms.Control.KeyDown" /> o <see cref="E:System.Windows.Forms.Control.KeyUp" />. I flag indicano quale combinazione di tasti CTRL, MAIUSC e ALT è stata premuta.</summary>
        <value>Valore <see cref="T:System.Windows.Forms.Keys" /> che rappresenta uno o più flag di modifica.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per determinare se è stato premuto un tasto di modifica specifica, usare il <xref:System.Windows.Forms.KeyEventArgs.Control%2A>, <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>, e <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> proprietà. Flag di modifica possono essere combinati con OR bit per bit.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Windows.Forms.KeyEventArgs.Modifiers%2A> proprietà per determinare quali sono stati premuti di modifica insieme alla chiave primaria.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="Shift">
      <MemberSignature Language="C#" Value="public virtual bool Shift { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Shift" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Shift" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Shift As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Shift { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Shift : bool" Usage="System.Windows.Forms.KeyEventArgs.Shift" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se è stato premuto il tasto MAIUSC.</summary>
        <value>
          <see langword="true" />se è stato premuto il tasto MAIUSC; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente determina se l'utente ha premuto il tasto MAIUSC con il tasto F1 e se in tal caso, Visualizza la Guida.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="SuppressKeyPress">
      <MemberSignature Language="C#" Value="public bool SuppressKeyPress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SuppressKeyPress" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Property SuppressKeyPress As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SuppressKeyPress { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SuppressKeyPress : bool with get, set" Usage="System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se l'evento del tasto deve essere passato al controllo sottostante.</summary>
        <value>
          <see langword="true" /> se l'evento principale non deve essere inviato al controllo; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile assegnare `true` a questa proprietà in un gestore eventi, ad esempio <xref:System.Windows.Forms.Control.KeyDown> per evitare l'input dell'utente.  
  
 L'impostazione <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> al `true` imposta inoltre <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> a `true`.  
  
   
  
## Examples  
 Esempio di codice seguente impedisce le sequenze di tasti numerici di raggiungere il <xref:System.Windows.Forms.TextBox> controllo denominato `textBox1`.  
  
 [!code-csharp[KeyEventArgs.SuppressKeyPress#1](~/samples/snippets/csharp/VS_Snippets_Winforms/keyeventargs.suppresskeypress/cs/form1.cs#1)]
 [!code-vb[KeyEventArgs.SuppressKeyPress#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/keyeventargs.suppresskeypress/vb/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Handled" />
      </Docs>
    </Member>
  </Members>
</Type>