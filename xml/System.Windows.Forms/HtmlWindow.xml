<Type Name="HtmlWindow" FullName="System.Windows.Forms.HtmlWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="32a612acbed82ed3d57b73ef8f0e96bed641e900" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34452307" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HtmlWindow" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlWindow extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlWindow" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlWindow" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlWindow sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rappresenta la finestra logica contenente una o più istanze di <see cref="T:System.Windows.Forms.HtmlDocument" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow> non deve essere confuso con il concetto di una finestra in Windows Form o dell'API Win32. non esiste alcun `HWND` o una risorsa Windows simile che corrisponde direttamente a un'istanza di <xref:System.Windows.Forms.HtmlWindow>. Piuttosto, <xref:System.Windows.Forms.HtmlWindow> fornisce le descrizioni di alto livello di un percorso del documento su un utente sullo schermo, nonché metodi per interagire con gli utenti tramite le richieste e le finestre di dialogo. <xref:System.Windows.Forms.HtmlWindow> funge da contenitore logico per i documenti di una pagina Web e i relativi metadati, ad esempio il percorso del documento e le funzionalità del browser Web.  
  
 Pagina è costituita da un singolo documento Web o per un `FRAMESET` contenente uno o più `FRAME` elementi, ognuno dei quali contiene il proprio documento. Gli sviluppatori Web utilizzano pagine con frame per visualizzare le pagine correlate logicamente side-by (ad esempio, una pagina di contenuto accanto a una pagina di spostamento). Quando una pagina è costituita da un unico documento, è possibile accedervi tramite la <xref:System.Windows.Forms.HtmlWindow.Document%2A> proprietà di <xref:System.Windows.Forms.HtmlWindow>; se utilizza la pagina con frame, è possibile accedere ai relativi documenti tramite il <xref:System.Windows.Forms.HtmlWindow.Frames%2A> insieme, costituito da uno o più <xref:System.Windows.Forms.HtmlWindow> oggetti.  
  
 Quando l'host di <xref:System.Windows.Forms.WebBrowser> controllo in un'applicazione Windows Form, è possibile scegliere di interagire con l'utente utilizzando le classi di Windows Form standard, ad esempio <xref:System.Windows.Forms.Form> o <xref:System.Windows.Forms.MessageBox>, oppure è possibile utilizzare i metodi su <xref:System.Windows.Forms.HtmlWindow> definiti per questo scopo. Il <xref:System.Windows.Forms.HtmlWindow.Alert%2A> metodo presenta una semplice finestra di dialogo con testo personalizzato e un **OK** pulsante; <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> presenta all'utente; una riga di testo personalizzato e un campo di input di testo e <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> presenta una finestra di dialogo con una riga di testo personalizzato e **OK** e **Annulla** pulsanti.  
  
 È possibile utilizzare <xref:System.Windows.Forms.HtmlWindow> per aprire nuove finestre contenenti i nuovi documenti. <xref:System.Windows.Forms.HtmlWindow.Open%2A> Carica l'URL specificato nella finestra specificata, creandolo se non esiste già, mentre <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> apre sempre l'URL in una finestra appena creata.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito contiene due metodi. Il primo apre un URL in una finestra denominata `displayWindow`, che viene creato con una barra di stato. Il secondo consente di aprire un altro URL nella stessa finestra, ma specifica che deve essere visualizzata solo la barra del percorso. Si noti che le dimensioni della finestra e i controlli che vengono visualizzati a seconda dei casi in cui URL viene aperto per primo. L'esempio di codice richiede che il modulo contiene un <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Alert">
      <MemberSignature Language="C#" Value="public void Alert (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Alert(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Alert(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Alert (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Alert(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Oggetto <see cref="T:System.String" /> da visualizzare nella finestra di messaggio.</param>
        <summary>Visualizza una finestra di messaggio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.MessageBox> classe fornisce una versione più potente del <xref:System.Windows.Forms.HtmlWindow.Alert%2A> metodo.  
  
 Sebbene <xref:System.Windows.Forms.HtmlWindow.Alert%2A> accetta testo Unicode come input, il prompt dei comandi script di Internet Explorer non visualizzerà il testo di alfabeto non latino in modo appropriato in Windows 95, Windows 98, Windows ME o Windows NT a causa di limitazioni del sistema operativo. Per ulteriori informazioni, vedere [INFO: Internet Explorer Script Prompts e MBCS/Unicode](http://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nome dell'evento da gestire.</param>
        <param name="eventHandler">Riferimento al codice gestito che gestisce l'evento.</param>
        <summary>Aggiunge un gestore eventi per l'evento HTML DOM specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non connettersi un evento a un documento HTML o uno dei relativi oggetti fino a quando il documento ha completato il caricamento. È necessario chiamare questo metodo prima di <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> evento del <xref:System.Windows.Forms.WebBrowser> controllo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude la finestra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Windows.Forms.HtmlWindow.IsClosed%2A> proprietà per determinare se la finestra è già chiuso. Se la finestra è già stato chiuso, questo metodo non avrà effetto.  
  
 Quando si creano nuove finestre mediante <xref:System.Windows.Forms.HtmlWindow.Open%2A> o <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, <xref:System.Windows.Forms.HtmlWindow.Close%2A> fa sì che il modello a oggetti documento HTML aprire una nuova istanza di Internet Explorer. Se non si chiama <xref:System.Windows.Forms.HtmlWindow.Close%2A> su tutte le finestre è stato creato, questa istanza di Internet Explorer rimarrà in esecuzione anche dopo la chiusura dell'applicazione.  
  
   
  
## Examples  
 Esempio di codice seguente apre una finestra e viene chiuso se l'utente ha ancora utilizzato negli ultimi cinque minuti. L'esempio di codice è stato scritto con il presupposto che il modulo contiene un <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`, <xref:System.Windows.Forms.Button> denominato `Button1`e un <xref:System.Windows.Forms.Timer> classe denominata `Timer1`. Per eseguire correttamente questo esempio, modificare il primo argomento fornito a <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> a un URL valido.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public bool Confirm (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Confirm(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Confirm(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confirm (message As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Confirm(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Testo da visualizzare all'utente.</param>
        <summary>Visualizza una finestra di dialogo con un messaggio e i pulsanti Yes e No.</summary>
        <returns>
          <see langword="true" /> se l'utente ha fatto clic su **Sì**; <see langword="false" /> se l'utente ha fatto clic su **No** o se ha chiuso la finestra di dialogo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> Visualizza una finestra di dialogo modale. l'utente non sarà in grado di accedere alla pagina HTML sottostante è necessario chiudere questa finestra di dialogo.  
  
 Sebbene <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> accetta testo Unicode come input, il prompt dei comandi script di Internet Explorer non visualizzerà il testo di alfabeto non latino in modo appropriato in Windows 95, Windows 98, Windows ME o Windows NT a causa di limitazioni del sistema operativo. Per ulteriori informazioni, vedere [INFO: Internet Explorer Script Prompts e MBCS/Unicode](http://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
   
  
## Examples  
 Copiare il codice HTML seguente e salvarlo in un formato denominato OrderForm. htm:  
  
 `<HTML>`  
  
 `<BODY>`  
  
 `<FORM name="NewOrderForm">`  
  
 `Select Part Type:`  
  
 `<SELECT name="PartType">`  
  
 `<OPTION>AZ-3700`  
  
 `<OPTION>AZ-3701`  
  
 `<OPTION>AZ-3702`  
  
 `<SELECT><br>`  
  
 `Quantity: <INPUT type="text" name="PartQty" size="2" maxsize="2"><br>`  
  
 `Building/Desk:`  
  
 `<INPUT type="text" name="PartBuilding" size="2" maxsize="2"> /`  
  
 `<INPUT type="text" name="PartDesk" size="2" maxsize="2"><p>`  
  
 `<INPUT type="submit" value="Transmit Order">`  
  
 `</FORM>`  
  
 `</BODY>`  
  
 `</HTML>`  
  
 Nell'esempio di codice riportato di seguito viene visualizza una <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> la finestra di dialogo quando l'utente invia `NewOrderForm`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nome dell'evento da gestire.</param>
        <param name="eventHandler">Riferimento al codice gestito che gestisce l'evento.</param>
        <summary>Rimuove il gestore eventi specificato.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlDocument ^ Document { System::Windows::Forms::HtmlDocument ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il documento HTML contenuto nella finestra.</summary>
        <value>Istanza valida di <see cref="T:System.Windows.Forms.HtmlDocument" />, se è caricato un documento. Se questa finestra contiene un <c>FRAMESET</c>, o è attualmente caricato alcun documento, verrà restituito <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, si accederà il <xref:System.Windows.Forms.HtmlWindow.Document%2A> tramite il <xref:System.Windows.Forms.WebBrowser.Document%2A> proprietà del <xref:System.Windows.Forms.WebBrowser> controllo. Utilizzare questa proprietà quando è necessario accedere a un documento all'interno di un `FRAME` utilizzando il <xref:System.Windows.Forms.HtmlWindow.Frames%2A> insieme.  
  
   
  
## Examples  
 Esempio di codice seguente analizza ciascun documento all'interno di una pagina contenente frame e crea una tabella di tutti i collegamenti in uscita da ogni pagina per l'ispezione future.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DomWindow">
      <MemberSignature Language="C#" Value="public object DomWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomWindow As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomWindow { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'interfaccia non gestita di cui è stato eseguito il wrapping in questa classe.</summary>
        <value>Oggetto che può essere convertito in un <see langword="IHTMLWindow2" />, <see langword="IHTMLWindow3" />, o <see langword="IHTMLWindow4" /> puntatore.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare i puntatori di interfaccia non gestita sottostante per il provider di servizi Internet (DOM, Document Object Model) per eseguire i metodi non esposti da <xref:System.Windows.Forms.HtmlWindow>.  
  
 È necessario aggiungere un riferimento di MSHTML non gestita per poter utilizzare <xref:System.Windows.Forms.HtmlWindow.DomWindow%2A>. Per ulteriori informazioni, vedere [l'importazione di una libreria dei tipi come Assembly](~/docs/framework/interop/importing-a-type-library-as-an-assembly.md).  
  
   
  
## Examples  
 Il codice seguente viene ottenuto un `IHTMLWindow2` puntatore da un documento della finestra e viene visualizzato un nuovo documento in una finestra modale.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto da testare.</param>
        <summary>Verifica l'uguaglianza dell'oggetto relativamente a quello corrente.</summary>
        <returns>
          <see langword="true" /> se gli oggetti sono uguali. In caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As HtmlElementErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementErrorEventHandler ^ Error;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in caso di errore di runtime in uno script in esecuzione all'interno della finestra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pagine HTML possono contenere codice di script, in genere scritto in JScript o VBScript, che viene eseguito quando viene caricata una pagina. <xref:System.Windows.Forms.HtmlWindow.Error> si verifica ogni volta che uno script rileva un errore di run-time. Poiché il codice di script è ad associazione tardiva, il che significa che le chiamate rispetto all'oggetto non sono risolti solo in fase di esecuzione, possono includere errori di tutti i dati da un oggetto null alla chiamata undefined (proprietà) o un metodo di riferimento.  
  
 È possibile impostare il <xref:System.Windows.Forms.HtmlElementErrorEventArgs.Handled%2A> proprietà <xref:System.Windows.Forms.HtmlElementErrorEventArgs> su true per impedire la visualizzazione del messaggio di errore nativo in Internet Explorer.
  
   
  
## Examples  
 L'esempio di codice seguente viene rilevato l'errore che i risultati quando uno script in una pagina HTML tenta di accedere a un oggetto che non è definito nel documento. La pagina deve essere caricata completamente prima di <xref:System.Windows.Forms.HtmlWindow.Error> è associato il gestore eventi, in caso contrario l'esempio non funzionerà.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#16)]
 [!code-vb[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Assegna lo stato attivo alla finestra corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un'altra finestra mantenuto lo stato attivo prima di <xref:System.Windows.Forms.HtmlWindow.Focus%2A> è stato chiamato, quest ' ultima perderà lo stato attivo.  
  
 Non chiamare lo stato attivo su un elemento all'interno di una finestra fino alla finestra <xref:System.Windows.Forms.HtmlWindow.Load> è stato generato l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Frames">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindowCollection Frames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindowCollection Frames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Frames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Frames As HtmlWindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindowCollection ^ Frames { System::Windows::Forms::HtmlWindowCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un riferimento a ogni elemento <c>FRAME</c> definito nella pagina Web.</summary>
        <value>Un <see cref="T:System.Windows.Forms.HtmlWindowCollection" /> di un documento <c>FRAME</c> e <c>IFRAME</c> oggetti.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto `FRAME` è un set di finestre definite all'interno di un `FRAMESET`. `FRAME`consente all'hosting di più documenti all'interno di un singolo documento. Ogni `FRAME` è definito come una determinata larghezza di riga e colonna e viene posizionato nella pagina in relazione a altra `FRAME`definiti all'interno di `FRAMESET`; la posizione di un `FRAME` è fissa, anche se in alcuni casi l'utente può utilizzare il mouse cursore di espansione o riduzione di `FRAME`. Un `IFRAME` è simile a un frame, ma non deve essere ancorato in una posizione fissa.  
  
 I frame conterranno una sola istanza di <xref:System.Windows.Forms.HtmlWindow> per ogni `FRAME` o `IFRAME` definiti all'interno di una pagina Web.  
  
   
  
## Examples  
 Esempio di codice seguente analizza ciascun documento all'interno di una pagina contenente frame e crea una tabella di tutti i collegamenti in uscita da ogni pagina per l'ispezione future.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Viene usato come funzione hash per un tipo specifico.</summary>
        <returns>Codice hash per l'oggetto <see cref="T:System.Windows.Forms.HtmlWindow" /> corrente.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ GotFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando la finestra corrente riceve lo stato attivo per l'input dell'utente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.GotFocus> si verifica per:  
  
-   La prima finestra in un `FRAMESET` quando il `FRAMESET` primo caricamento.  
  
-   Il `FRAME` che ultimo ha lo stato attivo quando la finestra contenente il <xref:System.Windows.Forms.WebBrowser> controllo viene portato in primo piano.  
  
-   Oggetto `FRAME` selezionato dall'utente, ma solo se clic dell'utente non seleziona un elemento all'interno della finestra.  
  
 Non è possibile annullare l'azione predefinita per il <xref:System.Windows.Forms.HtmlWindow.GotFocus> evento, o impedirne la propagazione.
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio, un gestore eventi genera report sull'occorrenza del <xref:System.Windows.Forms.HtmlWindow.GotFocus> evento. Questo report consente di capire quando l'evento si verifica e possa agevolare il debug.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza del tipo <xref:System.Windows.Forms.HtmlWindow> denominato `HtmlWindow1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlWindow.GotFocus> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#452](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#452)]
 [!code-vb[System.Windows.Forms.EventExamples#452](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#452)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="History">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlHistory History { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlHistory History" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.History" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property History As HtmlHistory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlHistory ^ History { System::Windows::Forms::HtmlHistory ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlHistory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto contenente gli URL visitati di recente dall'utente.</summary>
        <value>
          <see cref="T:System.Windows.Forms.HtmlHistory" /> della finestra corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.History%2A> contiene tutti gli URL all'interno della finestra corrente, che viene definita il *stack di navigazione*e fornisce metodi per tornare a questi documenti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la finestra è aperta o chiusa.</summary>
        <value>
          <see langword="true" /> se la finestra è ancora aperta sullo schermo; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Windows.Forms.HtmlWindow> è stata chiusa dall'utente o tramite una chiamata al <xref:System.Windows.Forms.HtmlWindow.Close%2A> (metodo), il tentativo di passare a un nuovo URL o il documento della finestra di accesso verrà generato un errore. Utilizzare questa proprietà per determinare se è possibile chiamare i metodi e proprietà sull'oggetto finestra corrente.  
  
   
  
## Examples  
 Esempio di codice seguente apre una finestra e viene chiuso se l'utente ha ancora utilizzato negli ultimi cinque minuti. L'esempio di codice richiede che il form abbia un <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`, <xref:System.Windows.Forms.Button> denominato `Button1`e un <xref:System.Windows.Forms.Timer> classe denominata `Timer1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Load;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Load" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Load" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Load As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Load;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il documento della finestra e tutti i relativi elementi sono stati inizializzati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.HtmlWindow.Load> evento è simile al <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> evento il <xref:System.Windows.Forms.WebBrowser> controllo: indica che è possibile l'accesso HTML agli elementi all'interno del documento.  
  
 Non è possibile annullare l'azione predefinita per il <xref:System.Windows.Forms.HtmlWindow.Load> evento.
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio, un gestore eventi genera report sull'occorrenza del <xref:System.Windows.Forms.HtmlWindow.Load> evento. Questo report consente di capire quando l'evento si verifica e possa agevolare il debug. Per generare un report su più eventi o per gli eventi che si verificano di frequente, è possibile sostituire <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a un controllo <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza del tipo <xref:System.Windows.Forms.HtmlWindow> denominato `HtmlWindow1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlWindow.Load> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#453](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#453)]
 [!code-vb[System.Windows.Forms.EventExamples#453](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#453)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LostFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando la finestra ha perso lo stato attivo per l'input dell'utente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio, un gestore eventi genera report sull'occorrenza del <xref:System.Windows.Forms.HtmlWindow.LostFocus> evento. Questo report consente di capire quando l'evento si verifica e possa agevolare il debug.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza del tipo <xref:System.Windows.Forms.HtmlWindow> denominato `HtmlWindow1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlWindow.LostFocus> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#454](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#454)]
 [!code-vb[System.Windows.Forms.EventExamples#454](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#454)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sposta la finestra in corrispondenza delle coordinate specificate sullo schermo.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Coordinate x e y dell'angolo superiore sinistro della finestra.</param>
        <summary>Sposta la finestra in corrispondenza delle coordinate specificate sullo schermo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non è possibile utilizzare <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> per spostare una finestra all'esterno del bordo visibile dello schermo; questo metodo è disponibile anche tramite script in una pagina Web e consentire a uno script non attendibile rendere invisibili le finestre non è considerata sicura.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> verrà generato un <xref:System.UnauthorizedAccessException> se la finestra in cui si sta tentando di spostare e la relativa finestra padre dispone di diversi domini di primo livello. Ad esempio, se si ospita il <xref:System.Windows.Forms.WebBrowser> controllo puntando a a.adatum.com, creare una nuova finestra utilizzando <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> per visualizzare b.adatum.com. In questo caso, entrambe le finestre vengono considerati come parte dello stesso dominio di primo livello e non viene generata l'eccezione. Tuttavia, se si chiama <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> per visualizzare www.microsoft.com, le due finestre avranno ora diversi domini di primo livello e <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> operazione determinerà l'eccezione da generare.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Il codice che sta tentando di eseguire questa operazione non dispone dell'autorizzazione per modificare la finestra corrente.</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Coordinata x dell'angolo superiore sinistro della finestra.</param>
        <param name="y">Coordinata y dell'angolo superiore sinistro della finestra.</param>
        <summary>Sposta la finestra in corrispondenza delle coordinate specificate sullo schermo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non è possibile utilizzare <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> per spostare una finestra all'esterno del bordo visibile dello schermo; questo metodo è disponibile anche tramite script in una pagina Web e consentire a uno script non attendibile rendere invisibili le finestre non è considerata sicura.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> verrà generato un <xref:System.UnauthorizedAccessException> se la finestra in cui si sta tentando di spostare e la relativa finestra padre dispone di diversi domini di primo livello. Ad esempio, se si ospita il <xref:System.Windows.Forms.WebBrowser> controllo e si sta puntando a a.adatum.com, si crea una nuova finestra utilizzando <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> per visualizzare b.adatum.com. In questo caso, entrambe le finestre vengono considerati come parte dello stesso dominio di primo livello e non viene generata l'eccezione. Tuttavia, se si chiama <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> per visualizzare www.microsoft.com, le due finestre avranno ora diversi domini di primo livello e <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> operazione determinerà l'eccezione da generare.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Il codice che sta tentando di eseguire questa operazione non dispone dell'autorizzazione per modificare la finestra corrente.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome della finestra.</summary>
        <value>Oggetto <see cref="T:System.String" /> che rappresenta il nome.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Navigate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Visualizza o scarica il nuovo contenuto disponibile nell'URL specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (string urlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(string urlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (urlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(System::String ^ urlString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">Risorsa da visualizzare, specificata tramite un URL.</param>
        <summary>Visualizza o scarica il nuovo contenuto disponibile nell'URL specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il `url` parametro punta a una pagina HTML, la pagina attualmente visualizzata nella finestra verrà eliminata e sostituita con la nuova pagina; tutti i riferimenti presenti nell'applicazione agli oggetti DOM gestiti nella pagina precedente non saranno più validi. Se `url` punta a una risorsa che non possono essere visualizzati da Internet Explorer, l'utente verrà visualizzata la finestra di dialogo che chiede se si desidera aprire la risorsa all'esterno dell'applicazione, salvarla su disco o annullare l'operazione di download.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(class System.Uri url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (url As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(Uri ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="url">Posizione, specificata come <see cref="T:System.Uri" />, del documento o dell'oggetto da visualizzare nella finestra corrente.</param>
        <summary>Visualizza un nuovo documento nella finestra corrente.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Equality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">Primo oggetto <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <param name="right">Secondo oggetto <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <summary>Verifica l'uguaglianza dei due oggetti <see cref="T:System.Windows.Forms.HtmlWindow" />.</summary>
        <returns>
          <see langword="true" /> se entrambi i parametri sono <see langword="null" /> oppure se entrambi gli elementi hanno la stessa interfaccia COM sottostante; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I test di operatore di uguaglianza di `IUnknown` puntatori di oggetti COM sottostanti di cui è stato eseguito il wrapping fornito <xref:System.Windows.Forms.HtmlWindow> classi.  
  
 Il metodo equivalente per l'operatore è <xref:System.Windows.Forms.HtmlWindow.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Inequality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">Primo oggetto <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <param name="right">Secondo oggetto <see cref="T:System.Windows.Forms.HtmlWindow" />.</param>
        <summary>Verifica la disuguaglianza dei due oggetti <see langword="HtmlWindow" />.</summary>
        <returns>
          <see langword="true" /> se uno solo dei due oggetti è <see langword="null" /> oppure i puntatori COM sottostanti non corrispondono; in caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Visualizza un file nella finestra specificata.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (string urlString, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(string urlString, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (urlString As String, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(System::String ^ urlString, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="urlString">URL che descrive il percorso del file da caricare.</param>
        <param name="target">Nome della finestra in cui aprire la risorsa. Può essere un nome specificato dallo sviluppatore o uno dei valori speciali seguenti:  <c>_blank</c>: apre <c>url</c> in una nuova finestra. È equivalente a una chiamata al metodo <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: apre <c>url</c> nella barra multimediale.  
  
 <c>_parent</c>: apre <c>url</c> nella finestra che ha creato la finestra corrente.  
  
 <c>_search</c>:apre <c>url</c> nella barra di ricerca.  
  
 <c>_self</c>: apre <c>url</c> nella finestra corrente.  
  
 <c>_top</c>: se viene chiamato su una finestra appartenente a un elemento <c>FRAME</c>, apre <c>url</c> nella finestra che ospita <c>FRAMESET</c>. In caso contrario, è equivalente a <c>_self</c>.</param>
        <param name="windowOptions">Stringa delimitata da virgole composta da zero o più delle seguenti opzioni nel formato <c>nome=valore</c>. A eccezione delle opzioni <c>left</c>, <c>top</c>, <c>height</c> e <c>width</c> che accettano numeri interi arbitrari, ogni opzione accetta come valori validi <c>yes</c> o <see langword="1" /> e <c>no</c> o <see langword="0" />.  
  
 <c>channelmode</c>: usato con la tecnologia dei canali deprecata di Internet Explorer 4.0. L'impostazione predefinita è <c>no</c>.  
  
 <c>directories</c>: se nella finestra devono essere visualizzati i pulsanti di navigazione tra le directory. L'impostazione predefinita è <c>yes</c>.  
  
 <c>height</c>: altezza, in pixel, dell'area client della finestra. Il valore minimo è 100. Se si tenta di aprire una finestra più piccola, quest'ultima verrà aperta usando le impostazioni predefinite di Internet Explorer.  
  
 <c>left</c>: posizione sinistra della finestra (coordinata x), in pixel, rispetto all'angolo superiore sinistro della schermata dell'utente. Deve essere un numero intero positivo.  
  
 <c>location</c>: se deve essere visualizzata la barra degli indirizzi, che consente agli utenti di spostare la finestra in un nuovo URL. L'impostazione predefinita è <c>yes</c>.  
  
 <c>menubar</c>: se nella nuova finestra devono essere visualizzati i menu. L'impostazione predefinita è <c>yes</c>.  
  
 <c>resizable</c>: se la finestra può essere ridimensionata dall'utente. L'impostazione predefinita è <c>yes</c>.  
  
 <c>scrollbars</c>: se nella finestra sono presenti le barre di scorrimento orizzontale e verticale. L'impostazione predefinita è <c>yes</c>.  
  
 <c>status</c>: se nella parte inferiore della finestra è presente una barra di stato. L'impostazione predefinita è <c>yes</c>.  
  
 <c>titlebar</c>: se viene visualizzato il titolo della pagina corrente. L'impostazione di questa opzione su <c>no</c> non ha alcun effetto in un'applicazione gestita, perché la barra del titolo verrà sempre visualizzata.  
  
 <c>toolbar</c>: se vengono visualizzati i pulsanti della barra degli strumenti, ad esempio **Indietro**, **Avanti** e **Interrompi**. L'impostazione predefinita è <c>yes</c>.  
  
 <c>top</c>: posizione superiore della finestra (coordinata y), in pixel, rispetto all'angolo superiore sinistro della schermata dell'utente. Deve essere un numero intero positivo.  
  
 <c>width</c>: larghezza, in pixel, dell'area client della finestra. Il valore minimo è 100. Se si tenta di aprire una finestra più piccola, quest'ultima verrà aperta usando le impostazioni predefinite di Internet Explorer.</param>
        <param name="replaceEntry">Se l'indirizzo specificato nel parametro <c>url</c> deve sostituire l'URL della finestra corrente nella cronologia di navigazione. Questa impostazione influirà sul funzionamento dei metodi sulla classe <see cref="T:System.Windows.Forms.HtmlHistory" />.</param>
        <summary>Visualizza un file nella finestra specificata.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.HtmlWindow" /> che rappresenta la nuova finestra oppure la finestra creata precedentemente specificata dal parametro <paramref name="target" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `target` parametro può specificare una finestra in cui è stata creata come risultato di una chiamata precedente a <xref:System.Windows.Forms.HtmlWindow.Open%2A>. Il parametro può inoltre fare riferimento a una finestra aperta facendo clic su un collegamento ipertestuale (`A` elemento) o un `FORM` elemento che utilizza il `TARGET` attributo per aprire il relativo URL in una nuova finestra. Il seguente codice HTML verrà aperta una nuova finestra denominata `orderWindow` quando l'utente fa clic:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 Se vengono fornite opzioni per il `windowOptions` parametro, qualsiasi opzione non è inclusa automaticamente è disabilitato. In altre parole, se si specifica solo per mezzo di `windowOptions` che si desidera una barra di stato, quindi la barra dei menu, sulla barra degli strumenti, titolo, le barre di scorrimento e così via non essere visualizzati a meno che vengano attivate esplicitamente per mezzo di `windowOptions`.  
  
 Se il file a cui fa riferimento `url` è un file HTML, file di testo o di altro tipo di file che può essere ospitato all'interno di Internet Explorer, verrà visualizzato nella finestra specificata. Se il file non può essere visualizzato all'interno di Internet Explorer, la finestra specificata dalla destinazione non esiste già, quindi verrà aperta la finestra solo lungo per Internet Explorer scaricare la risorsa. verranno chiuse immediatamente in un secondo momento.  
  
 Quando si creano nuove finestre mediante <xref:System.Windows.Forms.HtmlWindow.Open%2A> o <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, fa sì che il modello a oggetti documento HTML aprire una nuova istanza di Internet Explorer. Se non si chiama <xref:System.Windows.Forms.HtmlWindow.Close%2A> su tutte le finestre è stato creato, questa istanza di Internet Explorer rimarrà in esecuzione anche dopo la chiusura dell'applicazione.  
  
 Se si utilizza <xref:System.Windows.Forms.HtmlWindow.Open%2A> per caricare un URL in una finestra esistente, `windowOptions` verranno ignorate; finestra verrà mantenute le dimensioni, l'aspetto e la posizione sullo schermo specificati dalla chiamata iniziale a. <xref:System.Windows.Forms.HtmlWindow.Open%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (Uri url, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(class System.Uri url, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.Uri,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (url As Uri, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(Uri ^ url, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="url">URL che descrive il percorso del file da caricare.</param>
        <param name="target">Nome della finestra in cui aprire la risorsa. Può essere un nome specificato dallo sviluppatore o uno dei valori speciali seguenti:  <c>_blank</c>: apre <c>url</c> in una nuova finestra. È equivalente a una chiamata al metodo <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: apre <c>url</c> nella barra multimediale.  
  
 <c>_parent</c>: apre <c>url</c> nella finestra che ha creato la finestra corrente.  
  
 <c>_search</c>:apre <c>url</c> nella barra di ricerca.  
  
 <c>_self</c>: apre <c>url</c> nella finestra corrente.  
  
 <c>_top</c>: se viene chiamato su una finestra appartenente a un elemento <c>FRAME</c>, apre <c>url</c> nella finestra che ospita <c>FRAMESET</c>. In caso contrario, è equivalente a <c>_self</c>.</param>
        <param name="windowOptions">Stringa delimitata da virgole composta da zero o più delle seguenti opzioni nel formato <c>nome=valore</c>. A eccezione delle opzioni <c>left</c>, <c>top</c>, <c>height</c> e <c>width</c> che accettano numeri interi arbitrari, ogni opzione accetta come valori validi <c>yes</c> o <see langword="1" /> e <c>no</c> o <see langword="0" />.  
  
 <c>channelmode</c>: usato con la tecnologia dei canali deprecata di Internet Explorer 4.0. L'impostazione predefinita è <c>no</c>.  
  
 <c>directories</c>: se nella finestra devono essere visualizzati i pulsanti di navigazione tra le directory. L'impostazione predefinita è <c>yes</c>.  
  
 <c>height</c>: altezza, in pixel, dell'area client della finestra. Il valore minimo è 100. Se si tenta di aprire una finestra più piccola, quest'ultima verrà aperta usando le impostazioni predefinite di Internet Explorer.  
  
 <c>left</c>: posizione sinistra della finestra (coordinata x), in pixel, rispetto all'angolo superiore sinistro della schermata dell'utente. Deve essere un numero intero positivo.  
  
 <c>location</c>: se deve essere visualizzata la barra degli indirizzi, che consente agli utenti di spostare la finestra in un nuovo URL. L'impostazione predefinita è <c>yes</c>.  
  
 <c>menubar</c>: se nella nuova finestra devono essere visualizzati i menu. L'impostazione predefinita è <c>yes</c>.  
  
 <c>resizable</c>: se la finestra può essere ridimensionata dall'utente. L'impostazione predefinita è <c>yes</c>.  
  
 <c>scrollbars</c>: se nella finestra sono presenti le barre di scorrimento orizzontale e verticale. L'impostazione predefinita è <c>yes</c>.  
  
 <c>status</c>: se nella parte inferiore della finestra è presente una barra di stato. L'impostazione predefinita è <c>yes</c>.  
  
 <c>titlebar</c>: se viene visualizzato il titolo della pagina corrente. L'impostazione di questa opzione su <c>no</c> non ha alcun effetto in un'applicazione gestita, perché la barra del titolo verrà sempre visualizzata.  
  
 <c>toolbar</c>: se vengono visualizzati i pulsanti della barra degli strumenti, ad esempio **Indietro**, **Avanti** e **Interrompi**. L'impostazione predefinita è <c>yes</c>.  
  
 <c>top</c>: posizione superiore della finestra (coordinata y), in pixel, rispetto all'angolo superiore sinistro della schermata dell'utente. Deve essere un numero intero positivo.  
  
 <c>width</c>: larghezza, in pixel, dell'area client della finestra. Il valore minimo è 100. Se si tenta di aprire una finestra più piccola, quest'ultima verrà aperta usando le impostazioni predefinite di Internet Explorer.</param>
        <param name="replaceEntry">Se l'indirizzo specificato nel parametro <c>url</c> deve sostituire l'URL della finestra corrente nella cronologia di navigazione. Questa impostazione influirà sul funzionamento dei metodi sulla classe <see cref="T:System.Windows.Forms.HtmlHistory" />.</param>
        <summary>Visualizza un file nella finestra specificata.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.HtmlWindow" /> che rappresenta la nuova finestra oppure la finestra creata precedentemente specificata dal parametro <paramref name="target" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `target` parametro può specificare una finestra in cui è stata creata come risultato di una chiamata precedente a <xref:System.Windows.Forms.HtmlWindow.Open%2A>. Il parametro può inoltre fare riferimento a una finestra aperta facendo clic su un collegamento ipertestuale (`A` elemento) o un `FORM` elemento che utilizza il `TARGET` attributo per aprire il relativo URL in una nuova finestra. Il seguente codice HTML verrà aperta una nuova finestra denominata `orderWindow` quando l'utente fa clic:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 Se vengono fornite opzioni per il `windowOptions` parametro, qualsiasi opzione non è inclusa automaticamente è disabilitato. In altre parole, se si specifica solo per mezzo di `windowOptions` che si desidera una barra di stato, quindi la barra dei menu, sulla barra degli strumenti, titolo, le barre di scorrimento e così via non essere visualizzati a meno che vengano attivate esplicitamente per mezzo di `windowOptions`.  
  
 Se il file a cui fa riferimento `url` è un file HTML, file di testo o di altro tipo di file che può essere ospitato all'interno di Internet Explorer, verrà visualizzato nella finestra specificata. Se il file non può essere visualizzato all'interno di Internet Explorer, la finestra specificata dalla destinazione non esiste già, quindi verrà aperta la finestra solo lungo per Internet Explorer scaricare la risorsa. verranno chiuse immediatamente in un secondo momento.  
  
 Quando si creano nuove finestre mediante <xref:System.Windows.Forms.HtmlWindow.Open%2A> o <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, fa sì che il modello a oggetti documento HTML aprire una nuova istanza di Internet Explorer. Se non si chiama <xref:System.Windows.Forms.HtmlWindow.Close%2A> su tutte le finestre è stato creato, questa istanza di Internet Explorer rimarrà in esecuzione anche dopo la chiusura dell'applicazione.  
  
 Se si utilizza <xref:System.Windows.Forms.HtmlWindow.Open%2A> per caricare un URL in una finestra esistente, `windowOptions` verranno ignorate; finestra verrà mantenute le dimensioni, l'aspetto e la posizione sullo schermo specificati dalla chiamata iniziale a. <xref:System.Windows.Forms.HtmlWindow.Open%2A> .  
  
   
  
## Examples  
 Esempio di codice riportato di seguito contiene due metodi:  
  
-   Il primo apre un URL in una finestra denominata `displayWindow`, che viene creato con una barra di stato.  
  
-   Il secondo consente di aprire un altro URL nella stessa finestra, ma specifica che deve essere visualizzata solo la barra del percorso.  
  
 Si noti che le dimensioni della finestra e i controlli che vengono visualizzati a seconda dei casi in cui URL viene aperto per primo. L'esempio di codice richiede che il modulo contiene un <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Opener">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Opener { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Opener" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Opener" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Opener As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Opener { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un riferimento alla finestra che ha aperto la finestra corrente.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.HtmlWindow" /> creato mediante una chiamata ai metodi <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> o <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />. Se la finestra non è stata creata mediante uno di questi metodi, verrà restituito <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenNew">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Visualizza un file in una nuova finestra.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (string urlString, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(string urlString, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (urlString As String, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(System::String ^ urlString, System::String ^ windowOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">URL che descrive il percorso del file da caricare.</param>
        <param name="windowOptions">Stringa delimitata da virgole composta da zero o più delle seguenti opzioni nel formato <c>nome=valore</c>. Per una descrizione completa delle opzioni valide, vedere <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />.</param>
        <summary>Visualizza un file in una nuova finestra.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.HtmlWindow" /> che rappresenta la nuova finestra.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il file a cui fa riferimento `url` è un file HTML, file di testo o di altro tipo di file che può essere ospitato all'interno di Internet Explorer, verrà visualizzato in una nuova finestra. Se il file non può essere visualizzato all'interno di Internet Explorer, quindi verrà aperta la finestra solo lungo per Internet Explorer scaricare la risorsa. verranno chiuse immediatamente in un secondo momento.  
  
 Quando si creano nuove finestre mediante <xref:System.Windows.Forms.HtmlWindow.Open%2A> o <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, fa sì che il modello a oggetti documento HTML aprire una nuova istanza di Internet Explorer. Se non si chiama <xref:System.Windows.Forms.HtmlWindow.Close%2A> su tutte le finestre è stato creato, questa istanza di Internet Explorer rimarrà in esecuzione anche dopo la chiusura dell'applicazione.  
  
 Se si desidera caricare un documento in una finestra già aperta, vedere il <xref:System.Windows.Forms.HtmlWindow.Open%2A> metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (Uri url, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(class System.Uri url, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (url As Uri, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(Uri ^ url, System::String ^ windowOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">URL che descrive il percorso del file da caricare.</param>
        <param name="windowOptions">Stringa delimitata da virgole composta da zero o più delle seguenti opzioni nel formato <c>nome=valore</c>. Per una descrizione completa delle opzioni valide, vedere <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />.</param>
        <summary>Visualizza un file in una nuova finestra.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.HtmlWindow" /> che rappresenta la nuova finestra.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il file a cui fa riferimento `url` è un file HTML, file di testo o di altro tipo di file che può essere ospitato all'interno di Internet Explorer, verrà visualizzato in una nuova finestra. Se il file non può essere visualizzato all'interno di Internet Explorer, quindi verrà aperta la finestra solo lungo per Internet Explorer scaricare la risorsa. verranno chiuse immediatamente in un secondo momento.  
  
 Quando si creano nuove finestre mediante <xref:System.Windows.Forms.HtmlWindow.Open%2A> o <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, fa sì che il modello a oggetti documento HTML aprire una nuova istanza di Internet Explorer. Se non si chiama <xref:System.Windows.Forms.HtmlWindow.Close%2A> su tutte le finestre è stato creato, questa istanza di Internet Explorer rimarrà in esecuzione anche dopo la chiusura dell'applicazione.  
  
 Se si desidera caricare un documento in una finestra già aperta, vedere il <xref:System.Windows.Forms.HtmlWindow.Open%2A> metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Parent { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la finestra che si trova al di sopra della finestra corrente in una pagina contenente frame.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.HtmlWindow" /> che contiene la finestra corrente. Se la finestra corrente non è un <c>FRAME</c>, o non sono incorporati all'interno di un <c>FRAME</c>, restituisce <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In un documento contenente frame, ogni `FRAME` all'interno di un `FRAMESET` funge da finestra figlio separata della pagina. L'elemento padre di ogni `FRAME` è il `FRAMESET` che contiene il `FRAME`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Position { System::Drawing::Point get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la posizione sullo schermo dell'area client della finestra.</summary>
        <value>Oggetto <see cref="T:System.Drawing.Point" /> che descrive le coordinate x e y, in pixel, dell'angolo superiore sinistro dello schermo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.Control.Location%2A> proprietà del <xref:System.Windows.Forms.WebBrowser> controllo restituirà la posizione del controllo rispetto all'angolo superiore sinistro del form. Al contrario, <xref:System.Windows.Forms.HtmlWindow.Position%2A> restituisce la posizione dell'area di visualizzazione del documento rispetto all'angolo superiore sinistro di monitoraggio dell'utente.  
  
   
  
## Examples  
 Esempio di codice seguente apre una nuova finestra direttamente tramite il <xref:System.Windows.Forms.WebBrowser> controllo nel form. L'esempio di codice richiede che il modulo contiene un'istanza di <xref:System.Windows.Forms.WebBrowser> controllo denominato `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prompt">
      <MemberSignature Language="C#" Value="public string Prompt (string message, string defaultInputValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Prompt(string message, string defaultInputValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Prompt(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prompt (message As String, defaultInputValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Prompt(System::String ^ message, System::String ^ defaultInputValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="defaultInputValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Messaggio che verrà visualizzato all'utente.</param>
        <param name="defaultInputValue">Valore predefinito visualizzato nella casella di testo.</param>
        <summary>Visualizza all'utente una finestra di dialogo in cui sono contenuti un messaggio e una casella di testo.</summary>
        <returns>Oggetto <see cref="T:System.String" /> che rappresenta il testo immesso dall'utente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> fornisce un modo semplice e rapido per ottenere un input di testo dall'utente.  
  
 Sebbene <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> accetta testo Unicode come input, il prompt dei comandi script di Internet Explorer non visualizzerà il testo di alfabeto non latino in modo appropriato in Windows 95, Windows 98, Windows ME o Windows NT a causa di limitazioni del sistema operativo. Per ulteriori informazioni, vedere [INFO: Internet Explorer Script Prompts e MBCS/Unicode](http://support.microsoft.com/default.aspx?scid=kb;en-us;211147).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.RemoveFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFocus();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rimuove lo stato attivo dalla finestra corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene chiamato su un `FRAME` finestra in un `FRAMESET`, <xref:System.Windows.Forms.HtmlWindow.RemoveFocus%2A> causerà la finestra perdere lo stato attivo, ma non verrà automaticamente impostato lo stato attivo in un'altra finestra.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Resize" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Resize As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Resize;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente usa il mouse per modificare le dimensioni della finestra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio, un gestore eventi genera report sull'occorrenza del <xref:System.Windows.Forms.HtmlWindow.Resize> evento. Questo report consente di capire quando l'evento si verifica e possa agevolare il debug. Per generare un report su più eventi o per gli eventi che si verificano di frequente, è possibile sostituire <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a un controllo <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza del tipo <xref:System.Windows.Forms.HtmlWindow> denominato `HtmlWindow1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlWindow.Resize> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#455](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#455)]
 [!code-vb[System.Windows.Forms.EventExamples#455](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#455)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ResizeTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Modifica la dimensione della finestra in base alle dimensioni specificate.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (System.Drawing.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(valuetype System.Drawing.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Drawing.Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(System::Drawing::Size size);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="size">Oggetto <see cref="T:System.Drawing.Size" /> che descrive la larghezza e l'altezza desiderate, in pixel, della finestra. Il valore deve essere maggiore o uguale a 100 pixel per entrambe le dimensioni.</param>
        <summary>Modifica la dimensione della finestra in base alle dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente apre una nuova finestra e viene ridimensionato per riempire l'area disponibile sullo schermo.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">La finestra che si sta tentando di ridimensionare si trova in un dominio diverso rispetto alla relativa finestra padre. Questa restrizione fa parte della sicurezza di scripting tra frame. Per altre informazioni, vedere [About Cross-Frame Scripting and Security](http://msdn.microsoft.com/library/ms533028.aspx) (Informazioni su scripting tra frame e sicurezza).</exception>
      </Docs>
    </Member>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResizeTo (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">Descrive la larghezza desiderata, in pixel, della finestra. Il valore deve essere maggiore o uguale a 100 pixel.</param>
        <param name="height">Descrive l'altezza desiderata, in pixel, della finestra. Il valore deve essere maggiore o uguale a 100 pixel.</param>
        <summary>Modifica la dimensione della finestra in base alle dimensioni specificate.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UnauthorizedAccessException">La finestra che si sta tentando di ridimensionare si trova in un dominio diverso rispetto alla relativa finestra padre. Questa restrizione fa parte della sicurezza di scripting tra frame. Per altre informazioni, vedere [About Cross-Frame Scripting and Security](http://msdn.microsoft.com/library/ms533028.aspx) (Informazioni su scripting tra frame e sicurezza).</exception>
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Scroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Scroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Scroll As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Scroll;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente scorre la finestra per visualizzare il testo non presente sullo schermo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio, un gestore eventi genera report sull'occorrenza del <xref:System.Windows.Forms.HtmlWindow.Scroll> evento. Questo report consente di capire quando l'evento si verifica e possa agevolare il debug. Per generare un report su più eventi o per gli eventi che si verificano di frequente, è possibile sostituire <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a un controllo <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza del tipo <xref:System.Windows.Forms.HtmlWindow> denominato `HtmlWindow1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlWindow.Scroll> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#456](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#456)]
 [!code-vb[System.Windows.Forms.EventExamples#456](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#456)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScrollTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scorre la finestra fino alla posizione designata.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Coordinate x e y, rispetto all'angolo superiore sinistro della finestra corrente, del punto verso il quale è necessario scorrere la pagina.</param>
        <summary>Sposta la finestra in corrispondenza delle coordinate specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> causa il documento scorrere in modo che la coordinata specificata nel documento si trova nell'angolo superiore sinistro della finestra del documento. Se il documento non è sufficientemente ampia per questo problema, o long <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> consente di scorrere il documento il più possibile nella direzione specificata.  
  
   
  
## Examples  
 Esempio di codice seguente scorre il documento nella posizione coordinate scelto dall'utente.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Coordinata x rispetto all'angolo superiore sinistro della finestra corrente, del punto verso il quale è necessario scorrere la pagina.</param>
        <param name="y">Coordinata y rispetto all'angolo superiore sinistro della finestra corrente, del punto verso il quale è necessario scorrere la pagina.</param>
        <summary>Scorre la finestra fino alla posizione designata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> causa il documento scorrere in modo che la coordinata specificata nel documento si trova nell'angolo superiore sinistro della finestra del documento. Se il documento non è sufficientemente ampia per questo problema, o long <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> consente di scorrere il documento il più possibile nella direzione specificata.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la dimensione della finestra corrente.</summary>
        <value>Oggetto <see cref="T:System.Drawing.Size" /> che descrive le dimensioni, in pixel, della finestra.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusBarText">
      <MemberSignature Language="C#" Value="public string StatusBarText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusBarText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberSignature Language="VB.NET" Value="Public Property StatusBarText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StatusBarText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il testo visualizzato nella barra di stato di una finestra.</summary>
        <value>Oggetto <see cref="T:System.String" /> contenente il testo corrente della barra di stato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.WebBrowser> controllo non vengono visualizzate una barra di stato. Qualsiasi nuova finestra aperta con il <xref:System.Windows.Forms.HtmlWindow.Open%2A> o <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> metodi, tuttavia, verranno visualizzata una barra di stato per impostazione predefinita.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Unload;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Unload" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unload As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Unload;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando è in corso lo scaricamento della pagina corrente e sta per essere visualizzata una nuova pagina.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio, un gestore eventi genera report sull'occorrenza del <xref:System.Windows.Forms.HtmlWindow.Unload> evento. Questo report consente di capire quando l'evento si verifica e possa agevolare il debug. Per generare un report su più eventi o per gli eventi che si verificano di frequente, è possibile sostituire <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a un controllo <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza del tipo <xref:System.Windows.Forms.HtmlWindow> denominato `HtmlWindow1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.HtmlWindow.Unload> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#457](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#457)]
 [!code-vb[System.Windows.Forms.EventExamples#457](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#457)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'URL corrispondente all'elemento corrente visualizzato nella finestra.</summary>
        <value>Oggetto <see cref="T:System.Uri" /> che descrive l'URL.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà è di sola lettura. Per spostare la finestra in un nuovo documento, usare il <xref:System.Windows.Forms.HtmlWindow.Navigate%2A> metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowFrameElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement WindowFrameElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement WindowFrameElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WindowFrameElement As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ WindowFrameElement { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'elemento frame corrispondente alla finestra corrente.</summary>
        <value>Un <see cref="T:System.Windows.Forms.HtmlElement" /> corrispondente a questa finestra <c>FRAME</c> elemento. Se la finestra corrente non è un frame, verrà restituito <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si recupera un `FRAME` elemento il <xref:System.Windows.Forms.HtmlWindow.Frames%2A> insieme, restituisce un <xref:System.Windows.Forms.HtmlWindow>. Chiamare <xref:System.Windows.Forms.HtmlWindow.WindowFrameElement%2A> su questo oggetto se è necessario accedere agli attributi dell'oggetto sottostante `FRAME` elemento, ad esempio il `SRC` attributo.  
  
   
  
## Examples  
 Il codice seguente vengono confrontate le `SRC` attributo dei frame in un `FRAMESET` alla posizione corrente. Se sono diversi, i frame vengono reimpostati sui relativi URL originali.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.UnauthorizedAccessException">Non è possibile accedere un <c>FRAME</c> elementi o <c>FRAME</c>documento se la <c>FRAME</c> in un'area diversa rispetto di <c>FRAMESET</c> che contiene . Per una spiegazione completa, vedere [sulla creazione di script tra Frame e sicurezza] (http://msdn.microsoft.com/library/ms533028.aspx).</permission>
      </Docs>
    </Member>
  </Members>
</Type>