<Type Name="TreeNodeCollection" FullName="System.Windows.Forms.TreeNodeCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="52639addcc4818b4679fbe282ccf6f42a8620e57" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51307728" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TreeNodeCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TreeNodeCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.TreeNodeCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class TreeNodeCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class TreeNodeCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type TreeNodeCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta una raccolta di oggetti <see cref="T:System.Windows.Forms.TreeNode" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, e <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> metodi consentono di aggiungere e rimuovere i nodi dell'albero individuali dalla raccolta.  
  
> [!NOTE]
>  Tale enumerazione della raccolta e rimozione di nodi non è supportato.  
  
 È anche possibile usare la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metodi per aggiungere o rimuovere tutti i nodi dell'albero dall'insieme.  
  
 Non può ereditare da classi di <xref:System.Windows.Forms.TreeNodeCollection> classe.  
  
   
  
## Examples  
 Esempio di codice seguente consente di visualizzare informazioni sul cliente in un <xref:System.Windows.Forms.TreeView> controllo. I nodi dell'albero radice visualizzare i nomi dei clienti e i numeri degli ordini assegnati a ogni cliente di visualizzare i nodi dell'albero figlio. In questo esempio, 1.000 clienti vengono visualizzati con 15 ordini. Per evitare di ridisegnare il <xref:System.Windows.Forms.TreeView> viene eliminata tramite il <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> e <xref:System.Windows.Forms.TreeView.EndUpdate%2A> metodi e un periodo di attesa <xref:System.Windows.Forms.Cursor> viene visualizzato mentre il <xref:System.Windows.Forms.TreeView> crea e disegna il <xref:System.Windows.Forms.TreeNode> oggetti. In questo esempio è necessario disporre una `Customer` oggetto che può contenere una raccolta di `Order` oggetti. Inoltre, è necessario avere creato un'istanza di un <xref:System.Windows.Forms.TreeView> control per un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.TreeView" />
    <altmember cref="T:System.Windows.Forms.TreeNode" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge un nuovo nodo della struttura ad albero all'insieme.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Add : string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Testo dell'etichetta visualizzata dall'oggetto <see cref="T:System.Windows.Forms.TreeNode" />.</param>
        <summary>Aggiunge un nuovo nodo della struttura ad albero con il testo di etichetta specificato alla fine dell'insieme corrente dei nodi della struttura ad albero.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> che rappresenta il nodo della struttura ad albero da aggiungere all'insieme.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È anche possibile aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti nella raccolta usando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metodi.  
  
 Per rimuovere un <xref:System.Windows.Forms.TreeNode> aggiunto in precedenza, usare il <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, o <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metodi.  
  
   
  
## Examples  
 Esempio di codice seguente consente di visualizzare informazioni sul cliente in un <xref:System.Windows.Forms.TreeView> controllo. I nodi dell'albero radice visualizzare i nomi dei clienti e i numeri degli ordini assegnati a ogni cliente di visualizzare i nodi dell'albero figlio. In questo esempio, 1.000 clienti vengono visualizzati con 15 ordini. Per evitare di ridisegnare il <xref:System.Windows.Forms.TreeView> viene eliminata tramite il <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> e <xref:System.Windows.Forms.TreeView.EndUpdate%2A> metodi e un periodo di attesa <xref:System.Windows.Forms.Cursor> viene visualizzato mentre il <xref:System.Windows.Forms.TreeView> crea e disegna il <xref:System.Windows.Forms.TreeNode> oggetti. In questo esempio è necessario disporre una `Customer` oggetto che può contenere una raccolta di `Order` oggetti. Inoltre, è necessario avere creato un'istanza di un <xref:System.Windows.Forms.TreeView> control per un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (node As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Add(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Windows.Forms.TreeNode -&gt; int&#xA;override this.Add : System.Windows.Forms.TreeNode -&gt; int" Usage="treeNodeCollection.Add node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> da aggiungere alla raccolta.</param>
        <summary>Aggiunge un nodo della struttura ad albero precedentemente creato alla fine dell'insieme dei nodi della struttura ad albero.</summary>
        <returns>Valore di indice in base zero dell'oggetto <see cref="T:System.Windows.Forms.TreeNode" /> aggiunto all'insieme dei nodi della struttura ad albero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa versione del <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> metodo consente di aggiungere creato in precedenza <xref:System.Windows.Forms.TreeNode> oggetti alla fine della raccolta dei nodi dell'albero.  
  
 È anche possibile aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti nella raccolta usando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metodi.  
  
 Per rimuovere un <xref:System.Windows.Forms.TreeNode> aggiunto in precedenza, usare il <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, o <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metodi.  
  
> [!NOTE]
>  Oggetto <xref:System.Windows.Forms.TreeNode> può essere assegnato a una sola <xref:System.Windows.Forms.TreeView> controllo alla volta. Per aggiungere il nodo dell'albero di un nuovo controllo di visualizzazione albero, è necessario rimuoverlo da altra visualizzazione struttura ad albero prima di tutto o clonarla.  
  
   
  
## Examples  
 Esempio di codice seguente consente di visualizzare informazioni sul cliente in un <xref:System.Windows.Forms.TreeView> controllo. I nodi dell'albero radice visualizzare i nomi dei clienti e i numeri degli ordini assegnati a ogni cliente di visualizzare i nodi dell'albero figlio. In questo esempio, 1.000 clienti vengono visualizzati con 15 ordini. Per evitare di ridisegnare il <xref:System.Windows.Forms.TreeView> viene eliminata tramite il <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> e <xref:System.Windows.Forms.TreeView.EndUpdate%2A> metodi e un periodo di attesa <xref:System.Windows.Forms.Cursor> viene visualizzato mentre il <xref:System.Windows.Forms.TreeView> crea e disegna il <xref:System.Windows.Forms.TreeNode> oggetti. In questo esempio è necessario disporre una `Customer` oggetto che può contenere una raccolta di `Order` oggetti. Inoltre, è necessario avere creato un'istanza di un <xref:System.Windows.Forms.TreeView> control per un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="node" /> attualmente è assegnato a un'altra classe <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nome del nodo della struttura ad albero.</param>
        <param name="text">Testo da visualizzare nel nodo della struttura ad albero.</param>
        <summary>Crea un nuovo nodo della struttura ad albero con la chiave e il testo specificati e lo aggiunge all'insieme.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> aggiunto all'insieme.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.TreeNode.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 È anche possibile aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti nella raccolta usando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metodi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, int imageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">Nome del nodo della struttura ad albero.</param>
        <param name="text">Testo da visualizzare nel nodo della struttura ad albero.</param>
        <param name="imageIndex">Indice dell'immagine da visualizzare nel nodo della struttura ad albero.</param>
        <summary>Crea un nodo della struttura ad albero con la chiave, il testo e l'immagine specificati e lo aggiunge all'insieme.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> aggiunto all'insieme.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.TreeNode.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Il `imageIndex` parametro fa riferimento a un'immagine nel <xref:System.Windows.Forms.TreeView.ImageList%2A> proprietà dell'elemento padre <xref:System.Windows.Forms.TreeView>.  
  
 Il nodo dell'albero viene aggiunto alla fine della raccolta. È anche possibile aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti nella raccolta usando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metodi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, System::String ^ imageKey);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nome del nodo della struttura ad albero.</param>
        <param name="text">Testo da visualizzare nel nodo della struttura ad albero.</param>
        <param name="imageKey">Immagine da visualizzare nel nodo della struttura ad albero.</param>
        <summary>Crea un nodo della struttura ad albero con la chiave, il testo e l'immagine specificati e lo aggiunge all'insieme.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> aggiunto all'insieme.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.TreeNode.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Il nodo dell'albero viene aggiunto alla fine della raccolta. È anche possibile aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti nella raccolta usando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metodi.  
  
 Il `imageKey` parametro fa riferimento a un'immagine nel <xref:System.Windows.Forms.TreeView.ImageList%2A> proprietà dell'elemento padre <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageIndex As Integer, selectedImageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * int * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * int * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageIndex, selectedImageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">Nome del nodo della struttura ad albero.</param>
        <param name="text">Testo da visualizzare nel nodo della struttura ad albero.</param>
        <param name="imageIndex">Indice dell'immagine da visualizzare nel nodo della struttura ad albero.</param>
        <param name="selectedImageIndex">Chiave dell'immagine che verrà visualizzata nel nodo della struttura ad albero quando è in uno stato selezionato.</param>
        <summary>Crea un nodo della struttura ad albero con la chiave, il testo e le immagini specificati e lo aggiunge all'insieme.</summary>
        <returns>Nodo della struttura ad albero aggiunto all'insieme.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.TreeNode.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Il nodo dell'albero viene aggiunto alla fine della raccolta. È anche possibile aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti nella raccolta usando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metodi.  
  
 Il `imageIndex` parametro fa riferimento a un'immagine nel <xref:System.Windows.Forms.TreeView.ImageList%2A> proprietà dell'elemento padre <xref:System.Windows.Forms.TreeView>.  
  
 Il `selectedImageIndex` parametro fa riferimento a un'immagine nel <xref:System.Windows.Forms.TreeView.StateImageList%2A> proprietà dell'elemento padre <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageKey As String, selectedImageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, System::String ^ imageKey, System::String ^ selectedImageKey);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageKey, selectedImageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
        <Parameter Name="selectedImageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nome del nodo della struttura ad albero.</param>
        <param name="text">Testo da visualizzare nel nodo della struttura ad albero.</param>
        <param name="imageKey">Chiave dell'immagine da visualizzare nel nodo della struttura ad albero.</param>
        <param name="selectedImageKey">Chiave dell'immagine da visualizzare quando il nodo è in uno stato selezionato.</param>
        <summary>Crea un nodo della struttura ad albero con la chiave, il testo e le immagini specificati e lo aggiunge all'insieme.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> aggiunto all'insieme.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.TreeNode.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Il nodo dell'albero viene aggiunto alla fine della raccolta. È anche possibile aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti nella raccolta usando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metodi.  
  
 Il `imageKey` parametro fa riferimento a un'immagine nel <xref:System.Windows.Forms.TreeView.ImageList%2A> proprietà dell'elemento padre <xref:System.Windows.Forms.TreeView>.  
  
 Il `selectedImageKey` parametro fa riferimento a un'immagine nel <xref:System.Windows.Forms.TreeView.StateImageList%2A> proprietà dell'elemento padre <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Windows.Forms.TreeNode[] nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Windows.Forms.TreeNode[] nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.AddRange(System.Windows.Forms.TreeNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRange (nodes As TreeNode())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRange(cli::array &lt;System::Windows::Forms::TreeNode ^&gt; ^ nodes);" />
      <MemberSignature Language="F#" Value="abstract member AddRange : System.Windows.Forms.TreeNode[] -&gt; unit&#xA;override this.AddRange : System.Windows.Forms.TreeNode[] -&gt; unit" Usage="treeNodeCollection.AddRange nodes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="System.Windows.Forms.TreeNode[]" />
      </Parameters>
      <Docs>
        <param name="nodes">Matrice di oggetti <see cref="T:System.Windows.Forms.TreeNode" /> che rappresenta i nodi della struttura ad albero da aggiungere all'insieme.</param>
        <summary>Aggiunge una matrice di nodi della struttura ad albero precedentemente creati all'insieme.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.TreeNode> gli oggetti contenuti nel `nodes` matrice vengono aggiunti alla fine della raccolta.  
  
 È possibile usare il <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metodo per aggiungere rapidamente un gruppo di precedentemente creati <xref:System.Windows.Forms.TreeNode> oggetti alla raccolta invece di aggiungere manualmente ciascun <xref:System.Windows.Forms.TreeNode> nella raccolta usando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> (metodo).  
  
 Per rimuovere un <xref:System.Windows.Forms.TreeNode> aggiunto in precedenza, usare il <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, o <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metodi.  
  
   
  
## Examples  
 Copie di esempio di codice seguente il <xref:System.Windows.Forms.TreeNodeCollection> da un <xref:System.Windows.Forms.TreeView> a un elemento temporaneo <xref:System.Array>e quindi aggiunge il contenuto della matrice a un altro <xref:System.Windows.Forms.TreeView> usando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> (metodo). Il <xref:System.Windows.Forms.TreeNodeCollection> dall'origine <xref:System.Windows.Forms.TreeView> viene cancellata usando il <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> (metodo). Questo esempio richiede che si dispone di due <xref:System.Windows.Forms.TreeView> controlli, uno con una raccolta di <xref:System.Windows.Forms.TreeNode> oggetti.  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CPP/treenodecollection_clear.cpp#1)]
 [!code-csharp[TreeNodeCollection_Clear#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CS/treenodecollection_clear.cs#1)]
 [!code-vb[TreeNodeCollection_Clear#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Clear/VB/treenodecollection_clear.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="nodes" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="nodes" /> è figlio di un'altra classe <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="treeNodeCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rimuove tutti i nodi della struttura ad albero dall'insieme.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare questo metodo per cancellare l'intera raccolta di nodi dell'albero da una visualizzazione albero.  
  
 Per rimuovere un singolo nodo della struttura dalla raccolta, usare il <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> o <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> metodi.  
  
 Per aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti alla raccolta, usare il <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metodi.  
  
   
  
## Examples  
 Copie di esempio di codice seguente il <xref:System.Windows.Forms.TreeNodeCollection> da un <xref:System.Windows.Forms.TreeView> a un elemento temporaneo <xref:System.Array>e quindi aggiunge il contenuto della matrice a un altro <xref:System.Windows.Forms.TreeView> usando la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> (metodo). Il <xref:System.Windows.Forms.TreeNodeCollection> dall'origine <xref:System.Windows.Forms.TreeView> viene cancellata usando il <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> (metodo). Questo esempio richiede che si dispone di due <xref:System.Windows.Forms.TreeView> controlli, uno con una raccolta di <xref:System.Windows.Forms.TreeNode> oggetti.  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CPP/treenodecollection_clear.cpp#1)]
 [!code-csharp[TreeNodeCollection_Clear#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CS/treenodecollection_clear.cs#1)]
 [!code-vb[TreeNodeCollection_Clear#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Clear/VB/treenodecollection_clear.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Contains(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (node As TreeNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Forms.TreeNode -&gt; bool" Usage="treeNodeCollection.Contains node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> da individuare nella raccolta.</param>
        <summary>Determina se il nodo della struttura ad albero specificato è un membro dell'insieme.</summary>
        <returns>
          <see langword="true" /> se l'oggetto <see cref="T:System.Windows.Forms.TreeNode" /> è un membro dell'insieme; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di determinare se un <xref:System.Windows.Forms.TreeNode> è un membro della raccolta prima di provare a eseguire le operazioni di <xref:System.Windows.Forms.TreeNode>. È possibile usare questo metodo per verificare che un <xref:System.Windows.Forms.TreeNode> è stato aggiunto a o è ancora un membro della raccolta.  
  
 La quantità di tempo impiegato dal metodo è proporzionale alle dimensioni dell'insieme dei nodi, pertanto è consigliabile non usarla con le raccolte di grandi dimensioni.  
  
 Questo metodo controlla solo l'uguaglianza di riferimento. È possibile usarlo per determinare se un nodo equivalente ma diversi è presente nella raccolta.  
  
> [!NOTE]
>  Una delle implicazioni del requisito di uguaglianza di riferimenti è che non è possibile personalizzare il comportamento di questo metodo per derivato <xref:System.Windows.Forms.TreeNode> tipi eseguendo l'override di <xref:System.Object.Equals%2A> metodo del <xref:System.Windows.Forms.TreeNode> classe.  
  
   
  
## Examples  
 Esempio di codice seguente determina se un oggetto specificato <xref:System.Windows.Forms.TreeNode> rientra un <xref:System.Windows.Forms.TreeNodeCollection>e quindi enumera la raccolta. In questo esempio è necessario disporre una <xref:System.Windows.Forms.Form> con un <xref:System.Windows.Forms.TreeView> con un <xref:System.Windows.Forms.TreeNodeCollection> contenente una <xref:System.Windows.Forms.TreeNode> denominato `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#1)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#1)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="treeNodeCollection.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nome dell'oggetto <see cref="T:System.Windows.Forms.TreeNode" /> di cui eseguire la ricerca.</param>
        <summary>Consente di stabilire se l'insieme contiene un nodo della struttura ad albero con la chiave specificata.</summary>
        <returns>
          <see langword="true" /> per indicare che l'insieme contiene un oggetto <see cref="T:System.Windows.Forms.TreeNode" /> con la chiave specificata; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.TreeNode.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Il confronto delle chiavi non distinzione maiuscole/minuscole. Se il `key` parametro è `null` o una stringa vuota, il <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> restituisce proprietà `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (dest As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ dest, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="treeNodeCollection.CopyTo (dest, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">Matrice di destinazione.</param>
        <param name="index">Indice nella matrice di destinazione in cui ha inizio la memorizzazione.</param>
        <summary>Copia l'intero insieme in una posizione specifica all'interno di una matrice esistente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente visualizza il numero di <xref:System.Windows.Forms.TreeNode> gli oggetti in un <xref:System.Windows.Forms.TreeNodeCollection>, copia il contenuto della raccolta in un <xref:System.Object> array e viene visualizzato un elenco dei nodi dell'albero in un <xref:System.Windows.Forms.Label> controllo. In questo esempio è necessario disporre una <xref:System.Windows.Forms.TreeView> con almeno un <xref:System.Windows.Forms.TreeNode> nel relativo <xref:System.Windows.Forms.TreeNodeCollection>e un <xref:System.Windows.Forms.Label> control per un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CPP/treenodecollection_count_copyto.cpp#1)]
 [!code-csharp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CS/treenodecollection_count_copyto.cs#1)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/VB/treenodecollection_count_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Forms.TreeNodeCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero totale di oggetti <see cref="T:System.Windows.Forms.TreeNode" /> dell'insieme.</summary>
        <value>Numero totale di oggetti <see cref="T:System.Windows.Forms.TreeNode" /> dell'insieme.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.TreeNodeCollection.Count%2A> proprietà contiene il numero di <xref:System.Windows.Forms.TreeNode> oggetti assegnati alla raccolta. È possibile usare il <xref:System.Windows.Forms.TreeNodeCollection.Count%2A> valore della proprietà come limite superiore di un ciclo per scorrere una raccolta.  
  
> [!NOTE]
>  Poiché il valore di indice di una raccolta è un indice in base zero, è necessario sottrarre uno dalla variabile di ciclo. Se non si tiene conto per l'oggetto, verrà superato i limiti superiori della raccolta e genera un <xref:System.IndexOutOfRangeException> eccezione.  
  
   
  
## Examples  
 Esempio di codice seguente visualizza il numero di <xref:System.Windows.Forms.TreeNode> gli oggetti in un <xref:System.Windows.Forms.TreeNodeCollection>, copia il contenuto della raccolta in un <xref:System.Object> array e viene visualizzato un elenco dei nodi dell'albero in un <xref:System.Windows.Forms.Label> controllo. In questo esempio è necessario disporre una <xref:System.Windows.Forms.TreeView> con almeno un <xref:System.Windows.Forms.TreeNode> nel relativo <xref:System.Windows.Forms.TreeNodeCollection>e un <xref:System.Windows.Forms.Label> control per un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CPP/treenodecollection_count_copyto.cpp#1)]
 [!code-csharp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CS/treenodecollection_count_copyto.cs#1)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/VB/treenodecollection_count_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode[] Find (string key, bool searchAllChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeNode[] Find(string key, bool searchAllChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Find(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (key As String, searchAllChildren As Boolean) As TreeNode()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Forms::TreeNode ^&gt; ^ Find(System::String ^ key, bool searchAllChildren);" />
      <MemberSignature Language="F#" Value="member this.Find : string * bool -&gt; System.Windows.Forms.TreeNode[]" Usage="treeNodeCollection.Find (key, searchAllChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="searchAllChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">Nome del nodo della struttura ad albero di cui eseguire la ricerca.</param>
        <param name="searchAllChildren">
          <see langword="true" /> per cercare i nodi figlio dei nodi della struttura ad albero; in caso contrario, <see langword="false" />.</param>
        <summary>Trova i nodi della struttura ad albero con la chiave specificata, ricercando, se lo si desidera, i sottonodi.</summary>
        <returns>Una matrice di oggetti <see cref="T:System.Windows.Forms.TreeNode" /> la cui proprietà <see cref="P:System.Windows.Forms.TreeNode.Name" /> corrisponde alla chiave specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.TreeNode.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Il confronto delle chiavi non distinzione maiuscole/minuscole. Se il `key` parametro è `null` o una stringa vuota o non sono presenti corrispondenze, il <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> proprietà restituisce una matrice vuota`.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="treeNodeCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un enumeratore che può essere utilizzato per scorrere l'insieme dei nodi della struttura ad albero.</summary>
        <returns>Interfaccia <see cref="T:System.Collections.IEnumerator" /> che rappresenta l'insieme dei nodi della struttura ad albero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente determina se un oggetto specificato <xref:System.Windows.Forms.TreeNode> rientra un <xref:System.Windows.Forms.TreeNodeCollection>e quindi enumera la raccolta. In questo esempio è necessario disporre una <xref:System.Windows.Forms.Form> con un <xref:System.Windows.Forms.TreeView> con un <xref:System.Windows.Forms.TreeNodeCollection> contenente una <xref:System.Windows.Forms.TreeNode> denominato `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#1)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#1)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.IndexOf(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (node As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Windows.Forms.TreeNode -&gt; int" Usage="treeNodeCollection.IndexOf node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> da individuare nella raccolta.</param>
        <summary>Restituisce l'indice del nodo della struttura ad albero specificato nell'insieme.</summary>
        <returns>Indice in base zero dell'elemento trovato nell'insieme dei nodi della struttura ad albero; in caso contrario, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La quantità di tempo impiegato dal metodo è proporzionale alle dimensioni dell'insieme dei nodi, pertanto è consigliabile non usarla con le raccolte di grandi dimensioni.  
  
 Questo metodo controlla solo l'uguaglianza di riferimento. Non è possibile usarlo per recuperare l'indice di un nodo diversi ma equivalente nella raccolta.  
  
> [!NOTE]
>  Una delle implicazioni del requisito di uguaglianza di riferimenti è che non è possibile personalizzare il comportamento di questo metodo per derivato <xref:System.Windows.Forms.TreeNode> tipi eseguendo l'override di <xref:System.Object.Equals%2A> metodo del <xref:System.Windows.Forms.TreeNode> classe.  
  
   
  
## Examples  
 Esempio di codice seguente determina se un oggetto specificato <xref:System.Windows.Forms.TreeNode> rientra un <xref:System.Windows.Forms.TreeNodeCollection>e quindi enumera la raccolta. In questo esempio è necessario disporre una <xref:System.Windows.Forms.Form> con un <xref:System.Windows.Forms.TreeView> con un <xref:System.Windows.Forms.TreeNodeCollection> contenente una <xref:System.Windows.Forms.TreeNode> denominato `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#2)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#2)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.IndexOfKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfKey : string -&gt; int&#xA;override this.IndexOfKey : string -&gt; int" Usage="treeNodeCollection.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nome del nodo della struttura ad albero di cui eseguire la ricerca.</param>
        <summary>Restituisce l'indice della prima occorrenza di un nodo della struttura ad albero con la chiave specificata.</summary>
        <returns>Indice in base zero della prima occorrenza di un nodo della struttura ad albero con la chiave specificata, se presente; in caso contrario -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Windows.Forms.TreeNodeCollection.IndexOfKey%2A> viene chiamato successivamente, l'ultimo restituito indice verrà innanzitutto verificato la corrispondenza delle chiavi e se non viene trovata alcuna corrispondenza, la ricerca inizia all'inizio della raccolta.  
  
 Il <xref:System.Windows.Forms.TreeNode.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Il confronto delle chiavi non distinzione maiuscole/minuscole. Se `key` viene `null` o una stringa vuota, il <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> proprietà restituisce -1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Insert">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inserisce un elemento nell'insieme in corrispondenza della posizione specificata.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">Posizione all'interno dell'insieme nella quale inserire il nodo.</param>
        <param name="text">Testo da visualizzare nel nodo della struttura ad albero.</param>
        <summary>Crea un nodo della struttura ad albero con il testo specificato e lo inserisce in corrispondenza dell'indice specificato.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> inserito nell'insieme.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Windows.Forms.TreeView.Sorted%2A> è impostata su `true`, il `index` valore del parametro viene ignorato. Il <xref:System.Windows.Forms.TreeNode> viene inserito nella visualizzazione albero e <xref:System.Windows.Forms.TreeView> viene ripristinata.  
  
 È anche possibile aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti nella raccolta usando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> o <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metodi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual void Insert (int index, System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Insert (index As Integer, node As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * System.Windows.Forms.TreeNode -&gt; unit&#xA;override this.Insert : int * System.Windows.Forms.TreeNode -&gt; unit" Usage="treeNodeCollection.Insert (index, node)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="index">Posizione indicizzata nell'insieme per l'inserimento del nodo della struttura ad albero.</param>
        <param name="node">Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> da inserire nella raccolta.</param>
        <summary>Inserisce un nodo della struttura ad albero esistente nell'insieme dei nodi della struttura ad albero in corrispondenza della posizione specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Windows.Forms.TreeView.Sorted%2A?displayProperty=nameWithType> è impostata su `true`, il `index` valore del parametro viene ignorato. Il <xref:System.Windows.Forms.TreeNode> viene inserito nella visualizzazione albero e <xref:System.Windows.Forms.TreeView> riordinati.  
  
 È anche possibile aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti nella raccolta usando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> o <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metodi.  
  
 Per rimuovere un <xref:System.Windows.Forms.TreeNode> aggiunto in precedenza, usare il <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, o <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metodi.  
  
> [!NOTE]
>  Oggetto <xref:System.Windows.Forms.TreeNode> può essere assegnato a una sola <xref:System.Windows.Forms.TreeView> controllo alla volta. Per aggiungere il nodo dell'albero di un nuovo controllo di visualizzazione albero, è necessario rimuoverlo da altra visualizzazione struttura ad albero prima di tutto o clonarla.  
  
   
  
## Examples  
 Esempio di codice seguente rimuove il nodo dell'albero selezionato uno <xref:System.Windows.Forms.TreeView> e lo aggiunge a un altro se entrambe le raccolte di nodi dell'albero non sono di sola lettura. Quando un <xref:System.Windows.Forms.Button> viene fatto clic, il <xref:System.Windows.Forms.TreeNode> rappresentato dal <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> proprietà viene eliminata da una <xref:System.Windows.Forms.TreeView> usando la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> (metodo) e aggiunto a altro <xref:System.Windows.Forms.TreeView> usando il <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> (metodo). In questo esempio è necessario disporre una <xref:System.Windows.Forms.Form> che contiene due <xref:System.Windows.Forms.TreeView> controlli e un <xref:System.Windows.Forms.Button>. Il <xref:System.Windows.Forms.TreeView> devono essere denominati controlli `treeView1` e `treeView2`.  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="node" /> attualmente è assegnato a un'altra classe <see cref="T:System.Windows.Forms.TreeView" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">Posizione all'interno dell'insieme nella quale inserire il nodo.</param>
        <param name="key">Nome del nodo della struttura ad albero.</param>
        <param name="text">Testo da visualizzare nel nodo della struttura ad albero.</param>
        <summary>Crea un nodo della struttura ad albero con il testo e la chiave specificati e lo inserisce nell'insieme.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> inserito nell'insieme.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Windows.Forms.TreeView.Sorted%2A> è impostata su `true`, il `index` valore del parametro viene ignorato. Il <xref:System.Windows.Forms.TreeNode> viene inserito nella visualizzazione albero e <xref:System.Windows.Forms.TreeView> viene ripristinata.  
  
 È anche possibile aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti nella raccolta usando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> o <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metodi.  
  
 Il <xref:System.Windows.Forms.TreeNode.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, int imageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Posizione all'interno dell'insieme nella quale inserire il nodo.</param>
        <param name="key">Nome del nodo della struttura ad albero.</param>
        <param name="text">Testo da visualizzare nel nodo della struttura ad albero.</param>
        <param name="imageIndex">Indice dell'immagine da visualizzare nel nodo della struttura ad albero.</param>
        <summary>Crea un nodo della struttura ad albero con la chiave, il testo e l'immagine specificati e lo inserisce nell'insieme in corrispondenza dell'indice specificato.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> inserito nell'insieme.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Windows.Forms.TreeView.Sorted%2A> è impostata su `true`, il `index` valore del parametro viene ignorato. Il <xref:System.Windows.Forms.TreeNode> viene inserito nella visualizzazione albero e <xref:System.Windows.Forms.TreeView> viene ripristinata.  
  
 È anche possibile aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti nella raccolta usando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> o <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metodi.  
  
 Il <xref:System.Windows.Forms.TreeNode.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Il `imageIndex` parametro fa riferimento a un'immagine nel <xref:System.Windows.Forms.TreeView.ImageList%2A> proprietà dell'elemento padre <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, System::String ^ imageKey);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">Posizione all'interno dell'insieme nella quale inserire il nodo.</param>
        <param name="key">Nome del nodo della struttura ad albero.</param>
        <param name="text">Testo da visualizzare nel nodo della struttura ad albero.</param>
        <param name="imageKey">Chiave dell'immagine da visualizzare nel nodo della struttura ad albero.</param>
        <summary>Crea un nodo della struttura ad albero con la chiave, il testo e l'immagine specificati e lo inserisce nell'insieme in corrispondenza dell'indice specificato.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> inserito nell'insieme.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Windows.Forms.TreeView.Sorted%2A> è impostata su `true`, il `index` valore del parametro viene ignorato. Il <xref:System.Windows.Forms.TreeNode> viene inserito nella visualizzazione albero e <xref:System.Windows.Forms.TreeView> viene ripristinata.  
  
 È anche possibile aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti nella raccolta usando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> o <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metodi.  
  
 Il <xref:System.Windows.Forms.TreeNode.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Il `imageKey` parametro fa riferimento a un'immagine nel <xref:System.Windows.Forms.TreeView.ImageList%2A> proprietà dell'elemento padre <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageIndex As Integer, selectedImageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * int * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * int * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageIndex, selectedImageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Posizione all'interno dell'insieme nella quale inserire il nodo.</param>
        <param name="key">Nome del nodo della struttura ad albero.</param>
        <param name="text">Testo da visualizzare nel nodo della struttura ad albero.</param>
        <param name="imageIndex">Indice dell'immagine da visualizzare nel nodo della struttura ad albero.</param>
        <param name="selectedImageIndex">Chiave dell'immagine da visualizzare nel nodo della struttura ad albero quando è in uno stato selezionato.</param>
        <summary>Crea un nodo della struttura ad albero con la chiave, il testo e le immagini specificati e lo inserisce nell'insieme in corrispondenza dell'indice specificato.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> inserito nell'insieme.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Windows.Forms.TreeView.Sorted%2A> è impostata su `true`, il `index` valore del parametro viene ignorato. Il <xref:System.Windows.Forms.TreeNode> viene inserito nella visualizzazione albero e <xref:System.Windows.Forms.TreeView> viene ripristinata.  
  
 È anche possibile aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti nella raccolta usando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> o <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metodi.  
  
 Il <xref:System.Windows.Forms.TreeNode.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Il `imageIndex` parametro fa riferimento a un'immagine nel <xref:System.Windows.Forms.TreeView.ImageList%2A> proprietà dell'elemento padre <xref:System.Windows.Forms.TreeView>.  
  
 Il `selectedimageIndex` parametro fa riferimento a un'immagine nel <xref:System.Windows.Forms.TreeView.StateImageList%2A> proprietà dell'elemento padre <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageKey As String, selectedImageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, System::String ^ imageKey, System::String ^ selectedImageKey);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageKey, selectedImageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
        <Parameter Name="selectedImageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">Posizione all'interno dell'insieme nella quale inserire il nodo.</param>
        <param name="key">Nome del nodo della struttura ad albero.</param>
        <param name="text">Testo da visualizzare nel nodo della struttura ad albero.</param>
        <param name="imageKey">Chiave dell'immagine da visualizzare nel nodo della struttura ad albero.</param>
        <param name="selectedImageKey">Indice dell'immagine da visualizzare nel nodo della struttura ad albero quando è in uno stato selezionato.</param>
        <summary>Crea un nodo della struttura ad albero con la chiave, il testo e le immagini specificati e lo inserisce nell'insieme in corrispondenza dell'indice specificato.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> inserito nell'insieme.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Windows.Forms.TreeView.Sorted%2A> è impostata su `true`, il `index` valore del parametro viene ignorato. Il <xref:System.Windows.Forms.TreeNode> viene inserito nella visualizzazione albero e <xref:System.Windows.Forms.TreeView> viene ripristinata.  
  
 È anche possibile aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti nella raccolta usando la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> o <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metodi.  
  
 Il <xref:System.Windows.Forms.TreeNode.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Il `imageKey` parametro fa riferimento a un'immagine nel <xref:System.Windows.Forms.TreeView.ImageList%2A> proprietà dell'elemento padre <xref:System.Windows.Forms.TreeView>.  
  
 Il `selectedimageKey` parametro fa riferimento a un'immagine nel <xref:System.Windows.Forms.TreeView.StateImageList%2A> proprietà dell'elemento padre <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Forms.TreeNodeCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la raccolta è di sola lettura.</summary>
        <value>
          <see langword="true" /> se la raccolta è di sola lettura; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente rimuove il nodo dell'albero selezionato uno <xref:System.Windows.Forms.TreeView> e lo aggiunge a un altro se entrambe le raccolte di nodi dell'albero non sono di sola lettura. Quando un <xref:System.Windows.Forms.Button> viene fatto clic, il <xref:System.Windows.Forms.TreeNode> rappresentato dal <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> proprietà viene eliminata da una <xref:System.Windows.Forms.TreeView> usando la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> (metodo) e aggiunto a altro <xref:System.Windows.Forms.TreeView> usando il <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> (metodo). In questo esempio è necessario disporre una <xref:System.Windows.Forms.Form> che contiene due <xref:System.Windows.Forms.TreeView> controlli e un <xref:System.Windows.Forms.Button>. Il <xref:System.Windows.Forms.TreeView> devono essere denominati controlli `treeView1` e `treeView2`.  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene o imposta un nodo della struttura ad albero all'interno dell'insieme.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(index As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::TreeNode ^ default[int] { System::Windows::Forms::TreeNode ^ get(int index); void set(int index, System::Windows::Forms::TreeNode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.Forms.TreeNode with get, set" Usage="System.Windows.Forms.TreeNodeCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">La posizione indicizzata dell'oggetto <see cref="T:System.Windows.Forms.TreeNode" /> nell'insieme.</param>
        <summary>Ottiene o imposta l'oggetto <see cref="T:System.Windows.Forms.TreeNode" /> in corrispondenza della posizione indicizzata specificata nell'insieme.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> nella posizione indicizzata specificata dell'insieme.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per assegnare <xref:System.Windows.Forms.TreeNode> gli oggetti in un percorso specifico o per recuperarli dal <xref:System.Windows.Forms.TreeNodeCollection>, è possibile fare riferimento all'oggetto insieme con un valore di indice specifico. Il valore di indice di <xref:System.Windows.Forms.TreeNodeCollection> è un indice in base zero.  
  
   
  
## Examples  
 L'esempio di codice seguente rimuove il primo <xref:System.Windows.Forms.TreeNode> da un <xref:System.Windows.Forms.TreeView> se il <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=nameWithType> è impostata su "Node0". Quando un <xref:System.Windows.Forms.Button> viene selezionata, il primo <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeView> viene eliminato usando il <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> (metodo). Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.TreeView> e una <xref:System.Windows.Forms.Button> su un <xref:System.Windows.Forms.Form>. Il primo <xref:System.Windows.Forms.TreeNode> nella <xref:System.Windows.Forms.TreeView> deve avere una proprietà di testo di "Node0".  
  
 [!code-cpp[TreeNodeCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#2)]
 [!code-csharp[TreeNodeCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#2)]
 [!code-vb[TreeNodeCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore di <paramref name="index" /> è minore di 0 o maggiore del numero di nodi della struttura ad albero nell'insieme.</exception>
        <altmember cref="P:System.Windows.Forms.TreeNodeCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(key As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::TreeNode ^ default[System::String ^] { System::Windows::Forms::TreeNode ^ get(System::String ^ key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Windows.Forms.TreeNode" Usage="System.Windows.Forms.TreeNodeCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nome dell'oggetto <see cref="T:System.Windows.Forms.TreeNode" /> da recuperare dall'insieme.</param>
        <summary>Ottiene il nodo della struttura ad albero con la chiave specificata dall'insieme.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> con la chiave specificata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.TreeNode.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Il confronto delle chiavi non distinzione maiuscole/minuscole. Se il `key` parametro è `null` o una stringa vuota, il <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> restituisce proprietà `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (node As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.Forms.TreeNode -&gt; unit" Usage="treeNodeCollection.Remove node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> da rimuovere.</param>
        <summary>Rimuove il nodo della struttura ad albero specificato dall'insieme dei nodi della struttura ad albero.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un <xref:System.Windows.Forms.TreeNode> viene rimosso dalla raccolta dei nodi dell'albero, albero successive tutti i nodi vengono spostati verso l'alto di una posizione nella raccolta.  
  
 È anche possibile rimuovere un <xref:System.Windows.Forms.TreeNode> aggiunto in precedenza usando il <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metodi.  
  
> [!NOTE]
>  Tale enumerazione della raccolta e rimozione di nodi non è supportato.  
  
 Per aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti alla raccolta, usare il <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metodi.  
  
   
  
## Examples  
 Esempio di codice seguente rimuove il nodo dell'albero selezionato uno <xref:System.Windows.Forms.TreeView> e lo aggiunge a un altro se entrambe le raccolte di nodi dell'albero non sono di sola lettura. Quando un <xref:System.Windows.Forms.Button> viene fatto clic, il <xref:System.Windows.Forms.TreeNode> rappresentato dal <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> proprietà viene eliminata da una <xref:System.Windows.Forms.TreeView> usando la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> (metodo) e aggiunto a altro <xref:System.Windows.Forms.TreeView> usando il <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> (metodo). In questo esempio è necessario disporre una <xref:System.Windows.Forms.Form> che contiene due <xref:System.Windows.Forms.TreeView> controlli e un <xref:System.Windows.Forms.Button>. Il <xref:System.Windows.Forms.TreeView> devono essere denominati controlli `treeView1` e `treeView2`.  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="treeNodeCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indice dell'oggetto <see cref="T:System.Windows.Forms.TreeNode" /> da rimuovere.</param>
        <summary>Rimuove il nodo della struttura ad albero dall'insieme dei nodi della struttura ad albero in corrispondenza dell'indice specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un <xref:System.Windows.Forms.TreeNode> viene rimosso dalla raccolta dei nodi dell'albero, albero successive tutti i nodi vengono spostati verso l'alto di una posizione nella raccolta.  
  
 È anche possibile rimuovere un <xref:System.Windows.Forms.TreeNode> aggiunto in precedenza usando il <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> o <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metodi.  
  
> [!NOTE]
>  Tale enumerazione della raccolta e rimozione di nodi non è supportato.  
  
 Per aggiungere nuovi <xref:System.Windows.Forms.TreeNode> gli oggetti alla raccolta, usare il <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, o <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metodi.  
  
   
  
## Examples  
 L'esempio di codice seguente rimuove il primo <xref:System.Windows.Forms.TreeNode> da un <xref:System.Windows.Forms.TreeView> se il <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=nameWithType> è impostata su "Node0". Quando un <xref:System.Windows.Forms.Button> viene selezionata, il primo <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeView> viene eliminato usando il <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> (metodo). Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.TreeView> e una <xref:System.Windows.Forms.Button> su un <xref:System.Windows.Forms.Form>. Il primo <xref:System.Windows.Forms.TreeNode> nella <xref:System.Windows.Forms.TreeView> deve avere una proprietà di testo di "Node0".  
  
 [!code-cpp[TreeNodeCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#2)]
 [!code-csharp[TreeNodeCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#2)]
 [!code-vb[TreeNodeCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.RemoveByKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveByKey (key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveByKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member RemoveByKey : string -&gt; unit&#xA;override this.RemoveByKey : string -&gt; unit" Usage="treeNodeCollection.RemoveByKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nome del nodo della struttura ad albero da rimuovere dall'insieme.</param>
        <summary>Rimuove il nodo della struttura ad albero con la chiave specificata dall'insieme.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.TreeNode.Name%2A> proprietà corrisponde alla chiave per un <xref:System.Windows.Forms.TreeNode> nel <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se l'accesso alla raccolta è sincronizzato (thread-safe).</summary>
        <value>
          <see langword="false" /> in tutti i casi.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</summary>
        <value>Oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Windows.Forms.TreeNodeCollection" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (node As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ node) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Oggetto da aggiungere all'insieme di nodi della struttura ad albero.</param>
        <summary>Aggiunge un oggetto alla fine dell'insieme di nodi della struttura ad albero.</summary>
        <returns>Valore di indice in base zero dell'oggetto <see cref="T:System.Windows.Forms.TreeNode" /> aggiunto all'insieme dei nodi della struttura ad albero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `node` non è un <xref:System.Windows.Forms.TreeNodeCollection>, il <xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23Add%2A> metodo utilizzerà la stringa restituita dal <xref:System.Windows.Forms.TreeNode.ToString%2A> metodo il <xref:System.Windows.Forms.TreeNode> classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Il parametro <paramref name="node" /> attualmente è assegnato a un'altra classe <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="node" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (node As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ node) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Oggetto da trovare nell'insieme.</param>
        <summary>Determina se il nodo della struttura ad albero specificato è un membro dell'insieme.</summary>
        <returns>
          <see langword="true" /> se <paramref name="node" /> è un membro dell'insieme; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `node` non è un <xref:System.Windows.Forms.TreeNode>, il <xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23Contains%2A> restituzione del metodo `false`. Pertanto, è possibile passare una stringa per determinare se la raccolta contiene un nodo che ha il valore della stringa come relativo <xref:System.Windows.Forms.TreeNode.Text%2A> proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (node As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ node) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> da individuare nella raccolta.</param>
        <summary>Restituisce l'indice del nodo della struttura ad albero specificato nell'insieme.</summary>
        <returns>Indice in base zero dell'elemento trovato nell'insieme dei nodi della struttura ad albero; in caso contrario, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `node` non è un <xref:System.Windows.Forms.TreeNode>, il <xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23IndexOf%2A> metodo restituisce -1. Pertanto, è possibile passare una stringa per trovare il nodo che ha il valore della stringa come relativo <xref:System.Windows.Forms.TreeNode.Text%2A> proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, node As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ node) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Posizione indicizzata nell'insieme per l'inserimento del nodo della struttura ad albero.</param>
        <param name="node">Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> da inserire nella raccolta.</param>
        <summary>Inserisce un nodo della struttura ad albero esistente nell'insieme dei nodi della struttura ad albero in corrispondenza della posizione specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Windows.Forms.TreeView.Sorted%2A> è impostata su `true`, il `index` parametro viene ignorato. Il <xref:System.Windows.Forms.TreeNode> viene inserito nella visualizzazione albero e <xref:System.Web.UI.WebControls.TreeView> viene ripristinata.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="node" /> attualmente è assegnato a un'altra classe <see cref="T:System.Windows.Forms.TreeView" />.  
  
oppure 
 <paramref name="node" /> non è un oggetto <see cref="T:System.Windows.Forms.TreeNode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se le dimensioni dell'insieme dei nodi della struttura ad albero sono fisse.</summary>
        <value>
          <see langword="false" /> in tutti i casi.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indice in base zero in corrispondenza del quale ottenere o impostare l'elemento.</param>
        <summary>Ottiene o imposta il nodo della struttura ad albero in corrispondenza dell'indice specificato nell'insieme.</summary>
        <value>L'oggetto <see cref="T:System.Windows.Forms.TreeNode" /> in corrispondenza dell'indice specificato nell'insieme <see cref="T:System.Windows.Forms.TreeNodeCollection" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Il valore impostato non è un <see cref="T:System.Windows.Forms.TreeNode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (node As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ node) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Oggetto <see cref="T:System.Windows.Forms.TreeNode" /> da rimuovere dalla raccolta.</param>
        <summary>Rimuove il nodo della struttura ad albero specificato dall'insieme dei nodi della struttura ad albero.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non è possibile passare una stringa per rimuovere il nodo con il valore della stringa come relativo <xref:System.Windows.Forms.TreeNode.Text%2A> proprietà.  
  
 Quando un <xref:System.Windows.Forms.TreeNode> viene rimosso dalla raccolta dei nodi dell'albero, albero successive tutti i nodi vengono spostati verso l'alto di una posizione nella raccolta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>