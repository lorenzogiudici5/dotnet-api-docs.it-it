<Type Name="IDataGridViewEditingControl" FullName="System.Windows.Forms.IDataGridViewEditingControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6713fc76335689e7aea18d9afe82df69c288e158" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30648695" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataGridViewEditingControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataGridViewEditingControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataGridViewEditingControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataGridViewEditingControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataGridViewEditingControl" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definisce la funzionalità comune per i controlli contenuti nelle celle di un oggetto <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa interfaccia viene implementata da tutti i controlli, ad esempio <xref:System.Windows.Forms.DataGridViewComboBoxEditingControl> e <xref:System.Windows.Forms.DataGridViewTextBoxEditingControl>, ospitati da corrispondente <xref:System.Windows.Forms.DataGridView> celle, ad esempio <xref:System.Windows.Forms.DataGridViewComboBoxCell> e <xref:System.Windows.Forms.DataGridViewTextBoxCell>, quando sono in modalità di modifica.  
  
 I tipi che possono ospitare Modifica set di controlli di cella loro <xref:System.Windows.Forms.DataGridViewCell.EditType%2A> proprietà per un <xref:System.Type> che rappresenta la modifica di un tipo di controllo. Quando la cella passa alla modalità di modifica, vengono eseguite le seguenti operazioni:  
  
1.  Il <xref:System.Windows.Forms.DataGridView> controllo crea un'istanza del tipo di controllo di modifica.  
  
2.  Il <xref:System.Windows.Forms.DataGridView> controllo chiama la cella <xref:System.Windows.Forms.DataGridViewCell.InitializeEditingControl%2A> metodo. È possibile eseguire l'override di questo metodo per trasferire il controllo di modifica il valore della cella.  
  
3.  Il <xref:System.Windows.Forms.DataGridView> controllo chiama il controllo di modifica <xref:System.Windows.Forms.IDataGridViewEditingControl.ApplyCellStyleToEditingControl%2A> metodo e passa nello stile corrente della cella. È possibile implementare questo metodo per inizializzare l'aspetto del controllo di modifica in modo che corrisponda l'aspetto della cella.  
  
4.  Il <xref:System.Windows.Forms.DataGridView> controllo chiama il controllo di modifica <xref:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit%2A> metodo. È possibile implementare questo metodo per effettuare modifiche finali al controllo di modifica, ad esempio selezionando il valore del controllo.  
  
 Per ulteriori informazioni sull'implementazione <xref:System.Windows.Forms.IDataGridViewEditingControl>, vedere [come: i controlli Host nelle celle del controllo DataGridView Windows Form](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 Cella di tipi, ad esempio <xref:System.Windows.Forms.DataGridViewCheckBoxCell> che forniscono un'interfaccia utente (UI) per specificare i valori senza l'hosting di un controllo di modifica implementano la <xref:System.Windows.Forms.IDataGridViewEditingCell> interfaccia. In questo caso, l'interfaccia utente viene visualizzato indipendentemente dal fatto che la cella sia in modalità di modifica.  
  
 Altri tipi di cella, ad esempio <xref:System.Windows.Forms.DataGridViewButtonCell>, forniscono un'interfaccia utente, ma non archiviare i valori specificati dall'utente. In questo caso, il tipo di cella non implementa <xref:System.Windows.Forms.IDataGridViewEditingCell> o ospitare un controllo di modifica.  
  
   
  
## Examples  
 Esempio di codice seguente fornisce un'implementazione dell'interfaccia che deriva da <xref:System.Windows.Forms.DateTimePicker>. Questo esempio fa parte di un esempio più esaustivo disponibile in [come: i controlli Host nelle celle del controllo DataGridView Windows Form](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#300](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#300)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#300](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#300)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataGridView" />
    <altmember cref="T:System.Windows.Forms.DataGridViewCell" />
    <altmember cref="T:System.Windows.Forms.IDataGridViewEditingCell" />
    <altmember cref="T:System.Windows.Forms.DataGridViewComboBoxCell" />
    <altmember cref="T:System.Windows.Forms.DataGridViewComboBoxEditingControl" />
    <altmember cref="T:System.Windows.Forms.DataGridViewTextBoxCell" />
    <altmember cref="P:System.Windows.Forms.DataGridViewCell.EditType" />
    <altmember cref="T:System.Windows.Forms.DataGridViewTextBoxEditingControl" />
  </Docs>
  <Members>
    <Member MemberName="ApplyCellStyleToEditingControl">
      <MemberSignature Language="C#" Value="public void ApplyCellStyleToEditingControl (System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyCellStyleToEditingControl(class System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyCellStyleToEditingControl(System::Windows::Forms::DataGridViewCellStyle ^ dataGridViewCellStyle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewCellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
      </Parameters>
      <Docs>
        <param name="dataGridViewCellStyle">Oggetto <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> da utilizzare come modello per l'interfaccia utente.</param>
        <summary>Modifica l'interfaccia utente del controllo in modo che sia coerente con lo stile di cella specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, un'implementazione di questo metodo imposta le proprietà dell'interfaccia utente per il controllo di modifica, ad esempio tipo di carattere, colore di sfondo e il colore di primo piano, ai valori delle proprietà corrispondenti di `dataGridViewCellStyle`, che è lo stile utilizzato per l'hosting di cella di controllo.  
  
   
  
## Examples  
 Esempio di codice seguente fornisce un'implementazione di questo membro. Questo esempio fa parte di un esempio più esaustivo disponibile in [come: i controlli Host nelle celle del controllo DataGridView Windows Form](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#303](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#303)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#303](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#303)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlDataGridView">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridView EditingControlDataGridView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridView EditingControlDataGridView" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlDataGridView" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlDataGridView As DataGridView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridView ^ EditingControlDataGridView { System::Windows::Forms::DataGridView ^ get(); void set(System::Windows::Forms::DataGridView ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'oggetto <see cref="T:System.Windows.Forms.DataGridView" /> contenente la cella.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.DataGridView" /> contenente l'oggetto <see cref="T:System.Windows.Forms.DataGridViewCell" /> in corso di modifica; <see langword="null" /> se non esiste alcun oggetto <see cref="T:System.Windows.Forms.DataGridView" /> associato.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlFormattedValue">
      <MemberSignature Language="C#" Value="public object EditingControlFormattedValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object EditingControlFormattedValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlFormattedValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ EditingControlFormattedValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore formattato della cella che deve essere modificata dall'editor.</summary>
        <value>Oggetto <see cref="T:System.Object" /> che rappresenta il valore formattato della cella.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore formattato rappresenta il valore come viene visualizzato nell'interfaccia utente del controllo. Il valore formattato può essere diverso in valore assoluto e tipo di dati dal valore effettivo contenuto nel controllo.  
  
   
  
## Examples  
 Esempio di codice seguente fornisce un'implementazione di questo membro. Questo esempio fa parte di un esempio più esaustivo disponibile in [come: i controlli Host nelle celle del controllo DataGridView Windows Form](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#301](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#301)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#301](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#301)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.IDataGridViewEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlRowIndex">
      <MemberSignature Language="C#" Value="public int EditingControlRowIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EditingControlRowIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlRowIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlRowIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int EditingControlRowIndex { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'indice della riga padre della cella ospitante.</summary>
        <value>Indice della riga contenente la cella o -1 se non esiste alcuna riga padre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.IDataGridViewEditingControl> interfaccia non definisce una corrispondente `ColumnIndex` proprietà. È possibile utilizzare il <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlDataGridView%2A> proprietà per recuperare l'elemento padre <xref:System.Windows.Forms.DataGridView> controllo e utilizzare il <xref:System.Windows.Forms.DataGridView.CurrentCellAddress%2A?displayProperty=nameWithType> proprietà per determinare gli indici di riga e di colonna della cella attiva.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRow" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlValueChanged">
      <MemberSignature Language="C#" Value="public bool EditingControlValueChanged { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EditingControlValueChanged" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlValueChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EditingControlValueChanged { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il valore del controllo di modifica differisce da quello della cella ospitante.</summary>
        <value>
          <see langword="true" /> se il valore del controllo differisce da quello della cella; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged%2A> è impostata su `true` per indicare che è stato modificato lo stato della cella hosting e la relativa interfaccia utente (UI) deve essere aggiornato per riflettere la modifica del valore. Il proprietario cella verrà reimpostato questa proprietà su `false` dopo un aggiornamento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Restituzione <see langword="true" /> nell'implementazione di questa proprietà non modifica automaticamente il valore visualizzato. Quando cambia il valore nel controllo di modifica, è necessario notificare il <see cref="T:System.Windows.Forms.DataGridView" /> della modifica passando <see langword="true" /> per il <see cref="M:System.Windows.Forms.DataGridView.NotifyCurrentCellDirty(System.Boolean)" /> metodo.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
        <altmember cref="M:System.Windows.Forms.IDataGridViewEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlWantsInputKey">
      <MemberSignature Language="C#" Value="public bool EditingControlWantsInputKey (System.Windows.Forms.Keys keyData, bool dataGridViewWantsInputKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EditingControlWantsInputKey(valuetype System.Windows.Forms.Keys keyData, bool dataGridViewWantsInputKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EditingControlWantsInputKey (keyData As Keys, dataGridViewWantsInputKey As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EditingControlWantsInputKey(System::Windows::Forms::Keys keyData, bool dataGridViewWantsInputKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
        <Parameter Name="dataGridViewWantsInputKey" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keyData">Oggetto <see cref="T:System.Windows.Forms.Keys" /> che rappresenta il tasto premuto.</param>
        <param name="dataGridViewWantsInputKey">
          <see langword="true" /> quando <see cref="T:System.Windows.Forms.DataGridView" /> deve elaborare <see cref="T:System.Windows.Forms.Keys" /> in <c>keyData</c>. In caso contrario, <see langword="false" />.</param>
        <summary>Determina se il tasto specificato è un normale tasto di input che deve essere elaborato dal controllo di modifica o un tasto speciale che deve essere elaborato da <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <returns>
          <see langword="true" /> se il tasto specificato è normale un tasto di input che deve essere gestito dal controllo di modifica; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un controllo di modifica implementa questo metodo per determinare quali tasti di input devono essere elaborati dal controllo e le chiavi di input deve essere elaborato dal <xref:System.Windows.Forms.DataGridView>.  
  
 Il <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A> metodo viene chiamato dal <xref:System.Windows.Forms.DataGridView>. Il <xref:System.Windows.Forms.DataGridView> verrà passato `true` per `dataGridViewWantsInputKey` quando sia possibile elaborare il `keyData`. Se il controllo di modifica consente il <xref:System.Windows.Forms.DataGridView> gestire il `keyData`, <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A> deve restituire `false` quando `dataGridViewWantsInputKey` è `true`. Altre implementazioni di <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A> potrebbe ignorare un `dataGridViewWantsInputKey` valore `true` e gestire il `keyData` nel controllo di modifica.  
  
   
  
## Examples  
 Esempio di codice seguente fornisce un'implementazione di questo membro. Questo esempio fa parte di un esempio più esaustivo disponibile in [come: i controlli Host nelle celle del controllo DataGridView Windows Form](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#305](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#305)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#305](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#305)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="EditingPanelCursor">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Cursor EditingPanelCursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor EditingPanelCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingPanelCursor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EditingPanelCursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Cursor ^ EditingPanelCursor { System::Windows::Forms::Cursor ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il cursore utilizzato quando il puntatore del mouse è posizionato su <see cref="P:System.Windows.Forms.DataGridView.EditingPanel" /> ma non sul controllo di modifica.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.Cursor" /> che rappresenta il puntatore del mouse utilizzato per il pannello di modifica.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il pannello di modifica è la <xref:System.Windows.Forms.Panel> che contiene il controllo di modifica quando la <xref:System.Windows.Forms.DataGridView> controllo si trova nella modalità di modifica. Il controllo di modificando effettivo non può coprire l'intera area del Pannello di modifica. In questo caso, il <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingPanelCursor%2A> implementazione deve restituire il cursore da utilizzare quando il puntatore del mouse sul pannello, ma non sul controllo. In genere, si dovranno restituire lo stesso cursore che utilizza il controllo. Se si desidera modificare il cursore visualizzato quando il puntatore è posizionato il controllo, è necessario impostare il <xref:System.Windows.Forms.Control.Cursor%2A> proprietà. È possibile impostarlo nel costruttore del <xref:System.Windows.Forms.IDataGridViewEditingControl> implementazione oppure è possibile impostare <xref:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit%2A> implementazione.  
  
   
  
## Examples  
 Esempio di codice seguente fornisce un'implementazione di questo membro. Questo esempio fa parte di un esempio più esaustivo disponibile in [come: i controlli Host nelle celle del controllo DataGridView Windows Form](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#311](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#311)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#311](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#311)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.Panel" />
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
        <altmember cref="M:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetEditingControlFormattedValue">
      <MemberSignature Language="C#" Value="public object GetEditingControlFormattedValue (System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetEditingControlFormattedValue(valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEditingControlFormattedValue (context As DataGridViewDataErrorContexts) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetEditingControlFormattedValue(System::Windows::Forms::DataGridViewDataErrorContexts context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="context">Combinazione bit per bit di valori <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> che specifica il contesto in cui sono necessari i dati.</param>
        <summary>Recupera il valore formattato della cella.</summary>
        <returns>Oggetto <see cref="T:System.Object" /> che rappresenta la versione formattata del contenuto della cella.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore formattato rappresenta il valore come viene visualizzato nell'interfaccia utente del controllo. Il valore formattato può essere diverso in valore assoluto e tipo di dati dal valore effettivo contenuto nel controllo.  
  
 Per impostare il valore formattato del controllo, utilizzare il <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>La modifica del valore restituito nell'implementazione di questo metodo non modifica automaticamente il valore visualizzato. Quando cambia il valore nel controllo di modifica, è necessario notificare il <see cref="T:System.Windows.Forms.DataGridView" /> della modifica passando <see langword="true" /> per il <see cref="M:System.Windows.Forms.DataGridView.NotifyCurrentCellDirty(System.Boolean)" /> metodo.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      </Docs>
    </Member>
    <Member MemberName="PrepareEditingControlForEdit">
      <MemberSignature Language="C#" Value="public void PrepareEditingControlForEdit (bool selectAll);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareEditingControlForEdit(bool selectAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrepareEditingControlForEdit (selectAll As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PrepareEditingControlForEdit(bool selectAll);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="selectAll">
          <see langword="true" /> per selezionare tutto il contenuto della cella; in caso contrario, <see langword="false" />.</param>
        <summary>Prepara la cella attualmente selezionata per la modifica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo scopo di questo metodo consiste nel preparare il controllo e il relativo contenuto per la modifica. Potrebbe ad esempio, si desidera posizionare il punto di inserimento alla fine del contenuto, o modificare la modalità di allineamento del contenuto.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="RepositionEditingControlOnValueChange">
      <MemberSignature Language="C#" Value="public bool RepositionEditingControlOnValueChange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RepositionEditingControlOnValueChange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.RepositionEditingControlOnValueChange" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RepositionEditingControlOnValueChange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RepositionEditingControlOnValueChange { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il contenuto della cella deve essere riposizionato ogni volta che cambia il valore.</summary>
        <value>
          <see langword="true" /> se è necessario riposizionare il contenuto; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alcune situazioni richiedono che il contenuto delle celle Riposiziona quando cambia il valore. Ad esempio, il contenuto delle celle potrebbe essere necessario riposizionare quando si esegue il wrapping di una cella di testo e il contenuto viene ampliato.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
  </Members>
</Type>