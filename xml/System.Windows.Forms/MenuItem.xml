<Type Name="MenuItem" FullName="System.Windows.Forms.MenuItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8a283dcf6b2831ac5f93e9eab903a709ed1e0846" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33659929" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MenuItem : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MenuItem extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MenuItem" />
  <TypeSignature Language="VB.NET" Value="Public Class MenuItem&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class MenuItem : System::Windows::Forms::Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta una singola voce visualizzata all'interno di un oggetto <see cref="T:System.Windows.Forms.MainMenu" /> o <see cref="T:System.Windows.Forms.ContextMenu" />. Benché il controllo <see cref="T:System.Windows.Forms.ToolStripMenuItem" /> sostituisca il controllo <see cref="T:System.Windows.Forms.MenuItem" /> delle versioni precedenti aggiungendo funzionalità, il controllo <see cref="T:System.Windows.Forms.MenuItem" /> viene mantenuto per compatibilità con le versioni precedenti e per utilizzo futuro se lo si desidera.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Affinché un <xref:System.Windows.Forms.MenuItem> per poter essere visualizzati, è necessario aggiungerla a un <xref:System.Windows.Forms.MainMenu> o <xref:System.Windows.Forms.ContextMenu>. Per creare i sottomenu, è possibile aggiungere <xref:System.Windows.Forms.MenuItem> oggetti per il <xref:System.Windows.Forms.Menu.MenuItems%2A> proprietà dell'elemento padre <xref:System.Windows.Forms.MenuItem>.  
  
 La <xref:System.Windows.Forms.MenuItem> classe fornisce proprietà che consentono di configurare l'aspetto e funzionalità di una voce di menu. Per visualizzare un segno di spunta accanto a una voce di menu, utilizzare il <xref:System.Windows.Forms.MenuItem.Checked%2A> proprietà. È possibile utilizzare questa funzionalità per identificare una voce di menu selezionata in un elenco di voci di menu si escludono a vicenda. Ad esempio, se si dispone di un set di voci di menu per l'impostazione del colore del testo in un <xref:System.Windows.Forms.TextBox> (controllo), è possibile utilizzare il <xref:System.Windows.Forms.MenuItem.Checked%2A> proprietà per identificare il colore attualmente selezionato. Il <xref:System.Windows.Forms.MenuItem.Shortcut%2A> proprietà può essere utilizzata per definire una combinazione di tasti che è possibile premere per selezionare la voce di menu.  
  
 Per <xref:System.Windows.Forms.MenuItem> gli oggetti visualizzati in un'applicazione Multiple Document Interface (MDI), è possibile utilizzare il <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> metodo per unire i menu di un form MDI padre con quelli dei moduli per creare una struttura consolidati menu figlio. Poiché un <xref:System.Windows.Forms.MenuItem> non può essere riutilizzato in più posizioni contemporaneamente, ad esempio un <xref:System.Windows.Forms.MainMenu> e un <xref:System.Windows.Forms.ContextMenu>, è possibile utilizzare il <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> metodo per creare una copia di un <xref:System.Windows.Forms.MenuItem> per l'utilizzo in un'altra posizione.  
  
 Il <xref:System.Windows.Forms.MenuItem.Popup> evento consente di eseguire attività prima che venga visualizzato un menu. Ad esempio, è possibile creare un gestore eventi per questo evento visualizzare o nascondere le voci di menu in base allo stato del codice. Il <xref:System.Windows.Forms.MenuItem.Select> evento consente di eseguire attività quali la visualizzazione di informazioni dettagliate per voci di menu dell'applicazione quando l'utente posiziona il puntatore del mouse su una voce di menu.  
  
   
  
## Examples  
 Esempio di codice seguente crea una struttura di menu per un form. Nell'esempio di codice aggiunge un <xref:System.Windows.Forms.MenuItem> per rappresentare la voce di menu di primo livello, aggiunge una voce di sottomenu per la selezione di una dimensione e quindi aggiunge due voci di sottomenu alla voce di menu che rappresentano le scelte di piccole e grandi dimensioni del carattere in un'applicazione. Nell'esempio si presuppone che sia presente un <xref:System.Windows.Forms.MainMenu> oggetto denominato `mainMenu1` e quattro <xref:System.Windows.Forms.MenuItem> gli oggetti denominati `menuItem1`, `menuItem2`, `menuItem3`, e `menuItem4`.  
  
 [!code-cpp[Classic Menu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu Example/CS/source.cs#1)]
 [!code-vb[Classic Menu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MainMenu" />
    <altmember cref="T:System.Windows.Forms.Menu" />
    <altmember cref="T:System.Windows.Forms.MenuMerge" />
    <altmember cref="T:System.Windows.Forms.ContextMenu" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza un oggetto <see cref="T:System.Windows.Forms.MenuItem" /> con una didascalia vuota.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dopo aver creato uno spazio vuoto <xref:System.Windows.Forms.MenuItem> questo costruttore, è possibile utilizzare le proprietà e metodi del <xref:System.Windows.Forms.MenuItem> classe per specificare l'aspetto e il comportamento del <xref:System.Windows.Forms.MenuItem>.  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Windows.Forms.MenuItem> utilizzando questa versione del costruttore.  
  
 [!code-cpp[Classic MenuItem.MenuItem Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Didascalia della voce di menu.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.MenuItem" /> con una didascalia specificata per la voce di menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si specifica una didascalia per la voce di menu con la `text` parametro, è possibile inoltre specificare una chiave di accesso, inserendo un carattere '&' prima del carattere da utilizzare come tasto di scelta rapida. Ad esempio, per specificare il valore di "F" in "File" come una chiave di accesso, potrebbe specificare la didascalia della voce di menu come "& File". È possibile utilizzare questa funzionalità per la navigazione tramite tastiera per i menu.  
  
 L'impostazione di `text` parametro "`-`", la voce di menu da visualizzare come separatore (linea orizzontale) anziché una voce di menu standard.  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Windows.Forms.MenuItem> che specifica la didascalia della voce di menu al momento viene costruito.  
  
 [!code-cpp[Classic MenuItem.MenuItem1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, EventHandler onClick);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.EventHandler onClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, onClick As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text, EventHandler ^ onClick);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="text">Didascalia della voce di menu.</param>
        <param name="onClick">Oggetto <see cref="T:System.EventHandler" /> che gestisce l'evento <see cref="E:System.Windows.Forms.MenuItem.Click" /> per la voce di menu.</param>
        <summary>Inizializza una nuova istanza della classe con una didascalia specificata e un gestore eventi per l'evento <see cref="E:System.Windows.Forms.MenuItem.Click" /> della voce di menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si specifica una didascalia per la voce di menu con la `text` parametro, è possibile inoltre specificare una chiave di accesso tramite l'inserimento di un '&' prima del carattere da utilizzare come tasto di scelta rapida. Ad esempio, per specificare il valore di "F" in "File" come una chiave di accesso, potrebbe specificare la didascalia della voce di menu come "& File". È possibile utilizzare questa funzionalità per la navigazione tramite tastiera per i menu.  
  
 L'impostazione di `text` parametro "`-`", la voce di menu da visualizzare come separatore (linea orizzontale) anziché una voce di menu standard.  
  
 Inoltre, è possibile utilizzare questo costruttore per specificare un delegato che gestirà il <xref:System.Windows.Forms.MenuItem.Click> evento della voce di menu da creare. Il <xref:System.EventHandler> passato a questo costruttore deve essere configurato per chiamare un gestore eventi che è in grado di gestire il <xref:System.Windows.Forms.MenuItem.Click> evento. Per ulteriori informazioni sulla gestione degli eventi, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Windows.Forms.MenuItem> oggetto con una didascalia specificata e un <xref:System.EventHandler> delegato connesso a un gestore eventi che gestirà il <xref:System.Windows.Forms.MenuItem.Click> evento della voce di menu.  
  
 [!code-cpp[Classic MenuItem.MenuItem2 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem2 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text, cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="text">Didascalia della voce di menu.</param>
        <param name="items">Matrice di oggetti <see cref="T:System.Windows.Forms.MenuItem" /> che contiene le voci di sottomenu per questa voce di menu.</param>
        <summary>Inizializza una nuova istanza della classe con una didascalia specificata e una matrice di voci di sottomenu definita per la voce di menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si specifica una didascalia per la voce di menu con la `text` parametro, è possibile inoltre specificare una chiave di accesso tramite l'inserimento di un '&' prima del carattere da utilizzare come tasto di scelta rapida. Ad esempio, per specificare il valore di "F" in "File" come una chiave di accesso, potrebbe specificare la didascalia della voce di menu come "& File". È possibile utilizzare questa funzionalità per la navigazione tramite tastiera per i menu.  
  
 L'impostazione di `text` parametro "`-`", la voce di menu da visualizzare come separatore (linea orizzontale) anziché una voce di menu standard.  
  
 Il `items` parametro consente di assegnare una matrice di voci di menu per definire un sottomenu della voce di menu. Ogni elemento della matrice può avere anche una matrice di voci di menu assegnati a esso. In questo modo è possibile creare strutture di menu complete e assegnarli al costruttore per la voce di menu.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente crea un oggetto con una didascalia specificata, un gestore eventi collegato a un metodo che gestirà l'evento ogni voce di menu in una matrice di voci di sottomenu.  
  
 [!code-cpp[Classic MenuItem.MenuItem4 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem4 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, EventHandler onClick, System.Windows.Forms.Shortcut shortcut);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.EventHandler onClick, valuetype System.Windows.Forms.Shortcut shortcut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler,System.Windows.Forms.Shortcut)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text, EventHandler ^ onClick, System::Windows::Forms::Shortcut shortcut);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
        <Parameter Name="shortcut" Type="System.Windows.Forms.Shortcut" />
      </Parameters>
      <Docs>
        <param name="text">Didascalia della voce di menu.</param>
        <param name="onClick">Oggetto <see cref="T:System.EventHandler" /> che gestisce l'evento <see cref="E:System.Windows.Forms.MenuItem.Click" /> per la voce di menu.</param>
        <param name="shortcut">Uno dei valori di <see cref="T:System.Windows.Forms.Shortcut" />.</param>
        <summary>Inizializza una nuova istanza della classe con una didascalia specificata, un gestore eventi e il tasto di scelta rapida per la voce di menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si specifica una didascalia per la voce di menu con la `text` parametro, è possibile inoltre specificare una chiave di accesso tramite l'inserimento di un '&' prima del carattere da utilizzare come tasto di scelta rapida. Ad esempio, per specificare il valore di "F" in "File" come una chiave di accesso, potrebbe specificare la didascalia della voce di menu come "& File". È possibile utilizzare questa funzionalità per la navigazione tramite tastiera per i menu. Questo costruttore consente inoltre di specificare un tasto di scelta rapida oltre a una chiave di accesso per la navigazione tramite tastiera. Tasti di scelta rapida consentono di specificare una combinazione di tasti che possono essere utilizzate per attivare la voce di menu.  
  
 L'impostazione di `text` parametro "`-`", la voce di menu da visualizzare come separatore (linea orizzontale) anziché una voce di menu standard.  
  
 Inoltre, è possibile utilizzare questo costruttore per specificare un delegato che gestirà il <xref:System.Windows.Forms.MenuItem.Click> evento della voce di menu da creare. Il <xref:System.EventHandler> passato a questo costruttore deve essere configurato per chiamare un gestore eventi che è in grado di gestire il <xref:System.Windows.Forms.MenuItem.Click> evento. Per ulteriori informazioni sulla gestione degli eventi, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente crea un oggetto con una didascalia specificata, tasto di scelta rapida e un gestore eventi collegato a un metodo che gestirà l'evento della voce di menu.  
  
 [!code-cpp[Classic MenuItem.MenuItem3 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem3 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (System.Windows.Forms.MenuMerge mergeType, int mergeOrder, System.Windows.Forms.Shortcut shortcut, string text, EventHandler onClick, EventHandler onPopup, EventHandler onSelect, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.MenuMerge mergeType, int32 mergeOrder, valuetype System.Windows.Forms.Shortcut shortcut, string text, class System.EventHandler onClick, class System.EventHandler onPopup, class System.EventHandler onSelect, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.Windows.Forms.MenuMerge,System.Int32,System.Windows.Forms.Shortcut,System.String,System.EventHandler,System.EventHandler,System.EventHandler,System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::Windows::Forms::MenuMerge mergeType, int mergeOrder, System::Windows::Forms::Shortcut shortcut, System::String ^ text, EventHandler ^ onClick, EventHandler ^ onPopup, EventHandler ^ onSelect, cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mergeType" Type="System.Windows.Forms.MenuMerge" />
        <Parameter Name="mergeOrder" Type="System.Int32" />
        <Parameter Name="shortcut" Type="System.Windows.Forms.Shortcut" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
        <Parameter Name="onPopup" Type="System.EventHandler" />
        <Parameter Name="onSelect" Type="System.EventHandler" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="mergeType">Uno dei valori di <see cref="T:System.Windows.Forms.MenuMerge" />.</param>
        <param name="mergeOrder">Posizione relativa che verrà assunta da questa voce di menu in un menu unito.</param>
        <param name="shortcut">Uno dei valori di <see cref="T:System.Windows.Forms.Shortcut" />.</param>
        <param name="text">Didascalia della voce di menu.</param>
        <param name="onClick">Oggetto <see cref="T:System.EventHandler" /> che gestisce l'evento <see cref="E:System.Windows.Forms.MenuItem.Click" /> per la voce di menu.</param>
        <param name="onPopup">Oggetto <see cref="T:System.EventHandler" /> che gestisce l'evento <see cref="E:System.Windows.Forms.MenuItem.Popup" /> per la voce di menu.</param>
        <param name="onSelect">Oggetto <see cref="T:System.EventHandler" /> che gestisce l'evento <see cref="E:System.Windows.Forms.MenuItem.Select" /> per la voce di menu.</param>
        <param name="items">Matrice di oggetti <see cref="T:System.Windows.Forms.MenuItem" /> che contiene le voci di sottomenu per questa voce di menu.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.MenuItem" /> con una didascalia specifica, gestori eventi definiti per gli eventi <see cref="E:System.Windows.Forms.MenuItem.Click" />, <see cref="E:System.Windows.Forms.MenuItem.Select" /> e <see cref="E:System.Windows.Forms.MenuItem.Popup" />, un tasto di scelta rapida, un tipo di unione e un ordine specificati per la voce di menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si specifica una didascalia per la voce di menu con la `text` parametro, è possibile inoltre specificare una chiave di accesso tramite l'inserimento di un '&' prima del carattere da utilizzare come tasto di scelta rapida. Ad esempio, per specificare il valore di "F" in "File" come una chiave di accesso, potrebbe specificare la didascalia della voce di menu come "& File". È possibile utilizzare questa funzionalità per la navigazione tramite tastiera per i menu.  
  
 L'impostazione di `text` parametro "`-`", la voce di menu da visualizzare come separatore (linea orizzontale) anziché una voce di menu standard.  
  
 Il `items` parametro consente di assegnare una matrice di voci di menu per definire un sottomenu della voce di menu. Ogni elemento della matrice può avere anche una matrice di voci di menu assegnati a esso. In questo modo è possibile creare strutture di menu complete e assegnarli al costruttore per la voce di menu.  
  
 Il `mergeType` e `mergeOrder` parametri consentono di determinare il comportamento di questa voce di menu quando la voce di menu è unita a un altro menu. A seconda del valore specificato per il `mergeType` parametro, è possibile aggiungere, rimuovere, sostituire, oppure la voce di menu e voci dei relativi sottomenu al menu che viene eseguita l'unione di tipo merge. Il `mergeOrder` parametro determina dove verrà posizionata la voce di menu viene creata quando il menu è unito.  
  
 Inoltre, è possibile utilizzare questo costruttore per creare un <xref:System.Windows.Forms.MenuItem> e collegarlo a un gestore eventi nel codice che elaborerà la selezione della voce di menu. Il <xref:System.EventHandler> passato a questo costruttore deve essere configurato per richiamare un gestore eventi che è in grado di gestire il <xref:System.Windows.Forms.MenuItem.Click> evento. Con questa versione del costruttore, è inoltre possibile connettere il <xref:System.Windows.Forms.MenuItem.Popup> e <xref:System.Windows.Forms.MenuItem.Select> eventi per determinare se è selezionata questa voce di menu. È possibile utilizzare questi eventi per le attività, ad esempio per determinare se visualizzare un segno di spunta accanto a voci di sottomenu o abilitare o disabilitare le voci di menu in base allo stato dell'applicazione o meno. Il <xref:System.Windows.Forms.MenuItem.Select> e <xref:System.Windows.Forms.MenuItem.Click> gli eventi vengono generati solo per <xref:System.Windows.Forms.MenuItem> gli oggetti non voci di menu padre. Per ulteriori informazioni sulla gestione degli eventi, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente crea una voce di menu che contiene una chiave di titolo e collegamento. La voce di menu dispone anche di gestori di eventi definiti per il <xref:System.Windows.Forms.MenuItem.Popup>, <xref:System.Windows.Forms.MenuItem.Click>, e <xref:System.Windows.Forms.MenuItem.Select> eventi. Se questa voce di menu è unita, aggiungerà la voce di menu al menu con l'ordine di merge pari a zero.  
  
 [!code-cpp[Classic MenuItem.MenuItem5 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem5 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem5 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MenuItem.Popup" />
        <altmember cref="E:System.Windows.Forms.MenuItem.Select" />
        <altmember cref="E:System.Windows.Forms.MenuItem.Click" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="BarBreak">
      <MemberSignature Language="C#" Value="public bool BarBreak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BarBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.BarBreak" />
      <MemberSignature Language="VB.NET" Value="Public Property BarBreak As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BarBreak { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se l'oggetto <see cref="T:System.Windows.Forms.MenuItem" /> è collocato su una nuova riga, nel caso di una voce di menu aggiunta a un oggetto <see cref="T:System.Windows.Forms.MainMenu" />, o in una nuova colonna, nel caso di una voce di menu o di sottomenu visualizzata in un oggetto <see cref="T:System.Windows.Forms.ContextMenu" />.</summary>
        <value>
          <see langword="true" /> se la voce di menu viene posizionata in una nuova riga o in una nuova colonna. <see langword="false" /> se la voce di menu viene lasciata nella posizione predefinita. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare il <xref:System.Windows.Forms.MenuItem.BarBreak%2A> proprietà per creare un menu in cui ogni voce di menu viene inserito uno accanto a altro in senso orizzontale anziché in un elenco verticale. È anche possibile utilizzare questa proprietà per creare una barra dei menu che contiene più righe di voci di menu di primo livello.  
  
 Questa proprietà è diverso dal <xref:System.Windows.Forms.MenuItem.Break%2A> proprietà che viene visualizzata una barra sul lato sinistro di ogni voce di menu che ha il <xref:System.Windows.Forms.MenuItem.Break%2A> proprietà impostata su `true`. La barra viene visualizzata solo quando la voce di menu non è una voce di menu di primo livello.  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Windows.Forms.MenuItem> con due voci di sottomenu. Le voci di due sottomenu vengono visualizzate orizzontalmente, verticalmente anziché il <xref:System.Windows.Forms.MenuItem.BarBreak%2A> proprietà.  
  
 [!code-cpp[Classic MenuItem.BarBreak Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.BarBreak Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.BarBreak Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Break" />
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public bool Break { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Break" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Break" />
      <MemberSignature Language="VB.NET" Value="Public Property Break As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Break { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se l'elemento è collocato su una nuova riga, nel caso di una voce di menu aggiunta a un oggetto <see cref="T:System.Windows.Forms.MainMenu" />, o in una nuova colonna, nel caso di una voce di menu o di sottomenu visualizzata in un oggetto <see cref="T:System.Windows.Forms.ContextMenu" />.</summary>
        <value>
          <see langword="true" /> se la voce di menu viene posizionata in una nuova riga o in una nuova colonna. <see langword="false" /> se la voce di menu viene lasciata nella posizione predefinita. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare il <xref:System.Windows.Forms.MenuItem.Break%2A> proprietà per creare un menu in cui ciascuna voce di menu viene inserito uno accanto a altro in senso orizzontale anziché in un elenco verticale. È anche possibile utilizzare questa proprietà per creare una barra dei menu che contiene più righe di voci di menu di primo livello.  
  
   
  
## Examples  
 Esempio di codice seguente crea un menu con due voci di menu di primo livello sulla riga superiore e una voce di menu nella riga inferiore.  
  
 [!code-cpp[Classic MenuItem.Break Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Break Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Break Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Break Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Break Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Break Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.BarBreak" />
      </Docs>
    </Member>
    <Member MemberName="Checked">
      <MemberSignature Language="C#" Value="public bool Checked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Checked" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Checked" />
      <MemberSignature Language="VB.NET" Value="Public Property Checked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Checked { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se viene visualizzato un segno di spunta accanto al testo della voce di menu.</summary>
        <value>
          <see langword="true" /> se accanto alla voce di menu è presente un segno di spunta; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare il <xref:System.Windows.Forms.MenuItem.Checked%2A> proprietà in combinazione con altre voci di menu in un menu per fornire lo stato di un'applicazione. Ad esempio, è possibile inserire un segno di spunta su una voce di menu in un gruppo di elementi per identificare la dimensione del tipo di carattere da visualizzare per il testo in un'applicazione. È inoltre possibile utilizzare il <xref:System.Windows.Forms.MenuItem.Checked%2A> proprietà per identificare la voce di menu selezionata in un gruppo di voci di menu si escludono a vicenda.  
  
> [!NOTE]
>  Questa proprietà non può essere impostata su `true` per voci di menu di primo livello.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Windows.Forms.MenuItem.Checked%2A> proprietà per specificare lo stato in un'applicazione. In questo esempio, un gruppo di voci di menu vengono utilizzati per specificare il colore del testo in un <xref:System.Windows.Forms.TextBox> controllo. Il gestore dell'evento specificato viene utilizzato il <xref:System.Windows.Forms.MenuItem.Click> evento tre voci di menu. Ogni voce di menu consente di specificare un colore del testo, `menuItemRed` (rosso), `menuItemGreen` (verde), o `menuItemBlue` (blu). Il gestore eventi determina la voce di menu è stato fatto clic, inserisce un segno di spunta per la voce di menu selezionata e viene modificato il colore del testo nel formato <xref:System.Windows.Forms.TextBox> controllo. Nell'esempio si presuppone che il <xref:System.Drawing> dello spazio dei nomi è stato aggiunto al form che questo codice viene inserito in. L'esempio richiede che un <xref:System.Windows.Forms.TextBox> è stato aggiunto al form che questo codice di esempio si trova in denominato `textBox1`.  
  
 [!code-cpp[Classic MenuItem.Checked Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Checked Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Checked Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Checked Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Checked Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Checked Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="T:System.Windows.Forms.MenuItem" /> è un menu di primo livello o presenta elementi figlio.</exception>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando la voce di menu viene selezionata mediante il mouse o mediante un tasto di scelta rapida o di scelta definito per quella voce di menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.MenuItem.Click> evento si verifica quando si <xref:System.Windows.Forms.MenuItem> viene scelto dall'utente. Inoltre, questo evento si verifica se l'utente seleziona la voce di menu utilizzando la tastiera e preme il tasto INVIO. Può inoltre verificarsi se si preme un tasto di scelta o tasto di scelta rapida che è associato il <xref:System.Windows.Forms.MenuItem>. Per ulteriori informazioni sulla gestione degli eventi, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
> [!NOTE]
>  Se il <xref:System.Windows.Forms.Menu.MenuItems%2A> proprietà per il <xref:System.Windows.Forms.MenuItem> contiene elementi, questo evento non viene generato. Questo evento non viene generato per le voci di menu padre.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Windows.Forms.MenuItem.Click> evento per eseguire attività quando un <xref:System.Windows.Forms.MenuItem> si fa clic. Nell'esempio viene creato un <xref:System.Windows.Forms.MainMenu> chiamato `mainMenu1` e aggiunge due <xref:System.Windows.Forms.MenuItem> oggetti, `topMenuItem` (`File`) e `menuItem1` (`Open`). Si connette quindi il `Click` evento per il `menuItem1_Click` gestore dell'evento. Quando l'utente sceglie il `Open` voce di menu, un <xref:System.Windows.Forms.OpenFileDialog> viene inizializzato e visualizzato. Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Form> denominato `Form1`.  
  
 [!code-cpp[MenuItemClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItemClick/CPP/form1.cpp#1)]
 [!code-csharp[MenuItemClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItemClick/CS/form1.cs#1)]
 [!code-vb[MenuItemClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItemClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CloneMenu">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una copia di una classe <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem CloneMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.CloneMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneMenu () As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ CloneMenu();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una copia dell'oggetto <see cref="T:System.Windows.Forms.MenuItem" /> corrente.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.MenuItem" /> che rappresenta la voce di menu duplicata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MenuItem> non possono essere utilizzati in più posizioni a meno che non si ottenga una copia del <xref:System.Windows.Forms.MenuItem>. È possibile chiamare questo metodo per creare una copia di questa voce di menu per l'utilizzo in un <xref:System.Windows.Forms.ContextMenu>, <xref:System.Windows.Forms.MainMenu>, o altri <xref:System.Windows.Forms.MenuItem> all'interno dell'applicazione. Quando una voce di menu viene duplicata, gestori di eventi specificati nella voce di menu originale continuerà a funzionare nella versione duplicata della voce di menu. Ad esempio, se è stato creato un <xref:System.Windows.Forms.MenuItem> ed è connesso il <xref:System.Windows.Forms.MenuItem.Click> evento al gestore eventi. Quando la voce di menu viene duplicata, la voce di menu clonato chiamerà il gestore dell'evento stesso.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene cloni un <xref:System.Windows.Forms.MenuItem> e lo visualizza in un <xref:System.Windows.Forms.ContextMenu>. Nell'esempio si presuppone che un <xref:System.Windows.Forms.MenuItem> esiste un <xref:System.Windows.Forms.MainMenu> in un form con il nome del `menuItem1` e che un <xref:System.Windows.Forms.ContextMenu> oggetto denominato `contextMenu1` è presente anche nel form.  
  
 [!code-cpp[Classic MenuItem.CloneMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.CloneMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.CloneMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="protected void CloneMenu (System.Windows.Forms.MenuItem itemSrc);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CloneMenu(class System.Windows.Forms.MenuItem itemSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.CloneMenu(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CloneMenu (itemSrc As MenuItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CloneMenu(System::Windows::Forms::MenuItem ^ itemSrc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemSrc" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="itemSrc">Oggetto <see cref="T:System.Windows.Forms.MenuItem" /> che rappresenta la voce di menu da copiare.</param>
        <summary>Crea una copia dell'oggetto <see cref="T:System.Windows.Forms.MenuItem" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo per creare copie delle voci di menu è già stato creato per l'utilizzo in un menu di scelta rapida o un'altra struttura di menu all'interno dell'applicazione. Questa versione di <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> consente di specificare un determinato <xref:System.Windows.Forms.MenuItem> copiare anziché la voce di menu che chiama il metodo. È possibile utilizzare questo metodo per inizializzare una nuova <xref:System.Windows.Forms.MenuItem> oggetto con una copia di un altro <xref:System.Windows.Forms.MenuItem>. Quando una voce di menu viene duplicata, gestori di eventi specificati nella voce di menu originale continuerà a funzionare nella versione duplicata della voce di menu. Ad esempio, se è stato creato un <xref:System.Windows.Forms.MenuItem> ed è connesso il <xref:System.Windows.Forms.MenuItem.Click> evento al gestore eventi. Quando la voce di menu viene duplicata, la voce di menu clonato chiamerà il gestore dell'evento stesso.  
  
   
  
## Examples  
 Esempio di codice seguente Inizializza una nuova <xref:System.Windows.Forms.MenuItem> con una copia di un oggetto esistente <xref:System.Windows.Forms.MenuItem> utilizzato un <xref:System.Windows.Forms.MainMenu> in un form. Il codice aggiunge quindi clonato <xref:System.Windows.Forms.MenuItem> per un <xref:System.Windows.Forms.ContextMenu> nel form. Questo esempio si presuppone che un <xref:System.Windows.Forms.MenuItem> è già stato creato e denominato `menuItem1` e che un <xref:System.Windows.Forms.ContextMenu> controllo è stato creato e denominato `contextMenu1`.  
  
 [!code-cpp[Classic MenuItem.CloneMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.CloneMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.CloneMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultItem">
      <MemberSignature Language="C#" Value="public bool DefaultItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DefaultItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.DefaultItem" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultItem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DefaultItem { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se la voce di menu è quella predefinita.</summary>
        <value>
          <see langword="true" /> se la voce di menu è quella predefinita; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La voce di menu predefinito per un menu è in grassetto. Quando l'utente fa doppio clic un sottomenu che contiene un elemento predefinito, è selezionata la voce predefinita e viene chiuso il sottomenu. È possibile utilizzare il <xref:System.Windows.Forms.MenuItem.DefaultItem%2A> proprietà per indicare l'azione predefinita prevista in un menu di scelta rapida.  
  
   
  
## Examples  
 Esempio di codice seguente crea una voce di menu con due voci di sottomenu. Nell'esempio viene impostata `menuItem2` come il menu predefinito utilizzando il <xref:System.Windows.Forms.MenuItem.DefaultItem%2A> proprietà.  
  
 [!code-cpp[Classic MenuItem.DefaultItem Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.DefaultItem Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.DefaultItem Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
        <summary>Elimina le risorse, diverse dalla memoria, usate dall'oggetto <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il metodo <xref:System.Windows.Forms.MenuItem.Dispose%2A> dopo aver terminato di utilizzare l'oggetto <xref:System.Windows.Forms.MenuItem>. Il metodo <xref:System.Windows.Forms.MenuItem.Dispose%2A> lascia l'oggetto <xref:System.Windows.Forms.MenuItem> in una condizione di inutilizzabilità. Dopo la chiamata <xref:System.Windows.Forms.MenuItem.Dispose%2A>, è necessario rilasciare tutti i riferimenti al <xref:System.Windows.Forms.MenuItem> in modo che la memoria occupata può essere recuperata tramite garbage collection.  
  
> [!NOTE]
>  Chiamare sempre il metodo <xref:System.Windows.Forms.MenuItem.Dispose%2A> prima di rilasciare l'ultimo riferimento a <xref:System.Windows.Forms.MenuItem>. In caso contrario, le risorse di <xref:System.Windows.Forms.MenuItem> non è verranno liberate finché garbage collection di <xref:System.Windows.Forms.MenuItem> distruttore dell'oggetto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawItemEventHandler ^ DrawItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Viene generato quando la proprietà <see cref="P:System.Windows.Forms.MenuItem.OwnerDraw" /> di una voce di menu è impostata su <see langword="true" /> e viene richiesto di disegnare la voce di menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.DrawItemEventArgs> argomento passato a un <xref:System.Windows.Forms.MenuItem.DrawItem> gestore eventi fornisce un <xref:System.Drawing.Graphics> oggetto che consente di eseguire altre operazioni grafiche sulla superficie della voce di menu e la realizzazione. È possibile utilizzare questo gestore eventi per creare menu personalizzati che rispondono alle esigenze dell'applicazione. Per ulteriori informazioni sulla gestione degli eventi, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come gestire il <xref:System.Windows.Forms.MenuItem.DrawItem> evento. In questo esempio crea un menu elemento tramite un <xref:System.Drawing.Brush> e <xref:System.Drawing.Font>e quindi disegna un <xref:System.Drawing.Rectangle> intorno all'elemento del menu. Il disegno viene eseguito tramite il <xref:System.Drawing.Graphics> oggetto, che viene passato al gestore dell'evento nel <xref:System.Windows.Forms.DrawItemEventArgs> parametro. Nell'esempio si presuppone che è stata inizializzata il <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> proprietà per l'elemento `true`. Per l'esempio c#, aggiungere il codice seguente nel costruttore del form, dopo `InitializeComponent`, per associare l'evento:  
  
 `this.menuItem1.DrawItem += new DrawItemEventHandler(menuItem1_DrawItem);`  
  
 [!code-cpp[OwnerDraw example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/OwnerDraw example/CPP/form1.cpp#1)]
 [!code-csharp[OwnerDraw example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/OwnerDraw example/CS/form1.cs#1)]
 [!code-vb[OwnerDraw example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/OwnerDraw example/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.OwnerDraw" />
        <altmember cref="E:System.Windows.Forms.MenuItem.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se la voce di menu è abilitata.</summary>
        <value>
          <see langword="true" /> se la voce di menu è abilitata; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Forms.MenuItem> che è disabilitato viene visualizzato in grigio per indicare lo stato. Quando una voce di menu padre è disabilitata, tutte le voci di sottomenu non vengono visualizzati.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Windows.Forms.MenuItem.Popup> evento per determinare se <xref:System.Windows.Forms.MenuItem> gli oggetti che forniscono il supporto per le operazioni Taglia, copia e le operazioni di eliminazione sono abilitati prima che venga visualizzato il menu vengono visualizzati in. Nell'esempio viene determinato se `textBox1`, un <xref:System.Windows.Forms.TextBox> controllo nel form ed è abilitata, ha lo stato attivo di input e il testo selezionato prima di abilitare il <xref:System.Windows.Forms.MenuItem> oggetti. In questo esempio richiede tre <xref:System.Windows.Forms.MenuItem> vengono creati gli oggetti denominati `menuCut`, `menuCopy`, e `menuDelete` sono stati creati.  
  
 [!code-cpp[MenuItem.Popup#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Index" />
      <MemberSignature Language="VB.NET" Value="Public Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica la posizione della voce di menu nel menu padre corrispondente.</summary>
        <value>Indice in base zero che rappresenta la posizione della voce di menu nel menu padre corrispondente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà fornisce la posizione indicizzata di una voce di menu nella raccolta di elementi di menu del menu padre corrispondente. È possibile utilizzare questa proprietà per riposizionare una voce di menu in una posizione diversa all'interno di relativo menu. È inoltre possibile utilizzare questa proprietà quando si crea un <xref:System.Windows.Forms.MenuItem> per specificare la posizione in una struttura di menu al momento della creazione.  
  
   
  
## Examples  
 Esempio di codice seguente sposta la posizione di due voci di menu in un menu. Esempio di codice seguente presuppone che due <xref:System.Windows.Forms.MenuItem> vengono creati gli oggetti denominati `menuItem1` e `menuItem2`. Il `menuItem1` voce di menu viene spostato verso il basso di una posizione nel menu, mentre `menuItem2` sposta verso l'alto di una posizione.  
  
 [!code-cpp[Classic MenuItem.Index Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Index Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Index Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Index Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Index Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Index Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore assegnato è minore di zero o maggiore del conteggio delle voci.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsParent">
      <MemberSignature Language="C#" Value="public override bool IsParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.IsParent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsParent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsParent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la voce di menu contiene voci di menu figlie.</summary>
        <value>
          <see langword="true" /> se la voce di menu contiene voci di menu figlie; <see langword="false" /> se è una voce di menu autonoma.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare questa proprietà con il <xref:System.Windows.Forms.MenuItem.Parent%2A> proprietà a cui passare nel codice tramite un'intera struttura di menu.  
  
   
  
## Examples  
 Esempio di codice seguente determina se sono presenti sottomenu associati un <xref:System.Windows.Forms.MenuItem> denominato `menuItem1`. Eventuali sottomenu esistenti vengono disabilitati impostando il <xref:System.Windows.Forms.MenuItem.Enabled%2A> proprietà `false`. Nell'esempio si presuppone che sia presente un <xref:System.Windows.Forms.MenuItem> creato denominato `menuItem1`.  
  
 [!code-cpp[Classic MenuItem.IsParent Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.IsParent Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.IsParent Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MdiList">
      <MemberSignature Language="C#" Value="public bool MdiList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MdiList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MdiList" />
      <MemberSignature Language="VB.NET" Value="Public Property MdiList As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MdiList { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se la voce di menu sarà compilata con un elenco di finestre figlie Multiple Document Interface (MDI) visualizzate nel form associato.</summary>
        <value>
          <see langword="true" /> se nella voce di menu viene visualizzato un elenco di finestre figlio MDI; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando una voce di menu è selezionata per visualizzare un elenco di finestre figlio MDI, l'elenco viene visualizzato come un sottomenu della voce di menu. Solo i moduli che sono definiti come form figlio MDI vengono visualizzati nell'elenco della finestra. Solo nove finestre figlio possono essere visualizzate contemporaneamente. Se sono presenti più di nove finestre figlio visualizzate, una voce di menu "Altre Windows …" viene visualizzata alla fine dell'elenco della finestra. Selezionando questa voce di menu, viene visualizzata una finestra di dialogo con un elenco completo delle finestre figlio che sono attualmente attive.  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Windows.Forms.MenuItem> utilizzato per visualizzare l'elenco di form figlio MDI attualmente aperti in un form MDI.  
  
 [!code-cpp[Classic MenuItem.MdiList Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MdiList Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MdiList Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MeasureItemEventHandler MeasureItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.MeasureItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MeasureItem As MeasureItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MeasureItemEventHandler ^ MeasureItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MeasureItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il menu deve conoscere la dimensione di una voce di menu prima di disegnarla.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene generato, è necessario disporre di <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> proprietà della voce di menu è impostata su `true`. Questo evento viene generato prima che il menu di disegno personalizzato viene disegnato per consentire ai disegnate per specificare le dimensioni della voce di menu. Per ulteriori informazioni sulla gestione degli eventi, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio, un gestore eventi genera report sull'occorrenza del <xref:System.Windows.Forms.MenuItem.MeasureItem> evento. Questo report consente di capire quando l'evento si verifica e possa agevolare il debug.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza del tipo <xref:System.Windows.Forms.MenuItem> denominato `MenuItem1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.MenuItem.MeasureItem> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#499](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#499)]
 [!code-vb[System.Windows.Forms.EventExamples#499](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#499)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.OwnerDraw" />
        <altmember cref="E:System.Windows.Forms.MenuItem.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="MenuID">
      <MemberSignature Language="C#" Value="protected int MenuID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MenuID" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MenuID" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property MenuID As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int MenuID { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica l'identificatore Windows per questa voce di menu.</summary>
        <value>Identificatore Windows per questa voce di menu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MergeMenu">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unisce questo oggetto <see cref="T:System.Windows.Forms.MenuItem" /> a un altro <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem MergeMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem MergeMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.MergeMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MergeMenu () As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ MergeMenu();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unisce questo oggetto <see cref="T:System.Windows.Forms.MenuItem" /> a un altro <see cref="T:System.Windows.Forms.MenuItem" /> e restituisce l'oggetto <see cref="T:System.Windows.Forms.MenuItem" /> unito risultante.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.MenuItem" /> che rappresenta la voce di menu unita.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si chiama questa versione di <xref:System.Windows.Forms.MenuItem.MergeMenu%2A>, <xref:System.Windows.Forms.MenuItem> restituita è una copia della voce di menu corrente che può essere unita a un'altra voce di menu senza influire sulla funzionalità dell'elemento corrente. Questa versione di <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> metodo è simile alla chiamata di <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> metodo che non contiene parametri.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public void MergeMenu (System.Windows.Forms.MenuItem itemSrc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MergeMenu(class System.Windows.Forms.MenuItem itemSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.MergeMenu(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MergeMenu (itemSrc As MenuItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MergeMenu(System::Windows::Forms::MenuItem ^ itemSrc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemSrc" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="itemSrc">Oggetto <see cref="T:System.Windows.Forms.MenuItem" /> che specifica la voce di menu da unire a questa.</param>
        <summary>Unisce un'altra voce di menu a questa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Voci di menu vengono unite in base al valore della voce di menu <xref:System.Windows.Forms.MenuItem.MergeType%2A> e <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> proprietà. Questa versione di <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> metodo consente di unire due <xref:System.Windows.Forms.MenuItem> oggetti (e i relativi sottomenu) in un singolo menu. Unione di menu viene gestito automaticamente quando un modulo di interfaccia a documenti multipli (MDI) padre e figlio hanno menu. È possibile utilizzare questa versione del metodo per unire due <xref:System.Windows.Forms.MenuItem> oggetti e le voci di sottomenu collocati un <xref:System.Windows.Forms.MainMenu> controllo in un singolo menu all'interno di un <xref:System.Windows.Forms.ContextMenu>. Ad esempio, è possibile chiamare questa versione di <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> metodo per unire le voci di menu di un menu File e modifica in un singolo <xref:System.Windows.Forms.MenuItem> che possono essere aggiunti e visualizzati da un <xref:System.Windows.Forms.ContextMenu>.  
  
   
  
## Examples  
 L'esempio di codice seguente viene utilizzata questa versione di <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> metodo per creare una copia di un <xref:System.Windows.Forms.MenuItem> e unione con un altro. L'oggetto unito <xref:System.Windows.Forms.MenuItem> viene quindi aggiunto a un <xref:System.Windows.Forms.ContextMenu> controllo. Nell'esempio si presuppone che non esistono due voci di menu chiamati `menuItem1` e `menuItem2` contenenti le voci di sottomenu all'interno di essi e un <xref:System.Windows.Forms.ContextMenu> denominato `contextMenu1` per visualizzare le voci di menu. `menuItem1` e `menuItem2` contengono voci di menu diverse. Dopo la chiamata a <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> viene effettuata, una consolidati menu viene creato.  
  
 [!code-cpp[Classic MenuItem.MergeMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MergeMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MergeMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeOrder">
      <MemberSignature Language="C#" Value="public int MergeOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MergeOrder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MergeOrder" />
      <MemberSignature Language="VB.NET" Value="Public Property MergeOrder As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MergeOrder { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica la posizione relativa della voce di menu quando è unito a un altro.</summary>
        <value>Indice in base zero che rappresenta la posizione nell'ordine di merge per questa voce di menu. Il valore predefinito è 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ordine di unione di una voce di menu specifica la posizione relativa che questa voce di menu verranno se la struttura di menu che il <xref:System.Windows.Forms.MenuItem> contenuto viene unita a un altro.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> proprietà per controllare il modo in cui viene visualizzato un menu unito. Questo è un esempio completo, pronto per l'esecuzione di una volta aggiunto al progetto.  
  
 [!code-cpp[System.Windows.Forms.MenuItemMergeOrder#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.MenuItemMergeOrder#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.MenuItemMergeOrder#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="M:System.Windows.Forms.MenuItem.MergeMenu" />
      </Docs>
    </Member>
    <Member MemberName="MergeType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuMerge MergeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MenuMerge MergeType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MergeType" />
      <MemberSignature Language="VB.NET" Value="Public Property MergeType As MenuMerge" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MenuMerge MergeType { System::Windows::Forms::MenuMerge get(); void set(System::Windows::Forms::MenuMerge value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuMerge</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica il comportamento di questa voce di menu quando il relativo menu è unito a un altro.</summary>
        <value>Valore <see cref="T:System.Windows.Forms.MenuMerge" /> che rappresenta il tipo di unione della voce di menu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il tipo di unione di una voce di menu indica il comportamento di voce di menu quando ha lo stesso ordine di merge in un'altra voce di menu da unire. Per creare un menu consolidato in base a due o più menu esistenti, è possibile utilizzare il menu unito.  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Windows.Forms.MenuItem> con il <xref:System.Windows.Forms.MenuItem.MergeType%2A> e <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> specificato in modo che la voce di menu viene aggiunto al menu unito nella prima posizione.  
  
 [!code-cpp[Classic MenuItem.MergeType Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MergeType Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MergeType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Il valore assegnato non è uno dei valori di <see cref="T:System.Windows.Forms.MenuMerge" />.</exception>
        <altmember cref="T:System.Windows.Forms.MenuMerge" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="Mnemonic">
      <MemberSignature Language="C#" Value="public char Mnemonic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Mnemonic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Mnemonic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Mnemonic As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Mnemonic { char get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica il carattere mnemonico associato a questa voce di menu.</summary>
        <value>Carattere che rappresenta il carattere mnemonico associato a questa voce di menu. Restituisce il carattere NUL (valore ASCII 0) se nel testo dell'oggetto <see cref="T:System.Windows.Forms.MenuItem" /> non sono specificati caratteri mnemonici.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il carattere mnemonico è il primo carattere dopo la e commerciale (&) nel testo della finestra di <xref:System.Windows.Forms.MenuItem>. Questa proprietà non restituirà un tasto di scelta rapida se due caratteri e commerciale sono posizionati come le e commerciali vengono utilizzate per visualizzare una e commerciale nel testo della finestra di <xref:System.Windows.Forms.MenuItem> anziché definire un tasto mnemonico.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Text" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Windows.Forms.MenuItem.Click" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per ulteriori informazioni, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Windows.Forms.MenuItem.Click> evento per eseguire attività quando un <xref:System.Windows.Forms.MenuItem> si fa clic. Nell'esempio viene creato un <xref:System.Windows.Forms.MainMenu> chiamato `mainMenu1` e aggiunge due <xref:System.Windows.Forms.MenuItem> oggetti, `topMenuItem` (`File`) e `menuItem1` (`Open`). Si connette quindi il `Click` evento per il `menuItem1_Click` gestore dell'evento. Quando l'utente sceglie il `Open` voce di menu, un <xref:System.Windows.Forms.OpenFileDialog> viene inizializzato e visualizzato. Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Form> denominato `Form1`.  
  
 [!code-cpp[MenuItemClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItemClick/CPP/form1.cpp#1)]
 [!code-csharp[MenuItemClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItemClick/CS/form1.cs#1)]
 [!code-vb[MenuItemClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItemClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" /> metodo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Forms.DrawItemEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Windows.Forms.MenuItem.DrawItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per ulteriori informazioni, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> metodo.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DrawItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnInitMenuPopup">
      <MemberSignature Language="C#" Value="protected virtual void OnInitMenuPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitMenuPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnInitMenuPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitMenuPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitMenuPopup(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Windows.Forms.MenuItem.Popup" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMeasureItem">
      <MemberSignature Language="C#" Value="protected virtual void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMeasureItem(class System.Windows.Forms.MeasureItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMeasureItem (e As MeasureItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMeasureItem(System::Windows::Forms::MeasureItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MeasureItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Forms.MeasureItemEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Windows.Forms.MenuItem.MeasureItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per ulteriori informazioni, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> metodo.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.MeasureItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnPopup">
      <MemberSignature Language="C#" Value="protected virtual void OnPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPopup(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Windows.Forms.MenuItem.Popup" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per ulteriori informazioni, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Windows.Forms.MenuItem.Popup> evento per determinare se <xref:System.Windows.Forms.MenuItem> gli oggetti che forniscono il supporto per le operazioni Taglia, copia e le operazioni di eliminazione sono abilitati prima che venga visualizzato il menu vengono visualizzati in. Nell'esempio viene determinato se `textBox1`, un <xref:System.Windows.Forms.TextBox> controllo nel form ed è abilitata, ha lo stato attivo di input e il testo selezionato prima di abilitare il <xref:System.Windows.Forms.MenuItem> oggetti. In questo esempio richiede tre <xref:System.Windows.Forms.MenuItem> vengono creati gli oggetti denominati `menuCut`, `menuCopy`, e `menuDelete` sono stati creati.  
  
 [!code-cpp[MenuItem.Popup#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" /> metodo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelect">
      <MemberSignature Language="C#" Value="protected virtual void OnSelect (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelect(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelect (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelect(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Windows.Forms.MenuItem.Select" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per ulteriori informazioni, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Windows.Forms.MenuItem.Select> evento del <xref:System.Windows.Forms.MenuItem> classe per assegnare il testo della Guida in linea un <xref:System.Windows.Forms.StatusBarPanel> di un <xref:System.Windows.Forms.StatusBar> controllo. Questo esempio si presuppone che <xref:System.Windows.Forms.MenuItem> gli oggetti denominati `menuOpen`, `menuSave`, e `menuExit` vengono aggiunti a un <xref:System.Windows.Forms.MainMenu> controllo in un form. L'esempio richiede che un <xref:System.Windows.Forms.StatusBar> controllo denominato `statusBar1` è stato aggiunto al form. Il <xref:System.Windows.Forms.StatusBar> controllo deve contenere un <xref:System.Windows.Forms.StatusBarPanel>.  
  
 [!code-cpp[MenuItem.Select#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Select/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Select#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Select/CS/form1.cs#1)]
 [!code-vb[MenuItem.Select#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Select/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" /> metodo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OwnerDraw">
      <MemberSignature Language="C#" Value="public bool OwnerDraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OwnerDraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.OwnerDraw" />
      <MemberSignature Language="VB.NET" Value="Public Property OwnerDraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OwnerDraw { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se è il codice fornito oppure Windows a disegnare la voce di menu.</summary>
        <value>
          <see langword="true" /> se la voce di menu verrà disegnata utilizzando il codice; <see langword="false" /> se verrà disegnata utilizzando Windows. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando il <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> è impostata su `true`, è necessario gestire tutti i disegni della voce di menu. È possibile utilizzare questa funzionalità per creare la propria Mostra menu speciali.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato un menu con una voce di menu creato dal proprietario. Questo set di esempio di <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> proprietà e utilizza il `AddHandler` istruzione e `AddressOf` operatore per designare un delegato per gestire il <xref:System.Windows.Forms.MenuItem.DrawItem> evento. Per eseguire l'esempio, incollarlo in un form che importa il <xref:System>, <xref:System.Windows.Forms>, e <xref:System.Drawing> gli spazi dei nomi. Chiamare `InitializeMenu` dal costruttore del form o `Load` metodo.  
  
 [!code-cpp[System.Windows.Forms.MenuItemOwnerDraw#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.MenuItemOwnerDraw#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.MenuItemOwnerDraw#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Windows.Forms.Menu" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Menu Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Menu Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Menu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Menu ^ Parent { System::Windows::Forms::Menu ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Menu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica il menu che contiene questa voce di menu.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.Menu" /> che rappresenta il menu che contiene questa voce di menu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare questa proprietà per ottenere il <xref:System.Windows.Forms.Menu> oggetto per un sottomenu. È possibile eseguire il cast di <xref:System.Windows.Forms.Menu> oggetto restituito da questa proprietà per un <xref:System.Windows.Forms.MenuItem> oggetto per gestirlo.  
  
   
  
## Examples  
 In questo esempio, si crea un menu principale e una voce di menu di primo livello, `menuItem1` (`File`). È inoltre creare due voci di menu, `menuItem2` (`New`) e `menuItem3` (`Open`) e aggiungerli all'elenco delle voci di menu `menuItem1`. Quindi per vedere se `menuItem3` dispone di un elemento padre che è true, dal menu e visualizzare le informazioni di questo menu padre nella finestra di messaggio. In questo esempio presuppone che sia stato creato un <xref:System.Windows.Forms.Form> denominato `Form1`.  
  
 [!code-cpp[ParentMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ParentMenu/CPP/form1.cpp#1)]
 [!code-csharp[ParentMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ParentMenu/CS/form1.cs#1)]
 [!code-vb[ParentMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ParentMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformClick">
      <MemberSignature Language="C#" Value="public void PerformClick ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.PerformClick" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformClick ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformClick();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Genera un evento <see cref="E:System.Windows.Forms.Control.Click" /> per l'oggetto <see cref="T:System.Windows.Forms.MenuItem" />, simulando il clic dell’utente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare questo menu per attivare una voce di menu tramite il codice senza passare per informazioni sull'evento. Ad esempio, se si desidera attivare il menu di un elemento in base a un'azione che si verifica nell'applicazione, è possibile chiamare il <xref:System.Windows.Forms.MenuItem.PerformClick%2A> metodo per tale <xref:System.Windows.Forms.MenuItem>.  
  
   
  
## Examples  
 In questo esempio si fa clic su a livello di codice una voce di menu utilizzando il `PerformClick` metodo. Innanzitutto, creare un menu principale (`mainMenu1`) e aggiungere due voci di menu, `menuItem1` (`File`) e `menuItem2` (`Edit`). È inoltre possibile utilizzare il <xref:System.Windows.Forms.MenuItem.Click> evento per inviare dati al gestore dell'evento quando si fa clic su una voce di menu. È quindi utilizzare il `PerformClick` metodo fare clic su di `File` voce di menu. Quando si avvia l'applicazione, il `File` voce di menu viene attivata, e una finestra di messaggio che contiene il testo "File in cui si fa clic sul menu". viene visualizzato sullo schermo. Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Form> denominato `Form1`.  
  
 [!code-cpp[PerformClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PerformClick/CPP/form1.cpp#1)]
 [!code-csharp[PerformClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PerformClick/CS/form1.cs#1)]
 [!code-vb[PerformClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PerformClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSelect">
      <MemberSignature Language="C#" Value="public virtual void PerformSelect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformSelect() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.PerformSelect" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub PerformSelect ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PerformSelect();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Genera l'evento <see cref="E:System.Windows.Forms.MenuItem.Select" /> per questa voce di menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di generare il <xref:System.Windows.Forms.MenuItem.Select> evento senza passare per informazioni sull'evento al gestore dell'evento.  
  
   
  
## Examples  
 In questo esempio è a livello di codice selezionare una voce di menu utilizzando il `PerformSelect` metodo. Innanzitutto, creare un menu principale (`mainMenu1`) e aggiungere due voci di menu, `menuItem1` (`File`) e `menuItem2` (`Edit`). È inoltre possibile utilizzare il <xref:System.Windows.Forms.MenuItem.Select> evento per inviare dati al gestore dell'evento quando è selezionata una voce di menu. È quindi utilizzare il `PerformSelect` metodo per selezionare il `File` voce di menu. Quando si avvia l'applicazione, il `File` voce di menu e una finestra di messaggio che contiene il testo "File è stato selezionato menu". viene visualizzato sullo schermo. Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Form> denominato `Form1`.  
  
 [!code-cpp[PerformSelect#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PerformSelect/CPP/form1.cpp#1)]
 [!code-csharp[PerformSelect#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PerformSelect/CS/form1.cs#1)]
 [!code-vb[PerformSelect#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PerformSelect/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.MenuItem.PerformClick" />
      </Docs>
    </Member>
    <Member MemberName="Popup">
      <MemberSignature Language="C#" Value="public event EventHandler Popup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Popup" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Popup" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Popup As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Popup;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica prima della visualizzazione dell'elenco delle voci di menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento si verifica solo quando una voce di menu contiene voci di sottomenu da visualizzare. È possibile utilizzare questo gestore eventi per aggiungere, rimuovere, abilitare, disabilitare, selezionare o deselezionare le voci di menu in base allo stato dell'applicazione prima che vengano visualizzati. Per ulteriori informazioni sulla gestione degli eventi, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Windows.Forms.MenuItem.Popup> evento per determinare se <xref:System.Windows.Forms.MenuItem> gli oggetti che forniscono il supporto per le operazioni Taglia, copia e le operazioni di eliminazione sono abilitati prima che venga visualizzato il menu vengono visualizzati in. Nell'esempio viene determinato se `textBox1`, un <xref:System.Windows.Forms.TextBox> controllo nel form ed è abilitata, ha lo stato attivo di input e il testo selezionato prima di abilitare il <xref:System.Windows.Forms.MenuItem> oggetti. In questo esempio richiede tre <xref:System.Windows.Forms.MenuItem> vengono creati gli oggetti denominati `menuCut`, `menuCopy`, e `menuDelete` sono stati creati.  
  
 [!code-cpp[MenuItem.Popup#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RadioCheck">
      <MemberSignature Language="C#" Value="public bool RadioCheck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RadioCheck" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.RadioCheck" />
      <MemberSignature Language="VB.NET" Value="Public Property RadioCheck As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RadioCheck { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se l'oggetto <see cref="T:System.Windows.Forms.MenuItem" />, quando selezionato, visualizza un pulsante di opzione anziché un segno di spunta.</summary>
        <value>
          <see langword="true" /> se un pulsante di opzione viene utilizzato al posto di un segno di spunta; <see langword="false" /> se viene visualizzato il segno di spunta standard quando la voce di menu è selezionata. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Segni di spunta non implicano necessariamente uno stato per un gruppo di voci di menu si escludono a vicenda. È possibile utilizzare questa proprietà per indicare all'utente che il segno di spunta una voce di menu si escludono a vicenda.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Windows.Forms.MenuItem.Checked%2A> proprietà per modificare lo stato di un'applicazione. Nell'esempio, un gruppo di voci di menu sono fornite vengono utilizzati per specificare il colore del testo in un <xref:System.Windows.Forms.TextBox> controllo. Nell'esempio, il gestore dell'evento specificato viene utilizzato il <xref:System.Windows.Forms.MenuItem.Click> evento di tre voci di menu. Ogni voce di menu consente di specificare un colore, `menuItemRed`, `menuItemGreen`, o `menuItemBlue`. Il gestore eventi determina la voce di menu è stato fatto clic, inserisce un segno di spunta per la voce di menu selezionata e viene modificato il colore del testo nel formato <xref:System.Windows.Forms.TextBox> controllo denominato `textBox1`. Nell'esempio viene inoltre utilizzata la <xref:System.Windows.Forms.MenuItem.RadioCheck%2A> proprietà per illustrare come utilizzare un controllo pulsante di opzione per visualizzare le voci di menu che si escludono a vengono. Questo esempio si presuppone che il <xref:System.Drawing?displayProperty=nameWithType> dello spazio dei nomi è stato aggiunto al form che contiene il codice.  
  
 [!code-cpp[Classic MenuItem.RadioCheck Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.RadioCheck Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.RadioCheck Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Checked" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public event EventHandler Select;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Select" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Select" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Select As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Select;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente posiziona il puntatore su una voce di menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene generato in genere quando l'utente posiziona il puntatore del mouse sulla voce di menu. L'evento può essere generato anche quando l'utente evidenzia una voce di menu utilizzando la tastiera, scorrimento alla voce di menu con i tasti di direzione. È possibile utilizzare questo evento per visualizzare una stringa di Guida dettagliata relativa a questa voce di menu nella barra di stato di un'applicazione. Per ulteriori informazioni sulla gestione degli eventi, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
> [!NOTE]
>  Se il <xref:System.Windows.Forms.Menu.MenuItems%2A> proprietà per il <xref:System.Windows.Forms.MenuItem> contiene elementi, questo evento non viene generato. Questo evento non viene generato per le voci di menu padre.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Windows.Forms.MenuItem.Select> evento del <xref:System.Windows.Forms.MenuItem> classe per assegnare il testo della Guida in linea un <xref:System.Windows.Forms.StatusBarPanel> di un <xref:System.Windows.Forms.StatusBar> controllo. Questo esempio si presuppone che <xref:System.Windows.Forms.MenuItem> gli oggetti denominati `menuOpen`, `menuSave`, e `menuExit` vengono aggiunti a un <xref:System.Windows.Forms.MainMenu> controllo in un form. L'esempio richiede che un <xref:System.Windows.Forms.StatusBar> controllo denominato `statusBar1` è stato aggiunto al form. Il <xref:System.Windows.Forms.StatusBar> controllo deve contenere un <xref:System.Windows.Forms.StatusBarPanel>.  
  
 [!code-cpp[MenuItem.Select#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Select/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Select#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Select/CS/form1.cs#1)]
 [!code-vb[MenuItem.Select#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Select/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MenuItem.Click" />
      </Docs>
    </Member>
    <Member MemberName="Shortcut">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Shortcut Shortcut { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Shortcut Shortcut" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Shortcut" />
      <MemberSignature Language="VB.NET" Value="Public Property Shortcut As Shortcut" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Shortcut Shortcut { System::Windows::Forms::Shortcut get(); void set(System::Windows::Forms::Shortcut value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Shortcut</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica il tasto di scelta rapida associato alla voce di menu.</summary>
        <value>Uno dei valori di <see cref="T:System.Windows.Forms.Shortcut" />. Il valore predefinito è <see langword="Shortcut.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tasti di scelta rapida forniscono un metodo agli utenti di attivare spesso utilizzate voci di menu nel sistema di menu e per fornire accesso da tastiera per l'applicazione per gli utenti che non hanno accesso a un mouse o altro dispositivo di puntatore.  
  
   
  
## Examples  
 Esempio di codice seguente crea una voce di menu, imposta la didascalia, viene assegnato un tasto di scelta rapida, rende visibile la voce di menu e viene illustrata la visualizzazione di tasti di scelta rapida della voce di menu. Nell'esempio si presuppone che un <xref:System.Windows.Forms.MenuItem> è stato creato un oggetto denominato `menuItem1`.  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Il valore assegnato non è uno dei valori di <see cref="T:System.Windows.Forms.Shortcut" />.</exception>
        <altmember cref="T:System.Windows.Forms.Shortcut" />
      </Docs>
    </Member>
    <Member MemberName="ShowShortcut">
      <MemberSignature Language="C#" Value="public bool ShowShortcut { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowShortcut" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.ShowShortcut" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowShortcut As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowShortcut { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il tasto di scelta rapida associato alla voce di menu viene visualizzato accanto alla didascalia della voce di menu.</summary>
        <value>
          <see langword="true" /> se la combinazione dei tasti di scelta rapida viene visualizzata accanto alla didascalia della voce di menu; <see langword="false" /> se tale combinazione non è visualizzata. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare questa proprietà per fornire agli utenti la possibilità di nascondere dal menu di scelta rapida per risparmiare spazio di menu o per nascondere un tasto di scelta rapida visualizzato.  
  
   
  
## Examples  
 Esempio di codice seguente crea una voce di menu, imposta la didascalia, viene assegnato un tasto di scelta rapida, rende visibile la voce di menu e viene illustrata la visualizzazione di tasti di scelta rapida della voce di menu. Nell'esempio si presuppone che un <xref:System.Windows.Forms.MenuItem> è stato creato un oggetto denominato `menuItem1`.  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Shortcut" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica la didascalia della voce di menu.</summary>
        <value>Didascalia della voce di menu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si specifica una didascalia per la voce di menu, è anche possibile specificare una chiave di accesso inserendo un '&' prima del carattere da utilizzare come tasto di scelta rapida. Ad esempio, per specificare il valore di "F" in "File" come una chiave di accesso, potrebbe specificare la didascalia della voce di menu come "& File". È possibile utilizzare questa funzionalità per la navigazione tramite tastiera per i menu.  
  
 Impostando questa proprietà su "`-`", la voce di menu da visualizzare come separatore (linea orizzontale) anziché una voce di menu standard.  
  
   
  
## Examples  
 Esempio di codice seguente crea una voce di menu, imposta la didascalia, viene assegnato un tasto di scelta rapida, rende visibile la voce di menu e viene illustrata la visualizzazione di tasti di scelta rapida della voce di menu. Nell'esempio si presuppone che un <xref:System.Windows.Forms.MenuItem> è stato creato un oggetto denominato `menuItem1`.  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Mnemonic" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce una stringa che rappresenta l'oggetto <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
        <returns>Stringa che rappresenta l'oggetto <see cref="T:System.Windows.Forms.MenuItem" /> corrente. La stringa comprende il tipo e la proprietà <see cref="P:System.Windows.Forms.MenuItem.Text" /> del controllo.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Visible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se la voce di menu è visibile.</summary>
        <value>
          <see langword="true" /> se la voce di menu sarà visibile nel menu; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare questa proprietà per modificare una struttura di menu senza la necessità di unire o disabilitare i menu. Ad esempio, se si desidera nascondere un'intera sezione di funzionalità dal menu per l'applicazione, è possibile nasconderle dall'utente impostando questa proprietà su `false`.  
  
   
  
## Examples  
 Esempio di codice seguente crea una voce di menu, imposta la didascalia, viene assegnato un tasto di scelta rapida, rende visibile la voce di menu e viene illustrata la visualizzazione di tasti di scelta rapida della voce di menu. Nell'esempio si presuppone che un <xref:System.Windows.Forms.MenuItem> è stato creato un oggetto denominato `menuItem1`.  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>