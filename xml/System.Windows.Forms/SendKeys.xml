<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="928cd476312384e2f7d1033542661ae526636e6f" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51310794" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <TypeSignature Language="VB.NET" Value="Public Class SendKeys" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendKeys" />
  <TypeSignature Language="F#" Value="type SendKeys = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce metodi per l'invio di sequenze di tasti a un'applicazione.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare <xref:System.Windows.Forms.SendKeys> per inviare sequenze di tasti all'applicazione attiva. Non è possibile creare istanze di questa classe. Per inviare una pressione di tasto a una classe e procedere immediatamente con il flusso del programma, usare <xref:System.Windows.Forms.SendKeys.Send%2A>. Per attendere tutti i processi avviati dalla sequenza di tasti, usare <xref:System.Windows.Forms.SendKeys.SendWait%2A>.  
  
 Ogni chiave è rappresentata da uno o più caratteri. Per specificare un singolo carattere della tastiera, usare il carattere stesso. Ad esempio, per rappresentare la lettera A, passare la stringa "A" al metodo. Per rappresentare più caratteri, aggiungere ogni carattere aggiuntivo a quello che la precede. Per rappresentare le lettere A, B e C, specificare il parametro come "ABC".  
  
 Il segno più (+), accento circonflesso (^), segno di percentuale (%), tilde (~) e parentesi () hanno un significato speciale per <xref:System.Windows.Forms.SendKeys>. Per specificare uno di questi caratteri, racchiuderla tra parentesi graffe ({}). Ad esempio, per specificare il segno, usare "{+}". Per specificare i caratteri parentesi graffa, usare "{{}"e"{}}". Parentesi quadre ([]) non hanno alcun significato speciale per <xref:System.Windows.Forms.SendKeys>, ma è necessario racchiuderli tra parentesi graffe. In altre applicazioni, le parentesi quadre hanno un significato speciale che potrebbe essere significativo quando si verifica lo scambio di dati dinamici (DDE).  
  
> [!CAUTION]
>  Se l'applicazione verrà usata a livello internazionale con un'ampia gamma di tastiere, è opportuno evitare l'uso di <xref:System.Windows.Forms.SendKeys.Send%2A> perché potrebbe generare risultati imprevedibili.  
  
 Per specificare i caratteri che non vengono visualizzati quando si preme un tasto, ad esempio l'invio o TAB e le chiavi che rappresentano azioni anziché i caratteri, usare i codici nella tabella seguente.  
  
|Chiave|Codice|  
|---------|----------|  
|BACKSPACE|{BACKSPACE}, {b}, {Backspace} oppure|  
|INTERRUZIONE|INTERRUZIONE DI {}|  
|BLOC MAIUSC|{CAPSLOCK}|  
|CANC o CANC|{DELETE} o {CANC}|  
|Freccia GIÙ|{VERSO IL BASSO}|  
|FINE|{END}|  
|INVIO|{Immettere} o ~|  
|ESC|{ESC}|  
|?|{HELP}|  
|HOME|{HOME}|  
|I componenti aggiuntivi o l'istruzione INSERT|{INSERIRE} o {aggiuntivi}|  
|FRECCIA SINISTRA|{LEFT}|  
|BLOC NUM|{BLOCNUM}|  
|PGGIÙ|{PGDN}|  
|PGSU|{PGUP}|  
|SCHERMATA DI STAMPA|{CONTRASSEGNATO DA PRTSCN} (riservato per utilizzi futuri)|  
|FRECCIA DESTRA|{RIGHT}|  
|TASTO BLOC SCORR|{BLOC SCORR}|  
|TAB|{TAB}|  
|Freccia SU|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Aggiungere tastierino|{ADD}|  
|Tasto sottrazione|{SOTTRARRE}|  
|Tasto moltiplicazione|{MOLTIPLICARE}|  
|Tasto divisione|{DIVIDERE}|  
  
 Per specificare le chiavi combinate con qualsiasi combinazione del MAIUSC, CTRL e ALT, anteporre il codice con uno o più dei seguenti codici.  
  
|Chiave|Codice|  
|---------|----------|  
|MAIUSC|+|  
|CTRL|^|  
|ALT|%|  
  
 Per specificare che qualsiasi combinazione dei tasti MAIUSC, CTRL e ALT deve essere mantenuto premuto mentre vengono premuti diverse altre chiavi, racchiudere il codice per quei codici racchiuso tra parentesi. Ad esempio, per specificare per tenere premuto MAIUSC mentre vengono premuti E e C, usare "+ (CE)". Per specificare per tenere premuto MAIUSC mentre viene premuta E, seguita da C senza tenere premuto MAIUSC, usare "+ CE".  
  
 Per specificare la ripetizione di tasti, usare il formato {number chiave}. È necessario inserire uno spazio tra chiave e il numero. Significa premere il tasto freccia sinistra 42 volte; ad esempio, {sinistra 42} {h 10} significa premere che h 10 volte.  
  
> [!NOTE]
>  Poiché non esiste alcun metodo gestito per attivare un'altra applicazione, è possibile utilizzare questa classe all'interno dell'applicazione corrente o usare i metodi Windows nativi, ad esempio `FindWindow` e `SetForegroundWindow`, per forzare lo stato attivo su altre applicazioni.  
  
> [!NOTE]
>  La classe <xref:System.Windows.Forms.SendKeys> è stata aggiornata per .NET Framework 3.0 per consentirne l'uso in applicazioni eseguite in Windows Vista. La sicurezza avanzata di Windows Vista (nota come Controllo dell'account utente) impedisce alla precedente implementazione di funzionare come previsto.  
>   
>  La classe <xref:System.Windows.Forms.SendKeys> è soggetta a problemi di temporizzazione, che alcuni sviluppatori hanno dovuto risolvere. L'implementazione aggiornata è ancora soggetta a problemi di temporizzazione, ma è leggermente più veloce e può richiedere modifiche alle soluzioni alternative. La classe <xref:System.Windows.Forms.SendKeys> cerca di usare prima l'implementazione precedente e, se il tentativo non riesce, usa la nuova implementazione. Di conseguenza, il comportamento della classe <xref:System.Windows.Forms.SendKeys> potrebbe essere diverso a seconda del sistema operativo. Inoltre, quando la classe <xref:System.Windows.Forms.SendKeys> usa la nuova implementazione, il metodo <xref:System.Windows.Forms.SendKeys.SendWait%2A> non attenderà che i messaggi siano elaborati quando vengono inviati a un altro processo.  
>   
>  Se l'applicazione si basa su un comportamento coerente indipendentemente dal sistema operativo, è possibile forzare la classe <xref:System.Windows.Forms.SendKeys> a usare la nuova implementazione aggiungendo la seguente impostazione applicazione al file app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Per forzare la classe <xref:System.Windows.Forms.SendKeys> a usare l'implementazione precedente, usare invece il valore `"JournalHook"` .  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come utilizzare il metodo <xref:System.Windows.Forms.SendKeys.Send%2A>. Per eseguire l'esempio, incollare il codice seguente in un form denominato Form1 contenente un pulsante denominato Button1. Verificare che siano associati ai relativi metodi di gestione degli eventi in questo esempio gli eventi click. Il controllo pulsante <xref:System.Windows.Forms.Control.TabIndex%2A> proprietà deve essere impostata su 0. Quando l'esempio è in esecuzione, fare doppio clic sul form per attivare click del pulsante eventi.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Windows.Forms.SendKeys.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Elabora tutti i messaggi di Windows attualmente presenti nella coda dei messaggi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare <xref:System.Windows.Forms.SendKeys.Flush%2A> di attesa per l'applicazione elaborare le sequenze di tasti e gli altri messaggi di sistema operativo che sono nella coda di messaggi. Ciò equivale alla chiamata al metodo <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> fino a quando non sono presenti più chiavi per l'elaborazione.  
  
> [!NOTE]
>  Poiché non esiste alcun metodo gestito per attivare un'altra applicazione, è possibile utilizzare questa classe all'interno dell'applicazione corrente o usare i metodi Windows nativi, ad esempio `FindWindow` e `SetForegroundWindow`, per forzare lo stato attivo su altre applicazioni.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Send (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Send(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member Send : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.Send keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Stringa delle sequenze di tasti da inviare.</param>
        <summary>Invia sequenze di tasti all'applicazione attiva.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni chiave è rappresentata da uno o più caratteri. Per specificare un singolo carattere della tastiera, usare il carattere stesso. Ad esempio, per rappresentare la lettera A, passare la stringa "A" al metodo. Per rappresentare più caratteri, aggiungere ogni carattere aggiuntivo a quello che la precede. Per rappresentare le lettere A, B e C, specificare il parametro come "ABC".  
  
 Il segno più (+), accento circonflesso (^), segno di percentuale (%), tilde (~) e parentesi () hanno un significato speciale per <xref:System.Windows.Forms.SendKeys>. Per specificare uno di questi caratteri, racchiuderla tra parentesi graffe ({}). Ad esempio, per specificare il segno, usare "{+}". Per specificare i caratteri parentesi graffa, usare "{{}"e"{}}". Parentesi quadre ([]) non hanno alcun significato speciale per <xref:System.Windows.Forms.SendKeys>, ma è necessario racchiuderli tra parentesi graffe. In altre applicazioni, le parentesi quadre hanno un significato speciale che potrebbe essere significativo quando si verifica lo scambio di dati dinamici (DDE).  
  
> [!CAUTION]
>  Se l'applicazione verrà usata a livello internazionale con un'ampia gamma di tastiere, è opportuno evitare l'uso di <xref:System.Windows.Forms.SendKeys.Send%2A> perché potrebbe generare risultati imprevedibili.  
  
 Per specificare i caratteri che non vengono visualizzati quando si preme un tasto, ad esempio l'invio o TAB e le chiavi che rappresentano azioni anziché i caratteri, usare i codici nella tabella seguente.  
  
|Chiave|Codice|  
|---------|----------|  
|BACKSPACE|{BACKSPACE}, {b}, {Backspace} oppure|  
|INTERRUZIONE|INTERRUZIONE DI {}|  
|BLOC MAIUSC|{CAPSLOCK}|  
|CANC o CANC|{DELETE} o {CANC}|  
|Freccia GIÙ|{VERSO IL BASSO}|  
|FINE|{END}|  
|INVIO|{Immettere} o ~|  
|ESC|{ESC}|  
|?|{HELP}|  
|HOME|{HOME}|  
|I componenti aggiuntivi o l'istruzione INSERT|{INSERIRE} o {aggiuntivi}|  
|FRECCIA SINISTRA|{LEFT}|  
|BLOC NUM|{BLOCNUM}|  
|PGGIÙ|{PGDN}|  
|PGSU|{PGUP}|  
|SCHERMATA DI STAMPA|{CONTRASSEGNATO DA PRTSCN} (riservato per utilizzi futuri)|  
|FRECCIA DESTRA|{RIGHT}|  
|TASTO BLOC SCORR|{BLOC SCORR}|  
|TAB|{TAB}|  
|Freccia SU|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Aggiungere tastierino|{ADD}|  
|Tasto sottrazione|{SOTTRARRE}|  
|Tasto moltiplicazione|{MOLTIPLICARE}|  
|Tasto divisione|{DIVIDERE}|  
  
 Per specificare le chiavi combinate con qualsiasi combinazione del MAIUSC, CTRL e ALT, anteporre il codice con uno o più dei seguenti codici.  
  
|Chiave|Codice|  
|---------|----------|  
|MAIUSC|+|  
|CTRL|^|  
|ALT|%|  
  
 Per specificare che qualsiasi combinazione dei tasti MAIUSC, CTRL e ALT deve essere mantenuto premuto mentre vengono premuti diverse altre chiavi, racchiudere il codice per quei codici racchiuso tra parentesi. Ad esempio, per specificare per tenere premuto MAIUSC mentre vengono premuti E e C, usare "+ (CE)". Per specificare per tenere premuto MAIUSC mentre viene premuta E, seguita da C senza tenere premuto MAIUSC, usare "+ CE".  
  
 Per specificare la ripetizione di tasti, usare il formato {number chiave}. È necessario inserire uno spazio tra chiave e il numero. Significa premere il tasto freccia sinistra 42 volte; ad esempio, {sinistra 42} {h 10} significa premere che h 10 volte.  
  
> [!NOTE]
>  Poiché non esiste alcun metodo gestito per attivare un'altra applicazione, è possibile utilizzare questa classe all'interno dell'applicazione corrente o usare i metodi Windows nativi, ad esempio `FindWindow` e `SetForegroundWindow`, per forzare lo stato attivo su altre applicazioni.  
  
> [!NOTE]
>  La classe <xref:System.Windows.Forms.SendKeys> è stata aggiornata per .NET Framework 3.0 per consentirne l'uso in applicazioni eseguite in Windows Vista. La sicurezza avanzata di Windows Vista (nota come Controllo dell'account utente) impedisce alla precedente implementazione di funzionare come previsto.  
>   
>  La classe <xref:System.Windows.Forms.SendKeys> è soggetta a problemi di temporizzazione, che alcuni sviluppatori hanno dovuto risolvere. L'implementazione aggiornata è ancora soggetta a problemi di temporizzazione, ma è leggermente più veloce e può richiedere modifiche alle soluzioni alternative. La classe <xref:System.Windows.Forms.SendKeys> cerca di usare prima l'implementazione precedente e, se il tentativo non riesce, usa la nuova implementazione. Di conseguenza, il comportamento della classe <xref:System.Windows.Forms.SendKeys> potrebbe essere diverso a seconda del sistema operativo. Inoltre, quando la classe <xref:System.Windows.Forms.SendKeys> usa la nuova implementazione, il metodo <xref:System.Windows.Forms.SendKeys.SendWait%2A> non attenderà che i messaggi siano elaborati quando vengono inviati a un altro processo.  
>   
>  Se l'applicazione si basa su un comportamento coerente indipendentemente dal sistema operativo, è possibile forzare la classe <xref:System.Windows.Forms.SendKeys> a usare la nuova implementazione aggiungendo la seguente impostazione applicazione al file app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Per forzare la classe <xref:System.Windows.Forms.SendKeys> a usare l'implementazione precedente, usare invece il valore `"JournalHook"` .  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Windows.Forms.SendKeys.Send%2A> (metodo). Per eseguire l'esempio, incollare il codice seguente in un form denominato Form1 contenente un pulsante denominato Button1. Verificare che siano associati ai relativi metodi di gestione degli eventi in questo esempio gli eventi click. Il controllo pulsante <xref:System.Windows.Forms.Control.TabIndex%2A> proprietà deve essere impostata su 0. Quando l'esempio è in esecuzione, fare doppio clic sul form per attivare click del pulsante eventi.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Non è presente alcuna applicazione attiva alla quale inviare sequenze di tasti.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keys" /> non rappresenta sequenze di tasti valide</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">per codice non gestito di chiamare questo metodo. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SendWait (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SendWait(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member SendWait : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.SendWait keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Stringa delle sequenze di tasti da inviare.</param>
        <summary>Invia i tasti indicati all'applicazione attiva e successivamente attende l'elaborazione dei messaggi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare <xref:System.Windows.Forms.SendKeys.SendWait%2A> per inviare le sequenze di tasti o combinazioni di tasti all'applicazione attiva e in attesa per i messaggi della sequenza di tasti da elaborare. È possibile utilizzare questo metodo per inviare le sequenze di tasti a un'applicazione e attendere che tutti i processi che vengono avviati per le sequenze di tasti da completare. Questo può essere importante se l'altra applicazione deve terminare prima che l'applicazione può continuare.  
  
> [!NOTE]
>  Poiché non esiste alcun metodo gestito per attivare un'altra applicazione, è possibile utilizzare questa classe all'interno dell'applicazione corrente o usare i metodi Windows nativi, ad esempio `FindWindow` e `SetForegroundWindow`, per forzare lo stato attivo su altre applicazioni.  
  
> [!NOTE]
>  La classe <xref:System.Windows.Forms.SendKeys> è stata aggiornata per .NET Framework 3.0 per consentirne l'uso in applicazioni eseguite in Windows Vista. La sicurezza avanzata di Windows Vista (nota come Controllo dell'account utente) impedisce alla precedente implementazione di funzionare come previsto.  
>   
>  La classe <xref:System.Windows.Forms.SendKeys> è soggetta a problemi di temporizzazione, che alcuni sviluppatori hanno dovuto risolvere. L'implementazione aggiornata è ancora soggetta a problemi di temporizzazione, ma è leggermente più veloce e può richiedere modifiche alle soluzioni alternative. La classe <xref:System.Windows.Forms.SendKeys> cerca di usare prima l'implementazione precedente e, se il tentativo non riesce, usa la nuova implementazione. Di conseguenza, il comportamento della classe <xref:System.Windows.Forms.SendKeys> potrebbe essere diverso a seconda del sistema operativo. Inoltre, quando la classe <xref:System.Windows.Forms.SendKeys> usa la nuova implementazione, il metodo <xref:System.Windows.Forms.SendKeys.SendWait%2A> non attenderà che i messaggi siano elaborati quando vengono inviati a un altro processo.  
>   
>  Se l'applicazione si basa su un comportamento coerente indipendentemente dal sistema operativo, è possibile forzare la classe <xref:System.Windows.Forms.SendKeys> a usare la nuova implementazione aggiungendo la seguente impostazione applicazione al file app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Per forzare la classe <xref:System.Windows.Forms.SendKeys> a usare l'implementazione precedente, usare invece il valore `"JournalHook"` .  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">per codice non gestito di chiamare questo metodo. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>