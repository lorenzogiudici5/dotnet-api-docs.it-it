<Type Name="Control+ControlCollection" FullName="System.Windows.Forms.Control+ControlCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="557e794466cb062cad76399160f2b7ce7ec40512" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30640225" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Control.ControlCollection : System.Windows.Forms.Layout.ArrangedElementCollection, ICloneable, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit Control/ControlCollection extends System.Windows.Forms.Layout.ArrangedElementCollection implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Control.ControlCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class Control.ControlCollection&#xA;Inherits ArrangedElementCollection&#xA;Implements ICloneable, IList" />
  <TypeSignature Language="C++ CLI" Value="public: ref class Control::ControlCollection : System::Windows::Forms::Layout::ArrangedElementCollection, ICloneable, System::Collections::IList" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Layout.ArrangedElementCollection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta una raccolta di oggetti <see cref="T:System.Windows.Forms.Control" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.Control.ControlCollection.Add%2A>, <xref:System.Windows.Forms.Control.ControlCollection.Remove%2A>, e <xref:System.Windows.Forms.Control.ControlCollection.RemoveAt%2A> metodi consentono di aggiungere e rimuovere singoli controlli dalla raccolta. È inoltre possibile utilizzare il <xref:System.Windows.Forms.Control.ControlCollection.AddRange%2A> o <xref:System.Windows.Forms.Control.ControlCollection.Clear%2A> metodi per aggiungere o rimuovere tutti i controlli dalla raccolta.  
  
 È possibile determinare se un <xref:System.Windows.Forms.Control> è un membro della raccolta passando il controllo nel <xref:System.Windows.Forms.Control.ControlCollection.Contains%2A> metodo. Per ottenere il valore di indice della posizione di un <xref:System.Windows.Forms.Control> nella raccolta, passare il controllo nel <xref:System.Windows.Forms.Control.ControlCollection.IndexOf%2A> metodo. La raccolta può essere copiata in una matrice chiamando il <xref:System.Windows.Forms.Layout.ArrangedElementCollection.CopyTo%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene rimuove un <xref:System.Windows.Forms.Control> dal <xref:System.Windows.Forms.Control.ControlCollection> della classe derivata <xref:System.Windows.Forms.Panel> se è un membro della raccolta. Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Panel>, <xref:System.Windows.Forms.Button>e almeno un <xref:System.Windows.Forms.RadioButton> control per un <xref:System.Windows.Forms.Form>. Il <xref:System.Windows.Forms.RadioButton> vengono aggiunti al <xref:System.Windows.Forms.Panel> (controllo) e <xref:System.Windows.Forms.Panel> aggiunto al controllo il <xref:System.Windows.Forms.Form>. Quando si fa clic sul pulsante, il pulsante di opzione denominato `radioButton2` rimossa la <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 [!code-cpp[ControlCollection#4](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#4)]
 [!code-csharp[ControlCollection#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#4)]
 [!code-vb[ControlCollection#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Collections.IList" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlCollection (System.Windows.Forms.Control owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.#ctor(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlCollection(System::Windows::Forms::Control ^ owner);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="owner">Oggetto <see cref="T:System.Windows.Forms.Control" /> che rappresenta il controllo che possiede l'insieme dei controlli.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (System.Windows.Forms.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class System.Windows.Forms.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.Add(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Add (value As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Windows::Forms::Control ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="value">Oggetto <see cref="T:System.Windows.Forms.Control" /> da aggiungere all'insieme dei controlli.</param>
        <summary>Aggiunge il controllo specificato all'insieme dei controlli.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.Control.ControlCollection.Add%2A> metodo consente di aggiungere <xref:System.Windows.Forms.Control> oggetti alla fine della raccolta di controlli.  
  
 È anche possibile aggiungere nuovi <xref:System.Windows.Forms.Control> oggetti alla raccolta utilizzando la <xref:System.Windows.Forms.Control.ControlCollection.AddRange%2A> metodo.  
  
 Per rimuovere un <xref:System.Windows.Forms.Control> aggiunto in precedenza, utilizzare il <xref:System.Windows.Forms.Control.ControlCollection.Remove%2A>, <xref:System.Windows.Forms.Control.ControlCollection.RemoveAt%2A>, o <xref:System.Windows.Forms.Control.ControlCollection.Clear%2A> metodi.  
  
> [!NOTE]
>  Oggetto <xref:System.Windows.Forms.Control> può essere assegnato solo a un <xref:System.Windows.Forms.Control.ControlCollection> alla volta. Se il <xref:System.Windows.Forms.Control> è già un elemento figlio di un altro controllo, viene rimosso da tale controllo prima di essere aggiunto a un altro controllo.  
  
   
  
## Examples  
 L'esempio di codice seguente aggiunge un <xref:System.Windows.Forms.Control> per il <xref:System.Windows.Forms.Control.ControlCollection> della classe derivata <xref:System.Windows.Forms.Panel>. Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Panel> controllo e un <xref:System.Windows.Forms.Button> control per un <xref:System.Windows.Forms.Form>. Quando si fa clic sul pulsante, un <xref:System.Windows.Forms.TextBox> controllo viene aggiunto al pannello <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 [!code-cpp[ControlCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#2)]
 [!code-csharp[ControlCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#2)]
 [!code-vb[ControlCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Il controllo specificato è di primo livello oppure viene generato un riferimento circolare al controllo se il controllo viene aggiunto all'insieme dei controlli.</exception>
        <exception cref="T:System.ArgumentException">L'oggetto assegnato al parametro <paramref name="value" /> non è un controllo <see cref="T:System.Windows.Forms.Control" />.</exception>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.Control.ControlCollection.Add(System.Windows.Forms.Control)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Windows.Forms.Control.ControlCollection.Add(System.Windows.Forms.Control)" /> metodo per assicurarsi che il controllo viene aggiunto alla raccolta.</para>
        </block>
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.Remove(System.Windows.Forms.Control)" />
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.AddRange(System.Windows.Forms.Control[])" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Windows.Forms.Control[] controls);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Windows.Forms.Control[] controls) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.AddRange(System.Windows.Forms.Control[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRange (controls As Control())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRange(cli::array &lt;System::Windows::Forms::Control ^&gt; ^ controls);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controls" Type="System.Windows.Forms.Control[]" />
      </Parameters>
      <Docs>
        <param name="controls">Matrice di oggetti <see cref="T:System.Windows.Forms.Control" /> da aggiungere alla raccolta.</param>
        <summary>Aggiunge una matrice di oggetti controllo all'insieme.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.Control> gli oggetti contenuti nel `controls` matrice vengono aggiunti alla fine della raccolta.  
  
 È possibile utilizzare il <xref:System.Windows.Forms.Control.ControlCollection.AddRange%2A> metodo per aggiungere rapidamente un gruppo di <xref:System.Windows.Forms.Control> raccolta anziché aggiungere manualmente gli oggetti <xref:System.Windows.Forms.Control> nella raccolta usando il <xref:System.Windows.Forms.Control.ControlCollection.Add%2A> metodo.  
  
 Per rimuovere un <xref:System.Windows.Forms.Control> aggiunto in precedenza, utilizzare il <xref:System.Windows.Forms.Control.ControlCollection.Remove%2A>, <xref:System.Windows.Forms.Control.ControlCollection.RemoveAt%2A>, o <xref:System.Windows.Forms.Control.ControlCollection.Clear%2A> metodi.  
  
   
  
## Examples  
 Esempio di codice seguente aggiunge due <xref:System.Windows.Forms.Control> oggetti per il <xref:System.Windows.Forms.Control.ControlCollection> della classe derivata <xref:System.Windows.Forms.Panel>. Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Panel> controllo e un <xref:System.Windows.Forms.Button> control per un <xref:System.Windows.Forms.Form>. Quando viene scelto il pulsante, due <xref:System.Windows.Forms.RadioButton> vengono aggiunti al pannello <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 [!code-cpp[ControlCollection#3](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#3)]
 [!code-csharp[ControlCollection#3](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#3)]
 [!code-vb[ControlCollection#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.Control.ControlCollection.AddRange(System.Windows.Forms.Control[])" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Windows.Forms.Control.ControlCollection.AddRange(System.Windows.Forms.Control[])" /> metodo per assicurarsi che i controlli vengono aggiunti alla raccolta.</para>
        </block>
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.Add(System.Windows.Forms.Control)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rimuove tutti i controlli dall'insieme.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare il <xref:System.Windows.Forms.Control.ControlCollection.Clear%2A> metodo per rimuovere l'intera raccolta di controlli da un controllo padre.  
  
 Per rimuovere un singolo controllo dalla raccolta, utilizzare il <xref:System.Windows.Forms.Control.ControlCollection.Remove%2A> o <xref:System.Windows.Forms.Control.ControlCollection.RemoveAt%2A> metodi.  
  
> [!IMPORTANT]
>  La chiamata di <xref:System.Windows.Forms.Control.ControlCollection.Clear%2A> metodo non rimuove i punti di controllo dalla memoria. È necessario chiamare esplicitamente il <xref:System.Windows.Forms.Control.Dispose%2A> le perdite di metodo per evitare di memoria.  
  
 Per aggiungere nuovi <xref:System.Windows.Forms.Control> oggetti alla raccolta, utilizzare il <xref:System.Windows.Forms.Control.ControlCollection.Add%2A> o <xref:System.Windows.Forms.Control.ControlCollection.AddRange%2A> metodi.  
  
   
  
## Examples  
 Nell'esempio seguente rimuove tutti i <xref:System.Windows.Forms.Control> gli oggetti il <xref:System.Windows.Forms.Control.ControlCollection> della classe derivata <xref:System.Windows.Forms.Panel>. Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Panel>, <xref:System.Windows.Forms.Button>e almeno un altro controllo su un <xref:System.Windows.Forms.Form>. Vengono aggiunti gli altri controlli per il <xref:System.Windows.Forms.Panel> controllo e <xref:System.Windows.Forms.Panel> aggiunti il <xref:System.Windows.Forms.Form>. Quando si fa clic sul pulsante, tutti i controlli contenuti nel pannello vengono rimossi dal <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 [!code-cpp[ControlCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#1)]
 [!code-csharp[ControlCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#1)]
 [!code-vb[ControlCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.Control.ControlCollection.Clear" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Windows.Forms.Control.ControlCollection.Clear" /> metodo per assicurarsi che tutti i controlli vengono rimossi dalla raccolta.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.Contains(System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="control">Oggetto <see cref="T:System.Windows.Forms.Control" /> da individuare nella raccolta.</param>
        <summary>Determina se il controllo specificato è un membro dell'insieme.</summary>
        <returns>
          <see langword="true" /> se l'oggetto <see cref="T:System.Windows.Forms.Control" /> è un membro dell'insieme; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di determinare se un <xref:System.Windows.Forms.Control> è un membro della raccolta prima di tentare di eseguire le operazioni di <xref:System.Windows.Forms.Control>. È possibile utilizzare questo metodo per verificare che un <xref:System.Windows.Forms.Control> è stato aggiunto o è ancora un membro della raccolta.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene rimuove un <xref:System.Windows.Forms.Control> dal <xref:System.Windows.Forms.Control.ControlCollection> della classe derivata <xref:System.Windows.Forms.Panel> se è un membro della raccolta. Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Panel>, <xref:System.Windows.Forms.Button>e almeno un <xref:System.Windows.Forms.RadioButton> control per un <xref:System.Windows.Forms.Form>. Il <xref:System.Windows.Forms.RadioButton> vengono aggiunti al <xref:System.Windows.Forms.Panel> (controllo) e <xref:System.Windows.Forms.Panel> aggiunto al controllo il <xref:System.Windows.Forms.Form>. Quando si fa clic sul pulsante, il pulsante di opzione denominato `removeButton` rimossa la <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 [!code-cpp[ControlCollection#4](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#4)]
 [!code-csharp[ControlCollection#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#4)]
 [!code-vb[ControlCollection#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Control" />
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Chiave da individuare in <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</param>
        <summary>Determina se l'oggetto <see cref="T:System.Windows.Forms.Control.ControlCollection" /> contiene un elemento con la chiave specificata.</summary>
        <returns>
          <see langword="true" /> se l'oggetto <see cref="T:System.Windows.Forms.Control.ControlCollection" /> contiene un elemento con la chiave specificata, in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.Control.Name%2A> proprietà di un <xref:System.Windows.Forms.Control> corrisponde alla chiave per un <xref:System.Windows.Forms.Control> nel <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control[] Find (string key, bool searchAllChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control[] Find(string key, bool searchAllChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.Find(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (key As String, searchAllChildren As Boolean) As Control()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Forms::Control ^&gt; ^ Find(System::String ^ key, bool searchAllChildren);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="searchAllChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">Chiave da individuare in <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</param>
        <param name="searchAllChildren">
          <see langword="true" /> per eseguire la ricerca di tutti i controlli figlio; in caso contrario, <see langword="false" />.</param>
        <summary>Cerca i controlli in base alla relativa proprietà <see cref="P:System.Windows.Forms.Control.Name" /> e compila una matrice di tutti i controlli corrispondenti.</summary>
        <returns>Matrice di tipo <see cref="T:System.Windows.Forms.Control" /> contenente i controlli corrispondenti.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="key" /> è <see langword="null" /> o una stringa vuota ("").</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildIndex">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Recupera l'indice di un controllo compreso nell'insieme dei controlli.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildIndex">
      <MemberSignature Language="C#" Value="public int GetChildIndex (System.Windows.Forms.Control child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetChildIndex(class System.Windows.Forms.Control child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.GetChildIndex(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildIndex (child As Control) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetChildIndex(System::Windows::Forms::Control ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="child">Controllo <see cref="T:System.Windows.Forms.Control" /> da ricercare nell'insieme dei controlli.</param>
        <summary>Recupera l'indice del controllo figlio specificato all'interno dell'insieme dei controlli.</summary>
        <returns>Valore di indice in base zero che rappresenta la posizione del controllo figlio specificato all'interno dell'insieme dei controlli.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il controllo con un valore di indice pari a zero è nella parte superiore dello z-order e i valori più alti sono più vicini alla parte inferiore.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">L'oggetto <see cref="T:System.Windows.Forms.Control" /> di tipo <paramref name="child" /> non si trova nell'oggetto <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</exception>
        <altmember cref="M:System.Windows.Forms.Control.BringToFront" />
      </Docs>
    </Member>
    <Member MemberName="GetChildIndex">
      <MemberSignature Language="C#" Value="public virtual int GetChildIndex (System.Windows.Forms.Control child, bool throwException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChildIndex(class System.Windows.Forms.Control child, bool throwException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.GetChildIndex(System.Windows.Forms.Control,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChildIndex (child As Control, throwException As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetChildIndex(System::Windows::Forms::Control ^ child, bool throwException);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.Forms.Control" />
        <Parameter Name="throwException" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">Controllo <see cref="T:System.Windows.Forms.Control" /> da ricercare nell'insieme dei controlli.</param>
        <param name="throwException">
          <see langword="true" /> per generare un'eccezione se il controllo <see cref="T:System.Windows.Forms.Control" /> specificato nel parametro <c>child</c> non è un controllo della raccolta <see cref="T:System.Windows.Forms.Control.ControlCollection" />. In caso contrario, <see langword="false" />.</param>
        <summary>Recupera l'indice del controllo figlio specificato all'interno dell'insieme dei controlli e facoltativamente genera un'eccezione se il controllo specificato non è nell'insieme.</summary>
        <returns>Valore di indice in base zero che rappresenta la posizione del controllo figlio specificato all'interno dell'insieme dei controlli; in caso contrario, se il controllo <see cref="T:System.Windows.Forms.Control" /> non viene trovato nell'insieme <see cref="T:System.Windows.Forms.Control.ControlCollection" />, valore -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il controllo con un valore di indice pari a zero è nella parte superiore dello z-order e i valori più alti sono più vicini alla parte inferiore. Il valore restituito-1 viene restituito solo quando il `throwException` parametro `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">L'oggetto <see cref="T:System.Windows.Forms.Control" /> di tipo <paramref name="child" /> non si trova nell'oggetto <see cref="T:System.Windows.Forms.Control.ControlCollection" /> e il valore del parametro <paramref name="throwException" /> è <see langword="true" />.</exception>
        <altmember cref="M:System.Windows.Forms.Control.BringToFront" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public override System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera un riferimento a un oggetto enumeratore usato per eseguire l'iterazione di un oggetto <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</summary>
        <returns>Oggetto <see cref="T:System.Collections.IEnumerator" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.IndexOf(System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Forms::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="control">Oggetto <see cref="T:System.Windows.Forms.Control" /> da individuare nella raccolta.</param>
        <summary>Recupera l'indice del controllo specificato all'interno dell'insieme dei controlli.</summary>
        <returns>Valore di indice in base zero che rappresenta la posizione del controllo <see cref="T:System.Windows.Forms.Control" /> specificato nella raccolta <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il controllo non viene trovato nella raccolta, il <xref:System.Windows.Forms.Control.ControlCollection.IndexOf%2A> metodo valore restituito è -1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.IndexOfKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nome del controllo di cui eseguire la ricerca.</param>
        <summary>Recupera l'indice della prima occorrenza dell'elemento specificato all'interno dell'insieme.</summary>
        <returns>Indice in base zero della prima occorrenza del controllo con il nome specificato nell'insieme.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Windows.Forms.Control.ControlCollection.IndexOfKey%2A> viene chiamato successivamente, l'ultima restituito indice verrà innanzitutto verificato la corrispondenza delle chiavi e se è presente alcuna corrispondenza, la ricerca inizia all'inizio della raccolta.  
  
 Il confronto delle chiavi non è tra maiuscole e minuscole. Se il `key` parametro `null` o una stringa vuota o un elemento con il valore chiave non viene trovata, <xref:System.Windows.Forms.Control.ControlCollection.IndexOfKey%2A> restituisce -1.  
  
 Il <xref:System.Windows.Forms.Control.Name%2A> proprietà di un <xref:System.Windows.Forms.Control> corrisponde alla chiave per un <xref:System.Windows.Forms.Control> nel <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indica un oggetto <see cref="T:System.Windows.Forms.Control" /> dell'insieme.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Control this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ControlCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(index As Integer) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Control ^ default[int] { System::Windows::Forms::Control ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indice del controllo da recuperare dall'insieme dei controlli.</param>
        <summary>Indica il controllo <see cref="T:System.Windows.Forms.Control" /> nella posizione indicizzata specificata dell'insieme.</summary>
        <value>Controllo <see cref="T:System.Windows.Forms.Control" /> ubicato nella posizione specificata dell'indice nell'insieme dei controlli.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per recuperare un <xref:System.Windows.Forms.Control> dal <xref:System.Windows.Forms.Control.ControlCollection>, fare riferimento all'oggetto della raccolta con un valore di indice specifico. Il valore di indice di <xref:System.Windows.Forms.Control.ControlCollection> è un indice in base zero.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore di <paramref name="index" /> è minore di zero oppure maggiore di o uguale al numero di controlli dell'insieme.</exception>
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Control this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ControlCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(key As String) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Control ^ default[System::String ^] { System::Windows::Forms::Control ^ get(System::String ^ key); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nome del controllo da recuperare dall'insieme dei controlli.</param>
        <summary>Indica un oggetto <see cref="T:System.Windows.Forms.Control" /> dell'insieme con la chiave specificata.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.Control" /> con la chiave specificata all'interno dell'oggetto <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.Control.Name%2A> proprietà di un <xref:System.Windows.Forms.Control> corrisponde alla chiave per un <xref:System.Windows.Forms.Control> nel <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ControlCollection.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Owner { System::Windows::Forms::Control ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il controllo proprietario dell'oggetto <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.Control" /> che possiede questo <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (System.Windows.Forms.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class System.Windows.Forms.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.Remove(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (value As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Windows::Forms::Control ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="value">Oggetto <see cref="T:System.Windows.Forms.Control" /> da rimuovere da <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</param>
        <summary>Rimuove il controllo specificato dall'insieme dei controlli.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un <xref:System.Windows.Forms.Control> viene rimosso dalla raccolta di controllo, tutti i controlli successivi vengono spostati verso l'alto di una posizione nella raccolta.  
  
 È inoltre possibile rimuovere un <xref:System.Windows.Forms.Control> utilizzando il <xref:System.Windows.Forms.Control.ControlCollection.RemoveAt%2A> metodo oppure rimuovere tutti i controlli mediante il <xref:System.Windows.Forms.Control.ControlCollection.Clear%2A> metodo.  
  
 Per aggiungere nuovi <xref:System.Windows.Forms.Control> oggetti alla raccolta, utilizzare il <xref:System.Windows.Forms.Control.ControlCollection.Add%2A> o <xref:System.Windows.Forms.Control.ControlCollection.AddRange%2A> metodi.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene rimuove un <xref:System.Windows.Forms.Control> dal <xref:System.Windows.Forms.Control.ControlCollection> della classe derivata <xref:System.Windows.Forms.Panel> se è un membro della raccolta. Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Panel>, <xref:System.Windows.Forms.Button>e uno o più <xref:System.Windows.Forms.RadioButton> ai controlli di un <xref:System.Windows.Forms.Form>. Il <xref:System.Windows.Forms.RadioButton> vengono aggiunti al <xref:System.Windows.Forms.Panel> (controllo) e <xref:System.Windows.Forms.Panel> controllo viene aggiunto al <xref:System.Windows.Forms.Form>. Quando si fa clic sul pulsante, il pulsante di opzione denominato `radioButton2` rimossa la <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 [!code-cpp[ControlCollection#4](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#4)]
 [!code-csharp[ControlCollection#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#4)]
 [!code-vb[ControlCollection#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.Control.ControlCollection.Remove(System.Windows.Forms.Control)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Windows.Forms.Control.ControlCollection.Remove(System.Windows.Forms.Control)" /> metodo per assicurarsi che il controllo viene rimosso dalla raccolta.</para>
        </block>
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.Add(System.Windows.Forms.Control)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Valore di indice del controllo <see cref="T:System.Windows.Forms.Control" /> da rimuovere.</param>
        <summary>Rimuove un controllo dall'insieme dei controlli nella posizione di indice specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un <xref:System.Windows.Forms.Control> viene rimosso dalla raccolta di controllo, tutti i controlli successivi vengono spostati verso l'alto di una posizione nella raccolta.  
  
 È inoltre possibile rimuovere un <xref:System.Windows.Forms.Control> aggiunto in precedenza tramite il <xref:System.Windows.Forms.Control.ControlCollection.Remove%2A> o <xref:System.Windows.Forms.Control.ControlCollection.Clear%2A> metodi.  
  
 Per aggiungere nuovi <xref:System.Windows.Forms.Control> oggetti alla raccolta, utilizzare il <xref:System.Windows.Forms.Control.ControlCollection.Add%2A> o <xref:System.Windows.Forms.Control.ControlCollection.AddRange%2A> metodi.  
  
   
  
## Examples  
 Nell'esempio seguente rimuove il primo <xref:System.Windows.Forms.Control> nel <xref:System.Windows.Forms.Control.ControlCollection> della classe derivata <xref:System.Windows.Forms.Panel> se il conteggio della raccolta è maggiore di zero. Nell'esempio si presuppone che sia stato creato un <xref:System.Windows.Forms.Panel>, <xref:System.Windows.Forms.Button>e almeno un altro controllo su un <xref:System.Windows.Forms.Form>. Vengono aggiunti gli altri controlli per il <xref:System.Windows.Forms.Panel> (controllo) e il <xref:System.Windows.Forms.Panel> aggiunto al controllo il <xref:System.Windows.Forms.Form>. Quando si fa clic sul pulsante, il primo controllo contenuto nel pannello viene rimosso dal <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 [!code-cpp[ControlCollection#5](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#5)]
 [!code-csharp[ControlCollection#5](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#5)]
 [!code-vb[ControlCollection#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.Remove(System.Windows.Forms.Control)" />
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.Add(System.Windows.Forms.Control)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.RemoveByKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveByKey (key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveByKey(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nome del controllo figlio da rimuovere.</param>
        <summary>Rimuove il controllo figlio con la chiave specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.Control.Name%2A> proprietà di un <xref:System.Windows.Forms.Control> corrisponde alla chiave per un <xref:System.Windows.Forms.Control> nel <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetChildIndex">
      <MemberSignature Language="C#" Value="public virtual void SetChildIndex (System.Windows.Forms.Control child, int newIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetChildIndex(class System.Windows.Forms.Control child, int32 newIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.SetChildIndex(System.Windows.Forms.Control,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetChildIndex (child As Control, newIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetChildIndex(System::Windows::Forms::Control ^ child, int newIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.Forms.Control" />
        <Parameter Name="newIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">Oggetto <see cref="T:System.Windows.Forms.Control" /><c>child</c> da cercare.</param>
        <param name="newIndex">Nuovo valore di indice del controllo.</param>
        <summary>Imposta l'indice del controllo figlio specificato nell'insieme sul valore di indice specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando <xref:System.Windows.Forms.Control.ControlCollection.SetChildIndex%2A> viene chiamato, il <xref:System.Windows.Forms.Control> a cui fa riferimento il `child` parametro viene spostato nella posizione specificata da `newIndex` e l'altro <xref:System.Windows.Forms.Control> fa riferimento nel <xref:System.Windows.Forms.Control.ControlCollection> vengono riordinati per accogliere lo spostamento. Il controllo con un valore di indice pari a zero è nella parte superiore dello z-order e i valori più alti sono più vicini alla parte inferiore.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il controllo <paramref name="child" /> non è nell'insieme <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</exception>
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.GetChildIndex(System.Windows.Forms.Control)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object control);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (control As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ control) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <summary>Per una descrizione di questo membro, vedere <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Windows.Forms.Control.ControlCollection> a un'interfaccia <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object control);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (control As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ control) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <summary>Per una descrizione di questo membro, vedere <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Windows.Forms.Control.ControlCollection> a un'interfaccia <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Per una descrizione di questo membro, vedere <see cref="M:System.ICloneable.Clone" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Windows.Forms.Control.ControlCollection> a un'interfaccia <xref:System.ICloneable>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>