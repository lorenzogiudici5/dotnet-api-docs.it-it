<Type Name="MainMenu" FullName="System.Windows.Forms.MainMenu">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="223d004886d0115f7d435b6bd28a85998b094b17" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30649495" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MainMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MainMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MainMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class MainMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class MainMenu : System::Windows::Forms::Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms.MainMenu")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta la struttura di menu di un form. Benché il controllo <see cref="T:System.Windows.Forms.MenuStrip" /> sostituisca il controllo <see cref="T:System.Windows.Forms.MainMenu" /> delle versioni precedenti aggiungendo funzionalità, il controllo <see cref="T:System.Windows.Forms.MainMenu" /> viene mantenuto per compatibilità con le versioni precedenti e per utilizzo futuro se lo si desidera.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.MainMenu> controllo rappresenta il contenitore della struttura di menu di un form. È costituito da un menu <xref:System.Windows.Forms.MenuItem> gli oggetti che rappresentano i singoli comandi di menu nella struttura di menu. Ogni <xref:System.Windows.Forms.MenuItem> può essere un comando per l'applicazione o un menu padre per altri elementi di sottomenu. Per associare il <xref:System.Windows.Forms.MainMenu> per il <xref:System.Windows.Forms.Form> che sarà visualizzato, assegnare il <xref:System.Windows.Forms.MainMenu> per il <xref:System.Windows.Forms.Form.Menu%2A> proprietà del <xref:System.Windows.Forms.Form>.  
  
 Per le applicazioni con supporto per più lingue, è possibile utilizzare il <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> proprietà per visualizzare il testo del menu da destra a sinistra per supportare lingue quali l'arabo.  
  
 È possibile creare diversi <xref:System.Windows.Forms.MainMenu> oggetti per rappresentare diverse strutture di menu per il modulo. Se si desidera riutilizzare la struttura di menu contenuta in uno specifico <xref:System.Windows.Forms.MainMenu>, è possibile utilizzare il relativo <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> metodo per creare una copia. Dopo aver creato una copia della struttura di menu, è possibile apportare le modifiche appropriate per la nuova struttura di menu.  
  
> [!NOTE]
>  Tagliare e incollare gli elementi da un formato a altro nella finestra di progettazione potrebbero non funzionare come previsto se il form che sta incollando non contiene voci di menu definiti menu.  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Windows.Forms.MainMenu>, vengono assegnati due <xref:System.Windows.Forms.MenuItem> oggetti per il <xref:System.Windows.Forms.MainMenu> e lo associa a un form. In questo esempio si suppone una <xref:System.Windows.Forms.Form> creato denominata `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
    <altmember cref="P:System.Windows.Forms.Form.Menu" />
    <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
    <altmember cref="T:System.Windows.Forms.MenuStrip" />
    <altmember cref="T:System.Windows.Forms.ContextMenuStrip" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.MainMenu" /> senza voci di menu specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa versione del costruttore crea un <xref:System.Windows.Forms.MainMenu> senza alcuna specificato <xref:System.Windows.Forms.MenuItem> oggetti. Per aggiungere voci di menu al controllo utilizzano l'altra versione del costruttore che accetta una matrice di <xref:System.Windows.Forms.MenuItem> oggetti come relativo parametro o utilizzare il <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> metodo il <xref:System.Windows.Forms.Menu.MenuItems%2A> proprietà.  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Windows.Forms.MainMenu>, vengono assegnati due <xref:System.Windows.Forms.MenuItem> oggetti per il <xref:System.Windows.Forms.MainMenu> e lo associa a un form. In questo esempio si suppone una <xref:System.Windows.Forms.Form> creato denominata `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
        <altmember cref="P:System.Windows.Forms.Form.Menu" />
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(System::ComponentModel::IContainer ^ container);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">Oggetto <see cref="T:System.ComponentModel.IContainer" /> che rappresenta il contenitore della classe <see cref="T:System.Windows.Forms.MainMenu" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.MainMenu" /> con il contenitore specificato.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">Matrice di oggetti <see cref="T:System.Windows.Forms.MenuItem" /> che saranno aggiunti al <see cref="T:System.Windows.Forms.MainMenu" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.MainMenu" /> con un gruppo specificato di oggetti <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare questo costruttore per assegnare una matrice di <xref:System.Windows.Forms.MenuItem> oggetti per il <xref:System.Windows.Forms.MainMenu> al momento della creazione. Dopo il <xref:System.Windows.Forms.MainMenu> è stato creato è possibile aggiungere ulteriori <xref:System.Windows.Forms.MenuItem> oggetti per il <xref:System.Windows.Forms.MainMenu> utilizzando il <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> metodo il <xref:System.Windows.Forms.Menu.MenuItems%2A> proprietà.  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Windows.Forms.MainMenu>e vengono assegnati due <xref:System.Windows.Forms.MenuItem> oggetti per il <xref:System.Windows.Forms.MainMenu> utilizzando questa versione del costruttore. Nell'esempio viene quindi associato il <xref:System.Windows.Forms.MainMenu> per un <xref:System.Windows.Forms.Form>. In questo esempio si suppone una <xref:System.Windows.Forms.Form> creato denominata `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MainMenu CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MainMenu CloneMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CloneMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneMenu () As MainMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MainMenu ^ CloneMenu();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MainMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un nuovo <see cref="T:System.Windows.Forms.MainMenu" /> che rappresenta una copia dell'oggetto <see cref="T:System.Windows.Forms.MainMenu" /> corrente.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Forms.MainMenu" /> che rappresenta il menu duplicato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare questo metodo per creare una copia della struttura di menu archiviata in un <xref:System.Windows.Forms.MainMenu>. È possibile utilizzare questo metodo per riutilizzare la struttura di menu archiviati in un <xref:System.Windows.Forms.MainMenu> come base per un nuovo <xref:System.Windows.Forms.MainMenu>. Ad esempio, se si desidera creare una struttura di menu che abbia le stesse voci di menu di un oggetto esistente <xref:System.Windows.Forms.MainMenu> ma anche avere ulteriori <xref:System.Windows.Forms.MenuItem> gli oggetti aggiunti, è possibile utilizzare il <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> metodo per creare una copia dell'originale <xref:System.Windows.Forms.MainMenu> e Aggiungere quindi la nuova <xref:System.Windows.Forms.MenuItem> oggetti clonato <xref:System.Windows.Forms.MainMenu>.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Windows.Forms.MainMenu.GetForm%2A> per determinare se un <xref:System.Windows.Forms.MainMenu> è attualmente associato al form padre. Se la chiamata nell'esempio di codice per <xref:System.Windows.Forms.MainMenu.GetForm%2A> non restituisce `null`, il codice Duplica la struttura di menu del <xref:System.Windows.Forms.MainMenu> utilizzando il <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> metodo. Il codice imposta quindi la <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> proprietà su true nella nuova copia del <xref:System.Windows.Forms.MainMenu> per creare un <xref:System.Windows.Forms.MainMenu> che può essere usato per le lingue che supportano diritto di testo a sinistra. In questo esempio si suppone una <xref:System.Windows.Forms.MainMenu> creato denominata `mainMenu1`.  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MainMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Generato quando si comprime il menu principale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo membro. Nell'esempio, un gestore eventi genera report sull'occorrenza del <xref:System.Windows.Forms.MainMenu.Collapse> evento. Questo report consente di capire quando l'evento si verifica e possa agevolare il debug. Per generare un report su più eventi o per gli eventi che si verificano di frequente, è possibile sostituire <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> con <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> o aggiungere il messaggio a un controllo <xref:System.Windows.Forms.TextBox>.  
  
 Per eseguire l'esempio di codice, incollarlo in un progetto che contiene un'istanza del tipo <xref:System.Windows.Forms.MainMenu> denominato `MainMenu1`. Assicurarsi quindi che il gestore dell'evento è associato il <xref:System.Windows.Forms.MainMenu.Collapse> evento.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#483](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#483)]
 [!code-vb[System.Windows.Forms.EventExamples#483](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#483)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMenuHandle">
      <MemberSignature Language="C#" Value="protected override IntPtr CreateMenuHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int CreateMenuHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CreateMenuHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateMenuHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr CreateMenuHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un nuovo handle per il menu.</summary>
        <returns>Handle per il menu se il metodo ha esito positivo. In caso contrario, <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Menu.CreateMenuHandle" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
        <summary>Elimina le risorse, diverse dalla memoria, usate da <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il metodo <xref:System.Windows.Forms.MainMenu.Dispose%2A> dopo aver terminato di utilizzare l'oggetto <xref:System.Windows.Forms.MainMenu>. Il metodo <xref:System.Windows.Forms.MainMenu.Dispose%2A> lascia l'oggetto <xref:System.Windows.Forms.MainMenu> in una condizione di inutilizzabilità. Dopo la chiamata <xref:System.Windows.Forms.MainMenu.Dispose%2A>, è necessario rilasciare tutti i riferimenti al <xref:System.Windows.Forms.MainMenu> in modo che la memoria occupata può essere recuperata tramite garbage collection.  
  
> [!NOTE]
>  Chiamare sempre il metodo <xref:System.Windows.Forms.MainMenu.Dispose%2A> prima di rilasciare l'ultimo riferimento a <xref:System.Windows.Forms.MainMenu>. In caso contrario, le risorse di <xref:System.Windows.Forms.MainMenu> non è verranno liberate finché garbage collection di <xref:System.Windows.Forms.MainMenu> distruttore dell'oggetto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form GetForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form GetForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.GetForm" />
      <MemberSignature Language="VB.NET" Value="Public Function GetForm () As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Form ^ GetForm();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene il <see cref="T:System.Windows.Forms.Form" /> che contiene questo controllo.</summary>
        <returns>Ottiene il <see cref="T:System.Windows.Forms.Form" /> che contiene questo controllo. Restituisce <see langword="null" /> se il <see cref="T:System.Windows.Forms.MainMenu" /> non è attualmente incluso in un form.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà consente di determinare se uno specifico <xref:System.Windows.Forms.MainMenu> è associato a un form padre. La proprietà è in genere utilizzato quando più <xref:System.Windows.Forms.MainMenu> vengono utilizzati gli oggetti in un form e per determinare quale è attualmente utilizzato da un form.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Windows.Forms.MainMenu.GetForm%2A> per determinare se un <xref:System.Windows.Forms.MainMenu> è attualmente associato al form padre. Se la chiamata nell'esempio di codice per <xref:System.Windows.Forms.MainMenu.GetForm%2A> non restituisce `null`, il codice Duplica la struttura di menu del <xref:System.Windows.Forms.MainMenu> utilizzando il <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> metodo. Il codice imposta quindi la <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> proprietà su true nella nuova copia del <xref:System.Windows.Forms.MainMenu> per creare un <xref:System.Windows.Forms.MainMenu> che può essere usato per le lingue che supportano diritto di testo a sinistra. In questo esempio si suppone una <xref:System.Windows.Forms.MainMenu> creato denominata `mainMenu1`.  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Windows.Forms.MainMenu.Collapse" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per ulteriori informazioni, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Windows.Forms.MainMenu.OnCollapse%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MainMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la visualizzazione da destra a sinistra del testo da parte del controllo.</summary>
        <value>Uno dei valori di <see cref="T:System.Windows.Forms.RightToLeft" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà consente il supporto di lingue con scrittura da destra a sinistra nei menu. Quando questa proprietà è impostata su `RightToLeft.Yes`, il testo delle voci dal menu visualizzato da destra a sinistra anziché da sinistra a destra.  
  
> [!NOTE]
>  Per ulteriori informazioni sugli effetti dell'abilitazione dell'allineamento da destra a sinistra sui controlli Windows Form, vedere il <xref:System.Windows.Forms.Control.RightToLeft%2A> proprietà.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Windows.Forms.MainMenu.GetForm%2A> per determinare se un <xref:System.Windows.Forms.MainMenu> è attualmente associato al form padre. Se la chiamata nell'esempio di codice per <xref:System.Windows.Forms.MainMenu.GetForm%2A> non restituisce `null`, il codice Duplica la struttura di menu del <xref:System.Windows.Forms.MainMenu> utilizzando il <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> metodo. Nell'esempio di codice imposta quindi la <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> proprietà `RightToLeft.Yes` nella nuova copia del <xref:System.Windows.Forms.MainMenu> per creare un <xref:System.Windows.Forms.MainMenu> che può essere usato per le lingue che supportano testo a sinistra da destra a. In questo esempio si suppone una <xref:System.Windows.Forms.MainMenu> creato denominata `mainMenu1`.  
  
 [!code-cpp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Il valore assegnato alla proprietà non è un membro valido dell'enumerazione <see cref="T:System.Windows.Forms.RightToLeft" />.</exception>
        <altmember cref="T:System.Windows.Forms.RightToLeft" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce una stringa che rappresenta l'oggetto <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
        <returns>Stringa che rappresenta l'oggetto <see cref="T:System.Windows.Forms.MainMenu" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa restituita include il tipo e la stringa restituita dal <xref:System.Windows.Forms.Form.ToString%2A> metodo se il <xref:System.Windows.Forms.MainMenu> viene assegnato a un form.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>