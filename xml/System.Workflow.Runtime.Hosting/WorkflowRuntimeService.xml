<Type Name="WorkflowRuntimeService" FullName="System.Workflow.Runtime.Hosting.WorkflowRuntimeService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c7fbbd24977b76945374cd4b1082c0b7cb99c085" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51896901" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkflowRuntimeService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowRuntimeService abstract" />
  <TypeSignature Language="F#" Value="type WorkflowRuntimeService = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta la classe base astratta dalla quale vengono derivati i servizi di base del motore di runtime del flusso di lavoro.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 I servizi che derivano dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> possono essere avviati e arrestati dal motore di runtime del flusso di lavoro. L'ordine in cui i servizi vengono avviati o arrestati, tuttavia, è indeterminato e i servizi possono richiedere il supporto di altri servizi allo scopo di eseguire correttamente l'inizializzazione quando vengono avviati e, al contrario, possono richiedere il supporto di altri servizi allo scopo di eseguire correttamente la chiusura quando vengono arrestati. Per risolvere questo problema, il motore di runtime del flusso di lavoro fornisce meccanismi a due fasi per l'avvio e l'arresto dei servizi. Quando <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> viene chiamato, il motore di runtime del flusso di lavoro richiama il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> per ognuno dei servizi che derivano dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  Quando tutti questi servizi sono stati avviati, il motore di runtime del flusso di lavoro genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> che provoca la chiamata del metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> per ogni servizio del motore di runtime del flusso di lavoro. Il servizio può eseguire l'override del metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> per partecipare a questo processo a due fasi. In modo analogo, quando <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> viene chiamato, il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>, l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> e il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> forniscono questo meccanismo a due fasi.  La proprietà State contiene un valore <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState> che indica se il servizio è in fase di avvio o di arresto oppure se è stato completamente avviato o arrestato.  
  
 I servizi che derivano dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> possono generare l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=nameWithType> quando incontrano una condizione che provoca un'eccezione non gestita chiamando <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A>.  
  
 I servizi derivati dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> e dalla classe <xref:System.Workflow.Runtime.Tracking.TrackingService> derivano dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowRuntimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowRuntimeService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Quando viene implementato in una classe derivata, inizializza una nuova istanza della classe <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'enumerazione <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> viene inizializzata su <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnStarted ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStarted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStarted ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStarted();" />
      <MemberSignature Language="F#" Value="abstract member OnStarted : unit -&gt; unit&#xA;override this.OnStarted : unit -&gt; unit" Usage="workflowRuntimeService.OnStarted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando viene sottoposto a override in una classe derivata, rappresenta il metodo che verrà chiamato quando il motore di runtime del flusso di lavoro genera l'evento <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Started" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> implementa un meccanismo di avvio a due fasi che consente ai servizi del motore di runtime del flusso di lavoro di eseguire qualsiasi inizializzazione che dipende da altri servizi dopo che il motore di runtime del flusso di lavoro ha richiamato il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> per tutti i relativi servizi. Dopo aver chiamato il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> di tutti i relativi servizi, il motore di runtime del flusso di lavoro genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType>. È possibile eseguire l'override del metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> per fornire qualsiasi funzionalità di avvio conclusiva richiesta del servizio quando viene generato l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType>. Il meccanismo di sottoscrizione e annullamento della sottoscrizione dell'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> viene gestito internamente.  
  
> [!NOTE]
>  Se il servizio viene aggiunto al motore di runtime del flusso di lavoro mediante una chiamata a <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> dopo l'avvio del motore di runtime del flusso di lavoro, quest'ultimo chiamerà il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> sul servizio. In questa situazione, tuttavia, l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started> si già è verificato, pertanto può essere necessario che il servizio esegua qualsiasi inizializzazione che normalmente eseguirebbe in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> dal metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>. È possibile testare <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> per determinare se il motore di runtime del flusso di lavoro è stato avviato.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> viene impostato su <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started> prima che <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> venga richiamato.  L'implementazione predefinita di <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> non esegue azioni.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStopped">
      <MemberSignature Language="C#" Value="protected virtual void OnStopped ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStopped() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStopped ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStopped();" />
      <MemberSignature Language="F#" Value="abstract member OnStopped : unit -&gt; unit&#xA;override this.OnStopped : unit -&gt; unit" Usage="workflowRuntimeService.OnStopped " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando viene sottoposto a override in una classe derivata, rappresenta il metodo che verrà chiamato quando il motore di runtime del flusso di lavoro genera l'evento <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> implementa un meccanismo di arresto a due fasi che consente ai servizi del motore di runtime del flusso di lavoro di mantenere alcune funzionalità dopo che il relativo metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> viene richiamato dal motore di runtime del flusso in modo che possano, se necessario, supportare la chiusura di altri servizi. Dopo aver chiamato il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> di tutti i relativi servizi, il motore di runtime del flusso di lavoro genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType>. È possibile eseguire l'override del metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> per fornire qualsiasi funzionalità di chiusura conclusiva richiesta del servizio quando l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> viene generato. Il meccanismo di sottoscrizione e annullamento della sottoscrizione dell'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> viene gestito internamente.  
  
> [!NOTE]
>  Se <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> viene rimosso dal motore di runtime del flusso di lavoro mediante una chiamata a <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> mentre il motore di runtime del flusso di lavoro è in esecuzione, quest'ultimo chiamerà il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> sul servizio. In questa situazione, il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> non verrà tuttavia chiamato per il servizio. Di conseguenza, è possibile che il servizio debba eseguire operazioni di chiusura conclusive che normalmente eseguirebbe in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> dal metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>. È possibile testare <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> per determinare se il motore di runtime del flusso di lavoro è in esecuzione.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> viene impostato su <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped> prima che <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> venga richiamato.  L'implementazione predefinita di <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> non esegue azioni.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseServicesExceptionNotHandledEvent">
      <MemberSignature Language="C#" Value="protected void RaiseServicesExceptionNotHandledEvent (Exception exception, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseServicesExceptionNotHandledEvent(class System.Exception exception, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseServicesExceptionNotHandledEvent(Exception ^ exception, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.RaiseServicesExceptionNotHandledEvent : Exception * Guid -&gt; unit" Usage="workflowRuntimeService.RaiseServicesExceptionNotHandledEvent (exception, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="exception">Eccezione non gestita.</param>
        <param name="instanceId">Oggetto <see cref="T:System.Guid" /> dell'istanza del flusso di lavoro associato all'eccezione non gestita.</param>
        <summary>Genera l'evento <see cref="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il servizio può chiamare <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> per generare l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=nameWithType> quando rileva un'eccezione che non può gestire durante l'esecuzione. È necessario passare l'identificatore <xref:System.Guid> dell'istanza del flusso di lavoro associato all'eccezione non gestita. Ad esempio, un servizio timer può passare il <xref:System.Guid> associato al timer per il quale si è verificata l'eccezione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Runtime">
      <MemberSignature Language="C#" Value="protected System.Workflow.Runtime.WorkflowRuntime Runtime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.WorkflowRuntime Runtime" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Runtime As WorkflowRuntime" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Workflow::Runtime::WorkflowRuntime ^ Runtime { System::Workflow::Runtime::WorkflowRuntime ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Runtime : System.Workflow.Runtime.WorkflowRuntime" Usage="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowRuntime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la classe <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> per questo servizio.</summary>
        <value>Oggetto <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il motore di runtime del flusso di lavoro imposta questa proprietà prima di chiamare <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> sul servizio.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="protected internal virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Start();" />
      <MemberSignature Language="F#" Value="abstract member Start : unit -&gt; unit&#xA;override this.Start : unit -&gt; unit" Usage="workflowRuntimeService.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando viene sottoposto a override in una classe derivata, avvia il servizio e modifica la classe <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" /> in <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> viene richiamato dal motore di runtime del flusso di lavoro su tutti i servizi derivati dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> quando <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> viene chiamato.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> viene richiamato anche dal motore di runtime del flusso di lavoro quando un servizio del motore di runtime del flusso di lavoro viene aggiunto allo stesso da una chiamata a <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> dopo l'avvio del motore di runtime del flusso di lavoro. L'implementazione predefinita di <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> rileva se il servizio è stato avviato e utilizza queste informazioni per generare l'eccezione adatta se il servizio viene avviato mentre è già in esecuzione.  
  
 Per fare in modo che il servizio venga avviato dal motore di runtime del flusso di lavoro, è possibile fornire le funzionalità aggiuntive eseguendo l'override di questo metodo. Non è possibile garantire quale servizio, se disponibile, sia in esecuzione quando il motore di runtime di flusso di lavoro chiama <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> sul servizio. Nel metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>, pertanto, è necessario eseguire solo un'inizializzazione che non dipende dalla funzionalità fornita da altri servizi. Tali funzionalità includono quelle fornite dai servizi di base, ad esempio il servizio Utilità di pianificazione. Il motore di runtime del flusso di lavoro genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> dopo aver chiamato il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> di tutti i relativi servizi. Se il servizio richiede ulteriori inizializzazioni dopo l'avvio di tutti i servizi del motore di runtime del flusso di lavoro, è possibile eseguire l'override del metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> per eseguire tale inizializzazione quando viene generato l'evento <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>.  
  
> [!NOTE]
>  Se il servizio viene aggiunto al motore di runtime del flusso di lavoro mediante una chiamata a <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> dopo l'avvio del motore di runtime del flusso di lavoro, quest'ultimo chiamerà il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> sul servizio. In questa situazione, tuttavia, l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started> si già è verificato, pertanto può essere necessario che il servizio esegua qualsiasi inizializzazione che normalmente eseguirebbe in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> dal metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>. È possibile testare <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> per determinare se il motore di runtime del flusso di lavoro è stato avviato.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> deve essere chiamato solo dal motore di runtime del flusso di lavoro.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrata la chiamata del metodo Start su un oggetto derivato da <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>, TerminationTrackingService.  Questo esempio è tratto dall'esempio SDK Termination Tracking Service.  Per altre informazioni, vedere [esempio di servizio di rilevamento di chiusura](https://msdn.microsoft.com/library/29b7c0d7-cece-4bb9-96d0-c5b6c6e14439).  
  
 [!code-csharp[WF_Samples#112](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#112)]
 [!code-vb[WF_Samples#112](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic). 
oppure 
Il servizio è già stato avviato.</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="protected System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState State" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property State As WorkflowRuntimeServiceState" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Workflow::Runtime::Hosting::WorkflowRuntimeServiceState State { System::Workflow::Runtime::Hosting::WorkflowRuntimeServiceState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState" Usage="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene lo stato della classe <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</summary>
        <value>Uno dei valori di <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> implementa meccanismi a due fasi per l'avvio e l'arresto di un servizio del motore di runtime del flusso di lavoro. La prima fase del meccanismo di avvio inizia quando il motore di runtime del flusso di lavoro richiede l'implementazione del metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> per il servizio. Questo metodo deve chiamare l'implementazione base di <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>, che imposta <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> su <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting>. La seconda fase si verifica dopo che il motore di runtime del flusso di lavoro ha avviato tutti i relativi servizi quando genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started>. <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> gestisce internamente una sottoscrizione a questo evento e il relativo gestore imposterà <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> su <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started>.  
  
 Il meccanismo a due fasi per l'arresto di un servizio del motore di runtime del flusso di lavoro ha inizio quando il motore di runtime richiede l'implementazione del metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> per il servizio. Questo metodo deve chiamare l'implementazione base di <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>, che imposta <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> su <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping>. Il motore di runtime del flusso di lavoro genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> dopo aver arrestato tutti i relativi servizi. <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> gestisce internamente una sottoscrizione a questo evento e il relativo gestore imposterà <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> su <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="protected internal virtual void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Stop();" />
      <MemberSignature Language="F#" Value="abstract member Stop : unit -&gt; unit&#xA;override this.Stop : unit -&gt; unit" Usage="workflowRuntimeService.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando viene sottoposto a override in una classe derivata, arresta il servizio e modifica la classe <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" /> in <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> viene richiamato dal motore di runtime del flusso di lavoro su tutti i servizi derivati dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> quando <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> viene chiamato.  Anche <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> viene richiamato dal motore di runtime del flusso di lavoro quando un servizio del motore di runtime del flusso di lavoro viene rimosso mediante una chiamata a <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>. L'implementazione predefinita di <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> rileva se il servizio è stato avviato e utilizza queste informazioni per generare l'eccezione adatta se il servizio viene arrestato prima di essere avviato.  
  
 Per fare in modo che il servizio venga arrestato dal motore di runtime del flusso di lavoro, è possibile fornire le funzionalità aggiuntive eseguendo l'override di questo metodo. Non è possibile garantire quale servizio, se disponibile, venga arrestato o eseguito quando <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> viene chiamato sul servizio. Il motore di runtime del flusso di lavoro genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> dopo aver chiamato il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> di tutti i relativi servizi. Per supportare altri servizi fino a quando il motore di runtime del flusso di lavoro avrà richiamato i metodi Stop di tutti i servizi del motore di runtime del flusso di lavoro, è possibile che il servizio debba mantenere alcune funzionalità residue. Se il servizio deve mantenere tali funzionalità, è possibile eseguire l'override del metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> per eseguire l'azione aggiuntiva richiesta per completare l'arresto del servizio quando viene generato l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Se <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> viene rimosso dal motore di runtime del flusso di lavoro mediante una chiamata a <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> mentre il motore di runtime del flusso di lavoro è in esecuzione, quest'ultimo chiamerà il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> sul servizio. In questa situazione, il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> non verrà tuttavia chiamato per il servizio. Di conseguenza, è possibile che il servizio debba eseguire qualsiasi funzionalità di chiusura aggiuntiva che normalmente eseguirebbe in <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> dal metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>. È possibile testare <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> per determinare se il motore di runtime del flusso di lavoro è in esecuzione.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> deve essere chiamato solo dal motore di runtime del flusso di lavoro.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).  
  
oppure 
Il servizio non è ancora stato avviato.</exception>
      </Docs>
    </Member>
  </Members>
</Type>