<Type Name="WorkflowSchedulerService" FullName="System.Workflow.Runtime.Hosting.WorkflowSchedulerService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="32b1b2105610f83505f9df77f1666f0403474d8c" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51897692" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WorkflowSchedulerService : System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkflowSchedulerService extends System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.WorkflowSchedulerService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WorkflowSchedulerService&#xA;Inherits WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowSchedulerService abstract : System::Workflow::Runtime::Hosting::WorkflowRuntimeService" />
  <TypeSignature Language="F#" Value="type WorkflowSchedulerService = class&#xA;    inherit WorkflowRuntimeService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.Runtime.Hosting.WorkflowRuntimeService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornisce un meccanismo per implementare il pool di thread allo scopo di eseguire il flusso di lavoro e gestire la registrazione e gli eventi del timer in memoria.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> è la classe base per tutte le classi che creano thread che eseguono istanze del flusso di lavoro sull'host del motore di runtime del flusso di lavoro, Tra queste sono inclusi i tipi  <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService> e <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService>.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Quando si eredita dalla classe <see cref="T:System.Workflow.Runtime.Hosting.WorkflowSchedulerService" />, è necessario eseguire l'override dei seguenti membri: <see cref="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Cancel(System.Guid)" />, <see cref="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)" /> e <see cref="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)" />.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowSchedulerService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowSchedulerService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Quando viene implementato in una classe derivata, inizializza una nuova istanza della classe <see cref="T:System.Workflow.Runtime.Hosting.WorkflowSchedulerService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrata la creazione di un'istanza di un oggetto <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> (che eredita da <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService>) e l'aggiunta dell'istanza al runtime. Questo esempio è tratto dall'esempio SDK Nested Exception Handlers incluso nel file Program.cs. Per altre informazioni, vedere [esempio di gestori di eccezioni annidati](https://msdn.microsoft.com/library/d1da0209-842b-41c8-9b7c-0cbaa1034265).  
  
 [!code-csharp[WF_Samples#161](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#161)]
 [!code-vb[WF_Samples#161](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="protected internal abstract void Cancel (Guid timerId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Cancel(valuetype System.Guid timerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Cancel(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub Cancel (timerId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void Cancel(Guid timerId);" />
      <MemberSignature Language="F#" Value="abstract member Cancel : Guid -&gt; unit" Usage="workflowSchedulerService.Cancel timerId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timerId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="timerId">
          <see cref="T:System.Guid" /> associato al thread pianificato esistente da annullare.</param>
        <summary>Quando viene sottoposto a override in una classe derivata, annulla l'elemento di lavoro pianificato con l'oggetto <paramref name="timerId" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Cancel%2A> rimuove dalla coda degli elementi di lavoro in sospeso una richiesta precedente per pianificare un'istanza del flusso di lavoro.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Schedule">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Chiamato dal runtime per richiedere un nuovo thread per l'esecuzione di un'istanza del flusso di lavoro.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="protected internal abstract void Schedule (System.Threading.WaitCallback callback, Guid workflowInstanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Schedule(class System.Threading.WaitCallback callback, valuetype System.Guid workflowInstanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub Schedule (callback As WaitCallback, workflowInstanceId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void Schedule(System::Threading::WaitCallback ^ callback, Guid workflowInstanceId);" />
      <MemberSignature Language="F#" Value="abstract member Schedule : System.Threading.WaitCallback * Guid -&gt; unit" Usage="workflowSchedulerService.Schedule (callback, workflowInstanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.WaitCallback" />
        <Parameter Name="workflowInstanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="callback">Un delegato multicast <see cref="T:System.Threading.WaitCallback" /> che rappresenta il metodo da eseguire.</param>
        <param name="workflowInstanceId">
          <see cref="T:System.Guid" /> che rappresenta l'istanza del flusso di lavoro.</param>
        <summary>Quando viene sottoposto a override in una classe derivata, questo metodo viene chiamato dal runtime per pianificare un elemento di lavoro (callback) per uno specifico ID dell'istanza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il costruttore <xref:System.Threading.WaitCallback> per creare il metodo delegato in modo che venga eseguito nel nuovo thread.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="protected internal abstract void Schedule (System.Threading.WaitCallback callback, Guid workflowInstanceId, DateTime whenUtc, Guid timerId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Schedule(class System.Threading.WaitCallback callback, valuetype System.Guid workflowInstanceId, valuetype System.DateTime whenUtc, valuetype System.Guid timerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub Schedule (callback As WaitCallback, workflowInstanceId As Guid, whenUtc As DateTime, timerId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void Schedule(System::Threading::WaitCallback ^ callback, Guid workflowInstanceId, DateTime whenUtc, Guid timerId);" />
      <MemberSignature Language="F#" Value="abstract member Schedule : System.Threading.WaitCallback * Guid * DateTime * Guid -&gt; unit" Usage="workflowSchedulerService.Schedule (callback, workflowInstanceId, whenUtc, timerId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.WaitCallback" />
        <Parameter Name="workflowInstanceId" Type="System.Guid" />
        <Parameter Name="whenUtc" Type="System.DateTime" />
        <Parameter Name="timerId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="callback">Un delegato multicast <see cref="T:System.Threading.WaitCallback" /> che rappresenta il metodo da eseguire.</param>
        <param name="workflowInstanceId">
          <see cref="T:System.Guid" /> che rappresenta l'istanza del flusso di lavoro da aggiungere.</param>
        <param name="whenUtc">
          <see cref="T:System.DateTime" /> in cui iniziare l'esecuzione dell'elemento del flusso di lavoro.</param>
        <param name="timerId">
          <see cref="T:System.Guid" /> che rappresenta il timer pianificato.</param>
        <summary>Quando viene sottoposto a override in una classe derivata, questo metodo viene chiamato dal runtime per pianificare un elemento di lavoro (callback) per una specifica istanza del flusso di lavoro da eseguire in un determinato momento (<see cref="T:System.DateTime" />).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>