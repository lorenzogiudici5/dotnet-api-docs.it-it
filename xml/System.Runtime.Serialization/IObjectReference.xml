<Type Name="IObjectReference" FullName="System.Runtime.Serialization.IObjectReference">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e66ecc80c8a7ca0b241e0a186794d1cb29ef2f55" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36629316" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IObjectReference" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObjectReference" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.IObjectReference" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObjectReference" />
  <TypeSignature Language="C++ CLI" Value="public interface class IObjectReference" />
  <TypeSignature Language="F#" Value="type IObjectReference = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indica che l'implementatore di interfacce corrente è un riferimento a un altro oggetto.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[IObjectReference Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IObjectReference Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[IObjectReference Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IObjectReference Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[IObjectReference Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IObjectReference Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Implementare questa interfaccia per gli oggetti che sono riferimenti a un oggetto diverso, non può essere risolto fino a quando non viene ripristinato completamente l'oggetto corrente. Durante la fase di correzione, qualsiasi oggetto che implementa <see cref="T:System.Runtime.Serialization.IObjectReference" /> viene eseguita una query per il reale oggetto e tale oggetto viene inserito nel grafico. Correzione si riferisce al processo di finalizzazione dei riferimenti non ancora completati durante il processo di deserializzazione di oggetti.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="GetRealObject">
      <MemberSignature Language="C#" Value="public object GetRealObject (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRealObject(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRealObject (context As StreamingContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetRealObject(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetRealObject : System.Runtime.Serialization.StreamingContext -&gt; obj" Usage="iObjectReference.GetRealObject context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">Oggetto <see cref="T:System.Runtime.Serialization.StreamingContext" /> da cui viene deserializzato l'oggetto corrente.</param>
        <summary>Restituisce l'oggetto reale che deve essere deserializzato, invece dell'oggetto specificato dal flusso serializzato.</summary>
        <returns>Restituisce l'oggetto effettivo che viene inserito nel grafico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è utile in una situazione di comunicazione remota quando si serializza un oggetto creatore di proxy, non un effettivo oggetto. Quando viene deserializzato l'oggetto proxy autore, la deserializzazione chiamate relativo <xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A> metodo. A questo punto, l'oggetto proxy creatore crea una nuova istanza dell'oggetto proxy che non fa riferimento all'oggetto effettivo originale, ad esempio in un computer remoto. Infine, l'oggetto creatore di proxy viene scartato e in seguito recuperato da garbage collection.  
  
 Si consideri, ad esempio, la modalità <xref:System.Type> gli oggetti vengono serializzati. Anziché trasmettere i dati dal <xref:System.Type> dell'oggetto, il sistema trasmette un oggetto contenitore con il nome dell'oggetto di tipo e le informazioni sull'assembly in cui si trovi in un oggetto che implementa <xref:System.Runtime.Serialization.IObjectReference>. Quando il nome del tipo e il nome di assembly sono disponibili, l'infrastruttura di deserializzazione chiama <xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A> sull'oggetto contenitore che è stato trasmesso. Questo contenitore restituisce il <xref:System.Type> oggetto che viene inserito nel grafico.  
  
 Questo metodo è protetto da un <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> per il <xref:System.Security.Permissions.SecurityPermission> con il <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType> specificato.  
  
   
  
## Examples  
 [!code-cpp[IObjectReference Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IObjectReference Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[IObjectReference Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IObjectReference Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[IObjectReference Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IObjectReference Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta. La chiamata non funzionerà su un server con attendibilità media.</exception>
      </Docs>
    </Member>
  </Members>
</Type>