<Type Name="IDataContractSurrogate" FullName="System.Runtime.Serialization.IDataContractSurrogate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="675d79cac00115c0afd97e8b2f4da4d6f32a10d4" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51927630" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataContractSurrogate" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataContractSurrogate" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.IDataContractSurrogate" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataContractSurrogate" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataContractSurrogate" />
  <TypeSignature Language="F#" Value="type IDataContractSurrogate = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fornisce i metodi necessari alla classe <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> per sostituire un tipo con un altro durante la serializzazione, la deserializzazione, l'esportazione e l'importazione di documenti di XML Schema.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare l'interfaccia <xref:System.Runtime.Serialization.IDataContractSurrogate> quando si utilizza la classe <xref:System.Runtime.Serialization.DataContractSerializer> se è necessario effettuare una delle operazioni seguenti: sostituire un tipo o un oggetto a un altro o generare variazioni dello schema in modo dinamico. Per un'applicazione di esempio, vedere [surrogato di DataContract](~/docs/framework/wcf/samples/datacontract-surrogate.md). Per altre informazioni sui contratti dati, vedere [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).  
  
 In fase di esecuzione è possibile cercare una classe <xref:System.Runtime.Serialization.DataContractSerializer> specifica per qualsiasi operazione in un servizio utilizzando <xref:System.ServiceModel.Description.OperationDescription> per individuare l'istanza <xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior>. Per altre informazioni sull'implementazione dell'interfaccia per creare un surrogato, vedere [surrogati del contratto dati](~/docs/framework/wcf/extending/data-contract-surrogates.md).  
  
 È inoltre possibile utilizzare l'interfaccia <xref:System.Runtime.Serialization.IDataContractSurrogate> per gestire l'importazione e l'esportazione di XML Schema quando si utilizzano le classi <xref:System.Runtime.Serialization.XsdDataContractExporter> e <xref:System.Runtime.Serialization.XsdDataContractImporter>. A tal scopo è necessario assegnare l'interfaccia <xref:System.Runtime.Serialization.IDataContractSurrogate> alla proprietà <xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A> della classe <xref:System.Runtime.Serialization.ExportOptions> o alla proprietà <xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A> della classe <xref:System.Runtime.Serialization.ImportOptions>.  Per altre informazioni, vedere [Schema di importazione ed esportazione](~/docs/framework/wcf/feature-details/schema-import-and-export.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrata un'implementazione dell'interfaccia <xref:System.Runtime.Serialization.IDataContractSurrogate>. Il codice sostituisce la serializzazione del tipo `Person` per una classe `PersonSurrogated`.  
  
 [!code-csharp[IDataContractSurrogate#0](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#0)]
 [!code-vb[IDataContractSurrogate#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
    <related type="Article" href="https://msdn.microsoft.com/library/b0188f3c-00a9-4cf0-a887-a2284c8fb014">Esempio di surrogato di DataContract</related>
    <related type="Article" href="https://msdn.microsoft.com/library/8c31134c-46c5-4ed7-94af-bab0ac0dfce5">Surrogati del contratto dati</related>
    <related type="Article" href="~/docs/framework/wcf/feature-details/using-data-contracts.md">Uso di contratti dati</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCustomDataToExport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Durante le operazioni di esportazione di schema, inserisce le annotazioni nello schema per i valori restituiti diversi da null.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (System.Reflection.MemberInfo memberInfo, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Reflection.MemberInfo memberInfo, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(System::Reflection::MemberInfo ^ memberInfo, Type ^ dataContractType);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomDataToExport : System.Reflection.MemberInfo * Type -&gt; obj" Usage="iDataContractSurrogate.GetCustomDataToExport (memberInfo, dataContractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="memberInfo">Classe <see cref="T:System.Reflection.MemberInfo" /> che descrive il membro.</param>
        <param name="dataContractType">Oggetto <see cref="T:System.Type" />.</param>
        <summary>Durante le operazioni di esportazione di schema, inserisce le annotazioni nello schema per i valori restituiti diversi da null.</summary>
        <returns>Oggetto che rappresenta l'annotazione da inserire nel documento XSD (XML Schema Definition).</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (Type clrType, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Type clrType, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomDataToExport (clrType As Type, dataContractType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(Type ^ clrType, Type ^ dataContractType);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomDataToExport : Type * Type -&gt; obj" Usage="iDataContractSurrogate.GetCustomDataToExport (clrType, dataContractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="clrType">Tipo CLR da sostituire.</param>
        <param name="dataContractType">Tipo di contratto dati da annotare.</param>
        <summary>Durante le operazioni di esportazione di schema, inserisce le annotazioni nello schema per i valori restituiti diversi da null.</summary>
        <returns>Oggetto che rappresenta l'annotazione da inserire nel documento XSD (XML Schema Definition).</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataContractType">
      <MemberSignature Language="C#" Value="public Type GetDataContractType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDataContractType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetDataContractType(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetDataContractType : Type -&gt; Type" Usage="iDataContractSurrogate.GetDataContractType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Tipo CLR <see cref="T:System.Type" /> da sostituire.</param>
        <summary>Durante la serializzazione, la deserializzazione e l'importazione ed esportazione dello schema, restituisce un tipo di contratto dati che sostituisce il tipo specificato.</summary>
        <returns>Valore <see cref="T:System.Type" /> da sostituire con il valore <paramref name="type" />. Questo tipo deve poter essere serializzato da <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. Ad esempio, deve essere contrassegnato dall'attributo <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> o tramite altri meccanismi riconosciuti dal serializzatore.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nel codice seguente viene illustrata un'implementazione del metodo <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType%2A>.  
  
 [!code-csharp[IDataContractSurrogate#1](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#1)]
 [!code-vb[IDataContractSurrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeserializedObject">
      <MemberSignature Language="C#" Value="public object GetDeserializedObject (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetDeserializedObject(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeserializedObject (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetDeserializedObject(System::Object ^ obj, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member GetDeserializedObject : obj * Type -&gt; obj" Usage="iDataContractSurrogate.GetDeserializedObject (obj, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto deserializzato da sostituire.</param>
        <param name="targetType">
          <see cref="T:System.Type" /> al quale deve essere assegnato l'oggetto sostituito.</param>
        <summary>Durante la deserializzazione, restituisce un oggetto che è un sostituto dell'oggetto specificato.</summary>
        <returns>Oggetto deserializzato sostituito. L'oggetto deve essere di un tipo che può essere serializzato da <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. Ad esempio, deve essere contrassegnato dall'attributo <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> o tramite altri meccanismi riconosciuti dal serializzatore.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In un'implementazione semplice, utilizzare una struttura di controllo If…Then…Else per verificare se il valore `obj` è del tipo surrogato. In questo caso, trasformare il valore appropriatamente e restituire l'oggetto sostituito. L'oggetto sostituito può essere una nuova istanza o la stessa istanza `obj`.  
  
   
  
## Examples  
 Nel codice seguente viene illustrata un'implementazione del metodo <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject%2A>.  
  
 [!code-csharp[IDataContractSurrogate#3](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#3)]
 [!code-vb[IDataContractSurrogate#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownCustomDataTypes">
      <MemberSignature Language="C#" Value="public void GetKnownCustomDataTypes (System.Collections.ObjectModel.Collection&lt;Type&gt; customDataTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetKnownCustomDataTypes(class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; customDataTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetKnownCustomDataTypes (customDataTypes As Collection(Of Type))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetKnownCustomDataTypes(System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ customDataTypes);" />
      <MemberSignature Language="F#" Value="abstract member GetKnownCustomDataTypes : System.Collections.ObjectModel.Collection&lt;Type&gt; -&gt; unit" Usage="iDataContractSurrogate.GetKnownCustomDataTypes customDataTypes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customDataTypes" Type="System.Collections.ObjectModel.Collection&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="customDataTypes">Classe <see cref="T:System.Collections.ObjectModel.Collection`1" /> di <see cref="T:System.Type" /> alla quale aggiungere tipi noti.</param>
        <summary>Imposta la raccolta di tipi noti da utilizzare per la serializzazione e la deserializzazione degli oggetti dati personalizzati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è necessario durante l'esportazione o l'importazione dello schema soltanto se nello schema vengono inserite annotazioni utilizzando il metodo <xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectToSerialize">
      <MemberSignature Language="C#" Value="public object GetObjectToSerialize (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObjectToSerialize(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectToSerialize (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetObjectToSerialize(System::Object ^ obj, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectToSerialize : obj * Type -&gt; obj" Usage="iDataContractSurrogate.GetObjectToSerialize (obj, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto da sostituire.</param>
        <param name="targetType">
          <see cref="T:System.Type" /> al quale deve essere assegnato l'oggetto sostituito.</param>
        <summary>Durante la serializzazione restituisce un oggetto che sostituisce l'oggetto specificato.</summary>
        <returns>Oggetto sostituito che verrà serializzato. L'oggetto deve essere serializzato dalla classe <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. Ad esempio, deve essere contrassegnato dall'attributo <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> o tramite altri meccanismi riconosciuti dal serializzatore.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non deve restituire `null` perché in fase di deserializzazione i dati sarà possibile eseguire il cast al tipo <xref:System.Object> e un <xref:System.InvalidCastException> viene generata un'eccezione.  
  
   
  
## Examples  
 Nel codice seguente viene illustrata un'implementazione del metodo <xref:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize%2A>.  
  
 [!code-csharp[IDataContractSurrogate#2](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#2)]
 [!code-vb[IDataContractSurrogate#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReferencedTypeOnImport">
      <MemberSignature Language="C#" Value="public Type GetReferencedTypeOnImport (string typeName, string typeNamespace, object customData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetReferencedTypeOnImport(string typeName, string typeNamespace, object customData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReferencedTypeOnImport (typeName As String, typeNamespace As String, customData As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReferencedTypeOnImport(System::String ^ typeName, System::String ^ typeNamespace, System::Object ^ customData);" />
      <MemberSignature Language="F#" Value="abstract member GetReferencedTypeOnImport : string * string * obj -&gt; Type" Usage="iDataContractSurrogate.GetReferencedTypeOnImport (typeName, typeNamespace, customData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeNamespace" Type="System.String" />
        <Parameter Name="customData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="typeName">Nome del tipo nello schema.</param>
        <param name="typeNamespace">Spazio dei nomi del tipo nello schema.</param>
        <param name="customData">Oggetto che rappresenta l'annotazione inserita nel documento XSD (XML Schema Definition), ovvero dati che possono essere utilizzati per individuare il tipo a cui viene fatto riferimento.</param>
        <summary>Durante l'importazione dello schema, restituisce il tipo a cui fa riferimento lo schema.</summary>
        <returns>Tipo <see cref="T:System.Type" /> da utilizzare per il tipo a cui viene fatto riferimento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non esiste un tipo CLR per la rappresentazione del tipo di schema, deve essere restituito `Null`. In questo modo durante l'importazione dello schema verrà generato un nuovo tipo.  
  
   
  
## Examples  
 Nel codice seguente viene illustrata un'implementazione del metodo <xref:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport%2A>.  
  
 [!code-csharp[IDataContractSurrogate#4](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#4)]
 [!code-vb[IDataContractSurrogate#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessImportedType">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeDeclaration ProcessImportedType (System.CodeDom.CodeTypeDeclaration typeDeclaration, System.CodeDom.CodeCompileUnit compileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration ProcessImportedType(class System.CodeDom.CodeTypeDeclaration typeDeclaration, class System.CodeDom.CodeCompileUnit compileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessImportedType (typeDeclaration As CodeTypeDeclaration, compileUnit As CodeCompileUnit) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeDeclaration ^ ProcessImportedType(System::CodeDom::CodeTypeDeclaration ^ typeDeclaration, System::CodeDom::CodeCompileUnit ^ compileUnit);" />
      <MemberSignature Language="F#" Value="abstract member ProcessImportedType : System.CodeDom.CodeTypeDeclaration * System.CodeDom.CodeCompileUnit -&gt; System.CodeDom.CodeTypeDeclaration" Usage="iDataContractSurrogate.ProcessImportedType (typeDeclaration, compileUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDeclaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="typeDeclaration">Classe <see cref="T:System.CodeDom.CodeTypeDeclaration" /> da elaborare che rappresenta la dichiarazione di tipo generata durante l'importazione dello schema.</param>
        <param name="compileUnit">Classe <see cref="T:System.CodeDom.CodeCompileUnit" /> che contiene l'altro codice generato durante l'importazione dello schema.</param>
        <summary>Elabora il tipo generato dallo schema importato.</summary>
        <returns>Classe <see cref="T:System.CodeDom.CodeTypeDeclaration" /> che contiene il tipo elaborato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La classe <xref:System.CodeDom.CodeTypeDeclaration> di input o altre informazioni contenute nella classe <xref:System.CodeDom.CodeCompileUnit> possono essere modificate dall'utente in questo metodo. Se viene restituito `null`, il tipo non verrà generato. Se viene restituita una nuova classe <xref:System.CodeDom.CodeTypeDeclaration>, sostituirà il tipo originale generato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>