<Type Name="AddInController" FullName="System.AddIn.Hosting.AddInController">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2e850f00fad28da6ae4a4fb1944f1b130392327a" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48706055" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AddInController" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AddInController extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Hosting.AddInController" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AddInController" />
  <TypeSignature Language="C++ CLI" Value="public ref class AddInController sealed" />
  <TypeSignature Language="F#" Value="type AddInController = class" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Consente di accedere a un componente aggiuntivo per eseguire varie attività.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questa classe per eseguire le attività seguenti:  
  
-   Usare la <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> proprietà per ottenere un <xref:System.AddIn.Hosting.AddInEnvironment> oggetto per un componente aggiuntivo. Quindi usare tale oggetto per attivare altri componenti aggiuntivi nello stesso dominio dell'applicazione e processo come il componente aggiuntivo originale.  
  
-   Usare la <xref:System.AddIn.Hosting.AddInController.AppDomain%2A> proprietà per ottenere un <xref:System.AppDomain> oggetto per un componente aggiuntivo. Quindi usare tale oggetto per attivare altri componenti aggiuntivi nello stesso dominio dell'applicazione come il componente aggiuntivo originale. Si noti che a causa delle limitazioni in .NET remoting tra processi, questo scenario non funzioneranno con i componenti aggiuntivi che vengono attivati in un processo separato.  
  
-   Usare la <xref:System.AddIn.Hosting.AddInController.Token%2A> proprietà per ottenere un <xref:System.AddIn.Hosting.AddInToken> oggetto che rappresenta un componente aggiuntivo.  
  
-   Arrestare un componente aggiuntivo con il <xref:System.AddIn.Hosting.AddInController.Shutdown%2A> (metodo).  
  
 Per ottenere il controller per un componente aggiuntivo, chiamare il <xref:System.AddIn.Hosting.AddInController.GetAddInController%2A> metodo e passare un'istanza del componente aggiuntivo come parametro.  
  
   
  
## Examples  
 Nell'esempio seguente viene attivato un componente aggiuntivo all'interno dell'ambiente stesso come un componente aggiuntivo precedentemente attivato utilizzando un <xref:System.AddIn.Hosting.AddInController> oggetto.  
  
 [!code-csharp[AddInP3Host#8](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#8)]
 [!code-vb[AddInP3Host#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#8)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddInEnvironment">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.AddInEnvironment AddInEnvironment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AddIn.Hosting.AddInEnvironment AddInEnvironment" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInController.AddInEnvironment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddInEnvironment As AddInEnvironment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::AddIn::Hosting::AddInEnvironment ^ AddInEnvironment { System::AddIn::Hosting::AddInEnvironment ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AddInEnvironment : System.AddIn.Hosting.AddInEnvironment" Usage="System.AddIn.Hosting.AddInController.AddInEnvironment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInEnvironment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.AddIn.Hosting.AddInEnvironment" />.</summary>
        <value>Oggetto utilizzabile per attivare altri componenti aggiuntivi nello stesso ambiente del componente aggiuntivo originale.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare questa proprietà per ottenere il <xref:System.AddIn.Hosting.AddInEnvironment> oggetto per un componente aggiuntivo. Quindi usare tale oggetto per attivare altri componenti aggiuntivi nello stesso dominio dell'applicazione e processo come il componente aggiuntivo originale.  
  
   
  
## Examples  
 Nell'esempio seguente viene attivato un componente aggiuntivo secondo all'interno dell'ambiente stesso come il primo componente aggiuntivo.  
  
 [!code-csharp[AddInP3Host#8](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#8)]
 [!code-vb[AddInP3Host#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppDomain">
      <MemberSignature Language="C#" Value="public AppDomain AppDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AppDomain AppDomain" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInController.AppDomain" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AppDomain As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AppDomain ^ AppDomain { AppDomain ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AppDomain : AppDomain" Usage="System.AddIn.Hosting.AddInController.AppDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il dominio applicazione contenente un componente aggiuntivo.</summary>
        <value>Dominio applicazione del componente aggiuntivo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questa proprietà per ottenere un componente aggiuntivo <xref:System.AppDomain> oggetto e per attivare altri componenti aggiuntivi nello stesso dominio applicazione.  
  
   
  
## Examples  
 Nell'esempio seguente viene attivato un componente aggiuntivo secondo nello stesso dominio dell'applicazione come il primo componente aggiuntivo.  
  
 [!code-csharp[AddInP3Host#9](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#9)]
 [!code-vb[AddInP3Host#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAddInController">
      <MemberSignature Language="C#" Value="public static System.AddIn.Hosting.AddInController GetAddInController (object addIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Hosting.AddInController GetAddInController(object addIn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInController.GetAddInController(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAddInController (addIn As Object) As AddInController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::AddIn::Hosting::AddInController ^ GetAddInController(System::Object ^ addIn);" />
      <MemberSignature Language="F#" Value="static member GetAddInController : obj -&gt; System.AddIn.Hosting.AddInController" Usage="System.AddIn.Hosting.AddInController.GetAddInController addIn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addIn" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="addIn">Visualizzazione host del componente aggiuntivo.</param>
        <summary>Ottiene il controller di un componente aggiuntivo.</summary>
        <returns>Controller del componente aggiuntivo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.AddIn.Hosting.AddInToken.Activate%2A> metodi restituiscono un oggetto che rappresenta la visualizzazione host del componente aggiuntivo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInController.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberSignature Language="F#" Value="member this.Shutdown : unit -&gt; unit" Usage="addInController.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disabilita un componente aggiuntivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo interrompe la pipeline di comunicazione tra un componente aggiuntivo e il relativo host. Se il componente aggiuntivo è stato attivato in un dominio dell'applicazione generato automaticamente utilizzando il <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%29> oppure <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.Security.PermissionSet%29> metodi, il <xref:System.AddIn.Hosting.AddInController.Shutdown%2A> metodo scarica anche il dominio dell'applicazione.  
  
 Se il componente aggiuntivo è stato caricato nel proprio dominio applicazione, il <xref:System.AddIn.Hosting.AddInController.Shutdown%2A> metodo scarica anche il dominio dell'applicazione.  
  
 Se il componente aggiuntivo è stato caricato in un dominio dell'applicazione esistente, i segmenti di host e la pipeline non avrà più tutti i riferimenti a tale componente aggiuntivo. In questo caso, il componente aggiuntivo sarà idoneo per essere recuperato da garbage collection.  
  
 È anche possibile usare questa classe per arrestare un componente aggiuntivo che viene attivato in un processo esterno.  
  
   
  
## Examples  
 L'esempio seguente ottiene i <xref:System.AddIn.Hosting.AddInController> oggetto di una visualizzazione host denominata `manager` e quindi arresta il componente aggiuntivo.  
  
 [!code-csharp[AddInCollectionPipelineHost#6](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHost/cs/Program.cs#6)]
 [!code-vb[AddInCollectionPipelineHost#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineHost/vb/Program.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.AddInToken Token { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AddIn.Hosting.AddInToken Token" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInController.Token" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Token As AddInToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::AddIn::Hosting::AddInToken ^ Token { System::AddIn::Hosting::AddInToken ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Token : System.AddIn.Hosting.AddInToken" Usage="System.AddIn.Hosting.AddInController.Token" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il token che rappresenta il componente aggiuntivo.</summary>
        <value>Oggetto che rappresenta il componente aggiuntivo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, si usa questa proprietà per ottenere un token per attivare un componente aggiuntivo in un secondo momento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>