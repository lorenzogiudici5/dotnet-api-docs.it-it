<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="34fefd8e673d5edb9c2fb81e0c3d6c92c4fe6c0b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFieldParser&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFieldParser : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="87070-101">Fornisce i metodi e le proprietà per l'analisi dei file di testo strutturati.</span>
      <span class="sxs-lookup">
        <span data-stu-id="87070-101">Provides methods and properties for parsing structured text files.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-102">Il `TextFieldParser` oggetto fornisce metodi e proprietà per l'analisi del file di testo strutturati.</span><span class="sxs-lookup"><span data-stu-id="87070-102">The `TextFieldParser` object provides methods and properties for parsing structured text files.</span></span> <span data-ttu-id="87070-103">Analisi di un file di testo con il `TextFieldParser` è simile per l'iterazione su un file di testo, mentre il `ReadFields` metodo per estrarre campi di testo è simile alla suddivisione delle stringhe.</span><span class="sxs-lookup"><span data-stu-id="87070-103">Parsing a text file with the `TextFieldParser` is similar to iterating over a text file, while the `ReadFields` method to extract fields of text is similar to splitting the strings.</span></span>  
  
 <span data-ttu-id="87070-104">Il `TextFieldParser` può analizzare due tipi di file: delimitato o a larghezza fissa.</span><span class="sxs-lookup"><span data-stu-id="87070-104">The `TextFieldParser` can parse two types of files: delimited or fixed-width.</span></span> <span data-ttu-id="87070-105">Alcune proprietà, ad esempio `Delimiters` e `HasFieldsEnclosedInQuotes` sono significativi solo se si utilizzano file delimitati, quando si utilizza il `FieldWidths` proprietà è significativa solo quando si utilizzano file a larghezza fissa.</span><span class="sxs-lookup"><span data-stu-id="87070-105">Some properties, such as `Delimiters` and `HasFieldsEnclosedInQuotes` are meaningful only when working with delimited files, while the `FieldWidths` property is meaningful only when working with fixed-width files.</span></span>  
  
 <span data-ttu-id="87070-106">Nella tabella seguente sono elencati esempi di attività che coinvolgono la `Microsoft.VisualBasic.FileIO.TextFieldParser` oggetto.</span><span class="sxs-lookup"><span data-stu-id="87070-106">The following table lists examples of tasks involving the `Microsoft.VisualBasic.FileIO.TextFieldParser` object.</span></span>  
  
|<span data-ttu-id="87070-107">A</span><span class="sxs-lookup"><span data-stu-id="87070-107">To</span></span>|<span data-ttu-id="87070-108">Vedere</span><span class="sxs-lookup"><span data-stu-id="87070-108">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="87070-109">Leggere da un file di testo delimitato</span><span class="sxs-lookup"><span data-stu-id="87070-109">Read from a delimited text file</span></span>|[<span data-ttu-id="87070-110">Procedura: leggere da file di testo delimitati da virgola</span><span class="sxs-lookup"><span data-stu-id="87070-110">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="87070-111">Leggere da un file di testo a larghezza fissa</span><span class="sxs-lookup"><span data-stu-id="87070-111">Read from a fixed-width text file</span></span>|[<span data-ttu-id="87070-112">Procedura: leggere da file di testo a larghezza fissa</span><span class="sxs-lookup"><span data-stu-id="87070-112">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="87070-113">Leggere da un file di testo con più formati</span><span class="sxs-lookup"><span data-stu-id="87070-113">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="87070-114">Procedura: leggere da file di testo con più formati</span><span class="sxs-lookup"><span data-stu-id="87070-114">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="87070-115">Questo esempio vengono analizzate tramite un file di testo delimitato da tabulazione, `Bigfile`.</span><span class="sxs-lookup"><span data-stu-id="87070-115">This example parses through a tab-delimited text file, `Bigfile`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="87070-116">Inizializza una nuova istanza della classe <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-116">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="87070-117">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-117">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="87070-118">Flusso da analizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-118">The stream to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87070-119">Inizializza una nuova istanza della classe <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-119">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-120">Crea un nuovo `TextFieldParser` oggetto per analizzare il file o un flusso che è rappresentato dal `stream` parametro.</span><span class="sxs-lookup"><span data-stu-id="87070-120">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="87070-121">
            <paramref name="stream" /> è <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-121">
              <paramref name="stream" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="87070-122">Non è possibile leggere da <paramref name="stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-122">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::TextReader ^ reader);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="87070-123">
            <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-123">
              <see cref="T:System.IO.TextReader" />.</span>
          </span>
          <span data-ttu-id="87070-124">Flusso <see cref="T:System.IO.TextReader" /> da analizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-124">The <see cref="T:System.IO.TextReader" /> stream to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87070-125">Inizializza una nuova istanza della classe <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-125">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-126">Crea un nuovo `TextFieldParser` oggetto per analizzare il file o un flusso che è rappresentato dal `reader` parametro.</span><span class="sxs-lookup"><span data-stu-id="87070-126">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `reader` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="87070-127">
            <paramref name="reader" /> è <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-127">
              <paramref name="reader" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="87070-128">
            <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-128">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="87070-129">Percorso completo del file da analizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-129">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87070-130">Inizializza una nuova istanza della classe <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-130">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-131">Crea un nuovo `TextFieldParser` oggetto per analizzare il file specificato da di `path` parametro.</span><span class="sxs-lookup"><span data-stu-id="87070-131">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="87070-132">Il parametro <paramref name="path" /> è una stringa vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-132">
              <paramref name="path" /> is an empty string.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="87070-133">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-133">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="87070-134">Flusso da analizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-134">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="87070-135">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-135">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="87070-136">Codifica dei caratteri da utilizzare se la codifica non è determinata dal file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-136">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="87070-137">Il valore predefinito è <see cref="P:System.Text.Encoding.UTF8" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-137">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87070-138">Inizializza una nuova istanza della classe <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-138">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-139">Crea un nuovo `TextFieldParser` oggetto per analizzare il file o un flusso che è rappresentato dal `stream` parametro.</span><span class="sxs-lookup"><span data-stu-id="87070-139">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="87070-140">Quando si esegue la compilazione di un set di caratteri con una lingua specifica e recuperano gli stessi caratteri con una lingua diversa, i caratteri potrebbero non essere interpretati e potrebbe provocare un'eccezione generata.</span><span class="sxs-lookup"><span data-stu-id="87070-140">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="87070-141">
            <paramref name="stream" /> o <paramref name="defaultEncoding" /> è <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-141">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="87070-142">Non è possibile leggere da <paramref name="stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-142">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="87070-143">
            <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-143">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="87070-144">Percorso completo del file da analizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-144">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="87070-145">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-145">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="87070-146">Codifica dei caratteri da utilizzare se la codifica non è determinata dal file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-146">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="87070-147">Il valore predefinito è <see cref="P:System.Text.Encoding.UTF8" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-147">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87070-148">Inizializza una nuova istanza della classe <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-148">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-149">Crea un nuovo `TextFieldParser` oggetto per analizzare il file specificato da di `path` parametro.</span><span class="sxs-lookup"><span data-stu-id="87070-149">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="87070-150">Quando si esegue la compilazione di un set di caratteri con una lingua specifica e recuperano gli stessi caratteri con una lingua diversa, i caratteri potrebbero non essere interpretati e potrebbe provocare un'eccezione generata.</span><span class="sxs-lookup"><span data-stu-id="87070-150">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="87070-151">
            <paramref name="path" /> è una stringa vuota o <paramref name="defaultEncoding" /> è <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-151">
              <paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="87070-152">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-152">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="87070-153">Flusso da analizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-153">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="87070-154">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-154">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="87070-155">Codifica dei caratteri da utilizzare se la codifica non è determinata dal file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-155">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="87070-156">Il valore predefinito è <see cref="P:System.Text.Encoding.UTF8" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-156">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="87070-157">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-157">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="87070-158">Indica se cercare i byte order mark all'inizio del file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-158">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="87070-159">Il valore predefinito è <see langword="True" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-159">Default is <see langword="True" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87070-160">Inizializza una nuova istanza della classe <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-160">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-161">Crea un nuovo `TextFieldParser` oggetto per analizzare il file o un flusso che è rappresentato dal `stream` parametro.</span><span class="sxs-lookup"><span data-stu-id="87070-161">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="87070-162">Se il `detectEncoding` parametro `True`, il costruttore tenta di rilevare la codifica esaminando i primi tre byte del file o flusso.</span><span class="sxs-lookup"><span data-stu-id="87070-162">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="87070-163">Riconosce automaticamente Unicode UTF-8, little-endian e testo Unicode big-endian se il file inizia con i contrassegni di ordine byte appropriato.</span><span class="sxs-lookup"><span data-stu-id="87070-163">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="87070-164">In caso contrario, la codifica specificata dal parametro `defaultEncoding` viene utilizzato.</span><span class="sxs-lookup"><span data-stu-id="87070-164">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="87070-165">Quando si esegue la compilazione di un set di caratteri con una lingua specifica e recuperano gli stessi caratteri con una lingua diversa, i caratteri potrebbero non essere interpretati e potrebbe provocare un'eccezione generata.</span><span class="sxs-lookup"><span data-stu-id="87070-165">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="87070-166">
            <paramref name="stream" /> o <paramref name="defaultEncoding" /> è <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-166">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="87070-167">Non è possibile leggere da <paramref name="stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-167">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="87070-168">
            <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-168">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="87070-169">Percorso completo del file da analizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-169">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="87070-170">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-170">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="87070-171">Codifica dei caratteri da utilizzare se la codifica non è determinata dal file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-171">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="87070-172">Il valore predefinito è <see cref="P:System.Text.Encoding.UTF8" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-172">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="87070-173">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-173">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="87070-174">Indica se cercare i byte order mark all'inizio del file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-174">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="87070-175">Il valore predefinito è <see langword="True" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-175">Default is <see langword="True" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87070-176">Inizializza una nuova istanza della classe <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-176">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-177">Crea un nuovo `TextFieldParser` oggetto per analizzare il file specificato da di `path` parametro.</span><span class="sxs-lookup"><span data-stu-id="87070-177">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 <span data-ttu-id="87070-178">Se il `detectEncoding` parametro `True`, il costruttore tenta di rilevare la codifica esaminando i primi tre byte del file o flusso.</span><span class="sxs-lookup"><span data-stu-id="87070-178">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="87070-179">Riconosce automaticamente Unicode UTF-8, little-endian e testo Unicode big-endian se il file inizia con i contrassegni di ordine byte appropriato.</span><span class="sxs-lookup"><span data-stu-id="87070-179">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="87070-180">In caso contrario, la codifica specificata dal parametro `defaultEncoding` viene utilizzato.</span><span class="sxs-lookup"><span data-stu-id="87070-180">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="87070-181">Quando si esegue la compilazione di un set di caratteri con una lingua specifica e recuperano gli stessi caratteri con una lingua diversa, i caratteri potrebbero non essere interpretati e potrebbe provocare un'eccezione generata.</span><span class="sxs-lookup"><span data-stu-id="87070-181">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="87070-182">
            <paramref name="path" /> è una stringa vuota o <paramref name="defaultEncoding" /> è <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-182">
              <paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="87070-183">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-183">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="87070-184">Flusso da analizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-184">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="87070-185">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-185">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="87070-186">Codifica dei caratteri da utilizzare se la codifica non è determinata dal file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-186">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="87070-187">Il valore predefinito è <see cref="P:System.Text.Encoding.UTF8" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-187">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="87070-188">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-188">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="87070-189">Indica se cercare i byte order mark all'inizio del file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-189">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="87070-190">Il valore predefinito è <see langword="True" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-190">Default is <see langword="True" />.</span>
          </span>
        </param>
        <param name="leaveOpen">
          <span data-ttu-id="87070-191">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-191">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="87070-192">Indica se lasciare <c>stream</c> aperto quando l'oggetto <see langword="TextFieldParser" /> viene chiuso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-192">Indicates whether to leave <c>stream</c> open when the <see langword="TextFieldParser" /> object is closed.</span>
          </span>
          <span data-ttu-id="87070-193">Il valore predefinito è <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-193">Default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87070-194">Inizializza una nuova istanza della classe <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-194">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-195">Crea un nuovo `TextFieldParser` oggetto per analizzare il file o un flusso che è rappresentato dal `stream` parametro.</span><span class="sxs-lookup"><span data-stu-id="87070-195">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="87070-196">Se il `detectEncoding` parametro `True`, il costruttore tenta di rilevare la codifica esaminando i primi tre byte del file o flusso.</span><span class="sxs-lookup"><span data-stu-id="87070-196">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="87070-197">Riconosce automaticamente Unicode UTF-8, little-endian e testo Unicode big-endian se il file inizia con i contrassegni di ordine byte appropriato.</span><span class="sxs-lookup"><span data-stu-id="87070-197">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="87070-198">In caso contrario, la codifica specificata dal parametro `defaultEncoding` viene utilizzato.</span><span class="sxs-lookup"><span data-stu-id="87070-198">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="87070-199">Quando si esegue la compilazione di un set di caratteri con una lingua specifica e recuperano gli stessi caratteri con una lingua diversa, i caratteri potrebbero non essere interpretati e potrebbe provocare un'eccezione generata.</span><span class="sxs-lookup"><span data-stu-id="87070-199">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="87070-200">
            <paramref name="stream" /> o <paramref name="defaultEncoding" /> è <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-200">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="87070-201">Non è possibile leggere da <paramref name="stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-201">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="87070-202">Chiude l'oggetto <see langword="TextFieldParser" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-202">Closes the current <see langword="TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87070-203">In questo esempio si chiude il `TextFieldParser.FileReader`.</span><span class="sxs-lookup"><span data-stu-id="87070-203">This example closes the `TextFieldParser.FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentTokens As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ CommentTokens { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87070-204">Definisce i token di commento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-204">Defines comment tokens.</span>
          </span>
          <span data-ttu-id="87070-205">Un token di commento è una stringa che, se posizionata all'inizio di una riga, indica che la riga è un commento e deve essere ignorata dal parser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-205">A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87070-206">Matrice di stringhe che contiene tutti i token di commento per l'oggetto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-206">A string array that contains all of the comment tokens for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-207">Si tratta di un membro avanzato. non è visibile in IntelliSense a meno che non si fa clic su di **tutti** scheda.</span><span class="sxs-lookup"><span data-stu-id="87070-207">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="87070-208">I token di commento di lunghezza zero vengono ignorati.</span><span class="sxs-lookup"><span data-stu-id="87070-208">Zero-length comment tokens are ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87070-209">In questo esempio specifica che per il `TextFieldParser`, `FileReader` devono essere ignorate le righe che iniziano con una virgoletta singola (').</span><span class="sxs-lookup"><span data-stu-id="87070-209">This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="87070-210">Un token di commento contiene spazi vuoti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-210">A comment token includes white space.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiters As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Delimiters { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87070-211">Definisce i delimitatori per un file di testo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-211">Defines the delimiters for a text file.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87070-212">Matrice di stringhe che contiene tutti i delimitatori di campo per l'oggetto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-212">A string array that contains all of the field delimiters for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-213">Questa proprietà è significativa solo se il <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> è impostata su `FieldType.Delimited`.</span><span class="sxs-lookup"><span data-stu-id="87070-213">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.Delimited`.</span></span>  
  
 <span data-ttu-id="87070-214">Definire i delimitatori per un file di testo può essere eseguito anche con il <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="87070-214">Defining the delimiters for a text file can also be accomplished with the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> method.</span></span>  
  
 <span data-ttu-id="87070-215">La tabella seguente elenca un esempio di un'attività che coinvolgono la `Delimiters` proprietà.</span><span class="sxs-lookup"><span data-stu-id="87070-215">The following table lists an example of a task involving the `Delimiters` property.</span></span>  
  
|<span data-ttu-id="87070-216">A</span><span class="sxs-lookup"><span data-stu-id="87070-216">To</span></span>|<span data-ttu-id="87070-217">Vedere</span><span class="sxs-lookup"><span data-stu-id="87070-217">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="87070-218">Leggere da un file di testo delimitato</span><span class="sxs-lookup"><span data-stu-id="87070-218">Read from a delimited text file</span></span>|[<span data-ttu-id="87070-219">Procedura: leggere da file di testo delimitati da virgola</span><span class="sxs-lookup"><span data-stu-id="87070-219">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="87070-220">Questo esempio specifica che il delimitatore per i `TextFieldParser` oggetto `FileReader`, è la virgola (,).</span><span class="sxs-lookup"><span data-stu-id="87070-220">This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="87070-221">Il valore di un delimitatore è impostato su un carattere di nuova riga, una stringa vuota o <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-221">A delimiter value is set to a newline character, an empty string, or <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="87070-222">Rilascia le risorse usate dall'oggetto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-222">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="87070-223">Rilascia le risorse usate dall'oggetto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-223">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="87070-224">Proprietà di tipo Boolean.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-224">Boolean.</span>
          </span>
          <span data-ttu-id="87070-225">
            <see langword="True" /> rilascia sia le risorse gestite che quelle non gestite; <see langword="False" /> rilascia solo le risorse non gestite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-225">
              <see langword="True" /> releases both managed and unmanaged resources; <see langword="False" /> releases only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87070-226">Rilascia le risorse usate dall'oggetto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-226">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndOfData { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87070-227">Restituisce <see langword="True" /> se non sono presenti righe non vuote o righe non di commento tra la posizione del cursore corrente e la fine del file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-227">Returns <see langword="True" /> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87070-228">
            <see langword="True" /> se non vi sono più dati da leggere. In caso contrario, <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-228">
              <see langword="True" /> if there is no more data to read; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-229">Questa proprietà può essere utilizzata durante la lettura da file per determinare la fine dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="87070-229">This property can be used when reading from files to determine the end of the data being read.</span></span>  
  
 <span data-ttu-id="87070-230">Nella tabella seguente sono elencati esempi di attività che coinvolgono la `EndOfData` proprietà.</span><span class="sxs-lookup"><span data-stu-id="87070-230">The following table lists examples of tasks involving the `EndOfData` property.</span></span>  
  
|<span data-ttu-id="87070-231">A</span><span class="sxs-lookup"><span data-stu-id="87070-231">To</span></span>|<span data-ttu-id="87070-232">Vedere</span><span class="sxs-lookup"><span data-stu-id="87070-232">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="87070-233">Leggere da un file delimitato da virgole</span><span class="sxs-lookup"><span data-stu-id="87070-233">Read from a delimited file</span></span>|[<span data-ttu-id="87070-234">Procedura: leggere da file di testo delimitati da virgola</span><span class="sxs-lookup"><span data-stu-id="87070-234">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="87070-235">Leggere da un file a larghezza fissa</span><span class="sxs-lookup"><span data-stu-id="87070-235">Read from a fixed-width file</span></span>|[<span data-ttu-id="87070-236">Procedura: leggere da file di testo a larghezza fissa</span><span class="sxs-lookup"><span data-stu-id="87070-236">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="87070-237">Questo esempio viene utilizzato il `EndofData` proprietà per eseguire un ciclo in tutti i campi nel file con il `TextFieldReader`, `FileReader`.</span><span class="sxs-lookup"><span data-stu-id="87070-237">This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorLine { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87070-238">Restituisce la riga che ha provocato la generazione dell'eccezione <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> più recente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-238">Returns the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87070-239">Riga che ha provocato l'eccezione <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> più recente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-239">The line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-240">Se non <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> sono state generate eccezioni, viene restituita una stringa vuota.</span><span class="sxs-lookup"><span data-stu-id="87070-240">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, an empty string is returned.</span></span>  
  
 <span data-ttu-id="87070-241">Il <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> proprietà può essere utilizzata per visualizzare il numero della riga che ha causato l'eccezione.</span><span class="sxs-lookup"><span data-stu-id="87070-241">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> property can be used to display the number of the line that caused the exception.</span></span>  
  
 <span data-ttu-id="87070-242">Nella tabella seguente sono elencati esempi di attività che coinvolgono la `ErrorLine` proprietà.</span><span class="sxs-lookup"><span data-stu-id="87070-242">The following table lists examples of tasks involving the `ErrorLine` property.</span></span>  
  
|<span data-ttu-id="87070-243">A</span><span class="sxs-lookup"><span data-stu-id="87070-243">To</span></span>|<span data-ttu-id="87070-244">Vedere</span><span class="sxs-lookup"><span data-stu-id="87070-244">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="87070-245">Leggere da un file delimitato da virgole</span><span class="sxs-lookup"><span data-stu-id="87070-245">Read from a delimited file</span></span>|[<span data-ttu-id="87070-246">Procedura: leggere da file di testo delimitati da virgola</span><span class="sxs-lookup"><span data-stu-id="87070-246">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="87070-247">Leggere da un file a larghezza fissa</span><span class="sxs-lookup"><span data-stu-id="87070-247">Read from a fixed-width file</span></span>|[<span data-ttu-id="87070-248">Procedura: leggere da file di testo a larghezza fissa</span><span class="sxs-lookup"><span data-stu-id="87070-248">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="87070-249">Questo esempio viene utilizzato il `ErrorLine` proprietà per visualizzare la riga che causa corrente <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> eccezione.</span><span class="sxs-lookup"><span data-stu-id="87070-249">This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ErrorLineNumber { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87070-250">Restituisce il numero della riga che ha provocato la generazione dell'eccezione <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> più recente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-250">Returns the number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87070-251">Numero della riga che ha provocato l'eccezione <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> più recente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-251">The number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-252">Se non <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> sono state generate eccezioni, viene restituito -1.</span><span class="sxs-lookup"><span data-stu-id="87070-252">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, -1 is returned.</span></span>  
  
 <span data-ttu-id="87070-253">Il <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> proprietà può essere utilizzata per visualizzare il numero della riga che ha causato l'eccezione.</span><span class="sxs-lookup"><span data-stu-id="87070-253">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property can be used to display the number of the line that caused the exception.</span></span> <span data-ttu-id="87070-254">Righe vuote e commenti non vengono ignorati quando si determina il numero di riga.</span><span class="sxs-lookup"><span data-stu-id="87070-254">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
 <span data-ttu-id="87070-255">Nella tabella seguente sono elencati esempi di attività che coinvolgono la `ErrorLineNumber` proprietà.</span><span class="sxs-lookup"><span data-stu-id="87070-255">The following table lists examples of tasks involving the `ErrorLineNumber` property.</span></span>  
  
|<span data-ttu-id="87070-256">A</span><span class="sxs-lookup"><span data-stu-id="87070-256">To</span></span>|<span data-ttu-id="87070-257">Vedere</span><span class="sxs-lookup"><span data-stu-id="87070-257">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="87070-258">Leggere da un file delimitato da virgole</span><span class="sxs-lookup"><span data-stu-id="87070-258">Read from a delimited file</span></span>|[<span data-ttu-id="87070-259">Procedura: leggere da file di testo delimitati da virgola</span><span class="sxs-lookup"><span data-stu-id="87070-259">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="87070-260">Leggere da un file a larghezza fissa</span><span class="sxs-lookup"><span data-stu-id="87070-260">Read from a fixed-width file</span></span>|[<span data-ttu-id="87070-261">Procedura: leggere da file di testo a larghezza fissa</span><span class="sxs-lookup"><span data-stu-id="87070-261">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="87070-262">Questo esempio viene utilizzato il `ErrorLineNumber` proprietà per visualizzare la posizione della riga corrente che <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> eccezione.</span><span class="sxs-lookup"><span data-stu-id="87070-262">This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldWidths As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ FieldWidths { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87070-263">Indica la larghezza di ogni colonna nel file di testo da analizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-263">Denotes the width of each column in the text file being parsed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87070-264">Matrice di interi che contiene la larghezza di ogni colonna nel file di testo da analizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-264">An integer array that contains the width of each column in the text file that is being parsed.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-265">Questa proprietà è significativa solo se il <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> è impostata su `FieldType.FixedWidth`.</span><span class="sxs-lookup"><span data-stu-id="87070-265">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.FixedWidth`.</span></span> <span data-ttu-id="87070-266">Se l'ultima voce nella matrice è minore o uguale a zero, si presuppone che il campo di larghezza variabile.</span><span class="sxs-lookup"><span data-stu-id="87070-266">If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.</span></span>  
  
 <span data-ttu-id="87070-267">Il <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> metodo può essere utilizzato anche per impostare le larghezze dei campi.</span><span class="sxs-lookup"><span data-stu-id="87070-267">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> method can also be used to set field widths.</span></span>  
  
 <span data-ttu-id="87070-268">Nella tabella seguente sono elencati esempi di attività che coinvolgono la `FieldWidths` proprietà.</span><span class="sxs-lookup"><span data-stu-id="87070-268">The following table lists examples of tasks involving the `FieldWidths` property.</span></span>  
  
|<span data-ttu-id="87070-269">A</span><span class="sxs-lookup"><span data-stu-id="87070-269">To</span></span>|<span data-ttu-id="87070-270">Vedere</span><span class="sxs-lookup"><span data-stu-id="87070-270">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="87070-271">Leggere da un file di testo a larghezza fissa</span><span class="sxs-lookup"><span data-stu-id="87070-271">Read from a fixed-width text file</span></span>|[<span data-ttu-id="87070-272">Procedura: leggere da file di testo a larghezza fissa</span><span class="sxs-lookup"><span data-stu-id="87070-272">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="87070-273">In questo esempio viene letto il file `ParserText.txt`, specificando le larghezze; la prima colonna è di 5 caratteri "wide", il secondo è 10, il terzo è 11 ed è il quarto di larghezza variabile</span><span class="sxs-lookup"><span data-stu-id="87070-273">This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="87070-274">Un valore di larghezza in qualsiasi percorso diverso dall'ultima voce della matrice è inferiore o uguale a zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-274">A width value in any location other than the last entry of the array is less than or equal to zero.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TextFieldParser ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="87070-275">Consente all'oggetto <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> di provare a liberare risorse ed eseguire altre operazioni di pulitura prima che l'oggetto stesso venga recuperato dalla procedura di Garbage Collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-275">Allows the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="VB.NET" Value="Public Property HasFieldsEnclosedInQuotes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFieldsEnclosedInQuotes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87070-276">Indica se i campi sono racchiusi tra virgolette quando un file delimitato viene analizzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-276">Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87070-277">
            <see langword="True" /> se i campi sono racchiusi tra virgolette. In caso contrario, <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-277">
              <see langword="True" /> if fields are enclosed in quotation marks; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-278">Si tratta di un membro avanzato. non è visibile in IntelliSense a meno che non si fa clic su di **tutti** scheda.</span><span class="sxs-lookup"><span data-stu-id="87070-278">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="87070-279">Se la proprietà è `True`, il parser si presuppone che i campi sono racchiusi tra virgolette ("") e possono contenere terminazioni di riga.</span><span class="sxs-lookup"><span data-stu-id="87070-279">If the property is `True`, the parser assumes that fields are enclosed in quotation marks (" ") and may contain line endings.</span></span>  
  
 <span data-ttu-id="87070-280">Se un campo è racchiuso tra virgolette, ad esempio, `abc, "field2a,field2b", field3` e questa proprietà è `True`, quindi verrà restituito tutto il testo racchiuso tra virgolette come; in questo esempio restituirebbe `abc|field2a,field2b|field3`.</span><span class="sxs-lookup"><span data-stu-id="87070-280">If a field is enclosed in quotation marks, for example, `abc, "field2a,field2b", field3` and this property is `True`, then all text enclosed in quotation marks will be returned as is; this example would return `abc|field2a,field2b|field3`.</span></span> <span data-ttu-id="87070-281">Impostando questa proprietà su `False` renderebbe in questo esempio viene restituito `abc|"field2a|field2b"|field3`.</span><span class="sxs-lookup"><span data-stu-id="87070-281">Setting this property to `False` would make this example return `abc|"field2a|field2b"|field3`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87070-282">In questo esempio il `HasFieldsEnclosedInQuotes` proprietà `True` per `myReader`.</span><span class="sxs-lookup"><span data-stu-id="87070-282">This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LineNumber { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87070-283">Restituisce il numero di riga corrente oppure -1 se non sono disponibili ulteriori caratteri all'interno del flusso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-283">Returns the current line number, or returns -1 if no more characters are available in the stream.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87070-284">Numero di riga corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-284">The current line number.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-285">Si tratta di un membro avanzato. non è visibile in IntelliSense a meno che non si fa clic su di **tutti** scheda.</span><span class="sxs-lookup"><span data-stu-id="87070-285">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="87070-286">Righe vuote e commenti non vengono ignorati quando si determina il numero di riga.</span><span class="sxs-lookup"><span data-stu-id="87070-286">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87070-287">In questo esempio cerca il nome "Jones" nel file di testo e quali righe compare nel report.</span><span class="sxs-lookup"><span data-stu-id="87070-287">This example searches for the name "Jones" in the text file and reports what line(s) it occurs on.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekChars (numberOfChars As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PeekChars(int numberOfChars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars">
          <span data-ttu-id="87070-288">
            <see langword="Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-288">
              <see langword="Int32" />.</span>
          </span>
          <span data-ttu-id="87070-289">Numero di caratteri da leggere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-289">Number of characters to read.</span>
          </span>
          <span data-ttu-id="87070-290">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-290">Required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87070-291">Legge il numero di caratteri specificato senza spostare in avanti il cursore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-291">Reads the specified number of characters without advancing the cursor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="87070-292">Stringa che contiene il numero di caratteri letti specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-292">A string that contains the specified number of characters read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-293">Il `numberOfChars` valore deve essere minore del numero totale di caratteri nella riga.</span><span class="sxs-lookup"><span data-stu-id="87070-293">The `numberOfChars` value must be less than the total number of characters in the line.</span></span> <span data-ttu-id="87070-294">In caso contrario, la stringa restituita da `PeekChars` verrà troncata alla lunghezza della riga.</span><span class="sxs-lookup"><span data-stu-id="87070-294">If it is not, the string returned by `PeekChars` will be truncated to the length of the line.</span></span>  
  
 <span data-ttu-id="87070-295">Le righe vuote vengono ignorate.</span><span class="sxs-lookup"><span data-stu-id="87070-295">Blank lines are ignored.</span></span>  
  
 <span data-ttu-id="87070-296">Non vengono restituiti i caratteri di fine della riga.</span><span class="sxs-lookup"><span data-stu-id="87070-296">End-of-line characters are not returned.</span></span>  
  
 <span data-ttu-id="87070-297">Il `PeekChars` metodo non esegue alcuna analisi; un carattere di fine della riga all'interno di un campo delimitato viene interpretato come l'effettiva di fine della riga.</span><span class="sxs-lookup"><span data-stu-id="87070-297">The `PeekChars` method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="87070-298">Nella tabella seguente sono elencati esempi di attività che coinvolgono la `PeekChars` metodo.</span><span class="sxs-lookup"><span data-stu-id="87070-298">The following table lists examples of tasks involving the `PeekChars` method.</span></span>  
  
|<span data-ttu-id="87070-299">A</span><span class="sxs-lookup"><span data-stu-id="87070-299">To</span></span>|<span data-ttu-id="87070-300">Vedere</span><span class="sxs-lookup"><span data-stu-id="87070-300">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="87070-301">Determinare il formato di un campo prima di analizzarlo</span><span class="sxs-lookup"><span data-stu-id="87070-301">Determine the format of a field before parsing it</span></span>|[<span data-ttu-id="87070-302">Procedura: leggere da file di testo con più formati</span><span class="sxs-lookup"><span data-stu-id="87070-302">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="87070-303">Questo esempio viene utilizzato `PeekChars` per trovare la fine dei dati e arrestare l'analisi del file in quel punto.</span><span class="sxs-lookup"><span data-stu-id="87070-303">This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="87070-304">
            <paramref name="numberOfChars" /> è minore di 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-304">
              <paramref name="numberOfChars" /> is less than 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadFields () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ ReadFields();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="87070-305">Legge tutti i campi nella riga corrente, li restituisce come una matrice di stringhe e sposta il cursore alla riga successiva contenente dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-305">Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="87070-306">Matrice di stringhe che contiene i valori dei campi della riga corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-306">An array of strings that contains field values for the current line.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-307">Per consentire agli utenti di analizzare i file di testo in più formati, le `ReadFields` metodo esamina i valori di `TextFieldType`, `Delimiters`, e `FieldWidths`, se vengono specificati, ogni volta che viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="87070-307">In order to allow users to parse text files in multiple formats, the `ReadFields` method examines the values of `TextFieldType`, `Delimiters`, and `FieldWidths`, if they are specified, each time it is called.</span></span> <span data-ttu-id="87070-308">Gli utenti devono configurare correttamente il `TextFieldType` e `FieldWidths` o `Delimiters` proprietà, come appropriato.</span><span class="sxs-lookup"><span data-stu-id="87070-308">Users need to correctly configure the `TextFieldType` and `FieldWidths` or `Delimiters` properties, as appropriate.</span></span> <span data-ttu-id="87070-309">Se `TextFieldType` è impostato su `Delimited`, e `Delimiters` non è impostata, o se `TextFieldType` è impostato su `FixedWidth` e `FieldWidths`, viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="87070-309">If `TextFieldType` is set to `Delimited`, and `Delimiters` is not set, or if `TextFieldType` is set to `FixedWidth` and `FieldWidths`, an exception is thrown.</span></span>  
  
 <span data-ttu-id="87070-310">Se `ReadFields` rileva le righe vuote, esse verranno ignorate e viene restituita la successiva riga non vuota.</span><span class="sxs-lookup"><span data-stu-id="87070-310">If `ReadFields` encounters blank lines, they are skipped and the next non-blank line is returned.</span></span>  
  
 <span data-ttu-id="87070-311">Se il `ReadFields` (metodo) non è possibile analizzare la riga corrente, viene generata un'eccezione e non si sposta alla riga successiva.</span><span class="sxs-lookup"><span data-stu-id="87070-311">If the `ReadFields` method cannot parse the current line, it raises an exception and does not move to the next line.</span></span> <span data-ttu-id="87070-312">In questo modo l'applicazione tentare di analizzare nuovamente la riga.</span><span class="sxs-lookup"><span data-stu-id="87070-312">This enables your application to attempt to parse the line again.</span></span>  
  
 <span data-ttu-id="87070-313">Nella tabella seguente sono elencati esempi di attività che coinvolgono la `ReadFields` metodo.</span><span class="sxs-lookup"><span data-stu-id="87070-313">The following table lists examples of tasks involving the `ReadFields` method.</span></span>  
  
|<span data-ttu-id="87070-314">A</span><span class="sxs-lookup"><span data-stu-id="87070-314">To</span></span>|<span data-ttu-id="87070-315">Vedere</span><span class="sxs-lookup"><span data-stu-id="87070-315">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="87070-316">Leggere da un file delimitato da virgole</span><span class="sxs-lookup"><span data-stu-id="87070-316">Read from a delimited file</span></span>|[<span data-ttu-id="87070-317">Procedura: leggere da file di testo delimitati da virgola</span><span class="sxs-lookup"><span data-stu-id="87070-317">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="87070-318">Leggere da un file a larghezza fissa</span><span class="sxs-lookup"><span data-stu-id="87070-318">Read from a fixed-width file</span></span>|[<span data-ttu-id="87070-319">Procedura: leggere da file di testo a larghezza fissa</span><span class="sxs-lookup"><span data-stu-id="87070-319">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="87070-320">Questo esempio viene utilizzato il `ReadFields` metodo per leggere dal file delimitato da virgole `ParserText.txt`.</span><span class="sxs-lookup"><span data-stu-id="87070-320">This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`.</span></span> <span data-ttu-id="87070-321">L'esempio scrive i campi in `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="87070-321">The example writes the fields to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">
          <span data-ttu-id="87070-322">Non è possibile analizzare il campo utilizzando il formato specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-322">A field cannot be parsed by using the specified format.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="87070-323">Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-323">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="87070-324">Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-324">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span>
          </span>
        </permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="87070-325">Restituisce la riga corrente come stringa e sposta il cursore alla riga successiva.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-325">Returns the current line as a string and advances the cursor to the next line.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="87070-326">Riga corrente dal file o dal flusso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-326">The current line from the file or stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-327">Il `ReadLine` metodo non esegue alcuna analisi; un carattere di fine della riga all'interno di un campo delimitato viene interpretato come l'effettiva di fine della riga.</span><span class="sxs-lookup"><span data-stu-id="87070-327">The `ReadLine` method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="87070-328">`Nothing` viene restituito se viene raggiunta la fine del file.</span><span class="sxs-lookup"><span data-stu-id="87070-328">`Nothing` is returned if the end of the file is reached.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87070-329">In questo esempio viene letto il file `ParserText.txt` e viene scritto in `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="87070-329">This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 <span data-ttu-id="87070-330">Se `Testfile.txt` non esiste, viene creata la `WriteAllText` metodo.</span><span class="sxs-lookup"><span data-stu-id="87070-330">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 <span data-ttu-id="87070-331">In questo esempio scrive i campi come una singola stringa. Per visualizzare ogni riga su una riga nel file di destinazione, un `VbCrLf` carattere deve essere aggiunti alla fine di ogni riga.</span><span class="sxs-lookup"><span data-stu-id="87070-331">This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadToEnd();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="87070-332">Legge il resto del file di testo e lo restituisce come stringa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-332">Reads the remainder of the text file and returns it as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="87070-333">Testo rimanente dal file o dal flusso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-333">The remaining text from the file or stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-334">Si tratta di un membro avanzato. non è visibile in IntelliSense a meno che non si fa clic su di **tutti** scheda.</span><span class="sxs-lookup"><span data-stu-id="87070-334">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="87070-335">Se non vi sono altre per la lettura perché è stata raggiunta la fine del file, `Nothing` viene restituito.</span><span class="sxs-lookup"><span data-stu-id="87070-335">If there is nothing more to read because the end of the file has been reached, `Nothing` is returned.</span></span>  
  
 <span data-ttu-id="87070-336">Il `ReadToEnd` metodo ignora le righe vuote e commenti.</span><span class="sxs-lookup"><span data-stu-id="87070-336">The `ReadToEnd` method does not ignore blank lines and comments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87070-337">Questo esempio viene utilizzato il `ReadToEnd` metodo per leggere l'intero file `ParserText.txt` e scriverli nel file `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="87070-337">This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 <span data-ttu-id="87070-338">Se `Testfile.txt` non esiste, viene creata la `WriteAllText` metodo.</span><span class="sxs-lookup"><span data-stu-id="87070-338">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDelimiters (ParamArray delimiters As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDelimiters(... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters">
          <span data-ttu-id="87070-339">Matrice di tipo <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-339">Array of type <see langword="String" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87070-340">Imposta i delimitatori per il lettore sui valori specificati e imposta il tipo di campo su <see langword="Delimited" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-340">Sets the delimiters for the reader to the specified values, and sets the field type to <see langword="Delimited" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-341">Il contenuto esistente della `Delimiters` proprietà vengono cancellati quando questo metodo è impostato.</span><span class="sxs-lookup"><span data-stu-id="87070-341">The existing contents of the `Delimiters` property are cleared when this method is set.</span></span>  
  
 <span data-ttu-id="87070-342">Questo metodo consente di impostare i delimitatori senza creare una matrice.</span><span class="sxs-lookup"><span data-stu-id="87070-342">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="87070-343">La tabella seguente elenca un esempio di un'attività che coinvolgono la `SetDelimiters` metodo.</span><span class="sxs-lookup"><span data-stu-id="87070-343">The following table lists an example of a task involving the `SetDelimiters` method.</span></span>  
  
|<span data-ttu-id="87070-344">A</span><span class="sxs-lookup"><span data-stu-id="87070-344">To</span></span>|<span data-ttu-id="87070-345">Vedere</span><span class="sxs-lookup"><span data-stu-id="87070-345">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="87070-346">Analizzare un file di testo</span><span class="sxs-lookup"><span data-stu-id="87070-346">Parse a text file</span></span>|[<span data-ttu-id="87070-347">Analisi dei file di testo con l'oggetto TextFieldParser</span><span class="sxs-lookup"><span data-stu-id="87070-347">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="87070-348">In questo esempio viene aperto un parser di campo di testo e definisce come delimitatore di `vbTab`.</span><span class="sxs-lookup"><span data-stu-id="87070-348">This example opens a text field parser and defines the delimiter as `vbTab`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 <span data-ttu-id="87070-349">Sostituire il percorso `C:\logs\test.log` con il percorso e nome del file che si desidera analizzare.</span><span class="sxs-lookup"><span data-stu-id="87070-349">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="87070-350">Il delimitatore è di lunghezza zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-350">A delimiter is zero-length.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFieldWidths (ParamArray fieldWidths As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFieldWidths(... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths">
          <span data-ttu-id="87070-351">Matrice di valori <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-351">Array of <see langword="Integer" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87070-352">Imposta i delimitatori per il lettore sui valori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-352">Sets the delimiters for the reader to the specified values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-353">Il contenuto esistente della `Delimiters` proprietà vengono cancellati quando è impostata.</span><span class="sxs-lookup"><span data-stu-id="87070-353">The existing contents of the `Delimiters` property are cleared when this is set.</span></span>  
  
 <span data-ttu-id="87070-354">Questo metodo consente di impostare i delimitatori senza creare una matrice.</span><span class="sxs-lookup"><span data-stu-id="87070-354">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="87070-355">Nella tabella seguente sono elencati esempi di attività che coinvolgono la `SetFieldWidths` metodo.</span><span class="sxs-lookup"><span data-stu-id="87070-355">The following table lists example of tasks involving the `SetFieldWidths` method.</span></span>  
  
|<span data-ttu-id="87070-356">A</span><span class="sxs-lookup"><span data-stu-id="87070-356">To</span></span>|<span data-ttu-id="87070-357">Vedere</span><span class="sxs-lookup"><span data-stu-id="87070-357">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="87070-358">Analizzare un file di testo.</span><span class="sxs-lookup"><span data-stu-id="87070-358">Parse a text file.</span></span>|[<span data-ttu-id="87070-359">Analisi dei file di testo con l'oggetto TextFieldParser</span><span class="sxs-lookup"><span data-stu-id="87070-359">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="87070-360">In questo esempio viene aperto un parser di campo di testo e definisce la larghezza del campo come `5`.</span><span class="sxs-lookup"><span data-stu-id="87070-360">This example opens a text-field parser and defines the field width as `5`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 <span data-ttu-id="87070-361">Sostituire il percorso `C:\logs\test.log` con il percorso e nome del file che si desidera analizzare.</span><span class="sxs-lookup"><span data-stu-id="87070-361">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 <span data-ttu-id="87070-362">Nell'esempio seguente viene aperto un parser di campo di testo e larghezza del campo come `5`, `10`e la variabile.</span><span class="sxs-lookup"><span data-stu-id="87070-362">The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 <span data-ttu-id="87070-363">Sostituire il percorso `C:\logs\test.log` con il percorso e nome del file che si desidera analizzare.</span><span class="sxs-lookup"><span data-stu-id="87070-363">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFieldType As FieldType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::FileIO::FieldType TextFieldType { Microsoft::VisualBasic::FileIO::FieldType get(); void set(Microsoft::VisualBasic::FileIO::FieldType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87070-364">Indica se il file da analizzare è delimitato o a larghezza fissa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-364">Indicates whether the file to be parsed is delimited or fixed-width.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87070-365">Valore <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> che indica se il file da analizzare è delimitato o a larghezza fissa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-365">A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> value that indicates whether the file to be parsed is delimited or fixed-width.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-366">Il valore predefinito di questa proprietà è delimitato.</span><span class="sxs-lookup"><span data-stu-id="87070-366">The default value of this property is delimited.</span></span>  
  
 <span data-ttu-id="87070-367">Nella tabella seguente sono elencati esempi di attività che coinvolgono la `TextFieldType` proprietà.</span><span class="sxs-lookup"><span data-stu-id="87070-367">The following table lists examples of tasks involving the `TextFieldType` property.</span></span>  
  
|<span data-ttu-id="87070-368">A</span><span class="sxs-lookup"><span data-stu-id="87070-368">To</span></span>|<span data-ttu-id="87070-369">Vedere</span><span class="sxs-lookup"><span data-stu-id="87070-369">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="87070-370">Leggere da un file di testo delimitato</span><span class="sxs-lookup"><span data-stu-id="87070-370">Read from a delimited text file</span></span>|[<span data-ttu-id="87070-371">Procedura: leggere da file di testo delimitati da virgola</span><span class="sxs-lookup"><span data-stu-id="87070-371">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="87070-372">Leggere da un file di testo a larghezza fissa</span><span class="sxs-lookup"><span data-stu-id="87070-372">Read from a fixed-width text file</span></span>|[<span data-ttu-id="87070-373">Procedura: leggere da file di testo a larghezza fissa</span><span class="sxs-lookup"><span data-stu-id="87070-373">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="87070-374">Leggere da un file di testo con più formati</span><span class="sxs-lookup"><span data-stu-id="87070-374">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="87070-375">Procedura: leggere da file di testo con più formati</span><span class="sxs-lookup"><span data-stu-id="87070-375">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="87070-376">Questo esempio viene creato un `TextFieldParser`, `FileReader`e specifica che è delimitata.</span><span class="sxs-lookup"><span data-stu-id="87070-376">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 <span data-ttu-id="87070-377">Questo esempio viene creato un `TextFieldParser`, `FileReader`e viene specificato che è a larghezza fissa.</span><span class="sxs-lookup"><span data-stu-id="87070-377">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property TrimWhiteSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimWhiteSpace { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87070-378">Indica se gli spazi vuoti iniziale e finale devono essere tagliati dai valori dei campi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-378">Indicates whether leading and trailing white space should be trimmed from field values.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87070-379">
            <see langword="True" /> se gli spazi vuoti iniziale e finale devono essere tagliati dai valori dei campi. In caso contrario, <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="87070-379">
              <see langword="True" /> if leading and trailing white space should be trimmed from field values; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87070-380">Il valore predefinito di questa proprietà è `True`.</span><span class="sxs-lookup"><span data-stu-id="87070-380">The default value for this property is `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87070-381">Questo esempio viene creato un `TextFieldParser`, `FileReader`e imposta il `TrimWhiteSpace` proprietà `True`.</span><span class="sxs-lookup"><span data-stu-id="87070-381">This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>