<Type Name="WindowsFormsApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bcd610cd3ee405c4d61295d812032303aeaaf2ad" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37715615" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WindowsFormsApplicationBase : Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WindowsFormsApplicationBase extends Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Class WindowsFormsApplicationBase&#xA;Inherits ConsoleApplicationBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsFormsApplicationBase : Microsoft::VisualBasic::ApplicationServices::ConsoleApplicationBase" />
  <TypeSignature Language="F#" Value="type WindowsFormsApplicationBase = class&#xA;    inherit ConsoleApplicationBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce proprietà, metodi ed eventi correlati all'applicazione corrente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le proprietà esposte dal `My.Application` restituiti dati che è associati solo con l'applicazione o DLL corrente dell'oggetto. Nessuna informazione a livello di sistema può essere modificata con `My.Application`.  
  
 L'oggetto `My.Application` è costituito dalle classi seguenti:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> specifica i membri disponibili in tutti i progetti.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> fornisce membri che sono disponibili nelle applicazioni Windows Forms.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase> fornisce membri che sono disponibili in applicazioni console.  
  
   
  
## Examples  
 In questo esempio Usa un ciclo per scorrere i form aperti dell'applicazione, seleziona le forme che sono accessibili direttamente dal thread corrente e consente di visualizzare i propri titoli in una <xref:System.Windows.Forms.ListBox> controllo. Per informazioni su come accedere ai form aperti, vedere <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms%2A>.  
  
 [!code-vb[VbVbalrMyApplication#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 Questo esempio richiede che l'applicazione Windows Forms hanno un formato denominato `Form1` che contiene una casella di riepilogo denominata `ListBox1`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsApplicationBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase (Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(valuetype Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor(Microsoft.VisualBasic.ApplicationServices.AuthenticationMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsApplicationBase(Microsoft::VisualBasic::ApplicationServices::AuthenticationMode authenticationMode);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase : Microsoft.VisualBasic.ApplicationServices.AuthenticationMode -&gt; Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" Usage="new Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase authenticationMode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="authenticationMode" Type="Microsoft.VisualBasic.ApplicationServices.AuthenticationMode" />
      </Parameters>
      <Docs>
        <param name="authenticationMode">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode" />. Specifica la modalità di autenticazione dell'applicazione.</param>
        <summary>Consente di inizializzare una nuova istanza della classe <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />con la modalità di autenticazione specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il `authenticationMode` parametro è il <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows> valore dell'enumerazione, quindi questo costruttore tenta di impostare il thread corrente <xref:System.Threading.Thread.CurrentPrincipal%2A> proprietà per il <xref:System.Security.Principal.WindowsPrincipal> per l'utente corrente.  
  
 Se il `authenticationMode` parametro è il <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.ApplicationDefined> valore dell'enumerazione, il costruttore non modifica il thread corrente <xref:System.Threading.Thread.CurrentPrincipal%2A> proprietà invariato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationContext">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ApplicationContext ApplicationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ApplicationContext ApplicationContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationContext As ApplicationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ApplicationContext ^ ApplicationContext { System::Windows::Forms::ApplicationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationContext : System.Windows.Forms.ApplicationContext" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ApplicationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Windows.Forms.ApplicationContext" /> per il thread corrente di un'applicazione Windows Form.</summary>
        <value>Questa proprietà restituisce l'oggetto <see cref="T:System.Windows.Forms.ApplicationContext" /> per il thread corrente. Tale oggetto contiene le informazioni contestuali sul thread.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta di un membro avanzato. non viene visualizzato in IntelliSense, a meno che si sceglie la **tutti** scheda.  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|-|-|  
|Windows Forms Application|**Sì**|  
|Libreria di classi|No|  
|Applicazione console|No|  
|Libreria di controllo Windows Form|No|  
|Libreria di controlli Web|No|  
|Servizio Windows|No|  
|Sito Web|No|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ApplicationContext" />
      </Docs>
    </Member>
    <Member MemberName="DoEvents">
      <MemberSignature Language="C#" Value="public void DoEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DoEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents" />
      <MemberSignature Language="VB.NET" Value="Public Sub DoEvents ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DoEvents();" />
      <MemberSignature Language="F#" Value="member this.DoEvents : unit -&gt; unit" Usage="windowsFormsApplicationBase.DoEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Elabora tutti i messaggi di Windows attualmente presenti nella coda di messaggi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `My.Application.DoEvents` metodo consente di gestire altri eventi che potrebbero essere generati durante la compilazione viene eseguito l'applicazione. Il `My.Application.DoEvents` metodo ha lo stesso comportamento come il <xref:System.Windows.Forms.Application.DoEvents%2A> (metodo).  
  
 Quando si esegue un'applicazione Windows Forms, crea un nuovo modulo, che quindi attende gli eventi da gestire. Ogni volta che il modulo gestisce un evento, ad esempio un pulsante, elabora tutto il codice associato all'evento. Tutti gli altri eventi di attesa nella coda. Mentre il codice gestisce l'evento, l'applicazione non risponde. Ad esempio, la finestra non viene aggiornata se un'altra finestra viene trascinata nella parte superiore.  
  
 Se si chiama `My.Application.DoEvents` nel codice, l'applicazione può gestire gli altri eventi. Ad esempio, se il codice aggiunge dati a un <xref:System.Windows.Forms.ListBox> in un ciclo e dopo ogni passaggio del ciclo chiama `My.Application.DoEvents`, il form viene ridisegnato quando un'altra finestra viene trascinata su di esso. Se si rimuovono `My.Application.DoEvents` dal codice, il form non verrà ridisegnato fino al termine del gestore dell'evento click del pulsante di esecuzione.  
  
 In genere, si usa questo metodo in un ciclo per elaborare i messaggi.  
  
> [!NOTE]
>  Il `My.Application.DoEvents` metodo non elabora gli eventi in esattamente allo stesso modo del form. Usano il multithreading per rendere il modulo gestire direttamente gli eventi. Per altre informazioni, vedere [applicazioni multithreading](http://msdn.microsoft.com/library/a06a1a56-dd16-44e8-bc01-2c2255511bc6).  
  
> [!CAUTION]
>  Se un metodo che gestisce l'evento dell'interfaccia utente chiama il `My.Application.DoEvents` metodo, il metodo potrebbe essere immettere di nuovo prima che venga completato. Questa situazione può verificarsi perché il `My.Application.DoEvents` metodo elabora i messaggi di Windows e i messaggi di Windows possono generare eventi.  
  
 La tabella seguente elenca un esempio di un'attività che coinvolgono il `My.Application.DoEvents` (metodo).  
  
|A|Vedere|  
|-|-|  
|Consente a un form rispondere all'interfaccia utente mentre è occupato di input|[Procedura dettagliata: Gestione di eventi](~/docs/visual-basic/programming-guide/language-features/events/walkthrough-handling-events.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|-|-|  
|Windows Forms Application|**Sì**|  
|Libreria di classi|No|  
|Applicazione console|No|  
|Libreria di controllo Windows Form|No|  
|Libreria di controlli Web|No|  
|Servizio Windows|No|  
|Sito Web|No|  
  
   
  
## Examples  
 Questo esempio Usa la `My.Application.DoEvents` metodo per consentire l'interfaccia utente per `TextBox1` da aggiornare.  
  
 [!code-vb[VbVbalrMyApplication#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#6)]  
  
 Questo codice deve essere in un form con un `TextBox1` componente con un `Text` proprietà.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controlla se è possibile accedere ai file e alle cartelle. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controlla le autorizzazioni correlate alle interfacce utente e agli Appunti. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="EnableVisualStyles">
      <MemberSignature Language="C#" Value="protected bool EnableVisualStyles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableVisualStyles" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Property EnableVisualStyles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool EnableVisualStyles { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableVisualStyles : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina se l'applicazione utilizzerà gli stili di Windows XP per le finestre, i controlli e così via.</summary>
        <value>Valore <see cref="T:System.Boolean" /> che indica se l'applicazione utilizzerà gli stili di Windows XP per le finestre, i controlli e così via.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> metodo utilizza questa proprietà per determinare se chiamare <xref:System.Windows.Forms.Application.EnableVisualStyles%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="HideSplashScreen">
      <MemberSignature Language="C#" Value="protected void HideSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void HideSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Sub HideSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void HideSplashScreen();" />
      <MemberSignature Language="F#" Value="member this.HideSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.HideSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Nasconde la schermata iniziale dell'applicazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> classe consente di creare la schermata iniziale in un thread separato. Questo metodo marshalling della chiamata al thread corretto.  
  
 Questo metodo viene chiamato quando il form principale viene eseguito il caricamento.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      </Docs>
    </Member>
    <Member MemberName="IsSingleInstance">
      <MemberSignature Language="C#" Value="protected bool IsSingleInstance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleInstance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Property IsSingleInstance As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsSingleInstance { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsSingleInstance : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina se l'applicazione è a singola istanza.</summary>
        <value>Valore <see cref="T:System.Boolean" /> che indica se l'applicazione è a singola istanza.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run%2A> metodo utilizza questa proprietà per determinare se l'applicazione è un'applicazione a istanza singola.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="MainForm">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.Form MainForm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form MainForm" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />
      <MemberSignature Language="VB.NET" Value="Protected Property MainForm As Form" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Forms::Form ^ MainForm { System::Windows::Forms::Form ^ get(); void set(System::Windows::Forms::Form ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MainForm : System.Windows.Forms.Form with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il form principale per questa applicazione.</summary>
        <value>Ottiene o imposta il form principale per questa applicazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la `MainForm` proprietà da ottenere o impostare il <xref:System.Windows.Forms.Form> oggetto utilizzati dal modello di avvio/arresto dell'applicazione Visual Basic come form principale dell'applicazione.  
  
 Questa proprietà supporta il modello di avvio/arresto dell'applicazione Visual Basic. Per altre informazioni, vedere [Panoramica del modello di applicazione Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Le modifiche apportate a questa proprietà non vengono mantenute durante la chiusura dell'applicazione. Per modificare in modo permanente il form principale, è necessario modificare l'impostazione di **Progettazione progetti**.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="MinimumSplashScreenDisplayTime">
      <MemberSignature Language="C#" Value="public int MinimumSplashScreenDisplayTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumSplashScreenDisplayTime" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
      <MemberSignature Language="VB.NET" Value="Public Property MinimumSplashScreenDisplayTime As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumSplashScreenDisplayTime { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MinimumSplashScreenDisplayTime : int with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina la durata minima di tempo, in millisecondi, di visualizzazione della schermata iniziale.</summary>
        <value>
          <see langword="Integer" />. Durata minima di tempo, in millisecondi, di visualizzazione della schermata iniziale.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `My.Application.MinimumSplashScreenDisplayTime` proprietà consente di specificare la lunghezza minima di tempo da visualizzare la schermata iniziale dell'applicazione. Se il form principale termina l'inizializzazione in meno tempo rispetto a quanto specificato da questa proprietà, la schermata iniziale resta finché la quantità di tempo, a quel punto viene visualizzato il form principale richiesta. Se l'applicazione richiede più tempo per iniziare, la schermata viene chiusa dopo che il form principale diventa attivo.  
  
 Quando si aggiunge una schermata all'applicazione usando la finestra di progettazione del progetto, imposta il `My.Application.MinimumSplashScreenDisplayTime` proprietà a 2000, offrendo un tempo di visualizzazione minimo di due secondi.  
  
 Questa proprietà supporta il modello di applicazione Visual Basic. Per altre informazioni, vedere [Panoramica del modello di applicazione Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 È consigliabile impostare il `My.Application.MinimumSplashScreenDisplayTime` proprietà in un metodo che esegue l'override di <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> (metodo). Il codice che esegue l'override dei metodi di <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> classe deve essere specificata nel file ApplicationEvents. vb, che è nascosto per impostazione predefinita.  
  
| |  
|-|  
|Per accedere alla finestra Editor di codice per eseguire l'override di membri|  
|1.  Con un progetto selezionato in **Esplora soluzioni**, fare clic su **delle proprietà** sul **progetto** menu.<br />2.  Fare clic sulla scheda **Applicazione** .<br />3.  Fare clic sul pulsante **Visualizza eventi applicazione** per aprire l'editor di codice.<br /><br />Per altre informazioni, vedere [Pagina Applicazione, Creazione progetti (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|-|-|  
|Windows Forms Application|**Sì**|  
|Libreria di classi|No|  
|Applicazione console|No|  
|Libreria di controllo Windows Form|No|  
|Libreria di controlli Web|No|  
|Servizio Windows|No|  
|Sito Web|No|  
  
   
  
## Examples  
 In questo esempio viene illustrato come impostare il `My.Application.MinimumSplashScreenDisplayTime` proprietà eseguendo l'override di <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> proprietà.  
  
 [!code-vb[VbVbalrMyApplication#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#51)]  
  
 Questo esempio richiede che il progetto dispone di una schermata iniziale.  
  
 È necessario immettere il codice nella finestra dell'Editor di codice per gli eventi dell'applicazione. Per altre informazioni, vedere [Pagina Applicazione, Creazione progetti (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
      </Docs>
    </Member>
    <Member MemberName="NetworkAvailabilityChanged">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.NetworkAvailabilityChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NetworkAvailabilityChanged As NetworkAvailableEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::Devices::NetworkAvailableEventHandler ^ NetworkAvailabilityChanged;" />
      <MemberSignature Language="F#" Value="member this.NetworkAvailabilityChanged : Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler " Usage="member this.NetworkAvailabilityChanged : Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando cambia la disponibilità della rete.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'applicazione genera il `NetworkAvailabilityChanged` evento ogni volta che la disponibilità della rete cambia. È possibile usare la <xref:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs.IsNetworkAvailable%2A> proprietà del `e` parametro per ottenere il nuovo stato della connessione di rete. Per ottenere lo stato corrente della connessione di rete, usare il <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> proprietà.  
  
 Questo evento viene generato sul thread principale dell'applicazione con gli altri eventi di interfaccia utente. In questo modo il gestore eventi accedere direttamente dell'interfaccia utente dell'applicazione. Tuttavia, se l'applicazione è occupato a gestire un altro evento di interfaccia utente quando viene generato questo evento, questo evento non può essere elaborato fino a quando l'altro gestore eventi viene completato o chiama il <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> (metodo).  
  
 Il <xref:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged> evento fornisce la stessa funzionalità di questo evento, ma è disponibile per tutti i tipi di applicazione.  
  
 Il codice per il `NetworkAvailabilityChanged` gestore dell'evento viene archiviato nel file ApplicationEvents. vb, che è nascosta per impostazione predefinita.  
  
| |  
|-|  
|Per accedere alla finestra Editor di codice per gli eventi dell'applicazione|  
|1.  Dispone di un progetto selezionato in **Esplora soluzioni.** Fare clic su **delle proprietà** nel **progetto** menu.<br />2.  Fare clic sulla scheda **Applicazione** .<br />3.  Fare clic sul pulsante **Visualizza eventi applicazione** per aprire l'editor di codice.<br /><br />Per altre informazioni, vedere [Pagina Applicazione, Creazione progetti (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
> [!NOTE]
>  Anche se l'hub è disconnesso da una rete più estesa, molti hub di rete fornirà una connessione di rete. Di conseguenza, per le connessioni cablate, questo evento indica modifiche nella connessione tra il computer e un hub.  
  
> [!NOTE]
>  Il `NetworkAvailabilityChanged` evento non viene generato dalle applicazioni quando vengono eseguiti in Windows 95 e Windows 98, o quando vengono eseguiti da un utente non amministratore in Windows 2000. Se l'applicazione può essere eseguita su tali sistemi operativi, usare il <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> proprietà per verificare la disponibilità di rete.  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|-|-|  
|Windows Forms Application|**Sì**|  
|Libreria di classi|No|  
|Applicazione console|No|  
|Libreria di controllo Windows Form|No|  
|Libreria di controlli Web|No|  
|Servizio Windows|No|  
|Sito Web|No|  
  
   
  
## Examples  
 Questo esempio chiama il `SetConnectionStatus` metodo dell'oggetto default `Form1` classe quando viene modificata la disponibilità di rete.  
  
 È necessario immettere il codice nella finestra dell'Editor di codice per gli eventi dell'applicazione. Per accedere a questa finestra, seguire le istruzioni dalla sezione Osservazioni di questo argomento.  
  
 Il progetto dovrebbe avere un modulo denominato `Form1`. Deve essere un metodo denominato `SetConnectionStatus` che accetta un `Boolean` parametro.  
  
 [!code-vb[VbVbalrMyApplication#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler" />
        <altmember cref="E:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateMainForm">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateMainForm ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateMainForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateMainForm ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateMainForm();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateMainForm : unit -&gt; unit&#xA;override this.OnCreateMainForm : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnCreateMainForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se sottoposto a override in una classe derivata, consente a una finestra di progettazione di creare codice che configura la schermata iniziale e il form principale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo non esegue alcuna operazione. Tuttavia, quando si seleziona un modulo principale per l'applicazione in Visual Basic **creazione progetti**, la finestra di progettazione esegue l'override di questo metodo con un metodo che imposta il <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A> proprietà in una nuova istanza del form principale.  
  
 Questo metodo viene chiamato dal <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun%2A> (metodo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateSplashScreen">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateSplashScreen();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateSplashScreen : unit -&gt; unit&#xA;override this.OnCreateSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnCreateSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se sottoposto a override in una classe derivata, consente a una finestra di progettazione di creare codice che inizializza la schermata iniziale e il form principale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo non esegue alcuna operazione. Se si seleziona una schermata iniziale per l'applicazione in Visual Basic **creazione progetti**, la finestra di progettazione esegue l'override di <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> metodo con un metodo che imposta il <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen%2A> proprietà in una nuova istanza del modulo a schermata iniziale .  
  
 Questo metodo viene chiamato dal <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> (metodo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInitialize">
      <MemberSignature Language="C#" Value="protected virtual bool OnInitialize (System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; commandLineArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnInitialize(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; commandLineArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnInitialize (commandLineArgs As ReadOnlyCollection(Of String)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnInitialize(System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ commandLineArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialize : System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; -&gt; bool&#xA;override this.OnInitialize : System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; -&gt; bool" Usage="windowsFormsApplicationBase.OnInitialize commandLineArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.STAThread</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLineArgs" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="commandLineArgs">Classe <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> di <see langword="String" /> contenente gli argomenti della riga di comando come stringhe dell'applicazione corrente.</param>
        <summary>Imposta gli stili di visualizzazione e di visualizzazione del testo, l'oggetto Principal corrente per il thread principale dell'applicazione (se l'applicazione utilizza l'autenticazione di Windows) e inizializza la schermata iniziale, se definita.</summary>
        <returns>Struttura <see cref="T:System.Boolean" /> che indica se deve continuare l'avvio dell'applicazione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo imposta gli stili di visualizzazione, gli stili di visualizzazione di testo e oggetto principal corrente per il thread principale dell'applicazione (se l'applicazione usa l'autenticazione di Windows) e chiama `ShowSplashScreen` se non si specifica `/nosplash` né `-nosplash` viene utilizzato come un argomento della riga di comando.  
  
 Questo metodo chiama i metodi seguenti:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A>.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A>.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      </Docs>
    </Member>
    <Member MemberName="OnRun">
      <MemberSignature Language="C#" Value="protected virtual void OnRun ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnRun() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRun ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRun();" />
      <MemberSignature Language="F#" Value="abstract member OnRun : unit -&gt; unit&#xA;override this.OnRun : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnRun " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fornisce il punto iniziale utilizzato dall'applicazione principale quando è pronta ad avviare l'esecuzione, al termine dell'inizializzazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, prima che venga attivata il ciclo di messaggi Windows Form, questo metodo chiama il `OnCreateMainForm` (per creare form principale dell'applicazione) e `HideSplashScreen` (per chiudere la schermata iniziale) metodi:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A>. Fornisce un modo per una finestra di progettazione generare il codice che inizializza il modulo principale.  
  
     Per impostazione predefinita, questo metodo non esegue alcuna operazione. Tuttavia, quando si seleziona un modulo principale per l'applicazione in Visual Basic **creazione progetti**, esegue l'override della finestra di progettazione il <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A> metodo con un metodo che imposta il <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A> proprietà in una nuova istanza del form principale.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen%2A>. Se l'applicazione dispone di una schermata iniziale ed è aperto, questo metodo chiude la schermata iniziale.  
  
     Per impostazione predefinita, questo metodo chiude la schermata iniziale.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnShutdown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShutdown();" />
      <MemberSignature Language="F#" Value="abstract member OnShutdown : unit -&gt; unit&#xA;override this.OnShutdown : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando sottoposto a override in una classe derivata, consente l'esecuzione di codice alla chiusura dell'applicazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non viene eseguito se si verifica un'eccezione non gestita nell'applicazione principale.  
  
 Per impostazione predefinita, questo metodo genera il <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown> evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStartup">
      <MemberSignature Language="C#" Value="protected virtual bool OnStartup (Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnStartup(class Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartup(Microsoft.VisualBasic.ApplicationServices.StartupEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStartup (eventArgs As StartupEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStartup(Microsoft::VisualBasic::ApplicationServices::StartupEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnStartup : Microsoft.VisualBasic.ApplicationServices.StartupEventArgs -&gt; bool&#xA;override this.OnStartup : Microsoft.VisualBasic.ApplicationServices.StartupEventArgs -&gt; bool" Usage="windowsFormsApplicationBase.OnStartup eventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />. Contiene gli argomenti della riga di comando dell'applicazione e indica se l'avvio dell'applicazione deve essere annullato.</param>
        <summary>Quando sottoposto a override in una classe derivata, consente l'esecuzione di codice all'avvio dell'applicazione.</summary>
        <returns>Struttura <see cref="T:System.Boolean" /> che indica se l'applicazione deve continuare ad essere avviata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo genera il <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup> evento. Il gestore eventi è possibile impostare il <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> proprietà dell'argomento dell'evento. Se <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> viene `True`, questo metodo restituisce `False` per annullare l'avvio dell'applicazione. In caso contrario, questo metodo restituisce `True`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnStartupNextInstance">
      <MemberSignature Language="C#" Value="protected virtual void OnStartupNextInstance (Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnStartupNextInstance(class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartupNextInstance(Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStartupNextInstance (eventArgs As StartupNextInstanceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStartupNextInstance(Microsoft::VisualBasic::ApplicationServices::StartupNextInstanceEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnStartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs -&gt; unit&#xA;override this.OnStartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs -&gt; unit" Usage="windowsFormsApplicationBase.OnStartupNextInstance eventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />. Contiene gli argomenti della riga di comando dell'istanza successiva dell'applicazione e indica se la prima istanza dell'applicazione deve essere portata in primo piano all'uscita dal gestore eccezioni.</param>
        <summary>Quando sottoposto a override in una classe derivata, consente l'esecuzione di codice all'avvio di un'istanza successiva di un'applicazione a istanza singola.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo genera il <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> evento. Il gestore eventi è possibile impostare il <xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A> proprietà dell'argomento dell'evento. Se <xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A> è `True`, il metodo attiva il form principale. In caso contrario, il modulo principale viene lasciato nello stato corrente.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
      </Docs>
    </Member>
    <Member MemberName="OnUnhandledException">
      <MemberSignature Language="C#" Value="protected virtual bool OnUnhandledException (Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnUnhandledException(class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnUnhandledException(Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnUnhandledException (e As UnhandledExceptionEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnUnhandledException(Microsoft::VisualBasic::ApplicationServices::UnhandledExceptionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs -&gt; bool&#xA;override this.OnUnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs -&gt; bool" Usage="windowsFormsApplicationBase.OnUnhandledException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />.</param>
        <summary>Quando sottoposto a override in una classe derivata, consente l'esecuzione di codice se si verifica un'eccezione non gestita nell'applicazione.</summary>
        <returns>Oggetto <see cref="T:System.Boolean" /> che indica se è stato generato l'evento <see cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo genera le <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException> evento fino a quando non è collegato un debugger e l'utente gestisce la `UnhandledException` evento. Il gestore eventi è possibile impostare il <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> proprietà. Se <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> è `False`, o se non viene gestito l'evento, l'applicazione viene chiusa al momento della restituzione dal gestore di eccezioni. Controllo dell'applicazione in caso contrario, viene restituito al ciclo di messaggi Windows Form.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
      </Docs>
    </Member>
    <Member MemberName="OpenForms">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FormCollection OpenForms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FormCollection OpenForms" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OpenForms As FormCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FormCollection ^ OpenForms { System::Windows::Forms::FormCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OpenForms : System.Windows.Forms.FormCollection" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FormCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un insieme di tutti i form aperti dell'applicazione.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.FormCollection" /> contenente tutti i form aperti dell'applicazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `My.Application.OpenForms` proprietà ottiene una raccolta di tutti i form aperti dell'applicazione. Il comportamento è identico al <xref:System.Windows.Forms.Application.OpenForms%2A?displayProperty=nameWithType> proprietà.  
  
> [!NOTE]
>  Il `My.Application.OpenForms` proprietà restituisce tutti i form aperti, indipendentemente da quali thread di apertura. È consigliabile controllare la <xref:System.Windows.Forms.Control.InvokeRequired%2A> proprietà di ciascun form prima dell'accesso in caso contrario, potrebbe generare un <xref:System.InvalidOperationException> eccezione.  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|-|-|  
|Windows Forms Application|**Sì**|  
|Libreria di classi|No|  
|Applicazione console|No|  
|Libreria di controllo Windows Form|No|  
|Libreria di controlli Web|No|  
|Servizio Windows|No|  
|Sito Web|No|  
  
   
  
## Examples  
 In questo esempio esegue il ciclo attraverso i form aperti dell'applicazione, Seleziona quelli accessibili direttamente dal thread corrente e visualizza i propri titoli in una <xref:System.Windows.Forms.ListBox> controllo. Questo esempio richiede che l'applicazione Windows Forms hanno un formato denominato `Form1` che contiene una casella di riepilogo denominata `ListBox1`.  
  
 [!code-vb[VbVbalrMyApplication#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 In questo esempio vengono esaminati i form aperti dell'applicazione e consente di visualizzare i propri titoli in una <xref:System.Windows.Forms.ListBox> controllo.  
  
 [!code-vb[VbVbalrMyApplication#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Controlla le autorizzazioni correlate alle interfacce utente e gli Appunti. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="T:System.Windows.Forms.FormCollection" />
        <altmember cref="P:System.Windows.Forms.Application.OpenForms" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public void Run (string[] commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Run(string[] commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Run (commandLine As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Run(cli::array &lt;System::String ^&gt; ^ commandLine);" />
      <MemberSignature Language="F#" Value="member this.Run : string[] -&gt; unit" Usage="windowsFormsApplicationBase.Run commandLine" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLine" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="commandLine">Matrice di tipo <see langword="String" />. Riga di comando da <see langword="Sub Main" />.</param>
        <summary>Imposta e avvia il modello di applicazione di Visual Basic.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `My.Application.Run` metodo fornisce supporto per il modello di applicazione Visual Basic. Questo metodo deve essere chiamato solo da dell'applicazione `Sub Main`. Per impostazione predefinita, il `Sub Main` di un form di Windows dell'applicazione chiama questo metodo. Per altre informazioni, vedere [Panoramica del modello di applicazione Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|-|-|  
|Windows Forms Application|**Sì**|  
|Libreria di classi|No|  
|Applicazione console|No|  
|Libreria di controllo Windows Form|No|  
|Libreria di controlli Web|No|  
|Servizio Windows|No|  
|Sito Web|No|  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Controlla la possibilità di accedere a tutte le variabili di ambiente. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controlla se è possibile accedere ai file e alle cartelle. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Controlla se è possibile accedere alle variabili del Registro di sistema. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controlla le autorizzazioni correlate alle interfacce utente e agli Appunti. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Controlla i diritti di accesso alle risorse Internet HTTP. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.SocketPermission">Controlla i diritti per creare o accettare connessioni su un indirizzo di trasporto. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">Controlla l'accesso a un componente del contatore delle prestazioni di Windows NT. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="SaveMySettingsOnExit">
      <MemberSignature Language="C#" Value="public bool SaveMySettingsOnExit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveMySettingsOnExit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SaveMySettingsOnExit" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveMySettingsOnExit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SaveMySettingsOnExit { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SaveMySettingsOnExit : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SaveMySettingsOnExit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina se l'applicazione deve salvare le impostazioni dell'utente all'uscita.</summary>
        <value>
          <see langword="Boolean" />. <see langword="True" /> indica che l'applicazione deve salvare le impostazioni dell'utente all'uscita. In caso contrario, le impostazioni non vengono salvate in modo implicito.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `SaveMySettingsOnExit` proprietà consente all'utente di modificare la modalità di salvataggio delle impostazioni, in fase di esecuzione dell'applicazione. È possibile salvare le modifiche alle impostazioni in modo esplicito tramite il <xref:System.Configuration.ApplicationSettingsBase.Save%2A> metodo di `My.Settings` oggetto. Per altre informazioni sulla modifica e salvataggio delle impostazioni, vedere [le proprietà dell'applicazione](http://msdn.microsoft.com/library/0ad4926f-636e-41f8-a5b1-faf9d9b0a254).  
  
 Le modifiche apportate a questa proprietà non vengono mantenute durante la chiusura dell'applicazione. Per modificare la `SaveMySettingsOnExit` proprietà in modo permanente, è necessario modificare l'impostazione nel **creazione progetti**:  
  
| |  
|-|  
|Per modificare l'impostazione in Creazione progetti|  
|1.  Selezionare un progetto in **Esplora soluzioni**. Fare clic su **delle proprietà** nel **progetto** menu.<br />2.  Fare clic sulla scheda **Applicazione** .<br />3.  Selezionare **Salva My. Settings alla chiusura**.|  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|-|-|  
|Windows Forms Application|**Sì**|  
|Libreria di classi|No|  
|Applicazione console|No|  
|Libreria di controllo Windows Form|No|  
|Libreria di controlli Web|No|  
|Servizio Windows|No|  
|Sito Web|No|  
  
   
  
## Examples  
 In questo esempio è costituito da due parti.  
  
-   Il `InitializeSaveMySettingsOnExit` subroutine, che inizializza lo stato di selezione una <xref:System.Windows.Forms.CheckBox> il valore corrente del controllo il `SaveMySettingsOnExit` proprietà.  
  
-   Il `SaveMySettingsOnExit_CheckedChanged` subroutine, che gestisce le modifiche a un <xref:System.Windows.Forms.CheckBox> controllo per aggiornare il `My.Application.SaveMySettingsOnExit` proprietà.  
  
 [!code-vb[VbVbalrMyApplication#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#12)]  
  
 Per questo esempio funzioni, l'applicazione deve avere una <xref:System.Windows.Forms.CheckBox> controllo denominato `SaveMySettingsOnExit`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="ShowSplashScreen">
      <MemberSignature Language="C#" Value="protected void ShowSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void ShowSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ShowSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ShowSplashScreen();" />
      <MemberSignature Language="F#" Value="member this.ShowSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.ShowSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina se è stata definita una schermata iniziale dell'applicazione ed eventualmente la visualizza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo chiama `OnCreateSplashScreen` in modo thread-safe.  
  
 Il <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A> metodo contiene il codice che consente di visualizzare la schermata iniziale di schermata per almeno il numero di millisecondi specificato da di <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A> proprietà. Per usare questa funzionalità, è necessario impostare il `My.Application.MinimumSplashScreenDisplayTime` proprietà in un metodo che esegue l'override di <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A> o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> metodo, o aggiungere la schermata all'applicazione usando la **creazione progetti**. Per ulteriori informazioni, vedere <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A>.  
  
 Questo metodo viene chiamato dal <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Event Shutdown As ShutdownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::ShutdownEventHandler ^ Shutdown;" />
      <MemberSignature Language="F#" Value="member this.Shutdown : Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler " Usage="member this.Shutdown : Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla chiusura dell'applicazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'applicazione genera il `Shutdown` evento prima della chiusura. In questo modo è possibile controllare come la chiusura dell'applicazione le relative risorse. Questo evento fa parte del modello di applicazione Visual Basic. Per altre informazioni, vedere [Panoramica del modello di applicazione Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Il codice per il `Shutdown` gestore dell'evento viene archiviato nel file ApplicationEvents. vb, che è nascosta per impostazione predefinita.  
  
| |  
|-|  
|Per accedere alla finestra Editor di codice per gli eventi dell'applicazione|  
|1.  Con un progetto selezionato in **Esplora soluzioni**, fare clic su **delle proprietà** sul **progetto** menu.<br />2.  Fare clic sulla scheda **Applicazione** .<br />3.  Fare clic sul pulsante **Visualizza eventi applicazione** per aprire l'editor di codice.<br /><br />Per altre informazioni, vedere [Pagina Applicazione, Creazione progetti (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|-|-|  
|Windows Forms Application|**Sì**|  
|Libreria di classi|No|  
|Applicazione console|No|  
|Libreria di controllo Windows Form|No|  
|Libreria di controlli Web|No|  
|Servizio Windows|No|  
|Sito Web|No|  
  
   
  
## Examples  
 In questo esempio Registra i messaggi quando l'applicazione viene arrestata.  
  
 [!code-vb[VbVbalrMyApplication#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#13)]  
  
 È necessario immettere il codice nella finestra dell'Editor di codice per gli eventi dell'applicazione. Per accedere a questa finestra, seguire le istruzioni dalla sezione Osservazioni di questo argomento. Per altre informazioni, vedere [procedura: Log i messaggi quando l'applicazione avvia o arresta verso il basso](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-messages-when-the-application-starts-or-shuts-down.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStyle">
      <MemberSignature Language="C#" Value="protected internal Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShutdownStyle" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property ShutdownStyle As ShutdownMode" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property Microsoft::VisualBasic::ApplicationServices::ShutdownMode ShutdownStyle { Microsoft::VisualBasic::ApplicationServices::ShutdownMode get(); void set(Microsoft::VisualBasic::ApplicationServices::ShutdownMode value); };" />
      <MemberSignature Language="F#" Value="member this.ShutdownStyle : Microsoft.VisualBasic.ApplicationServices.ShutdownMode with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShutdownStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina il comportamento alla chiusura del form principale dell'applicazione.</summary>
        <value>Valore dell'enumerazione <see cref="T:Microsoft.VisualBasic.ApplicationServices.ShutdownMode" />, che indica il comportamento che deve avere l'applicazione alla chiusura del form principale.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Forms.ApplicationContext.OnMainFormClosed%2A> metodo controlla il valore di questa proprietà per determinare se l'applicazione viene interrotta quando viene chiuso il modulo principale o se un altro open form deve essere promosso come nuovo form principale.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ShutdownMode" />
      </Docs>
    </Member>
    <Member MemberName="SplashScreen">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form SplashScreen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form SplashScreen" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
      <MemberSignature Language="VB.NET" Value="Public Property SplashScreen As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Form ^ SplashScreen { System::Windows::Forms::Form ^ get(); void set(System::Windows::Forms::Form ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SplashScreen : System.Windows.Forms.Form with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la schermata iniziale per questa applicazione.</summary>
        <value>Oggetto <see cref="T:System.Windows.Forms.Form" /> utilizzato dall'applicazione come schermata iniziale.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `My.Application.SplashScreen` proprietà consente di ottenere o impostare il <xref:System.Windows.Forms.Form> object che l'applicazione usa come schermata iniziale, il primo form grafico visualizzato mentre è in corso l'avvio di un'applicazione.  
  
 Questa proprietà supporta il modello di applicazione Visual Basic. Per altre informazioni, vedere [Panoramica del modello di applicazione Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Le modifiche apportate a questa proprietà non vengono mantenute durante la chiusura dell'applicazione. Per modificare la schermata iniziale in modo permanente, è necessario modificare l'impostazione di **Progettazione progetti**.  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|-|-|  
|Windows Forms Application|**Sì**|  
|Libreria di classi|No|  
|Applicazione console|No|  
|Libreria di controllo Windows Form|No|  
|Libreria di controlli Web|No|  
|Servizio Windows|No|  
|Sito Web|No|  
  
   
  
## Examples  
 Questo esempio Usa la `My.Application.SplashScreen` proprietà e il `My.Application.Startup` evento da aggiornare la schermata iniziale con le informazioni sullo stato all'avvio dell'applicazione.  
  
 [!code-vb[VbVbalrMyApplication#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 Questo esempio richiede che il progetto dispone di una schermata denominata `SplashScreen1`. La schermata deve avere una proprietà denominata `Status` che aggiorna l'interfaccia utente.  
  
 È necessario immettere il codice nella finestra dell'Editor di codice per gli eventi dell'applicazione. Per altre informazioni, vedere [Pagina Applicazione, Creazione progetti (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">A questa proprietà e alla proprietà <see cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" /> è assegnato lo stesso valore.</exception>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
      <MemberSignature Language="VB.NET" Value="Public Event Startup As StartupEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::StartupEventHandler ^ Startup;" />
      <MemberSignature Language="F#" Value="member this.Startup : Microsoft.VisualBasic.ApplicationServices.StartupEventHandler " Usage="member this.Startup : Microsoft.VisualBasic.ApplicationServices.StartupEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica all'avvio dell'applicazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una normale applicazione (non-istanza singola) genera la `Startup` evento ogni volta che viene avviato. Genera un'applicazione a istanza singola di `Startup` evento quando viene avviato solo se l'applicazione non è attivo; in caso contrario, genera il `StartupNextInstance` evento. Per ulteriori informazioni, vedere <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance>.  
  
 Questo evento fa parte del modello di applicazione Visual Basic. Per altre informazioni, vedere [Panoramica del modello di applicazione Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 È possibile usare la <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> proprietà del `e` parametro per controllare il caricamento del form di avvio di un'applicazione. Quando la <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> è impostata su `True`, non viene avviato il form di avvio. In tal caso, il codice deve chiamare un percorso di codice di avvio alternativo.  
  
 È possibile usare la <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A> proprietà del `e` parametro o <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A> proprietà per accedere agli argomenti della riga di comando dell'applicazione.  
  
 Il codice per il `Startup` gestore dell'evento viene archiviato nel file ApplicationEvents. vb, che è nascosta per impostazione predefinita.  
  
| |  
|-|  
|Per accedere alla finestra Editor di codice per gli eventi dell'applicazione|  
|1.  Con un progetto selezionato in **Esplora soluzioni**, fare clic su **delle proprietà** sul **progetto** menu.<br />2.  Fare clic sulla scheda **Applicazione** .<br />3.  Fare clic sul pulsante **Visualizza eventi applicazione** per aprire l'editor di codice.<br /><br /> Per altre informazioni, vedere [Pagina Applicazione, Creazione progetti (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|-|-|  
|Windows Forms Application|**Sì**|  
|Libreria di classi|No|  
|Applicazione console|No|  
|Libreria di controllo Windows Form|No|  
|Libreria di controlli Web|No|  
|Servizio Windows|No|  
|Sito Web|No|  
  
   
  
## Examples  
 Questo esempio Usa la `My.Application.SplashScreen` proprietà e il `My.Application.Startup` evento da aggiornare la schermata iniziale con le informazioni sullo stato all'avvio dell'applicazione.  
  
 [!code-vb[VbVbalrMyApplication#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 Questo esempio richiede che il progetto dispone di una schermata denominata `SplashScreen1`. La schermata iniziale necessita di una proprietà denominata `Status` che aggiorna l'interfaccia utente.  
  
 È necessario immettere il codice nella finestra dell'Editor di codice per gli eventi dell'applicazione. Per accedere a questa finestra, seguire le istruzioni dalla sezione Osservazioni di questo argomento. Per altre informazioni, vedere [Pagina Applicazione, Creazione progetti (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Controlla la possibilità di aggiungere un gestore eventi per questo evento. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</permission>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
      </Docs>
    </Member>
    <Member MemberName="StartupNextInstance">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
      <MemberSignature Language="VB.NET" Value="Public Event StartupNextInstance As StartupNextInstanceEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::StartupNextInstanceEventHandler ^ StartupNextInstance;" />
      <MemberSignature Language="F#" Value="member this.StartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler " Usage="member this.StartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica durante il tentativo di avvio di un'applicazione a istanza singola quando l'applicazione è già attiva.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Genera un'applicazione a istanza singola di <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> evento quando si tenta di riavviare l'applicazione quando è già attiva. Quando un'applicazione a istanza singola viene avviato per la prima volta, genera il <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup> evento. Per ulteriori informazioni, vedere <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup>.  
  
 Questo evento fa parte del modello di applicazione Visual Basic. Per altre informazioni, vedere [Panoramica del modello di applicazione Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Questo evento viene generato sul thread principale dell'applicazione con gli altri eventi di interfaccia utente. In questo modo il gestore eventi accedere direttamente all'interfaccia utente dell'applicazione. Tuttavia, se l'applicazione è occupato a gestire un altro evento di interfaccia utente quando viene generato questo evento, questo evento non può essere elaborato fino a quando l'altro gestore eventi viene completato o chiama il <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> (metodo).  
  
> [!NOTE]
>  Il `StartupNextInstance` evento viene generato solo in applicazioni a istanza singola. Per abilitare il comportamento di istanza singola per l'applicazione, è necessario controllare la **Rendi a istanza singola** casella di controllo in Progettazione progetti.  
  
| |  
|-|  
|Per rendere un'applicazione a istanza singola|  
|1.  Con un progetto selezionato in **Esplora soluzioni**, fare clic su **delle proprietà** sul **progetto** menu.<br />2.  Fare clic sulla scheda **Applicazione** .<br />3.  Selezionare il **Rendi a istanza singola** casella di controllo.|  
  
 È necessario usare il <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A> proprietà del `e` parametro per accedere agli argomenti nei successivi tentativi di avviare un'applicazione a istanza singola. Il <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A> proprietà fornisce gli argomenti utilizzati per avviare la prima istanza di un'applicazione a istanza singola.  
  
 Il codice per il <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> gestore dell'evento viene archiviato nel file ApplicationEvents. vb, che è nascosta per impostazione predefinita.  
  
| |  
|-|  
|Per accedere alla finestra Editor di codice per gli eventi dell'applicazione|  
|1.  Con un progetto selezionato in **Esplora soluzioni**, fare clic su **delle proprietà** sul **progetto** menu.<br />2.  Fare clic sulla scheda **Applicazione** .<br />3.  Fare clic sul pulsante **Visualizza eventi applicazione** per aprire l'editor di codice.<br /><br />Per altre informazioni, vedere [Pagina Applicazione, Creazione progetti (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
 La tabella seguente elenca alcuni esempi di attività che implicano il `My.Application.StartupNextInstance` evento.  
  
|A|Vedere|  
|-|-|  
|Controllare gli argomenti della riga di comando della prima istanza dell'applicazione|<xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A>|  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|-|-|  
|Windows Forms Application|Yes|  
|Libreria di classi|No|  
|Applicazione console|No|  
|Libreria di controllo Windows Form|No|  
|Libreria di controlli Web|No|  
|Servizio Windows|No|  
|Sito Web|No|  
  
   
  
## Examples  
 Questo esempio Usa la `e` parametro del <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> gestore eventi per esaminare gli argomenti della riga di comando dell'applicazione. Se viene rilevato un argomento che inizia con `/input=`, viene visualizzata la parte restante dell'argomento.  
  
 [!code-vb[VbVbalrMyApplication#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#15)]  
  
 È necessario immettere il codice nella finestra dell'Editor di codice per gli eventi dell'applicazione. Per accedere a questa finestra, seguire le istruzioni dalla sezione Osservazioni di questo argomento. Per altre informazioni, vedere [Pagina Applicazione, Creazione progetti (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As UnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::UnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler " Usage="member this.UnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'applicazione rileva un'eccezione non gestita.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'applicazione genera il `UnhandledException` eventi quando rileva un'eccezione non gestita. Questo evento fa parte del modello di applicazione Visual Basic. Per altre informazioni, vedere [Panoramica del modello di applicazione Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 È possibile usare la <xref:System.Threading.ThreadExceptionEventArgs.Exception%2A> proprietà del `e` parametro per accedere all'eccezione non gestita che ha causato questo evento.  
  
 È possibile usare la <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> proprietà del `e` parametro per controllare se l'applicazione viene chiusa. Per impostazione predefinita <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> è `True`. Pertanto, l'applicazione viene chiusa dopo aver completato la `UnhandledException` gestore dell'evento. È possibile impostare il valore `False` nella `UnhandledException` gestore eventi da mantenere l'applicazione in esecuzione e che restituisca uno stato di attesa.  
  
 Il codice per il `UnhandledException` gestore dell'evento viene archiviato nel file ApplicationEvents. vb, che è nascosta per impostazione predefinita.  
  
| |  
|-|  
|Per accedere alla finestra Editor di codice per gli eventi dell'applicazione|  
|1.  Con un progetto selezionato in **Esplora soluzioni**, fare clic su **delle proprietà** sul **progetto** menu.<br />2.  Fare clic sulla scheda **Applicazione** .<br />3.  Fare clic sul pulsante **Visualizza eventi applicazione** per aprire l'editor di codice.|  
  
 Per altre informazioni, vedere [Pagina Applicazione, Creazione progetti (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
> [!NOTE]
>  Il compilatore Visual Basic impedisce alle applicazioni che vengono compilate per il debug da generare questo evento, per consentire a un debugger gestire le eccezioni non gestite. Ciò significa che se si sta testando l'applicazione eseguendola nel debugger, ambiente di sviluppo integrato di Visual Studio di `UnhandledException` gestore dell'evento non verrà chiamato. Per altre informazioni sulla creazione di applicazioni per il debug, vedere [/debug (Visual Basic)](~/docs/visual-basic/reference/command-line-compiler/debug.md).  
  
## <a name="tasks"></a>Attività  
 Nella tabella seguente sono elencati esempi di attività che implicano il `My.Application.UnhandledException` evento.  
  
|A|Vedere|  
|-|-|  
|Registrare le eccezioni non gestite|[Procedura: Registrare eccezioni](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|-|-|  
|Windows Forms Application|**Sì**|  
|Libreria di classi|No|  
|Applicazione console|No|  
|Libreria di controllo Windows Form|No|  
|Libreria di controlli Web|No|  
|Servizio Windows|No|  
|Sito Web|No|  
  
   
  
## Examples  
 Questo esempio viene usato il `My.Application.UnhandledException` evento consente di registrare le eccezioni non gestite.  
  
 È necessario immettere il codice nella finestra dell'Editor di codice per gli eventi dell'applicazione. Per accedere a questa finestra, attenersi alla procedura descritta nella sezione Osservazioni di questo argomento. Per altre informazioni, vedere [Pagina Applicazione, Creazione progetti (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 Poiché il `UnhandledException` evento non viene generato quando un debugger è collegato all'applicazione, è necessario eseguire questo esempio di fuori dell'ambiente di sviluppo integrato di Visual Studio.  
  
 [!code-vb[VbVbalrMyApplication#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#17)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Controlla la possibilità di aggiungere un gestore eventi per questo evento. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleTextRendering">
      <MemberSignature Language="C#" Value="protected static bool UseCompatibleTextRendering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseCompatibleTextRendering" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly Property UseCompatibleTextRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static property bool UseCompatibleTextRendering { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseCompatibleTextRendering : bool" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando viene sottoposta in una classe derivata, la proprietà consente ad una finestra di progettazione di specificare il modulo di rendering del testo predefinito per i form dell'applicazione.</summary>
        <value>
          <see langword="Boolean" />. Un valore di <see langword="False" /> indica che l'applicazione deve utilizzare il motore di rendering del testo predefinito per [! INCLUDE[vbprvblong](~/Includes/vbprvblong-MD.MD)]. Un valore di <see langword="True" /> indica che l'applicazione deve utilizzare il modulo di rendering del testo per Visual Basic .NET 2002 e Visual Basic .NET 2003.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questa proprietà restituisce `False` per indicare che il testo del programma GDI per motore di rendering [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)] utilizzabile per i form dell'applicazione. Tuttavia, è possibile eseguire l'override di questa proprietà per restituire `True` e specificare che i form dell'applicazione usano il motore di rendering testo GDI+, che viene usato in Visual Basic .NET 2002 e Visual Basic .NET 2003.  
  
 Questa proprietà viene chiamata dal <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> costruttore.  
  
 Il codice che esegue l'override dei metodi di <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> classe deve essere specificata nel file ApplicationEvents. vb, che è nascosto per impostazione predefinita.  
  
| |  
|-|  
|Per accedere alla finestra Editor di codice per eseguire l'override di membri|  
|1.  Con un progetto selezionato in **Esplora soluzioni**, fare clic su **delle proprietà** sul **progetto** menu.<br />2.  Fare clic sulla scheda **Applicazione** .<br />3.  Fare clic sul pulsante **Visualizza eventi applicazione** per aprire l'editor di codice.<br /><br />Per altre informazioni, vedere [Pagina Applicazione, Creazione progetti (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
   
  
## Examples  
 In questo esempio viene illustrato come impostare il motore di rendering di testo GDI+ come motore di rendering predefinito dell'applicazione eseguendo l'override di <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering%2A> proprietà.  
  
```vb  
Protected Overloads Shared ReadOnly Property UseCompatibleTextRendering() As Boolean  
    Get  
        ' Use the GDI+ text rendering engine.  
        Return True  
    End Get  
End Property  
```  
  
 È necessario immettere il codice nella finestra dell'Editor di codice per gli eventi dell'applicazione. Per altre informazioni, vedere [Pagina Applicazione, Creazione progetti (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>