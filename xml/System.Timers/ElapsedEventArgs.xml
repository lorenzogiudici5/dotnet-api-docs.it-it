<Type Name="ElapsedEventArgs" FullName="System.Timers.ElapsedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="259e978f771800c3c1d60d9f3db63683b042b49d" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39829426" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ElapsedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ElapsedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Timers.ElapsedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ElapsedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ElapsedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ElapsedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce dati per l'evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente crea una <xref:System.Timers.Timer> oggetto che viene attivato relativo <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> eventi ogni due secondi (2000 millisecondi), impostare un gestore eventi per l'evento e avvia il timer. Il gestore dell'evento Visualizza il valore della <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> proprietà ogni volta che viene generato.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SignalTime">
      <MemberSignature Language="C#" Value="public DateTime SignalTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime SignalTime" />
      <MemberSignature Language="DocId" Value="P:System.Timers.ElapsedEventArgs.SignalTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignalTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime SignalTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.SignalTime : DateTime" Usage="System.Timers.ElapsedEventArgs.SignalTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la data e l'ora in cui è stato generato l'evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
        <value>Ora in cui è stato generato l'evento <see cref="E:System.Timers.Timer.Elapsed" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento viene generato in un <xref:System.Threading.ThreadPool> thread, in modo che il metodo di gestione degli eventi può essere eseguito in un unico thread allo stesso tempo che una chiamata al <xref:System.Timers.Timer.Stop%2A?displayProperty=nameWithType> metodo viene eseguito in un altro thread. Ciò potrebbe comportare il <xref:System.Timers.Timer.Elapsed> evento generato dopo il <xref:System.Timers.Timer.Stop%2A> viene chiamato il metodo. Questa race condition non può essere evitata semplicemente confrontando il <xref:System.Timers.ElapsedEventArgs.SignalTime%2A> proprietà con l'ora quando il <xref:System.Timers.Timer.Stop%2A> viene chiamato il metodo perché il metodo di gestione degli eventi potrebbe già essere in esecuzione quando il <xref:System.Timers.Timer.Stop%2A> metodo viene chiamato, o potrebbe iniziare l'esecuzione tra il momento in cui quando il <xref:System.Timers.Timer.Stop%2A> viene chiamato e nel momento in cui quando viene salvato l'ora di arresto. Se è fondamentale per impedire al thread che chiama il <xref:System.Timers.Timer.Stop%2A> metodo di proseguire mentre il metodo di gestione degli eventi è ancora in esecuzione, usare un meccanismo di sincronizzazione più affidabile, ad esempio il <xref:System.Threading.Monitor> classe o il <xref:System.Threading.Interlocked.CompareExchange%2A> (metodo). Il codice che utilizza il <xref:System.Threading.Interlocked.CompareExchange%2A> metodo sono reperibili nell'esempio per il <xref:System.Timers.Timer.Stop%2A?displayProperty=nameWithType> (metodo).  
  
   
  
## Examples  
 Nell'esempio seguente crea una <xref:System.Timers.Timer> oggetto che viene attivato relativo <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> eventi ogni due secondi (2000 millisecondi), impostare un gestore eventi per l'evento e avvia il timer. Il gestore dell'evento Visualizza il valore della <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> proprietà ogni volta che viene generato.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.Stop" />
      </Docs>
    </Member>
  </Members>
</Type>