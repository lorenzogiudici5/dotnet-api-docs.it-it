<Type Name="PropertyExpression" FullName="System.Web.UI.WebControls.Expressions.PropertyExpression">
  <TypeSignature Language="C#" Value="public class PropertyExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.PropertyExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="49df4-101">Consente di creare una clausola <see langword="Where" /> dai parametri di un insieme <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />.</span><span class="sxs-lookup"><span data-stu-id="49df4-101">Provides a way to create a <see langword="Where" /> clause from parameters in a <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> collection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49df4-102">Il <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> classe viene utilizzata con la <xref:System.Web.UI.WebControls.QueryExtender> controllo per filtrare i dati nei campi dati.</span><span class="sxs-lookup"><span data-stu-id="49df4-102">The <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> class is used with the <xref:System.Web.UI.WebControls.QueryExtender> control to filter data in data fields.</span></span> <span data-ttu-id="49df4-103">La <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> classe confronta un valore della proprietà di una colonna a un valore specificato.</span><span class="sxs-lookup"><span data-stu-id="49df4-103">The <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> class compares a property value of a column to a specified value.</span></span> <span data-ttu-id="49df4-104">Ad esempio, è possibile confrontare un valore booleano per il valore nella colonna di una tabella di prodotti in un database non più supportata.</span><span class="sxs-lookup"><span data-stu-id="49df4-104">For example, you can compare a Boolean value to the value in the discontinued column of a Products table in a database.</span></span>  
  
 <span data-ttu-id="49df4-105">Il <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> classe crea un confronto di uguaglianza (= =) per il valore di ogni parametro e alla proprietà corrispondente del <xref:System.Linq.IQueryable> oggetto dati.</span><span class="sxs-lookup"><span data-stu-id="49df4-105">The <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> class creates an equals (==) comparison for the value of each parameter and the corresponding property of the <xref:System.Linq.IQueryable> data object.</span></span> <span data-ttu-id="49df4-106">Se si specifica più di un parametro, i parametri vengono combinati tramite l'operatore logico `AND` operatore.</span><span class="sxs-lookup"><span data-stu-id="49df4-106">If you provide more than one parameter, the parameters are combined using the logical `AND` operator.</span></span> <span data-ttu-id="49df4-107">I parametri che contengono un valore vuoto non vengono aggiunti per il `Where` clausola.</span><span class="sxs-lookup"><span data-stu-id="49df4-107">Parameters that contain an empty value are not added to the `Where` clause.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49df4-108">Nell'esempio seguente viene illustrato come eseguire la ricerca della tabella Products del database AdventureWorks per prodotti la cui proprietà `MakeFlag` (una colonna booleana) è impostata su `true`.</span><span class="sxs-lookup"><span data-stu-id="49df4-108">The following example shows how to search the Products table of the AdventureWorks database for products whose `MakeFlag` property (a Boolean column) is set to `true`.</span></span> <span data-ttu-id="49df4-109">Il parametro di valore booleano è impostato in una casella di controllo.</span><span class="sxs-lookup"><span data-stu-id="49df4-109">The Boolean value parameter is set in a check box.</span></span> <span data-ttu-id="49df4-110">Il risultato della query che restituisca il <xref:System.Web.UI.WebControls.LinqDataSource> controllo viene visualizzato un <xref:System.Web.UI.WebControls.GridView> controllo.</span><span class="sxs-lookup"><span data-stu-id="49df4-110">The result of the query that is returned from the <xref:System.Web.UI.WebControls.LinqDataSource> control is displayed in a <xref:System.Web.UI.WebControls.GridView> control.</span></span>  
  
 <span data-ttu-id="49df4-111">Questo esempio di codice fa parte di un esempio più esaustivo disponibile in [procedura dettagliata: filtro dei dati in una pagina Web utilizzando la sintassi dichiarativa](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f).</span><span class="sxs-lookup"><span data-stu-id="49df4-111">This code example is part of a larger example that is provided in [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f).</span></span>  
  
  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49df4-112">Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" />.</span><span class="sxs-lookup"><span data-stu-id="49df4-112">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="49df4-113">Oggetto da utilizzare per la query.</span><span class="sxs-lookup"><span data-stu-id="49df4-113">The object to use for the query.</span></span></param>
        <summary><span data-ttu-id="49df4-114">Applica un oggetto <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> utilizzando l'oggetto origine dati <see cref="T:System.Linq.IQueryable" /> specificato.</span><span class="sxs-lookup"><span data-stu-id="49df4-114">Applies a <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> object by using the specified <see cref="T:System.Linq.IQueryable" /> data source object.</span></span></summary>
        <returns><span data-ttu-id="49df4-115">Istanza dell'oggetto a cui sono state applicate le espressioni.</span><span class="sxs-lookup"><span data-stu-id="49df4-115">An instance of the object that the expressions were applied to.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49df4-116">Questo metodo combina specificato <xref:System.Linq.IQueryable> oggetto con le espressioni di <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> raccolta usando l'operatore logico `AND` operatore.</span><span class="sxs-lookup"><span data-stu-id="49df4-116">This method combines the specified <xref:System.Linq.IQueryable> object with the expressions in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection by using the logical `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>