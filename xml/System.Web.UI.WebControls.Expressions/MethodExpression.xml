<Type Name="MethodExpression" FullName="System.Web.UI.WebControls.Expressions.MethodExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="970264dc27c15aef12009b2e30f6891735a746f3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36585717" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MethodExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MethodExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.MethodExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class MethodExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type MethodExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a way to specify a custom LINQ query that is defined in a method.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.QueryExtender> controllo supporta le query LINQ personalizzate. È possibile definire una query LINQ personalizzata in un metodo e usare la <xref:System.Web.UI.WebControls.Expressions.MethodExpression> opzione per richiamare la query nel filtro il <xref:System.Web.UI.WebControls.QueryExtender> controllo.  
  
 Il metodo che contiene la query LINQ personalizzata deve soddisfare i criteri seguenti:  
  
-   Il metodo deve essere statico (`Shared` in Visual Basic). Il primo parametro deve essere un <xref:System.Linq.IQueryable%601> o <xref:System.Collections.Generic.IEnumerable%601> oggetto. Il metodo può avere più di un parametro.  
  
-   Il valore restituito non è possibile modificare il <xref:System.Linq.IQueryable%601> o <xref:System.Collections.Generic.IEnumerable%601> tipo che viene eseguita una query.  
  
 Il <xref:System.Web.UI.WebControls.Expressions.MethodExpression> Cerca il metodo che contiene la query nell'ordine seguente:  
  
1.  Se un <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A> proprietà viene specificata nel <xref:System.Web.UI.WebControls.QueryExtender> (controllo), il <xref:System.Web.UI.WebControls.Expressions.MethodExpression> oggetto cerca il metodo nel tipo specificato.  
  
2.  Se l'origine dati implementa <xref:System.Web.DynamicData.IDynamicDataSource>, il metodo cerca il metodo nel tipo di contesto (<xref:System.Data.Linq.DataContext> o <xref:System.Data.Objects.ObjectContext> oggetto.)  
  
3.  Il metodo esegue la ricerca per il metodo in un controllo del modello, nella classe base per la pagina o in un controllo utente.  
  
 Il <xref:System.Web.UI.WebControls.Expressions.MethodExpression> equivale alla classe il <xref:System.Web.UI.WebControls.Expressions.CustomExpression> classe ad eccezione del fatto che l'espressione di metodo viene eseguito in risposta a una chiamata al metodo e l'espressione personalizzata viene eseguita in risposta a un evento.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come eseguire la ricerca nel campo ListPrice della tabella Products nel database AdventureWorks per prodotti con un prezzo di listino di 400 o più. Questo esempio viene illustrato come creare una query LINQ personalizzata in un metodo nel codice della pagina e come richiamare il metodo di <xref:System.Web.UI.WebControls.QueryExtender> controllo.  
  
```vb  
Public Shared Function FilterStandardPrice(ByVal query As _  
        IQueryable(Of Product)) As IQueryable(Of Product)  
        Return From p In query _  
            Where p.ListPrice >= 400 _  
            Select p  
    End Function  
```  
  
```csharp  
public static IQueryable<Product>   
        FilterStandardPrice(IQueryable<Product> query)  
{  
        return from p in query  
                  where p.ListPrice >= 400  
                  select p;  
  
    }  
```  
  
 Nell'esempio seguente viene illustrato come chiamare il metodo nella pagina.  
  
```  
<html>  
<head runat="server">  
  <title>Custom Filter</title>  
</head>  
<body>  
  <form id="form1" runat="server">  
    <asp:LinqDataSource ID="LinqDataSource1" runat="server"   
        ContextTypeName="AdventureworksDataContext" EntityTypeName=""   
        TableName="Products">  
    </asp:LinqDataSource>  
  
    <asp:QueryExtender ID="QueryExtender1" runat="server"   
        TargetControlID="LinqDataSource1">  
      <asp:MethodExpression MethodName="FilterStandardPrice" >  
      </asp:MethodExpression>  
    </asp:QueryExtender>  
  
    <asp:GridView ID="GridView1" runat="server"   
        DataSourceID="LinqDataSource1"   
        DataKeyNames="ProductID"   
    </asp:GridView>  
  </form>  
</body>  
</html>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MethodExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.MethodExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MethodExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Expressions.MethodExpression" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="methodExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">The data source control to use.</param>
        <summary>Resolves the expression by using the specified <see cref="T:System.Linq.IQueryable" /> object.</summary>
        <returns>An instance of the <see cref="T:System.Linq.IQueryable" /> object that was used to resolve the expression.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The data source control is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The method was not found.  -or-  The method is not static.  -or-  The type of the passed <see langword="IQuerable&lt;T&gt;" /> object was changed.</exception>
      </Docs>
    </Member>
    <Member MemberName="IgnoreIfNotFound">
      <MemberSignature Language="C#" Value="public bool IgnoreIfNotFound { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreIfNotFound" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreIfNotFound As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreIfNotFound { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreIfNotFound : bool with get, set" Usage="System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the expression should be ignored.</summary>
        <value>
          <see langword="true" /> Se l'espressione viene ignorato; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.Expressions.MethodExpression> oggetto esegue la ricerca di un metodo che contiene la query cercando in posizioni specifiche ed eseguendo una ricerca in un ordine specifico. È possibile impostare questa proprietà `false` per generare un'eccezione se il <xref:System.Web.UI.WebControls.Expressions.CustomExpression> oggetto non trova un metodo che contiene un LINQ.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodName">
      <MemberSignature Language="C#" Value="public string MethodName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MethodName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.MethodName" />
      <MemberSignature Language="VB.NET" Value="Public Property MethodName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MethodName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MethodName : string with get, set" Usage="System.Web.UI.WebControls.Expressions.MethodExpression.MethodName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the method that contains a custom LINQ query.</summary>
        <value>Il nome del metodo contenente la query LINQ personalizzata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.Expressions.MethodExpression> oggetto consente di chiamare una query LINQ personalizzata che viene definita in un metodo. Specificare il metodo nel <xref:System.Web.UI.WebControls.QueryExtender> controllo nella pagina.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come specificare il `FilterStandardPrice` metodo il <xref:System.Web.UI.WebControls.QueryExtender> controllo. La query LINQ personalizzata viene definita un `FilterStandardPrice` metodo.  
  
```  
<asp:QueryExtender ID="QueryExtender1" runat="server"   
    TargetControlID="LinqDataSource1">  
  <asp:MethodExpression MethodName="FilterStandardPrice">  
  </asp:MethodExpression>  
  </asp:QueryExtender>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string with get, set" Usage="System.Web.UI.WebControls.Expressions.MethodExpression.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the class whose method contains the custom query.</summary>
        <value>La classe che il metodo è un membro di.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.Expressions.MethodExpression> classe consente di specificare un'espressione personalizzata per un'origine dati nel <xref:System.Web.UI.WebControls.QueryExtender> controllo. È possibile utilizzare il <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A> proprietà per specificare la classe a cui appartiene il metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>