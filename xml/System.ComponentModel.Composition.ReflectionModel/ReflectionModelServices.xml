<Type Name="ReflectionModelServices" FullName="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0f29ac7762320289d5357a36173c8d0d6f60594a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36711671" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ReflectionModelServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ReflectionModelServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices" />
  <TypeSignature Language="VB.NET" Value="Public Class ReflectionModelServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReflectionModelServices abstract sealed" />
  <TypeSignature Language="F#" Value="type ReflectionModelServices = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f9b5b-101">Fornisce metodi di estensione per creare e recuperare parti basate su reflection.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f9b5b-101">Provides extension methods to create and retrieve reflection-based parts.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateExportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ExportDefinition CreateExportDefinition (System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo exportingMember, string contractName, Lazy&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;&gt; metadata, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ExportDefinition CreateExportDefinition(valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo exportingMember, string contractName, class System.Lazy`1&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&gt; metadata, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateExportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateExportDefinition (exportingMember As LazyMemberInfo, contractName As String, metadata As Lazy(Of IDictionary(Of String, Object)), origin As ICompositionElement) As ExportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ExportDefinition ^ CreateExportDefinition(System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo exportingMember, System::String ^ contractName, Lazy&lt;System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^&gt; ^ metadata, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberSignature Language="F#" Value="static member CreateExportDefinition : System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo * string * Lazy&lt;System.Collections.Generic.IDictionary&lt;string, obj&gt;&gt; * System.ComponentModel.Composition.Primitives.ICompositionElement -&gt; System.ComponentModel.Composition.Primitives.ExportDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateExportDefinition (exportingMember, contractName, metadata, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ExportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportingMember" Type="System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="metadata" Type="System.Lazy&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;&gt;" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="exportingMember">
          <span data-ttu-id="f9b5b-102">Membro da esportare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-102">The member to export.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="f9b5b-103">Nome di contratto da utilizzare per l'esportazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-103">The contract name to use for the export.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="f9b5b-104">Metadati per l'esportazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-104">The metadata for the export.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="f9b5b-105">Oggetto da cui ha origine l'esportazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-105">The object that the export originates from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-106">Crea una definizione di esportazione dal membro specificato, con il nome di contratto, i metadati e l'origine specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-106">Creates an export definition from the specified member, with the specified contract name, metadata, and origin.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-107">Definizione di esportazione creata dai parametri specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-107">An export definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateImportDefinition">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f9b5b-108">Crea una definizione di importazione per un membro o un parametro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-108">Creates an import definition for a member or parameter.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition (Lazy&lt;System.Reflection.ParameterInfo&gt; parameter, string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition(class System.Lazy`1&lt;class System.Reflection.ParameterInfo&gt; parameter, string contractName, string requiredTypeIdentity, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; requiredMetadata, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, valuetype System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.Lazy{System.Reflection.ParameterInfo},System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateImportDefinition (parameter As Lazy(Of ParameterInfo), contractName As String, requiredTypeIdentity As String, requiredMetadata As IEnumerable(Of KeyValuePair(Of String, Type)), cardinality As ImportCardinality, requiredCreationPolicy As CreationPolicy, origin As ICompositionElement) As ContractBasedImportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ CreateImportDefinition(Lazy&lt;System::Reflection::ParameterInfo ^&gt; ^ parameter, System::String ^ contractName, System::String ^ requiredTypeIdentity, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Type ^&gt;&gt; ^ requiredMetadata, System::ComponentModel::Composition::Primitives::ImportCardinality cardinality, System::ComponentModel::Composition::CreationPolicy requiredCreationPolicy, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberSignature Language="F#" Value="static member CreateImportDefinition : Lazy&lt;System.Reflection.ParameterInfo&gt; * string * string * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Type&gt;&gt; * System.ComponentModel.Composition.Primitives.ImportCardinality * System.ComponentModel.Composition.CreationPolicy * System.ComponentModel.Composition.Primitives.ICompositionElement -&gt; System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition (parameter, contractName, requiredTypeIdentity, requiredMetadata, cardinality, requiredCreationPolicy, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Lazy&lt;System.Reflection.ParameterInfo&gt;" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="requiredTypeIdentity" Type="System.String" />
        <Parameter Name="requiredMetadata" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;" />
        <Parameter Name="cardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        <Parameter Name="requiredCreationPolicy" Type="System.ComponentModel.Composition.CreationPolicy" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="f9b5b-109">Parametro da importare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-109">The parameter to import.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="f9b5b-110">Nome di contratto da utilizzare per l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-110">The contract name to use for the import.</span>
          </span>
        </param>
        <param name="requiredTypeIdentity">
          <span data-ttu-id="f9b5b-111">Identità di tipo obbligatoria per l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-111">The required type identity for the import.</span>
          </span>
        </param>
        <param name="requiredMetadata">
          <span data-ttu-id="f9b5b-112">Metadati obbligatori per l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-112">The required metadata for the import.</span>
          </span>
        </param>
        <param name="cardinality">
          <span data-ttu-id="f9b5b-113">Cardinalità dell'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-113">The cardinality of the import.</span>
          </span>
        </param>
        <param name="requiredCreationPolicy">
          <span data-ttu-id="f9b5b-114">Uno dei valori di enumerazione che specifica i criteri di creazione dell'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-114">One of the enumeration values that specifies the import's creation policy.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="f9b5b-115">Oggetto in cui eseguire l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-115">The object to import into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-116">Crea una definizione di importazione per il parametro specificato, con il nome di contratto, l'identità del tipo, i metadati di importazione, la cardinalità, i criteri di creazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-116">Creates an import definition for the specified parameter by using the specified contract name, type identity, import metadata, cardinality, and creation policy.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-117">Definizione di importazione creata dai parametri specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-117">An import definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition (System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition(valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; requiredMetadata, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, valuetype System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateImportDefinition (importingMember As LazyMemberInfo, contractName As String, requiredTypeIdentity As String, requiredMetadata As IEnumerable(Of KeyValuePair(Of String, Type)), cardinality As ImportCardinality, isRecomposable As Boolean, requiredCreationPolicy As CreationPolicy, origin As ICompositionElement) As ContractBasedImportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ CreateImportDefinition(System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo importingMember, System::String ^ contractName, System::String ^ requiredTypeIdentity, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Type ^&gt;&gt; ^ requiredMetadata, System::ComponentModel::Composition::Primitives::ImportCardinality cardinality, bool isRecomposable, System::ComponentModel::Composition::CreationPolicy requiredCreationPolicy, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberSignature Language="F#" Value="static member CreateImportDefinition : System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo * string * string * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Type&gt;&gt; * System.ComponentModel.Composition.Primitives.ImportCardinality * bool * System.ComponentModel.Composition.CreationPolicy * System.ComponentModel.Composition.Primitives.ICompositionElement -&gt; System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition (importingMember, contractName, requiredTypeIdentity, requiredMetadata, cardinality, isRecomposable, requiredCreationPolicy, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importingMember" Type="System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="requiredTypeIdentity" Type="System.String" />
        <Parameter Name="requiredMetadata" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;" />
        <Parameter Name="cardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        <Parameter Name="isRecomposable" Type="System.Boolean" />
        <Parameter Name="requiredCreationPolicy" Type="System.ComponentModel.Composition.CreationPolicy" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="importingMember">
          <span data-ttu-id="f9b5b-118">Membro in cui eseguire l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-118">The member to import into.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="f9b5b-119">Nome di contratto da utilizzare per l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-119">The contract name to use for the import.</span>
          </span>
        </param>
        <param name="requiredTypeIdentity">
          <span data-ttu-id="f9b5b-120">Identità di tipo obbligatoria per l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-120">The required type identity for the import.</span>
          </span>
        </param>
        <param name="requiredMetadata">
          <span data-ttu-id="f9b5b-121">Metadati obbligatori per l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-121">The required metadata for the import.</span>
          </span>
        </param>
        <param name="cardinality">
          <span data-ttu-id="f9b5b-122">Cardinalità dell'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-122">The cardinality of the import.</span>
          </span>
        </param>
        <param name="isRecomposable">
          <span data-ttu-id="f9b5b-123">
            <see langword="true" /> per indicare che l'importazione è ricomponibile; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-123">
              <see langword="true" /> to indicate that the import is recomposable; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="requiredCreationPolicy">
          <span data-ttu-id="f9b5b-124">Uno dei valori di enumerazione che specifica i criteri di creazione dell'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-124">One of the enumeration values that specifies the import's creation policy.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="f9b5b-125">Oggetto in cui eseguire l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-125">The object to import into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-126">Crea una definizione di importazione per il membro specificato, con il nome di contratto, l'identità del tipo, i metadati di importazione, la cardinalità, i criteri di ricomposizione, i criteri di creazione e l'origine specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-126">Creates an import definition for the specified member by using the specified contract name, type identity, import metadata, cardinality, recomposition policy, and creation policy.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-127">Definizione di importazione creata dai parametri specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-127">An import definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition (Lazy&lt;System.Reflection.ParameterInfo&gt; parameter, string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.Collections.Generic.IDictionary&lt;string,object&gt; metadata, bool isExportFactory, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition(class System.Lazy`1&lt;class System.Reflection.ParameterInfo&gt; parameter, string contractName, string requiredTypeIdentity, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; requiredMetadata, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, valuetype System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; metadata, bool isExportFactory, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.Lazy{System.Reflection.ParameterInfo},System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateImportDefinition (parameter As Lazy(Of ParameterInfo), contractName As String, requiredTypeIdentity As String, requiredMetadata As IEnumerable(Of KeyValuePair(Of String, Type)), cardinality As ImportCardinality, requiredCreationPolicy As CreationPolicy, metadata As IDictionary(Of String, Object), isExportFactory As Boolean, origin As ICompositionElement) As ContractBasedImportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ CreateImportDefinition(Lazy&lt;System::Reflection::ParameterInfo ^&gt; ^ parameter, System::String ^ contractName, System::String ^ requiredTypeIdentity, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Type ^&gt;&gt; ^ requiredMetadata, System::ComponentModel::Composition::Primitives::ImportCardinality cardinality, System::ComponentModel::Composition::CreationPolicy requiredCreationPolicy, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ metadata, bool isExportFactory, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberSignature Language="F#" Value="static member CreateImportDefinition : Lazy&lt;System.Reflection.ParameterInfo&gt; * string * string * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Type&gt;&gt; * System.ComponentModel.Composition.Primitives.ImportCardinality * System.ComponentModel.Composition.CreationPolicy * System.Collections.Generic.IDictionary&lt;string, obj&gt; * bool * System.ComponentModel.Composition.Primitives.ICompositionElement -&gt; System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition (parameter, contractName, requiredTypeIdentity, requiredMetadata, cardinality, requiredCreationPolicy, metadata, isExportFactory, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Lazy&lt;System.Reflection.ParameterInfo&gt;" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="requiredTypeIdentity" Type="System.String" />
        <Parameter Name="requiredMetadata" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;" />
        <Parameter Name="cardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        <Parameter Name="requiredCreationPolicy" Type="System.ComponentModel.Composition.CreationPolicy" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="isExportFactory" Type="System.Boolean" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="f9b5b-128">Parametro da importare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-128">The parameter to import.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="f9b5b-129">Nome di contratto da utilizzare per l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-129">The contract name to use for the import.</span>
          </span>
        </param>
        <param name="requiredTypeIdentity">
          <span data-ttu-id="f9b5b-130">Identità di tipo obbligatoria per l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-130">The required type identity for the import.</span>
          </span>
        </param>
        <param name="requiredMetadata">
          <span data-ttu-id="f9b5b-131">Metadati obbligatori per l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-131">The required metadata for the import.</span>
          </span>
        </param>
        <param name="cardinality">
          <span data-ttu-id="f9b5b-132">Cardinalità dell'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-132">The cardinality of the import.</span>
          </span>
        </param>
        <param name="requiredCreationPolicy">
          <span data-ttu-id="f9b5b-133">Uno dei valori di enumerazione che specifica i criteri di creazione dell'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-133">One of the enumeration values that specifies the import's creation policy.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="f9b5b-134">Metadati di contratto</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-134">The contract metadata</span>
          </span>
        </param>
        <param name="isExportFactory">
          <span data-ttu-id="f9b5b-135">
            <see langword="true" /> per indicare che l'importazione rappresenta un oggetto <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-135">
              <see langword="true" /> to indicate that the import represents an <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="f9b5b-136">Oggetto in cui eseguire l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-136">The object to import into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-137">Crea una definizione di importazione per il parametro specificato, con il nome di contratto, l'identità del tipo, i metadati di importazione e di contratto, la cardinalità, i criteri di creazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-137">Creates an import definition for the specified parameter by using the specified contract name, type identity, import and contract metadata, cardinality, and creation policy.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-138">Definizione di importazione creata dai parametri specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-138">An import definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition (System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.Collections.Generic.IDictionary&lt;string,object&gt; metadata, bool isExportFactory, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition(valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; requiredMetadata, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, valuetype System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; metadata, bool isExportFactory, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateImportDefinition (importingMember As LazyMemberInfo, contractName As String, requiredTypeIdentity As String, requiredMetadata As IEnumerable(Of KeyValuePair(Of String, Type)), cardinality As ImportCardinality, isRecomposable As Boolean, requiredCreationPolicy As CreationPolicy, metadata As IDictionary(Of String, Object), isExportFactory As Boolean, origin As ICompositionElement) As ContractBasedImportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ CreateImportDefinition(System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo importingMember, System::String ^ contractName, System::String ^ requiredTypeIdentity, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Type ^&gt;&gt; ^ requiredMetadata, System::ComponentModel::Composition::Primitives::ImportCardinality cardinality, bool isRecomposable, System::ComponentModel::Composition::CreationPolicy requiredCreationPolicy, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ metadata, bool isExportFactory, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberSignature Language="F#" Value="static member CreateImportDefinition : System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo * string * string * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Type&gt;&gt; * System.ComponentModel.Composition.Primitives.ImportCardinality * bool * System.ComponentModel.Composition.CreationPolicy * System.Collections.Generic.IDictionary&lt;string, obj&gt; * bool * System.ComponentModel.Composition.Primitives.ICompositionElement -&gt; System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition (importingMember, contractName, requiredTypeIdentity, requiredMetadata, cardinality, isRecomposable, requiredCreationPolicy, metadata, isExportFactory, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importingMember" Type="System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="requiredTypeIdentity" Type="System.String" />
        <Parameter Name="requiredMetadata" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;" />
        <Parameter Name="cardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        <Parameter Name="isRecomposable" Type="System.Boolean" />
        <Parameter Name="requiredCreationPolicy" Type="System.ComponentModel.Composition.CreationPolicy" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="isExportFactory" Type="System.Boolean" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="importingMember">
          <span data-ttu-id="f9b5b-139">Membro in cui eseguire l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-139">The member to import into.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="f9b5b-140">Nome di contratto da utilizzare per l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-140">The contract name to use for the import.</span>
          </span>
        </param>
        <param name="requiredTypeIdentity">
          <span data-ttu-id="f9b5b-141">Identità di tipo obbligatoria per l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-141">The required type identity for the import.</span>
          </span>
        </param>
        <param name="requiredMetadata">
          <span data-ttu-id="f9b5b-142">Metadati obbligatori per l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-142">The required metadata for the import.</span>
          </span>
        </param>
        <param name="cardinality">
          <span data-ttu-id="f9b5b-143">Cardinalità dell'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-143">The cardinality of the import.</span>
          </span>
        </param>
        <param name="isRecomposable">
          <span data-ttu-id="f9b5b-144">
            <see langword="true" /> per indicare che l'importazione è ricomponibile; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-144">
              <see langword="true" /> to indicate that the import is recomposable; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="requiredCreationPolicy">
          <span data-ttu-id="f9b5b-145">Uno dei valori di enumerazione che specifica i criteri di creazione dell'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-145">One of the enumeration values that specifies the import's creation policy.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="f9b5b-146">Metadati di contratto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-146">The contract metadata.</span>
          </span>
        </param>
        <param name="isExportFactory">
          <span data-ttu-id="f9b5b-147">
            <see langword="true" /> per indicare che l'importazione rappresenta un oggetto <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-147">
              <see langword="true" /> to indicate that the import represents an <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="f9b5b-148">Oggetto in cui eseguire l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-148">The object to import into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-149">Crea una definizione di importazione per il membro specificato, con il nome di contratto, l'identità del tipo, i metadati di importazione e di contratto, la cardinalità, i criteri di ricomposizione, i criteri di creazione e l'origine specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-149">Creates an import definition for the specified member by using the specified contract name, type identity, import and contract metadata, cardinality, recomposition policy, and creation policy.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-150">Definizione di importazione creata dai parametri specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-150">An import definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition (System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, bool isPreRequisite, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.Collections.Generic.IDictionary&lt;string,object&gt; metadata, bool isExportFactory, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition(valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; requiredMetadata, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, bool isPreRequisite, valuetype System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; metadata, bool isExportFactory, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateImportDefinition (importingMember As LazyMemberInfo, contractName As String, requiredTypeIdentity As String, requiredMetadata As IEnumerable(Of KeyValuePair(Of String, Type)), cardinality As ImportCardinality, isRecomposable As Boolean, isPreRequisite As Boolean, requiredCreationPolicy As CreationPolicy, metadata As IDictionary(Of String, Object), isExportFactory As Boolean, origin As ICompositionElement) As ContractBasedImportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ CreateImportDefinition(System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo importingMember, System::String ^ contractName, System::String ^ requiredTypeIdentity, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Type ^&gt;&gt; ^ requiredMetadata, System::ComponentModel::Composition::Primitives::ImportCardinality cardinality, bool isRecomposable, bool isPreRequisite, System::ComponentModel::Composition::CreationPolicy requiredCreationPolicy, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ metadata, bool isExportFactory, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberSignature Language="F#" Value="static member CreateImportDefinition : System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo * string * string * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Type&gt;&gt; * System.ComponentModel.Composition.Primitives.ImportCardinality * bool * bool * System.ComponentModel.Composition.CreationPolicy * System.Collections.Generic.IDictionary&lt;string, obj&gt; * bool * System.ComponentModel.Composition.Primitives.ICompositionElement -&gt; System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition (importingMember, contractName, requiredTypeIdentity, requiredMetadata, cardinality, isRecomposable, isPreRequisite, requiredCreationPolicy, metadata, isExportFactory, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importingMember" Type="System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="requiredTypeIdentity" Type="System.String" />
        <Parameter Name="requiredMetadata" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;" />
        <Parameter Name="cardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        <Parameter Name="isRecomposable" Type="System.Boolean" />
        <Parameter Name="isPreRequisite" Type="System.Boolean" />
        <Parameter Name="requiredCreationPolicy" Type="System.ComponentModel.Composition.CreationPolicy" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="isExportFactory" Type="System.Boolean" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="importingMember">
          <span data-ttu-id="f9b5b-151">Membro in cui eseguire l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-151">The member to import into.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="f9b5b-152">Nome di contratto da utilizzare per l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-152">The contract name to use for the import.</span>
          </span>
        </param>
        <param name="requiredTypeIdentity">
          <span data-ttu-id="f9b5b-153">Identità di tipo obbligatoria per l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-153">The required type identity for the import.</span>
          </span>
        </param>
        <param name="requiredMetadata">
          <span data-ttu-id="f9b5b-154">Metadati obbligatori per l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-154">The required metadata for the import.</span>
          </span>
        </param>
        <param name="cardinality">
          <span data-ttu-id="f9b5b-155">Cardinalità dell'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-155">The cardinality of the import.</span>
          </span>
        </param>
        <param name="isRecomposable">
          <span data-ttu-id="f9b5b-156">
            <see langword="true" /> per indicare che l'importazione è ricomponibile; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-156">
              <see langword="true" /> to indicate that the import is recomposable; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="isPreRequisite">
          <span data-ttu-id="f9b5b-157">
            <see langword="true" /> per indicare che l'importazione costituisce un prerequisito; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-157">
              <see langword="true" /> to indicate that the import is a prerequisite; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="requiredCreationPolicy">
          <span data-ttu-id="f9b5b-158">Uno dei valori di enumerazione che specifica i criteri di creazione dell'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-158">One of the enumeration values that specifies the import's creation policy.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="f9b5b-159">Metadati di contratto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-159">The contract metadata.</span>
          </span>
        </param>
        <param name="isExportFactory">
          <span data-ttu-id="f9b5b-160">
            <see langword="true" /> per indicare che l'importazione rappresenta un oggetto <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-160">
              <see langword="true" /> to indicate that the import represents an <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="f9b5b-161">Oggetto in cui eseguire l'importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-161">The object to import into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-162">Crea una definizione di importazione per il membro specificato, con il nome di contratto, l'identità del tipo, i metadati di importazione e di contratto, la cardinalità, i criteri di ricomposizione, i criteri di creazione e l'origine specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-162">Creates an import definition for the specified member by using the specified contract name, type identity, import and contract metadata, cardinality, recomposition policy, and creation policy.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-163">Definizione di importazione creata dai parametri specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-163">An import definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePartDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ComposablePartDefinition CreatePartDefinition (Lazy&lt;Type&gt; partType, bool isDisposalRequired, Lazy&lt;System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.ImportDefinition&gt;&gt; imports, Lazy&lt;System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt; exports, Lazy&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;&gt; metadata, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ComposablePartDefinition CreatePartDefinition(class System.Lazy`1&lt;class System.Type&gt; partType, bool isDisposalRequired, class System.Lazy`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.ImportDefinition&gt;&gt; imports, class System.Lazy`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt; exports, class System.Lazy`1&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&gt; metadata, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreatePartDefinition(System.Lazy{System.Type},System.Boolean,System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ImportDefinition}},System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition}},System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreatePartDefinition (partType As Lazy(Of Type), isDisposalRequired As Boolean, imports As Lazy(Of IEnumerable(Of ImportDefinition)), exports As Lazy(Of IEnumerable(Of ExportDefinition)), metadata As Lazy(Of IDictionary(Of String, Object)), origin As ICompositionElement) As ComposablePartDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ CreatePartDefinition(Lazy&lt;Type ^&gt; ^ partType, bool isDisposalRequired, Lazy&lt;System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::ImportDefinition ^&gt; ^&gt; ^ imports, Lazy&lt;System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::ExportDefinition ^&gt; ^&gt; ^ exports, Lazy&lt;System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^&gt; ^ metadata, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberSignature Language="F#" Value="static member CreatePartDefinition : Lazy&lt;Type&gt; * bool * Lazy&lt;seq&lt;System.ComponentModel.Composition.Primitives.ImportDefinition&gt;&gt; * Lazy&lt;seq&lt;System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt; * Lazy&lt;System.Collections.Generic.IDictionary&lt;string, obj&gt;&gt; * System.ComponentModel.Composition.Primitives.ICompositionElement -&gt; System.ComponentModel.Composition.Primitives.ComposablePartDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreatePartDefinition (partType, isDisposalRequired, imports, exports, metadata, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ComposablePartDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partType" Type="System.Lazy&lt;System.Type&gt;" />
        <Parameter Name="isDisposalRequired" Type="System.Boolean" />
        <Parameter Name="imports" Type="System.Lazy&lt;System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.ImportDefinition&gt;&gt;" />
        <Parameter Name="exports" Type="System.Lazy&lt;System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt;" />
        <Parameter Name="metadata" Type="System.Lazy&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;&gt;" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="partType">
          <span data-ttu-id="f9b5b-164">Tipo della parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-164">The type of the part.</span>
          </span>
        </param>
        <param name="isDisposalRequired">
          <span data-ttu-id="f9b5b-165">
            <see langword="true" /> se la parte richiede l'eliminazione; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-165">
              <see langword="true" /> if the part requires disposal; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="imports">
          <span data-ttu-id="f9b5b-166">Raccolta delle importazioni della parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-166">A collection of the part's imports.</span>
          </span>
        </param>
        <param name="exports">
          <span data-ttu-id="f9b5b-167">Raccolta delle esportazioni della parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-167">A collection of the part's exports.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="f9b5b-168">Metadati della parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-168">The part's metadata.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="f9b5b-169">Origine della parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-169">The part's origin.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-170">Crea una definizione di parte con il tipo di parte, le importazioni, le esportazioni, i metadati e l'origine specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-170">Creates a part definition with the specified part type, imports, exports, metadata, and origin.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-171">Definizione di parte creata dai parametri specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-171">A part definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExportFactoryProductImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition GetExportFactoryProductImportDefinition (System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition GetExportFactoryProductImportDefinition(class System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportFactoryProductImportDefinition(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ GetExportFactoryProductImportDefinition(System::ComponentModel::Composition::Primitives::ImportDefinition ^ importDefinition);" />
      <MemberSignature Language="F#" Value="static member GetExportFactoryProductImportDefinition : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportFactoryProductImportDefinition importDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importDefinition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="importDefinition">
          <span data-ttu-id="f9b5b-172">Definizione di importazione da rappresentare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-172">The import definition to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-173">Restituisce una rappresentazione di una definizione di importazione come prodotto factory di esportazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-173">Returns a representation of an import definition as an export factory product.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-174">Rappresentazione della definizione di importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-174">The representation of the import definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExportingMember">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo GetExportingMember (System.ComponentModel.Composition.Primitives.ExportDefinition exportDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo GetExportingMember(class System.ComponentModel.Composition.Primitives.ExportDefinition exportDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportingMember(System.ComponentModel.Composition.Primitives.ExportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo GetExportingMember(System::ComponentModel::Composition::Primitives::ExportDefinition ^ exportDefinition);" />
      <MemberSignature Language="F#" Value="static member GetExportingMember : System.ComponentModel.Composition.Primitives.ExportDefinition -&gt; System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportingMember exportDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportDefinition" Type="System.ComponentModel.Composition.Primitives.ExportDefinition" />
      </Parameters>
      <Docs>
        <param name="exportDefinition">
          <span data-ttu-id="f9b5b-175">Definizione di esportazione da esaminare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-175">The export definition to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-176">Ottiene il membro di esportazione da una definizione di esportazione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-176">Gets the exporting member from a specified export definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-177">Membro specificato nella definizione di esportazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-177">The member specified in the export definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9b5b-178">
            <paramref name="exportDefinition" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-178">
              <paramref name="exportDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImportingMember">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo GetImportingMember (System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo GetImportingMember(class System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingMember(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo GetImportingMember(System::ComponentModel::Composition::Primitives::ImportDefinition ^ importDefinition);" />
      <MemberSignature Language="F#" Value="static member GetImportingMember : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingMember importDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importDefinition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="importDefinition">
          <span data-ttu-id="f9b5b-179">Definizione di importazione da esaminare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-179">The import definition to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-180">Ottiene il membro di importazione da una definizione di importazione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-180">Gets the importing member from a specified import definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-181">Membro specificato nella definizione di importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-181">The member specified in the import definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9b5b-182">
            <paramref name="importDefinition" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-182">
              <paramref name="importDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImportingParameter">
      <MemberSignature Language="C#" Value="public static Lazy&lt;System.Reflection.ParameterInfo&gt; GetImportingParameter (System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Lazy`1&lt;class System.Reflection.ParameterInfo&gt; GetImportingParameter(class System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Lazy&lt;System::Reflection::ParameterInfo ^&gt; ^ GetImportingParameter(System::ComponentModel::Composition::Primitives::ImportDefinition ^ importDefinition);" />
      <MemberSignature Language="F#" Value="static member GetImportingParameter : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; Lazy&lt;System.Reflection.ParameterInfo&gt;" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingParameter importDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;System.Reflection.ParameterInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importDefinition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="importDefinition">
          <span data-ttu-id="f9b5b-183">Definizione di importazione da esaminare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-183">The import definition to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-184">Ottiene il parametro di importazione da una definizione di importazione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-184">Gets the importing parameter from a specified import definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-185">Parametro specificato nella definizione di importazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-185">The parameter specified in the import definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9b5b-186">
            <paramref name="importDefinition" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-186">
              <paramref name="importDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartType">
      <MemberSignature Language="C#" Value="public static Lazy&lt;Type&gt; GetPartType (System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Lazy`1&lt;class System.Type&gt; GetPartType(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetPartType(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPartType (partDefinition As ComposablePartDefinition) As Lazy(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Lazy&lt;Type ^&gt; ^ GetPartType(System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ partDefinition);" />
      <MemberSignature Language="F#" Value="static member GetPartType : System.ComponentModel.Composition.Primitives.ComposablePartDefinition -&gt; Lazy&lt;Type&gt;" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetPartType partDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partDefinition" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Parameters>
      <Docs>
        <param name="partDefinition">
          <span data-ttu-id="f9b5b-187">Definizione di parte da esaminare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-187">The part definition to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-188">Ottiene il tipo di una parte da una definizione di parte specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-188">Gets the type of a part from a specified part definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-189">Tipo della parte definita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-189">The type of the defined part.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9b5b-190">
            <paramref name="partDefinition" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-190">
              <paramref name="partDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsDisposalRequired">
      <MemberSignature Language="C#" Value="public static bool IsDisposalRequired (System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDisposalRequired(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsDisposalRequired(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDisposalRequired (partDefinition As ComposablePartDefinition) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDisposalRequired(System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ partDefinition);" />
      <MemberSignature Language="F#" Value="static member IsDisposalRequired : System.ComponentModel.Composition.Primitives.ComposablePartDefinition -&gt; bool" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsDisposalRequired partDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partDefinition" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Parameters>
      <Docs>
        <param name="partDefinition">
          <span data-ttu-id="f9b5b-191">Parte da esaminare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-191">The part to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-192">Determina se la parte specificata richiede l'eliminazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-192">Determines whether the specified part requires disposal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-193">
            <see langword="true" /> se la parte richiede l'eliminazione; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-193">
              <see langword="true" /> if the part requires disposal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9b5b-194">
            <paramref name="partDefinition" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-194">
              <paramref name="partDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsExportFactoryImportDefinition">
      <MemberSignature Language="C#" Value="public static bool IsExportFactoryImportDefinition (System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsExportFactoryImportDefinition(class System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsExportFactoryImportDefinition(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsExportFactoryImportDefinition(System::ComponentModel::Composition::Primitives::ImportDefinition ^ importDefinition);" />
      <MemberSignature Language="F#" Value="static member IsExportFactoryImportDefinition : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; bool" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsExportFactoryImportDefinition importDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importDefinition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="importDefinition">
          <span data-ttu-id="f9b5b-195">Definizione di importazione da controllare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-195">The import definition to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-196">Indica se una definizione di importazione specificata rappresenta una factory di esportazione (oggetto <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> o <see cref="T:System.ComponentModel.Composition.ExportFactory`2" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-196">Indicates whether a specified import definition represents an export factory (<see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> or <see cref="T:System.ComponentModel.Composition.ExportFactory`2" /> object).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-197">
            <see langword="true" /> se la definizione di importazione specificata rappresenta una factory di esportazione; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-197">
              <see langword="true" /> if the specified import definition represents an export factory; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImportingParameter">
      <MemberSignature Language="C#" Value="public static bool IsImportingParameter (System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsImportingParameter(class System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsImportingParameter(System::ComponentModel::Composition::Primitives::ImportDefinition ^ importDefinition);" />
      <MemberSignature Language="F#" Value="static member IsImportingParameter : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; bool" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsImportingParameter importDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importDefinition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="importDefinition">
          <span data-ttu-id="f9b5b-198">Definizione di importazione da esaminare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-198">The import definition to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-199">Determina se una definizione di importazione rappresenta un membro o un parametro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-199">Determines whether an import definition represents a member or a parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-200">
            <see langword="true" /> se la definizione di importazione rappresenta un parametro; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-200">
              <see langword="true" /> if the import definition represents a parameter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9b5b-201">
            <paramref name="importDefinition" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-201">
              <paramref name="importDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryMakeGenericPartDefinition">
      <MemberSignature Language="C#" Value="public static bool TryMakeGenericPartDefinition (System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition, System.Collections.Generic.IEnumerable&lt;Type&gt; genericParameters, out System.ComponentModel.Composition.Primitives.ComposablePartDefinition specialization);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryMakeGenericPartDefinition(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition, class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; genericParameters, [out] class System.ComponentModel.Composition.Primitives.ComposablePartDefinition&amp; specialization) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.TryMakeGenericPartDefinition(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Collections.Generic.IEnumerable{System.Type},System.ComponentModel.Composition.Primitives.ComposablePartDefinition@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryMakeGenericPartDefinition (partDefinition As ComposablePartDefinition, genericParameters As IEnumerable(Of Type), ByRef specialization As ComposablePartDefinition) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryMakeGenericPartDefinition(System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ partDefinition, System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ genericParameters, [Runtime::InteropServices::Out] System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ % specialization);" />
      <MemberSignature Language="F#" Value="static member TryMakeGenericPartDefinition : System.ComponentModel.Composition.Primitives.ComposablePartDefinition * seq&lt;Type&gt; *  -&gt; bool" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.TryMakeGenericPartDefinition (partDefinition, genericParameters, specialization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partDefinition" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
        <Parameter Name="genericParameters" Type="System.Collections.Generic.IEnumerable&lt;System.Type&gt;" />
        <Parameter Name="specialization" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="partDefinition">
          <span data-ttu-id="f9b5b-202">Definizione di parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-202">The part definition.</span>
          </span>
        </param>
        <param name="genericParameters">
          <span data-ttu-id="f9b5b-203">Raccolta di tipi per specificare i parametri generici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-203">A collection of types to specify the generic parameters.</span>
          </span>
        </param>
        <param name="specialization">
          <span data-ttu-id="f9b5b-204">Quando in questo metodo viene eseguita la restituzione, contiene la definizione della parte specializzata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-204">When this method returns, contains the specialized part definition.</span>
          </span>
          <span data-ttu-id="f9b5b-205">Questo parametro viene trattato come non inizializzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-205">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9b5b-206">Indica se una definizione generica della parte può essere resa più specifica con i parametri forniti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-206">Indicates whether a generic part definition can be specialized with the provided parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9b5b-207">
            <see langword="true" /> se la specializzazione ha esito positivo; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9b5b-207">
              <see langword="true" /> if the specialization succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>