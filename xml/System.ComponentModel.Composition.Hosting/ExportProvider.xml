<Type Name="ExportProvider" FullName="System.ComponentModel.Composition.Hosting.ExportProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="feaba0f39f4c97d4382696a62812176466ac5e69" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36643632" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExportProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExportProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.Hosting.ExportProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExportProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExportProvider abstract" />
  <TypeSignature Language="F#" Value="type ExportProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Recupera esportazioni che corrispondono a un oggetto <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> specificato.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExportProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExportProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanged As EventHandler(Of ExportsChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanged;" />
      <MemberSignature Language="F#" Value="member this.ExportsChanged : EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " Usage="member this.ExportsChanged : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando le esportazioni nell'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> vengono modificate.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanging As EventHandler(Of ExportsChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanging;" />
      <MemberSignature Language="F#" Value="member this.ExportsChanging : EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " Usage="member this.ExportsChanging : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando vengono modificate le esportazioni fornite.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExport&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene un'esportazione specificata.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) () As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; Lazy&lt;'T&gt;" Usage="exportProvider.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parametro di tipo dell'oggetto <see cref="T:System.Lazy`1" /> da restituire. Anche il nome di contratto viene derivato da questo parametro di tipo.</typeparam>
        <summary>Restituisce l'esportazione con il nome di contratto derivato dal parametro di tipo specificato. Se non è presente esattamente un'esportazione corrispondente, viene generata un'eccezione.</summary>
        <returns>Esportazione con il nome di contratto derivato dal parametro di tipo specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome del contratto è il risultato della chiamata di <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metodo su `T`.  
  
 Il nome del contratto viene confrontato con il <xref:System.StringComparer.Ordinal%2A> proprietà per eseguire un confronto non linguistico, distinzione maiuscole/minuscole.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Sono presenti zero oggetti <see cref="T:System.Lazy`1" /> con il nome di contratto derivato da <paramref name="T" /> nell'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  -oppure- Sono presenti più oggetti <see cref="T:System.Lazy`1" /> con il nome di contratto derivato da <paramref name="T" /> nell'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) (contractName As String) As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; Lazy&lt;'T&gt;" Usage="exportProvider.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parametro di tipo dell'oggetto <see cref="T:System.Lazy`1" /> da restituire.</typeparam>
        <param name="contractName">Nome di contratto dell'oggetto <see cref="T:System.Lazy`1" /> da restituire oppure <see langword="null" /> oppure una stringa vuota ("") per utilizzare il nome di contratto predefinito.</param>
        <summary>Restituisce l'esportazione con il nome di contratto specificato. Se non è presente esattamente un'esportazione corrispondente, viene generata un'eccezione.</summary>
        <returns>Esportazione con il nome di contratto specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome di contratto predefinito è il risultato della chiamata di <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metodo su `T`.  
  
 Il nome del contratto viene confrontato con il <xref:System.StringComparer.Ordinal%2A> proprietà per eseguire un confronto non linguistico, distinzione maiuscole/minuscole.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Sono presenti zero oggetti <see cref="T:System.Lazy`1" /> con il nome di contratto derivato da <paramref name="T" /> nell'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  -oppure- Sono presenti più oggetti <see cref="T:System.Lazy`1" /> con il nome di contratto derivato da <paramref name="T" /> nell'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) () As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; Lazy&lt;'T, 'MetadataView&gt;" Usage="exportProvider.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parametro di tipo dell'oggetto <see cref="T:System.Lazy`2" /> da restituire. Anche il nome di contratto viene derivato da questo parametro di tipo.</typeparam>
        <typeparam name="TMetadataView">Tipo della visualizzazione di metadati dell'oggetto <see cref="T:System.Lazy`2" /> da restituire.</typeparam>
        <summary>Restituisce l'esportazione con il nome di contratto derivato dal parametro di tipo specificato. Se non è presente esattamente un'esportazione corrispondente, viene generata un'eccezione.</summary>
        <returns>System.Lazy`2</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome del contratto è il risultato della chiamata di <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metodo su `T`.  
  
 Il nome del contratto viene confrontato con il <xref:System.StringComparer.Ordinal%2A> proprietà per eseguire un confronto non linguistico, distinzione maiuscole/minuscole.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Sono presenti zero oggetti <see cref="T:System.Lazy`2" /> con il nome di contratto derivato da <paramref name="T" /> nell'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  -oppure- Sono presenti più oggetti <see cref="T:System.Lazy`2" /> con il nome di contratto derivato da <paramref name="T" /> nell'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="TMetadataView" /> non è un tipo di visualizzazione di metadati valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) (contractName As String) As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; Lazy&lt;'T, 'MetadataView&gt;" Usage="exportProvider.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parametro di tipo dell'oggetto <see cref="T:System.Lazy`2" /> da restituire.</typeparam>
        <typeparam name="TMetadataView">Tipo della visualizzazione di metadati dell'oggetto <see cref="T:System.Lazy`2" /> da restituire.</typeparam>
        <param name="contractName">Nome di contratto dell'oggetto <see cref="T:System.Lazy`2" /> da restituire oppure <see langword="null" /> oppure una stringa vuota ("") per utilizzare il nome di contratto predefinito.</param>
        <summary>Restituisce l'esportazione con il nome di contratto specificato. Se non è presente esattamente un'esportazione corrispondente, viene generata un'eccezione.</summary>
        <returns>Esportazione con il nome di contratto specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome di contratto predefinito è il risultato della chiamata di <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metodo su `T`.  
  
 Il nome del contratto viene confrontato con il <xref:System.StringComparer.Ordinal%2A> proprietà per eseguire un confronto non linguistico, distinzione maiuscole/minuscole.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Sono presenti zero oggetti <see cref="T:System.Lazy`2" /> con il nome di contratto derivato da <paramref name="T" /> nell'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  -oppure- Sono presenti più oggetti <see cref="T:System.Lazy`2" /> con il nome di contratto derivato da <paramref name="T" /> nell'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="TMetadataView" /> non è un tipo di visualizzazione di metadati valido.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValue&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene un oggetto esportato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValue : unit -&gt; 'T" Usage="exportProvider.GetExportedValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Tipo dell'oggetto esportato da restituire. Anche il nome di contratto viene derivato da questo parametro di tipo.</typeparam>
        <summary>Restituisce l'oggetto esportato con il nome di contratto derivato dal parametro di tipo specificato. Se non è presente esattamente un oggetto esportato corrispondente, viene generata un'eccezione.</summary>
        <returns>Oggetto esportato con il nome di contratto derivato dal parametro di tipo specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome del contratto è il risultato della chiamata di <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metodo su `T`.  
  
 Il nome del contratto viene confrontato con il <xref:System.StringComparer.Ordinal%2A> proprietà per eseguire un confronto non linguistico, distinzione maiuscole/minuscole.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Sono presenti zero oggetti esportati con il nome del contratto derivato da <paramref name="T" /> in <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  -oppure- Sono presenti più oggetti esportati con il nome di contratto derivato da <paramref name="T" /> in <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Non è possibile eseguire il cast dell'oggetto esportato sottostante a un oggetto <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Si è verificato un errore durante la composizione. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> conterrà una raccolta di errori riscontrati.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValue : string -&gt; 'T" Usage="exportProvider.GetExportedValue contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo dell'oggetto esportato da restituire.</typeparam>
        <param name="contractName">Nome di contratto dell'oggetto esportato da restituire oppure <see langword="null" /> oppure una stringa vuota ("") per utilizzare il nome di contratto predefinito.</param>
        <summary>Restituisce l'oggetto esportato con il nome di contratto specificato. Se non è presente esattamente un oggetto esportato corrispondente, viene generata un'eccezione.</summary>
        <returns>Oggetto esportato con il nome di contratto specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome di contratto predefinito è il risultato della chiamata di <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metodo su `T`.  
  
 Il nome del contratto viene confrontato con il <xref:System.StringComparer.Ordinal%2A> proprietà per eseguire un confronto non linguistico, distinzione maiuscole/minuscole.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Sono presenti zero oggetti esportati con il nome del contratto derivato da <paramref name="T" /> in <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  -oppure- Sono presenti più oggetti esportati con il nome di contratto derivato da <paramref name="T" /> in <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Non è possibile eseguire il cast dell'oggetto esportato sottostante a un oggetto <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Si è verificato un errore durante la composizione. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> conterrà una raccolta di errori riscontrati.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene un oggetto esportato specificato o un valore predefinito se non è disponibile.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValueOrDefault : unit -&gt; 'T" Usage="exportProvider.GetExportedValueOrDefault " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Tipo dell'oggetto esportato da restituire. Anche il nome di contratto viene derivato da questo parametro di tipo.</typeparam>
        <summary>Ottiene l'oggetto esportato con il nome di contratto derivato dal parametro di tipo specificato o il valore predefinito per il tipo specificato oppure genera un'eccezione se è presente più di un oggetto esportato corrispondente.</summary>
        <returns>Oggetto esportato con il nome di contratto derivato da <paramref name="T" />, se viene trovato. In caso contrario, il valore predefinito per <paramref name="T" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non viene trovato l'oggetto esportato, questo metodo restituisce il valore predefinito per `T`, ad esempio, per i tipi integer, zero `false` per i tipi Boolean e `null` per i tipi di riferimento.  
  
 Il nome del contratto è il risultato della chiamata di <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metodo su `T`.  
  
 Il nome del contratto viene confrontato con il <xref:System.StringComparer.Ordinal%2A> proprietà per eseguire un confronto non linguistico, distinzione maiuscole/minuscole.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Sono presenti più oggetti esportati con il nome di contratto derivato da <paramref name="T" /> in <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Non è possibile eseguire il cast dell'oggetto esportato sottostante a un oggetto <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Si è verificato un errore durante la composizione. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> conterrà una raccolta di errori riscontrati.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValueOrDefault : string -&gt; 'T" Usage="exportProvider.GetExportedValueOrDefault contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo dell'oggetto esportato da restituire.</typeparam>
        <param name="contractName">Nome di contratto dell'oggetto esportato da restituire oppure <see langword="null" /> oppure una stringa vuota ("") per utilizzare il nome di contratto predefinito.</param>
        <summary>Ottiene l'oggetto esportato con il nome di contratto specificato o il valore predefinito per il tipo specificato oppure genera un'eccezione se è presente più di un oggetto esportato corrispondente.</summary>
        <returns>Oggetto esportato con il nome di contratto specificato, se viene trovato. In caso contrario, il valore predefinito per <paramref name="T" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non viene trovato l'oggetto esportato, questo metodo restituisce il valore predefinito per `T`, ad esempio, per i tipi integer, zero `false` per i tipi Boolean e `null` per i tipi di riferimento.  
  
 Il nome di contratto predefinito è il risultato della chiamata di <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metodo su `T`.  
  
 Il nome del contratto viene confrontato con il <xref:System.StringComparer.Ordinal%2A> proprietà per eseguire un confronto non linguistico, distinzione maiuscole/minuscole.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Sono presenti più oggetti esportati con il nome di contratto specificato in <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Non è possibile eseguire il cast dell'oggetto esportato sottostante a un oggetto <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Si è verificato un errore durante la composizione. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> conterrà una raccolta di errori riscontrati.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValues&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene uno o più oggetti esportati.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) () As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValues : unit -&gt; seq&lt;'T&gt;" Usage="exportProvider.GetExportedValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Tipo dell'oggetto esportato da restituire. Anche il nome di contratto viene derivato da questo parametro di tipo.</typeparam>
        <summary>Ottiene tutti gli oggetti esportati con il nome di contratto derivato dal parametro di tipo specificato.</summary>
        <returns>Oggetti esportati con il nome di contratto derivato dal parametro di tipo specificato, se viene trovato. In caso contrario, un oggetto <see cref="T:System.Collections.ObjectModel.Collection`1" /> vuoto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome del contratto è il risultato della chiamata di <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metodo su `T`.  
  
 Il nome del contratto viene confrontato con il <xref:System.StringComparer.Ordinal%2A> proprietà per eseguire un confronto non linguistico, distinzione maiuscole/minuscole.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Non è possibile eseguire il cast di uno o più degli oggetti esportati sottostanti a <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Si è verificato un errore durante la composizione. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> conterrà una raccolta di errori riscontrati.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) (contractName As String) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValues : string -&gt; seq&lt;'T&gt;" Usage="exportProvider.GetExportedValues contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo dell'oggetto esportato da restituire.</typeparam>
        <param name="contractName">Nome di contratto degli oggetti esportati da restituire oppure <see langword="null" /> oppure una stringa vuota ("") per utilizzare il nome di contratto predefinito.</param>
        <summary>Ottiene tutti gli oggetti esportati con il nome di contratto specificato.</summary>
        <returns>Oggetti esportati con il nome di contratto specificato, se viene trovato. In caso contrario, un oggetto <see cref="T:System.Collections.ObjectModel.Collection`1" /> vuoto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome di contratto predefinito è il risultato della chiamata di <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metodo su `T`.  
  
 Il nome del contratto viene confrontato con il <xref:System.StringComparer.Ordinal%2A> proprietà per eseguire un confronto non linguistico, distinzione maiuscole/minuscole.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Non è possibile eseguire il cast di uno o più dei valori esportati sottostanti a <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Si è verificato un errore durante la composizione. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> conterrà una raccolta di errori riscontrati.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExports">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene tutte le esportazioni che corrispondono alle condizioni specificate.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports (definition As ImportDefinition) As IEnumerable(Of Export)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition);" />
      <MemberSignature Language="F#" Value="member this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExports definition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="definition">Oggetto che definisce le condizioni degli oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> da ottenere.</param>
        <summary>Ottiene tutte le esportazioni che corrispondono alle condizioni della definizione dell'importazione specificata.</summary>
        <returns>Raccolta di tutti gli oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> che corrispondono alla condizione specificata da <paramref name="definition" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
          <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> è <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> e sono presenti zero oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> che soddisfano le condizioni dell'oggetto <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> specificato.  -oppure- <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> è <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> o <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> e sono presenti più oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> che soddisfano le condizioni dell'oggetto <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> specificato.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="definition" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberSignature Language="F#" Value="member this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExports (definition, atomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">Oggetto che definisce le condizioni degli oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> da ottenere.</param>
        <param name="atomicComposition">Contenitore transazionale per la composizione.</param>
        <summary>Ottiene tutte le esportazioni che corrispondono alle condizioni della definizione e della composizione dell'importazione specificate.</summary>
        <returns>Raccolta di tutti gli oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> che corrispondono alla condizione specificata da <paramref name="definition" /> e <paramref name="atomicComposition" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
          <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> è <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> e sono presenti zero oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> che soddisfano le condizioni dell'oggetto <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> specificato.  -oppure- <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> è <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> o <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> e sono presenti più oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> che soddisfano le condizioni dell'oggetto <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> specificato.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="definition" /> è <see langword="null" />.  oppure <paramref name="atomicComposition" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;object,object&gt;&gt; GetExports (Type type, Type metadataViewType, string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;object, object&gt;&gt; GetExports(class System.Type type, class System.Type metadataViewType, string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;System::Object ^, System::Object ^&gt; ^&gt; ^ GetExports(Type ^ type, Type ^ metadataViewType, System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : Type * Type * string -&gt; seq&lt;Lazy&lt;obj, obj&gt;&gt;" Usage="exportProvider.GetExports (type, metadataViewType, contractName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;System.Object,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="metadataViewType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Parametro di tipo degli oggetti <see cref="T:System.Lazy`2" /> da restituire.</param>
        <param name="metadataViewType">Tipo della visualizzazione di metadati degli oggetti <see cref="T:System.Lazy`2" /> da restituire.</param>
        <param name="contractName">Nome di contratto dell'oggetto <see cref="T:System.Lazy`2" /> da restituire oppure <see langword="null" /> oppure una stringa vuota ("") per utilizzare il nome di contratto predefinito.</param>
        <summary>Ottiene tutte le esportazioni con il nome di contratto specificato.</summary>
        <returns>Raccolta di tutti gli oggetti <see cref="T:System.Lazy`2" /> per il contratto che corrisponde a <paramref name="contractName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome di contratto predefinito è il risultato della chiamata di <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metodo su `type`.  
  
 Il nome del contratto viene confrontato con il <xref:System.StringComparer.Ordinal%2A> proprietà per eseguire un confronto non linguistico, distinzione maiuscole/minuscole.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="metadataViewType" /> non è un tipo di visualizzazione di metadati valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) () As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;Lazy&lt;'T&gt;&gt;" Usage="exportProvider.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parametro di tipo degli oggetti <see cref="T:System.Lazy`1" /> da restituire. Anche il nome di contratto viene derivato da questo parametro di tipo.</typeparam>
        <summary>Ottiene tutte le esportazioni con il nome di contratto derivato dal parametro di tipo specificato.</summary>
        <returns>Oggetti <see cref="T:System.Lazy`1" /> con il nome di contratto derivato da <paramref name="T" />, se viene trovato. In caso contrario, un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> vuoto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome del contratto è il risultato della chiamata di <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metodo su `T`.  
  
 Il nome del contratto viene confrontato con il <xref:System.StringComparer.Ordinal%2A> proprietà per eseguire un confronto non linguistico, distinzione maiuscole/minuscole.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) (contractName As String) As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;Lazy&lt;'T&gt;&gt;" Usage="exportProvider.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parametro di tipo degli oggetti <see cref="T:System.Lazy`1" /> da restituire.</typeparam>
        <param name="contractName">Nome di contratto degli oggetti <see cref="T:System.Lazy`1" /> da restituire oppure <see langword="null" /> oppure una stringa vuota ("") per utilizzare il nome di contratto predefinito.</param>
        <summary>Ottiene tutte le esportazioni con il nome di contratto specificato.</summary>
        <returns>Oggetti <see cref="T:System.Lazy`1" /> con il nome di contratto specificato, se viene trovato. In caso contrario, un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> vuoto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome di contratto predefinito è il risultato della chiamata di <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metodo su `T`.  
  
 Il nome del contratto viene confrontato con il <xref:System.StringComparer.Ordinal%2A> proprietà per eseguire un confronto non linguistico, distinzione maiuscole/minuscole.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) () As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;Lazy&lt;'T, 'MetadataView&gt;&gt;" Usage="exportProvider.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parametro di tipo degli oggetti <see cref="T:System.Lazy`2" /> da restituire. Anche il nome di contratto viene derivato da questo parametro di tipo.</typeparam>
        <typeparam name="TMetadataView">Tipo della visualizzazione di metadati degli oggetti <see cref="T:System.Lazy`2" /> da restituire.</typeparam>
        <summary>Ottiene tutte le esportazioni con il nome di contratto derivato dal parametro di tipo specificato.</summary>
        <returns>Oggetti <see cref="T:System.Lazy`2" /> con il nome di contratto derivato da <paramref name="T" />, se viene trovato. In caso contrario, un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> vuoto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome del contratto è il risultato della chiamata di <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metodo su `T`.  
  
 Il nome del contratto viene confrontato con il <xref:System.StringComparer.Ordinal%2A> proprietà per eseguire un confronto non linguistico, distinzione maiuscole/minuscole.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="TMetadataView" /> non è un tipo di visualizzazione di metadati valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) (contractName As String) As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;Lazy&lt;'T, 'MetadataView&gt;&gt;" Usage="exportProvider.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parametro di tipo degli oggetti <see cref="T:System.Lazy`2" /> da restituire. Anche il nome di contratto viene derivato da questo parametro di tipo.</typeparam>
        <typeparam name="TMetadataView">Tipo della visualizzazione di metadati degli oggetti <see cref="T:System.Lazy`2" /> da restituire.</typeparam>
        <param name="contractName">Nome di contratto degli oggetti <see cref="T:System.Lazy`2" /> da restituire oppure <see langword="null" /> oppure una stringa vuota ("") per utilizzare il nome di contratto predefinito.</param>
        <summary>Ottiene tutte le esportazioni con il nome di contratto specificato.</summary>
        <returns>Oggetti <see cref="T:System.Lazy`2" /> con il nome di contratto specificato, se viene trovato. In caso contrario, un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> vuoto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome di contratto predefinito è il risultato della chiamata di <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metodo su `T`.  
  
 Il nome del contratto viene confrontato con il <xref:System.StringComparer.Ordinal%2A> proprietà per eseguire un confronto non linguistico, distinzione maiuscole/minuscole.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="TMetadataView" /> non è un tipo di visualizzazione di metadati valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportsCore">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExportsCore(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberSignature Language="F#" Value="abstract member GetExportsCore : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExportsCore (definition, atomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">Oggetto che definisce le condizioni degli oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> da restituire.</param>
        <param name="atomicComposition">Contenitore transazionale per la composizione.</param>
        <summary>Ottiene tutte le esportazioni che corrispondono al vincolo definito dalla definizione specificata.</summary>
        <returns>Raccolta contenente tutte le esportazioni che corrispondono alla condizione specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esegue l'override di questo metodo non devono considerare mancate corrispondenze relative alla cardinalità come errori e non devono generare eccezioni in questi casi. Ad esempio, se <xref:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality%2A> viene <xref:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne> e sono presenti zero <xref:System.ComponentModel.Composition.Primitives.Export> oggetti che soddisfano le condizioni dell'oggetto specificato <xref:System.ComponentModel.Composition.Primitives.ImportDefinition>, vuota <xref:System.Collections.Generic.IEnumerable%601> raccolta deve essere restituita.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanged (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanged(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanged (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanged(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnExportsChanged : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit&#xA;override this.OnExportsChanged : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit" Usage="exportProvider.OnExportsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanging (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanging(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanging (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanging(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnExportsChanging : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit&#xA;override this.OnExportsChanging : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit" Usage="exportProvider.OnExportsChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExports">
      <MemberSignature Language="C#" Value="public bool TryGetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, out System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, [out] class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt;&amp; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition, [Runtime::InteropServices::Out] System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ % exports);" />
      <MemberSignature Language="F#" Value="member this.TryGetExports : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition *  -&gt; bool" Usage="exportProvider.TryGetExports (definition, atomicComposition, exports)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="definition">Oggetto che definisce le condizioni degli oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> da ottenere.</param>
        <param name="atomicComposition">Contenitore transazionale per la composizione.</param>
        <param name="exports">Quando questo metodo termina, contiene una raccolta di oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> che corrispondono alle condizioni definite da <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />, se viene trovato. In caso contrario, un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> vuoto. Questo parametro viene passato non inizializzato.</param>
        <summary>Ottiene tutte le esportazioni che corrispondono alle condizioni dell'importazione specificata.</summary>
        <returns>
          <see langword="true" /> se <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> è <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> o <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore" /> e sono presenti zero oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> che corrispondono alle condizioni dell'oggetto <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> specificato; <see langword="true" /> se <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> è <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> o <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> ed è presente esattamente un oggetto <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> che corrisponde alle condizioni dell'oggetto <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> specificato; in caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="definition" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>