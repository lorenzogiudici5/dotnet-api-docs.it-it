<Type Name="CompositionContainer" FullName="System.ComponentModel.Composition.Hosting.CompositionContainer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="531be8b9445e82ab2acefc549474a24be1a166d3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30370305" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompositionContainer : System.ComponentModel.Composition.Hosting.ExportProvider, IDisposable, System.ComponentModel.Composition.ICompositionService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositionContainer extends System.ComponentModel.Composition.Hosting.ExportProvider implements class System.ComponentModel.Composition.ICompositionService, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />
  <TypeSignature Language="VB.NET" Value="Public Class CompositionContainer&#xA;Inherits ExportProvider&#xA;Implements ICompositionService, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompositionContainer : System::ComponentModel::Composition::Hosting::ExportProvider, IDisposable, System::ComponentModel::Composition::ICompositionService" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Composition.Hosting.ExportProvider</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Composition.ICompositionService</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Gestisce la composizione di parti.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> oggetto ha due scopi principali in un'applicazione. Innanzitutto, tiene traccia di quali parti sono disponibili per la composizione e quali sono le relative dipendenze ed esegue la composizione ogni volta che il set di parti disponibili le modifiche. In secondo luogo, fornisce i metodi con cui l'applicazione ottiene le istanze di parti composte o riempie le dipendenze di una parte componibile.  
  
> [!IMPORTANT]
>  Questo tipo implementa il <xref:System.IDisposable> interfaccia. Dopo aver utilizzato il tipo, è necessario eliminarlo direttamente o indirettamente. Per eliminare direttamente il tipo, chiamare il relativo <xref:System.IDisposable.Dispose%2A> metodo in un `try` / `catch` blocco. Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio come ad esempio `using` in C# o `Using` in Visual Basic. Per ulteriori informazioni, vedere la sezione "Utilizzo di oggetti che implementano IDisposable" nel <xref:System.IDisposable> argomento relativo all'interfaccia.  
  
 Le parti possono essere resi disponibili per il contenitore sia direttamente o tramite il <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog%2A> proprietà. Tutte le parti individuabili in questo <xref:System.ComponentModel.Composition.Primitives.ComposablePartCatalog> sono disponibili per il contenitore per soddisfare le importazioni, insieme a tutte le parti aggiunte direttamente.  
  
 Il <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A> metodo consente alle parti di un'istanza da aggiungere a un contenitore esistente. Se la composizione ha esito positivo, queste parti avrà le importazioni riempite con parti recuperate dal contenitore e le esportazioni sarà disponibile ad altre parti. Le importazioni contrassegnate come ricomponibile verranno registrate per la ricomposizione.  
  
 Il <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce%2A> metodo consente a una parte di disporre di importazioni riempite senza essere aggiunte al contenitore. Se la composizione ha esito positivo, verranno compilate importazioni della parte, ma le esportazioni della parte non sarà disponibile ad altre parti e nessuna importazione verranno registrata per la ricomposizione.  
  
 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> gli oggetti devono sempre essere eliminati. Quando il <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose%2A> metodo viene chiamato, il <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> oggetto elimina anche tutte le parti che ha creato.  
  
 A <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> oggetto a cui è possibile accedere da più thread deve essere costruito con la `isThreadSafe` parametro impostato su `true`, usando il <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.%23ctor%28System.ComponentModel.Composition.Primitives.ComposablePartCatalog%2CSystem.Boolean%2CSystem.ComponentModel.Composition.Hosting.ExportProvider%5B%5D%29> costruttore. Le prestazioni sono leggermente più lente quando `isThreadSafe` è `true`, pertanto è consigliabile impostare questo parametro `false` in scenari a thread singolo. Il valore predefinito è `false`.  
  
> [!WARNING]
>  Oggetto <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> non deve mai importare se stesso, o una parte che contiene un riferimento a esso. Tale riferimento può consentire una parte non attendibile accedere a tutte le parti nel contenitore.  
  
   
  
## Examples  
 Nell'esempio seguente, un <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> oggetto viene inizializzato con un catalogo e viene utilizzato per riempire le importazioni di una parte. Questo esempio viene utilizzato il modello di programmazione con attributi.  
  
 [!code-csharp[Composition.CompositionContainer#1](~/samples/snippets/csharp/VS_Snippets_Misc/composition.compositioncontainer/cs/program.cs#1)]
 [!code-vb[Composition.CompositionContainer#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/composition.compositioncontainer/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositionContainer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer (params System.ComponentModel.Composition.Hosting.ExportProvider[] providers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Composition.Hosting.ExportProvider[] providers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray providers As ExportProvider())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositionContainer(... cli::array &lt;System::ComponentModel::Composition::Hosting::ExportProvider ^&gt; ^ providers);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providers" Type="System.ComponentModel.Composition.Hosting.ExportProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="providers">Matrice di oggetti <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> che forniscono a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> l'accesso a oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> oppure <see langword="null" /> per impostare <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> su un oggetto <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> vuoto.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> con i provider di esportazione specificati.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="providers" /> contiene un elemento <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer (System.ComponentModel.Composition.Hosting.CompositionOptions compositionOptions, params System.ComponentModel.Composition.Hosting.ExportProvider[] providers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ComponentModel.Composition.Hosting.CompositionOptions compositionOptions, class System.ComponentModel.Composition.Hosting.ExportProvider[] providers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositionContainer(System::ComponentModel::Composition::Hosting::CompositionOptions compositionOptions, ... cli::array &lt;System::ComponentModel::Composition::Hosting::ExportProvider ^&gt; ^ providers);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="compositionOptions" Type="System.ComponentModel.Composition.Hosting.CompositionOptions" />
        <Parameter Name="providers" Type="System.ComponentModel.Composition.Hosting.ExportProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="compositionOptions">Oggetto che specifica il comportamento del contenitore.</param>
        <param name="providers">Matrice di oggetti <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> che forniscono a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> l'accesso a oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> oppure <see langword="null" /> per impostare <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> su un oggetto <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> vuoto.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> con i provider e le opzioni di esportazione specificati.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="providers" /> contiene un elemento <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer (System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, params System.ComponentModel.Composition.Hosting.ExportProvider[] providers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, class System.ComponentModel.Composition.Hosting.ExportProvider[] providers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (catalog As ComposablePartCatalog, ParamArray providers As ExportProvider())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositionContainer(System::ComponentModel::Composition::Primitives::ComposablePartCatalog ^ catalog, ... cli::array &lt;System::ComponentModel::Composition::Hosting::ExportProvider ^&gt; ^ providers);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="catalog" Type="System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />
        <Parameter Name="providers" Type="System.ComponentModel.Composition.Hosting.ExportProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">Catalogo che fornisce oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</param>
        <param name="providers">Matrice di oggetti <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> che forniscono a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> l'accesso a oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> oppure <see langword="null" /> per impostare <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> su un oggetto <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> vuoto.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> con i provider di catalogo e di esportazione specificati.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="providers" /> contiene un elemento <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer (System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, bool isThreadSafe, params System.ComponentModel.Composition.Hosting.ExportProvider[] providers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, bool isThreadSafe, class System.ComponentModel.Composition.Hosting.ExportProvider[] providers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (catalog As ComposablePartCatalog, isThreadSafe As Boolean, ParamArray providers As ExportProvider())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositionContainer(System::ComponentModel::Composition::Primitives::ComposablePartCatalog ^ catalog, bool isThreadSafe, ... cli::array &lt;System::ComponentModel::Composition::Hosting::ExportProvider ^&gt; ^ providers);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="catalog" Type="System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
        <Parameter Name="providers" Type="System.ComponentModel.Composition.Hosting.ExportProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">Catalogo che fornisce oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</param>
        <param name="isThreadSafe">
          <see langword="true" /> se questo oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> deve essere thread-safe. In caso contrario, <see langword="false" />.</param>
        <param name="providers">Matrice di oggetti <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> che forniscono a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> l'accesso a oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> oppure <see langword="null" /> per impostare la proprietà <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> su un oggetto <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> vuoto.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> con il catalogo, la modalità thread-safe e i provider di esportazione specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> necessario impostare l'oggetto che è possibile accedere da più thread di `isThreadSafe` parametro `true`. Le prestazioni sono leggermente più lente quando `isThreadSafe` è `true`, pertanto è consigliabile impostare questo parametro `false` in scenari a thread singolo. Il valore predefinito è `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Uno o più elementi di <paramref name="providers" /> sono <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer (System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, System.ComponentModel.Composition.Hosting.CompositionOptions compositionOptions, params System.ComponentModel.Composition.Hosting.ExportProvider[] providers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, valuetype System.ComponentModel.Composition.Hosting.CompositionOptions compositionOptions, class System.ComponentModel.Composition.Hosting.ExportProvider[] providers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositionContainer(System::ComponentModel::Composition::Primitives::ComposablePartCatalog ^ catalog, System::ComponentModel::Composition::Hosting::CompositionOptions compositionOptions, ... cli::array &lt;System::ComponentModel::Composition::Hosting::ExportProvider ^&gt; ^ providers);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="catalog" Type="System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />
        <Parameter Name="compositionOptions" Type="System.ComponentModel.Composition.Hosting.CompositionOptions" />
        <Parameter Name="providers" Type="System.ComponentModel.Composition.Hosting.ExportProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">Catalogo che fornisce oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</param>
        <param name="compositionOptions">Oggetto che specifica le opzioni che influiscono sul comportamento del contenitore.</param>
        <param name="providers">Matrice di oggetti <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> che forniscono a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> l'accesso a oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> oppure <see langword="null" /> per impostare <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> su un oggetto <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> vuoto.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> con i provider di catalogo, opzioni e esportazione specificati.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="providers" /> contiene un elemento <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Catalog">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.Primitives.ComposablePartCatalog Catalog { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Composition.Primitives.ComposablePartCatalog Catalog" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Catalog As ComposablePartCatalog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::Composition::Primitives::ComposablePartCatalog ^ Catalog { System::ComponentModel::Composition::Primitives::ComposablePartCatalog ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ComposablePartCatalog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> che fornisce al contenitore l'accesso agli oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" />.</summary>
        <value>Catalogo che fornisce a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> l'accesso alle esportazioni prodotte da oggetti <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />. Il valore predefinito è <see langword="null" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compose">
      <MemberSignature Language="C#" Value="public void Compose (System.ComponentModel.Composition.Hosting.CompositionBatch batch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compose(class System.ComponentModel.Composition.Hosting.CompositionBatch batch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Compose (batch As CompositionBatch)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Compose(System::ComponentModel::Composition::Hosting::CompositionBatch ^ batch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="batch" Type="System.ComponentModel.Composition.Hosting.CompositionBatch" />
      </Parameters>
      <Docs>
        <param name="batch">Modifiche a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> da includere durante la composizione.</param>
        <summary>Aggiunge o rimuove le parti nell'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> specificato dal contenitore ed esegue la composizione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è il modo principale di direttamente aggiungendo o rimuovendo le parti dal contenitore. Il <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> manterrà sempre uno stato stabile e composto. Pertanto, la chiamata <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A> con un oggetto vuoto <xref:System.ComponentModel.Composition.Hosting.CompositionBatch> non è mai necessaria iniziare la composizione. Chiamare invece il <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A> metodo ogni volta che si desidera apportare modifiche alle parti disponibili per il <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>.  
  
 Il <xref:System.ComponentModel.Composition.Hosting.CompositionBatch> può contenere entrambe le parti da aggiungere e le parti da rimuovere.  La ricomposizione verrà eseguita una sola volta per ogni chiamata a <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A>.  
  
   
  
## Examples  
 In questo semplice esempio, vengano create e aggiunto a tre parti di <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>, e una parte viene recuperata per mostrare che tutte le importazioni sono state compilate. Questo esempio viene utilizzato il modello di programmazione con attributi.  
  
 [!code-csharp[Composition.CompositionContainer.Compose#1](~/samples/snippets/csharp/VS_Snippets_Misc/composition.compositioncontainer.compose/cs/program.cs#1)]
 [!code-vb[Composition.CompositionContainer.Compose#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/composition.compositioncontainer.compose/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rilascia le risorse usate da <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate dall'istanza corrente della classe <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il metodo `Dispose` dopo aver terminato di utilizzare l'oggetto <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>. Il metodo `Dispose` lascia l'oggetto <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> in una condizione di inutilizzabilità. Dopo la chiamata `Dispose`, è necessario rilasciare tutti i riferimenti al <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> in modo che il garbage collector può recuperare la memoria che di <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> occupata.  
  
 Per ulteriori informazioni, vedere [la pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Chiamare sempre il metodo `Dispose` prima di rilasciare l'ultimo riferimento a <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>. In caso contrario, le risorse utilizzate non verranno liberate finché il metodo <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> dell'oggetto `Finalize` non viene richiamato dal Garbage Collector.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
        <summary>Rilascia le risorse non gestite usate da <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> e, facoltativamente, le risorse gestite.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExportsCore">
      <MemberSignature Language="C#" Value="protected override System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExportsCore(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">Oggetto che definisce le condizioni degli oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> da ottenere.</param>
        <param name="atomicComposition">Transazione della composizione da utilizzare o <see langword="null" /> per disabilitare la composizione transazionale.</param>
        <summary>Restituisce una raccolta di tutte le esportazioni che corrispondono alle condizioni nell'oggetto <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> specificato.</summary>
        <returns>Raccolta di tutti gli oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> in questo oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> che corrispondono alle condizioni specificate da <paramref name="definition" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le implementazioni non devono considerare le mancate corrispondenze correlate alla cardinalità come errori e non devono generare eccezioni per le mancate corrispondenze correlate alla cardinalità. Ad esempio, se l'importazione richiede esattamente un'esportazione e il provider ha non esportazioni corrispondenti o più, il <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore%2A> metodo deve restituire un oggetto vuoto <xref:System.Collections.Generic.IEnumerable%601> insieme di <xref:System.ComponentModel.Composition.Primitives.Export> oggetti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ComponentModel.Composition.Hosting.ExportProvider&gt; Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.ComponentModel.Composition.Hosting.ExportProvider&gt; Providers" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Providers As ReadOnlyCollection(Of ExportProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::ComponentModel::Composition::Hosting::ExportProvider ^&gt; ^ Providers { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::ComponentModel::Composition::Hosting::ExportProvider ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ComponentModel.Composition.Hosting.ExportProvider&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene i provider di esportazione che forniscono al contenitore l'accesso a oggetti <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> aggiuntivi.</summary>
        <value>Raccolta di oggetti <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> che forniscono a <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> accesso a oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> aggiuntivi. L'impostazione predefinita è un oggetto <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> vuoto.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Istanza <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> eliminata.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseExport">
      <MemberSignature Language="C#" Value="public void ReleaseExport (System.ComponentModel.Composition.Primitives.Export export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseExport(class System.ComponentModel.Composition.Primitives.Export export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseExport(System::ComponentModel::Composition::Primitives::Export ^ export);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="export" Type="System.ComponentModel.Composition.Primitives.Export" />
      </Parameters>
      <Docs>
        <param name="export">Oggetto <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> che deve essere rilasciato.</param>
        <summary>Rilascia l'oggetto <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> specificato dall'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il comportamento di questo metodo può variare a seconda dell'implementazione del <xref:System.ComponentModel.Composition.Hosting.ExportProvider> che ha generato il <xref:System.ComponentModel.Composition.Primitives.Export> istanza. Di norma, le esportazioni non condivisi devono essere disconnesse dal contenitore.  
  
 Ad esempio, il <xref:System.ComponentModel.Composition.Hosting.CatalogExportProvider> rilasceranno solo un <xref:System.ComponentModel.Composition.Primitives.Export> provengono da un <xref:System.ComponentModel.Composition.Primitives.ComposablePart> che è stato costruito con un <xref:System.ComponentModel.Composition.CreationPolicy.NonShared> contesto. Versione in questo contesto indica che l'analisi della catena di dipendenze del <xref:System.ComponentModel.Composition.Primitives.Export> oggetti, la disconnessione dei riferimenti dal contenitore e chiamare il metodo `Dispose` sul <xref:System.ComponentModel.Composition.Primitives.ComposablePart> oggetti in base alle esigenze. Se il <xref:System.ComponentModel.Composition.Primitives.Export> è stato costruito con un <xref:System.ComponentModel.Composition.CreationPolicy.Shared> contesto il <xref:System.ComponentModel.Composition.Hosting.CatalogExportProvider> non eseguirà alcuna operazione, come specificato <xref:System.ComponentModel.Composition.Primitives.Export> potrebbe essere in uso da parte di altri richiedenti. Tali verranno disconnessi solo quando il contenitore è a sua volta è stato eliminato.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="export" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void ReleaseExport&lt;T&gt; (Lazy&lt;T&gt; export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseExport&lt;T&gt;(class System.Lazy`1&lt;!!T&gt; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseExport(Of T) (export As Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void ReleaseExport(Lazy&lt;T&gt; ^ export);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="export" Type="System.Lazy&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo dell'esportazione.</typeparam>
        <param name="export">Riferimento indiretto all'esportazione da rimuovere.</param>
        <summary>Rimuove l'esportazione specificata dalla composizione e rilascia le relative risorse se possibile.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseExports">
      <MemberSignature Language="C#" Value="public void ReleaseExports (System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseExports(class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseExports (exports As IEnumerable(Of Export))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseExports(System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ exports);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;" />
      </Parameters>
      <Docs>
        <param name="exports">Raccolta di oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> da rilasciare.</param>
        <summary>Rilascia un set di oggetti <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> dall'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il comportamento di questo metodo può variare a seconda del contesto in cui il <xref:System.ComponentModel.Composition.Primitives.Export> è stata costruita. Per altre informazioni, vedere il metodo <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exports" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="exports" /> contiene un elemento <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void ReleaseExports&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseExports&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseExports(Of T) (exports As IEnumerable(Of Lazy(Of T)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void ReleaseExports(System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ exports);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo delle esportazioni.</typeparam>
        <param name="exports">Raccolta di riferimenti indiretti alle esportazioni da rimuovere.</param>
        <summary>Rimuove una raccolta di esportazioni dalla composizione e rilascia le relative risorse se possibile.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public void ReleaseExports&lt;T,TMetadataView&gt; (System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseExports&lt;T, TMetadataView&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseExports(Of T, TMetadataView) (exports As IEnumerable(Of Lazy(Of T, TMetadataView)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; void ReleaseExports(System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ exports);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo delle esportazioni.</typeparam>
        <typeparam name="TMetadataView">Tipo della visualizzazione dei metadati delle esportazioni.</typeparam>
        <param name="exports">Raccolta di riferimenti indiretti alle esportazioni da rimuovere e relativi metadati.</param>
        <summary>Rimuove una raccolta di esportazioni dalla composizione e rilascia le relative risorse se possibile.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SatisfyImportsOnce">
      <MemberSignature Language="C#" Value="public void SatisfyImportsOnce (System.ComponentModel.Composition.Primitives.ComposablePart part);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SatisfyImportsOnce(class System.ComponentModel.Composition.Primitives.ComposablePart part) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SatisfyImportsOnce (part As ComposablePart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SatisfyImportsOnce(System::ComponentModel::Composition::Primitives::ComposablePart ^ part);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Composition.ICompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="part" Type="System.ComponentModel.Composition.Primitives.ComposablePart" />
      </Parameters>
      <Docs>
        <param name="part">Parte di cui soddisfare le importazioni.</param>
        <summary>Soddisfa le importazioni dell'oggetto <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> specificato senza registrarlo per la ricomposizione.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> è stato eliminato.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="part" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Si è verificato un errore durante la composizione. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> conterrà la raccolta degli errori riscontrati.</exception>
      </Docs>
    </Member>
  </Members>
</Type>