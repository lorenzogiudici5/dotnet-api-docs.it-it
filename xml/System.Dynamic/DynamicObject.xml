<Type Name="DynamicObject" FullName="System.Dynamic.DynamicObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba4618ed283635784b6afb23ea13d5f3d0bb7852" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="it-IT" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52372277" /></Metadata><TypeSignature Language="C#" Value="public class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DynamicObject extends System.Object implements class System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="DocId" Value="T:System.Dynamic.DynamicObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicObject&#xA;Implements IDynamicMetaObjectProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicObject : System::Dynamic::IDynamicMetaObjectProvider" />
  <TypeSignature Language="F#" Value="type DynamicObject = class&#xA;    interface IDynamicMetaObjectProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Dynamic.Runtime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Dynamic.IDynamicMetaObjectProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6848b-101">Fornisce una classe base per specificare il comportamento dinamico in fase di esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6848b-101">Provides a base class for specifying dynamic behavior at run time.</span></span> <span data-ttu-id="6848b-102">Questa classe deve essere ereditata; non è possibile crearne direttamente un'istanza.</span><span class="sxs-lookup"><span data-stu-id="6848b-102">This class must be inherited from; you cannot instantiate it directly.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6848b-103">Il `DynamicObject` classe consente di definire quali operazioni possono essere eseguite su oggetti dinamici e come eseguire queste operazioni.</span><span class="sxs-lookup"><span data-stu-id="6848b-103">The `DynamicObject` class enables you to define which operations can be performed on dynamic objects and how to perform those operations.</span></span> <span data-ttu-id="6848b-104">Ad esempio, è possibile definire cosa accade quando si tenta di ottenere o impostare una proprietà dell'oggetto, chiamare un metodo o eseguire operazioni matematiche standard, ad esempio addizioni e moltiplicazioni.</span><span class="sxs-lookup"><span data-stu-id="6848b-104">For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.</span></span>  
  
 <span data-ttu-id="6848b-105">Questa classe può essere utile se si desidera creare un protocollo più pratico per una libreria.</span><span class="sxs-lookup"><span data-stu-id="6848b-105">This class can be useful if you want to create a more convenient protocol for a library.</span></span> <span data-ttu-id="6848b-106">Ad esempio, se gli utenti della libreria sono necessario utilizzare una sintassi simile `Scriptobj.SetProperty("Count", 1)`, è possibile fornire la possibilità di usare sintassi molto più semplice, ad esempio `scriptobj.Count = 1`.</span><span class="sxs-lookup"><span data-stu-id="6848b-106">For example, if users of your library have to use syntax like `Scriptobj.SetProperty("Count", 1)`, you can provide the ability to use much simpler syntax, like `scriptobj.Count = 1`.</span></span>  
  
 <span data-ttu-id="6848b-107">È possibile creare direttamente un'istanza di `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-107">You cannot directly create an instance of the `DynamicObject` class.</span></span> <span data-ttu-id="6848b-108">Per implementare il comportamento dinamico, è possibile ereditare il `DynamicObject` classe ed eseguire l'override dei metodi necessari.</span><span class="sxs-lookup"><span data-stu-id="6848b-108">To implement the dynamic behavior, you may want to inherit from the `DynamicObject` class and override necessary methods.</span></span> <span data-ttu-id="6848b-109">Ad esempio, se è necessario solo le operazioni per l'impostazione e recupero delle proprietà, è possibile eseguire l'override solo il <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="6848b-109">For example, if you need only operations for setting and getting properties, you can override just the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods.</span></span>  
  
 <span data-ttu-id="6848b-110">In c#, per abilitare il comportamento dinamico per le istanze delle classi derivate dal `DynamicObject` (classe), è necessario usare il `dynamic` (parola chiave).</span><span class="sxs-lookup"><span data-stu-id="6848b-110">In C#, to enable dynamic behavior for instances of classes derived from the `DynamicObject` class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="6848b-111">Per altre informazioni, vedere [Uso del tipo dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span><span class="sxs-lookup"><span data-stu-id="6848b-111">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="6848b-112">In Visual Basic, operazioni dinamiche sono supportate dall'associazione tardiva.</span><span class="sxs-lookup"><span data-stu-id="6848b-112">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="6848b-113">Per altre informazioni, vedere [associazione anticipata e tardiva](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span><span class="sxs-lookup"><span data-stu-id="6848b-113">For more information, see [Early and Late Binding](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
 <span data-ttu-id="6848b-114">Esempio di codice seguente viene illustrato come creare un'istanza di una classe derivata dal `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-114">The following code example demonstrates how to create an instance of a class that is derived from the `DynamicObject` class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 <span data-ttu-id="6848b-115">È anche possibile aggiungere i propri membri alle classi derivate dal `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-115">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="6848b-116">Se la classe definisce le proprietà ed esegue l'override di <xref:System.Dynamic.DynamicObject.TrySetMember%2A> (metodo), dynamic language runtime (DLR) prima di tutto viene utilizzato lo strumento di associazione di linguaggio per cercare una definizione di una proprietà nella classe statica.</span><span class="sxs-lookup"><span data-stu-id="6848b-116">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="6848b-117">Se è presente nessuna di tali proprietà, DLR chiama il <xref:System.Dynamic.DynamicObject.TrySetMember%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="6848b-117">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
 <span data-ttu-id="6848b-118">Il `DynamicObject` classe implementa l'interfaccia DLR <xref:System.Dynamic.IDynamicMetaObjectProvider>, che consente di condividere le istanze del `DynamicObject` classe tra i linguaggi che supportano il modello di interoperabilità DLR.</span><span class="sxs-lookup"><span data-stu-id="6848b-118">The `DynamicObject` class implements the DLR interface <xref:System.Dynamic.IDynamicMetaObjectProvider>, which enables you to share instances of the `DynamicObject` class between languages that support the DLR interoperability model.</span></span> <span data-ttu-id="6848b-119">Ad esempio, è possibile creare un'istanza di `DynamicObject` classe in c# e quindi passarla a una funzione di IronPython.</span><span class="sxs-lookup"><span data-stu-id="6848b-119">For example, you can create an instance of the `DynamicObject` class in C# and then pass it to an IronPython function.</span></span> <span data-ttu-id="6848b-120">Per altre informazioni, vedere [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span><span class="sxs-lookup"><span data-stu-id="6848b-120">For more information, see [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6848b-121">Se si dispone di uno scenario semplice in cui è necessario un oggetto che può solo aggiungere e rimuovere membri in fase di esecuzione, ma che non è necessario definire operazioni specifiche e non dispone di membri statici, utilizzare il <xref:System.Dynamic.ExpandoObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-121">If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref:System.Dynamic.ExpandoObject> class.</span></span>  
>   
>  <span data-ttu-id="6848b-122">Se si dispone di uno scenario più avanzato in cui è necessario definire come gli oggetti dinamici partecipano il protocollo di interoperabilità, oppure è necessario gestire la memorizzazione nella cache di DLR invio dinamico veloce, creare la propria implementazione del <xref:System.Dynamic.IDynamicMetaObjectProvider> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="6848b-122">If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref:System.Dynamic.IDynamicMetaObjectProvider> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6848b-123">Si supponga di voler fornire una sintassi alternativa per l'accesso ai valori in un dizionario, in modo che anziché la scrittura `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), è possibile scrivere `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="6848b-123">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="6848b-124">Inoltre, si desidera che questa sintassi tra maiuscole e minuscole, in modo che `sampleDictionary.Text` equivale a `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="6848b-124">Also, you want this syntax to be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="6848b-125">L'esempio di codice seguente illustra il `DynamicDictionary` classe che deriva dal `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-125">The following code example demonstrates the `DynamicDictionary` class, which is derived from the `DynamicObject` class.</span></span> <span data-ttu-id="6848b-126">Il `DynamicDictionary` classe contiene un oggetto del `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` in Visual Basic) per archiviare le coppie chiave-valore ed esegue l'override di <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metodi per supportare la nuova sintassi.</span><span class="sxs-lookup"><span data-stu-id="6848b-126">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="6848b-127">Fornisce inoltre un `Count` contiene proprietà, che mostra quanti proprietà dinamiche del dizionario.</span><span class="sxs-lookup"><span data-stu-id="6848b-127">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 <span data-ttu-id="6848b-128">Per altri esempi, vedere [Creating Wrappers with DynamicObject](https://go.microsoft.com/fwlink/?LinkId=169008) sul blog di C#-domande frequenti.</span><span class="sxs-lookup"><span data-stu-id="6848b-128">For more examples, see [Creating Wrappers with DynamicObject](https://go.microsoft.com/fwlink/?LinkId=169008) on the C# Frequently Asked Questions blog.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DynamicObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DynamicObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6848b-129">Consente ai tipi derivati di creare una nuova istanza del tipo <see cref="T:System.Dynamic.DynamicObject" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-129">Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject" /> type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6848b-130">È possibile creare direttamente un'istanza di <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-130">You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="6848b-131">Per implementare il comportamento dinamico, è necessario ereditare il <xref:System.Dynamic.DynamicObject> classe ed eseguire l'override dei metodi necessari.</span><span class="sxs-lookup"><span data-stu-id="6848b-131">To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods.</span></span>  
  
 <span data-ttu-id="6848b-132">In c#, per abilitare il comportamento dinamico per le istanze delle classi derivate dal <xref:System.Dynamic.DynamicObject> (classe), è necessario usare il `dynamic` (parola chiave).</span><span class="sxs-lookup"><span data-stu-id="6848b-132">In C#, to enable dynamic behavior for instances of the classes derived from the <xref:System.Dynamic.DynamicObject> class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="6848b-133">Per altre informazioni, vedere [Uso del tipo dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span><span class="sxs-lookup"><span data-stu-id="6848b-133">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="6848b-134">In Visual Basic, operazioni dinamiche sono supportate dall'associazione tardiva.</span><span class="sxs-lookup"><span data-stu-id="6848b-134">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="6848b-135">Per altre informazioni, vedere [associazione anticipata e tardiva](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span><span class="sxs-lookup"><span data-stu-id="6848b-135">For more information, see [Early and Late Binding](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6848b-136">Esempio di codice seguente viene illustrato come creare un'istanza delle classi che derivano dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-136">The following code example demonstrates how to create an instance of classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicMemberNames">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetDynamicMemberNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetDynamicMemberNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetDynamicMemberNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDynamicMemberNames () As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetDynamicMemberNames();" />
      <MemberSignature Language="F#" Value="abstract member GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;&#xA;override this.GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;" Usage="dynamicObject.GetDynamicMemberNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6848b-137">Restituisce l'enumerazione di tutti i nomi di membro dinamici.</span><span class="sxs-lookup"><span data-stu-id="6848b-137">Returns the enumeration of all dynamic member names.</span></span></summary>
        <returns><span data-ttu-id="6848b-138">Sequenza che contiene nomi dei membri dinamici.</span><span class="sxs-lookup"><span data-stu-id="6848b-138">A sequence that contains dynamic member names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6848b-139">Questo metodo è disponibile solo a scopo di debug.</span><span class="sxs-lookup"><span data-stu-id="6848b-139">This method exists for debugging purposes only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetaObject">
      <MemberSignature Language="C#" Value="public virtual System.Dynamic.DynamicMetaObject GetMetaObject (System.Linq.Expressions.Expression parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Dynamic.DynamicMetaObject GetMetaObject(class System.Linq.Expressions.Expression parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetaObject (parameter As Expression) As DynamicMetaObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Dynamic::DynamicMetaObject ^ GetMetaObject(System::Linq::Expressions::Expression ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject&#xA;override this.GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject" Usage="dynamicObject.GetMetaObject parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Dynamic.DynamicMetaObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="6848b-140">Espressione che rappresenta l'oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> da inviare ai metodi virtuali dinamici.</span><span class="sxs-lookup"><span data-stu-id="6848b-140">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject" /> to dispatch to the dynamic virtual methods.</span></span></param>
        <summary><span data-ttu-id="6848b-141">Fornisce un oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> che invia ai metodi virtuali dinamici.</span><span class="sxs-lookup"><span data-stu-id="6848b-141">Provides a <see cref="T:System.Dynamic.DynamicMetaObject" /> that dispatches to the dynamic virtual methods.</span></span> <span data-ttu-id="6848b-142">L'oggetto può essere incapsulato all'interno di un altro oggetto <see cref="T:System.Dynamic.DynamicMetaObject" /> per fornire il comportamento personalizzato per singole azioni.</span><span class="sxs-lookup"><span data-stu-id="6848b-142">The object can be encapsulated inside another <see cref="T:System.Dynamic.DynamicMetaObject" /> to provide custom behavior for individual actions.</span></span> <span data-ttu-id="6848b-143">Questo metodo supporta l'infrastruttura DLR (Dynamic Language Runtime) per gli implementatori del linguaggio e non è destinato all'utilizzo direttamente dal codice.</span><span class="sxs-lookup"><span data-stu-id="6848b-143">This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</span></span></summary>
        <returns><span data-ttu-id="6848b-144">Oggetto di tipo <see cref="T:System.Dynamic.DynamicMetaObject" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-144">An object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBinaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBinaryOperation(class System.Dynamic.BinaryOperationBinder binder, object arg, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryBinaryOperation (binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryBinaryOperation(System::Dynamic::BinaryOperationBinder ^ binder, System::Object ^ arg, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj *  -&gt; bool&#xA;override this.TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj *  -&gt; bool" Usage="dynamicObject.TryBinaryOperation (binder, arg, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.BinaryOperationBinder" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="6848b-145">Fornisce informazioni sull'operazione binaria.</span><span class="sxs-lookup"><span data-stu-id="6848b-145">Provides information about the binary operation.</span></span> <span data-ttu-id="6848b-146">La proprietà <c>binder.Operation</c> restituisce un oggetto <see cref="T:System.Linq.Expressions.ExpressionType" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-146">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span></span> <span data-ttu-id="6848b-147">Ad esempio, per l'istruzione <c>sum = first + second</c>,dove <c>first</c> e <c>second</c> sono derivati dalla classe <see langword="DynamicObject" />,<c>binder.Operation</c> restituisce <c>ExpressionType.Add</c>.</span><span class="sxs-lookup"><span data-stu-id="6848b-147">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns <c>ExpressionType.Add</c>.</span></span></param>
        <param name="arg"><span data-ttu-id="6848b-148">Operando destro per l'operazione binaria.</span><span class="sxs-lookup"><span data-stu-id="6848b-148">The right operand for the binary operation.</span></span> <span data-ttu-id="6848b-149">Ad esempio, per l'istruzione <c>sum = first + second</c>, dove <c>first</c> e <c>second</c> sono derivati dalla classe <see langword="DynamicObject" />,<paramref name="arg" /> è uguale a <c>second</c>.</span><span class="sxs-lookup"><span data-stu-id="6848b-149">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <paramref name="arg" /> is equal to <c>second</c>.</span></span></param>
        <param name="result"><span data-ttu-id="6848b-150">Risultato dell'operazione binaria.</span><span class="sxs-lookup"><span data-stu-id="6848b-150">The result of the binary operation.</span></span></param>
        <summary><span data-ttu-id="6848b-151">Fornisce l'implementazione per le operazioni binarie.</span><span class="sxs-lookup"><span data-stu-id="6848b-151">Provides implementation for binary operations.</span></span> <span data-ttu-id="6848b-152">Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni quali l'aggiunta e la moltiplicazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-152">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</span></span></summary>
        <returns><span data-ttu-id="6848b-153"><see langword="true" /> se l'operazione riesce; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-153"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6848b-154">Se questo metodo restituisce <see langword="false" />, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-154">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-155">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-155">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6848b-156">Le classi derivate dal <xref:System.Dynamic.DynamicObject> classe può eseguire l'override di questo metodo per specificare come devono essere eseguite operazioni binarie per un oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="6848b-156">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="6848b-157">Se il metodo non è sottoposto a override, il binder di runtime del linguaggio determina il comportamento.</span><span class="sxs-lookup"><span data-stu-id="6848b-157">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-158">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-158">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="6848b-159">Questo metodo viene chiamato quando si dispone di operazioni binarie, ad esempio addizione o moltiplicazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-159">This method is called when you have binary operations such as addition or multiplication.</span></span> <span data-ttu-id="6848b-160">Ad esempio, se il <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> è sottoposto a override, viene richiamato automaticamente, ad esempio le istruzioni `sum = first + second` o `multiply = first*second`, dove `first` è derivato dal `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-160">For example, if the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method is overridden, it is automatically invoked for statements like `sum = first + second` or `multiply = first*second`, where `first` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="6848b-161">È possibile ottenere informazioni sul tipo di operazione binaria usando il `Operation` proprietà del `binder` parametro.</span><span class="sxs-lookup"><span data-stu-id="6848b-161">You can get information about the type of the binary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="6848b-162">Se l'oggetto dinamico viene usato solo in c# e Visual Basic, il `binder.Operation` proprietà può avere uno dei seguenti valori dal <xref:System.Linq.Expressions.ExpressionType> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-162">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="6848b-163">In altri linguaggi, ad esempio IronPython o IronRuby, tuttavia, si possono avere altri valori.</span><span class="sxs-lookup"><span data-stu-id="6848b-163">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="6848b-164">Valore</span><span class="sxs-lookup"><span data-stu-id="6848b-164">Value</span></span>|<span data-ttu-id="6848b-165">Descrizione</span><span class="sxs-lookup"><span data-stu-id="6848b-165">Description</span></span>|<span data-ttu-id="6848b-166">C#</span><span class="sxs-lookup"><span data-stu-id="6848b-166">C#</span></span>|<span data-ttu-id="6848b-167">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="6848b-167">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Add`|<span data-ttu-id="6848b-168">Un'operazione di addizione senza controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="6848b-168">An addition operation without overflow checking, for numeric operands.</span></span>|`a + b`|`a + b`|  
|`AddAssign`|<span data-ttu-id="6848b-169">Un'operazione di assegnazione composta di addizione senza controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="6848b-169">An addition compound assignment operation without overflow checking, for numeric operands.</span></span>|`a += b`|<span data-ttu-id="6848b-170">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-170">Not supported.</span></span>|  
|`And`|<span data-ttu-id="6848b-171">Bit per bit `AND` operazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-171">A bitwise `AND` operation.</span></span>|`a & b`|`a And b`|  
|`AndAssign`|<span data-ttu-id="6848b-172">Bit per bit `AND` operazione di assegnazione composta.</span><span class="sxs-lookup"><span data-stu-id="6848b-172">A bitwise `AND` compound assignment operation.</span></span>|`a &= b`|<span data-ttu-id="6848b-173">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-173">Not supported.</span></span>|  
|`Divide`|<span data-ttu-id="6848b-174">Un'operazione di divisione aritmetica.</span><span class="sxs-lookup"><span data-stu-id="6848b-174">An arithmetic division operation.</span></span>|`a / b`|`a / b`|  
|`DivideAssign`|<span data-ttu-id="6848b-175">Un'operazione di assegnazione composta di divisione aritmetica.</span><span class="sxs-lookup"><span data-stu-id="6848b-175">An arithmetic division compound assignment operation.</span></span>|`a /= b`|<span data-ttu-id="6848b-176">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-176">Not supported.</span></span>|  
|`ExclusiveOr`|<span data-ttu-id="6848b-177">Bit per bit `XOR` operazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-177">A bitwise `XOR` operation.</span></span>|`a ^ b`|`a Xor b`|  
|`ExclusiveOrAssign`|<span data-ttu-id="6848b-178">Bit per bit `XOR` operazione di assegnazione composta.</span><span class="sxs-lookup"><span data-stu-id="6848b-178">A bitwise `XOR` compound assignment operation.</span></span>|`a ^= b`|<span data-ttu-id="6848b-179">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-179">Not supported.</span></span>|  
|`GreaterThan`|<span data-ttu-id="6848b-180">Confronto "maggiore di".</span><span class="sxs-lookup"><span data-stu-id="6848b-180">A "greater than" comparison.</span></span>|`a > b`|`a > b`|  
|`GreaterThanOrEqual`|<span data-ttu-id="6848b-181">Confronto "maggiore o uguale a".</span><span class="sxs-lookup"><span data-stu-id="6848b-181">A "greater than or equal to" comparison.</span></span>|`a >= b`|<span data-ttu-id="6848b-182">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-182">Not supported.</span></span>|  
|`LeftShift`|<span data-ttu-id="6848b-183">Un'operazione di spostamento a sinistra bit per bit.</span><span class="sxs-lookup"><span data-stu-id="6848b-183">A bitwise left-shift operation.</span></span>|`a << b`|`a << b`|  
|`LeftShiftAssign`|<span data-ttu-id="6848b-184">Un'operazione di assegnazione composta di spostamento a sinistra bit per bit.</span><span class="sxs-lookup"><span data-stu-id="6848b-184">A bitwise left-shift compound assignment operation.</span></span>|`a <<= b`|<span data-ttu-id="6848b-185">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-185">Not supported.</span></span>|  
|`LessThan`|<span data-ttu-id="6848b-186">Confronto "minore di".</span><span class="sxs-lookup"><span data-stu-id="6848b-186">A "less than" comparison.</span></span>|`a < b`|`a < b`|  
|`LessThanOrEqual`|<span data-ttu-id="6848b-187">Confronto "minore o uguale a".</span><span class="sxs-lookup"><span data-stu-id="6848b-187">A "less than or equal to" comparison.</span></span>|`a <= b`|<span data-ttu-id="6848b-188">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-188">Not supported.</span></span>|  
|`Modulo`|<span data-ttu-id="6848b-189">Un'operazione di resto aritmetico.</span><span class="sxs-lookup"><span data-stu-id="6848b-189">An arithmetic remainder operation.</span></span>|`a % b`|`a Mod b`|  
|`ModuloAssign`|<span data-ttu-id="6848b-190">Un'operazione di assegnazione composta di resto aritmetico.</span><span class="sxs-lookup"><span data-stu-id="6848b-190">An arithmetic remainder compound assignment operation.</span></span>|`a %= b`|<span data-ttu-id="6848b-191">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-191">Not supported.</span></span>|  
|`Multiply`|<span data-ttu-id="6848b-192">Un'operazione di moltiplicazione senza controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="6848b-192">A multiplication operation without overflow checking, for numeric operands.</span></span>|`a * b`|`a * b`|  
|`MultiplyAssign`|<span data-ttu-id="6848b-193">Un'operazione di assegnazione composta di moltiplicazione senza controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="6848b-193">A multiplication compound assignment operation without overflow checking, for numeric operands.</span></span>|`a *= b`|<span data-ttu-id="6848b-194">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-194">Not supported.</span></span>|  
|`NotEqual`|<span data-ttu-id="6848b-195">Un confronto di disuguaglianza.</span><span class="sxs-lookup"><span data-stu-id="6848b-195">An inequality comparison.</span></span>|`a != b`|`a <> b`|  
|`Or`|<span data-ttu-id="6848b-196">Bit per bit o logica `OR` operazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-196">A bitwise or logical `OR` operation.</span></span>|`a &#124; b`|`a Or b`|  
|`OrAssign`|<span data-ttu-id="6848b-197">Bit per bit o logica `OR` assegnazione composta.</span><span class="sxs-lookup"><span data-stu-id="6848b-197">A bitwise or logical `OR` compound assignment.</span></span>|`a &#124;= b`|<span data-ttu-id="6848b-198">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-198">Not supported.</span></span>|  
|`Power`|<span data-ttu-id="6848b-199">Un'operazione matematica dell'elevamento di un numero a potenza.</span><span class="sxs-lookup"><span data-stu-id="6848b-199">A mathematical operation of raising a number to a power.</span></span>|<span data-ttu-id="6848b-200">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-200">Not supported.</span></span>|`a ^ b`|  
|`RightShift`|<span data-ttu-id="6848b-201">Un'operazione di spostamento a destra bit per bit.</span><span class="sxs-lookup"><span data-stu-id="6848b-201">A bitwise right-shift operation.</span></span>|`a >> b`|`a >> b`|  
|`RightShiftAssign`|<span data-ttu-id="6848b-202">Un'operazione di assegnazione composta di spostamento a destra bit per bit.</span><span class="sxs-lookup"><span data-stu-id="6848b-202">A bitwise right-shift compound assignment operation.</span></span>|`a >>= b`|<span data-ttu-id="6848b-203">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-203">Not supported.</span></span>|  
|`Subtract`|<span data-ttu-id="6848b-204">Un'operazione di sottrazione senza controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="6848b-204">A subtraction operation without overflow checking, for numeric operands.</span></span>|`a - b`|`a - b`|  
|`SubtractAssign`|<span data-ttu-id="6848b-205">Un'operazione di assegnazione composta di sottrazione senza controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="6848b-205">A subtraction compound assignment operation without overflow checking, for numeric operands.</span></span>|`a -= b`|<span data-ttu-id="6848b-206">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-206">Not supported.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="6848b-207">Per implementare `OrElse` (`a || b`) e `AndAlso` (`a && b`) operazioni per gli oggetti dinamici in c#, si può essere utile implementare entrambi i <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> metodo e il <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="6848b-207">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="6848b-208">Il `OrElse` operazione è costituita da unari `IsTrue` operazione e il file binario `Or` operazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-208">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="6848b-209">Il `Or` operazione viene eseguita solo se il risultato del `IsTrue` operazione `false`.</span><span class="sxs-lookup"><span data-stu-id="6848b-209">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="6848b-210">Il `AndAlso` operazione è costituita da unari `IsFalse` operazione e il file binario `And` operazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-210">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="6848b-211">Il `And` operazione viene eseguita solo se il risultato del `IsFalse` operazione `false`.</span><span class="sxs-lookup"><span data-stu-id="6848b-211">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6848b-212">Si supponga che sia necessaria una struttura di dati per archiviare le rappresentazioni testuali e numeriche di numeri e si vuole definire operazioni matematiche di base quali l'addizione e sottrazione per questo tipo di dati.</span><span class="sxs-lookup"><span data-stu-id="6848b-212">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.</span></span>  
  
 <span data-ttu-id="6848b-213">L'esempio di codice seguente illustra il `DynamicNumber` classe che deriva dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-213">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="6848b-214">`DynamicNumber` esegue l'override di <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> metodo per consentire operazioni matematiche.</span><span class="sxs-lookup"><span data-stu-id="6848b-214">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method to enable mathematical operations.</span></span> <span data-ttu-id="6848b-215">Viene anche eseguito l'override di <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metodi per abilitare l'accesso agli elementi.</span><span class="sxs-lookup"><span data-stu-id="6848b-215">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="6848b-216">In questo esempio, sono supportate solo le operazioni di addizione e sottrazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-216">In this example, only addition and subtraction operations are supported.</span></span> <span data-ttu-id="6848b-217">Se si prova a scrivere un'istruzione come `resultNumber = firstNumber*secondNumber`, viene generata un'eccezione in fase di esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6848b-217">If you try to write a statement like `resultNumber = firstNumber*secondNumber`, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#2)]
 [!code-vb[System.Dynamic.DynamicObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvert">
      <MemberSignature Language="C#" Value="public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvert(class System.Dynamic.ConvertBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryConvert (binder As ConvertBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryConvert(System::Dynamic::ConvertBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryConvert : System.Dynamic.ConvertBinder *  -&gt; bool&#xA;override this.TryConvert : System.Dynamic.ConvertBinder *  -&gt; bool" Usage="dynamicObject.TryConvert (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.ConvertBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="6848b-218">Fornisce informazioni sull'operazione di conversione.</span><span class="sxs-lookup"><span data-stu-id="6848b-218">Provides information about the conversion operation.</span></span> <span data-ttu-id="6848b-219">La proprietà <c>binder.Type</c> specifica il tipo in cui deve essere convertito l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="6848b-219">The <c>binder.Type</c> property provides the type to which the object must be converted.</span></span> <span data-ttu-id="6848b-220">Ad esempio, per l'istruzione <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), dove <c>sampleObject</c> è un'istanza della classe derivata dalla classe <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Type</c> restituisce il tipo <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-220">For example, for the statement <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Type</c> returns the <see cref="T:System.String" /> type.</span></span> <span data-ttu-id="6848b-221">La proprietà <c>binder.Explicit</c> specifica informazioni sul tipo di conversione effettuato.</span><span class="sxs-lookup"><span data-stu-id="6848b-221">The <c>binder.Explicit</c> property provides information about the kind of conversion that occurs.</span></span> <span data-ttu-id="6848b-222">Restituisce <see langword="true" /> per la conversione esplicita e <see langword="false" /> per la conversione implicita.</span><span class="sxs-lookup"><span data-stu-id="6848b-222">It returns <see langword="true" /> for explicit conversion and <see langword="false" /> for implicit conversion.</span></span></param>
        <param name="result"><span data-ttu-id="6848b-223">Tipo di risultato dell'operazione di conversione dei tipi.</span><span class="sxs-lookup"><span data-stu-id="6848b-223">The result of the type conversion operation.</span></span></param>
        <summary><span data-ttu-id="6848b-224">Fornisce l'implementazione per le operazioni di conversione dei tipi.</span><span class="sxs-lookup"><span data-stu-id="6848b-224">Provides implementation for type conversion operations.</span></span> <span data-ttu-id="6848b-225">Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni che eseguono la conversione di un oggetto da un tipo a un altro.</span><span class="sxs-lookup"><span data-stu-id="6848b-225">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</span></span></summary>
        <returns><span data-ttu-id="6848b-226"><see langword="true" /> se l'operazione riesce; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-226"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6848b-227">Se questo metodo restituisce <see langword="false" />, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-227">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-228">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-228">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6848b-229">Le classi derivate dal <xref:System.Dynamic.DynamicObject> classe può eseguire l'override di questo metodo per specificare come deve essere eseguita una conversione del tipo per un oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="6848b-229">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object.</span></span> <span data-ttu-id="6848b-230">Se il metodo non è sottoposto a override, il binder di runtime del linguaggio determina il comportamento.</span><span class="sxs-lookup"><span data-stu-id="6848b-230">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-231">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-231">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="6848b-232">In c#, se viene eseguito l'override di questo metodo, si viene automaticamente richiamato quando si dispone di una conversione esplicita o implicita, come illustrato nell'esempio di codice seguente.</span><span class="sxs-lookup"><span data-stu-id="6848b-232">In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.</span></span>  
  
 <span data-ttu-id="6848b-233">In Visual Basic, è supportata solo la conversione esplicita.</span><span class="sxs-lookup"><span data-stu-id="6848b-233">In Visual Basic, only explicit conversion is supported.</span></span> <span data-ttu-id="6848b-234">Se si esegue l'override di questo metodo, la chiamata avviene tramite il <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> o <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> funzioni.</span><span class="sxs-lookup"><span data-stu-id="6848b-234">If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions.</span></span>  
  
```csharp  
// Explicit conversion.  
String sampleExplicit = (String)sampleObject;  
// Implicit conversion.  
String sampleImplicit = sampleObject;  
```  
  
```vb  
// Explicit conversion - first variant.  
Dim testExplicit1 = CTypeDynamic(Of String)(sampleObject)  
// Explicit conversion - second variant.  
Dim testExplicit2 = CTypeDynamic(sampleObject, GetType(String))  
```  
  
   
  
## Examples  
 <span data-ttu-id="6848b-235">Si supponga che sia necessaria una struttura di dati per archiviare le rappresentazioni testuali e numeriche di numeri e si desidera definire le conversioni di questa struttura di dati per le stringhe e numeri interi.</span><span class="sxs-lookup"><span data-stu-id="6848b-235">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.</span></span>  
  
 <span data-ttu-id="6848b-236">L'esempio di codice seguente illustra il `DynamicNumber` classe che deriva dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-236">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="6848b-237">`DynamicNumber` esegue l'override di <xref:System.Dynamic.DynamicObject.TryConvert%2A> metodo per consentire la conversione del tipo.</span><span class="sxs-lookup"><span data-stu-id="6848b-237">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryConvert%2A> method to enable type conversion.</span></span> <span data-ttu-id="6848b-238">Viene anche eseguito l'override di <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metodi per abilitare l'accesso agli elementi di dati.</span><span class="sxs-lookup"><span data-stu-id="6848b-238">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the data elements.</span></span>  
  
 <span data-ttu-id="6848b-239">In questo esempio, è supportata solo la conversione in stringhe e numeri interi.</span><span class="sxs-lookup"><span data-stu-id="6848b-239">In this example, only conversion to strings and integers is supported.</span></span> <span data-ttu-id="6848b-240">Se si prova a convertire un oggetto in qualsiasi altro tipo, viene generata un'eccezione in fase di esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6848b-240">If you try to convert an object to any other type, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#3)]
 [!code-vb[System.Dynamic.DynamicObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateInstance">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateInstance(class System.Dynamic.CreateInstanceBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateInstance (binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryCreateInstance(System::Dynamic::CreateInstanceBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] *  -&gt; bool&#xA;override this.TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryCreateInstance (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.CreateInstanceBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="6848b-241">Fornisce informazioni sull'operazione di inizializzazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-241">Provides information about the initialization operation.</span></span></param>
        <param name="args"><span data-ttu-id="6848b-242">Argomenti passati all'oggetto durante l'inizializzazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-242">The arguments that are passed to the object during initialization.</span></span> <span data-ttu-id="6848b-243">Ad esempio, per l'operazione <c>new SampleType(100)</c>, dove <c>SampleType</c> è il tipo derivato dalla classe <see cref="T:System.Dynamic.DynamicObject" />, <c>args[0]</c> è uguale a 100.</span><span class="sxs-lookup"><span data-stu-id="6848b-243">For example, for the <c>new SampleType(100)</c> operation, where <c>SampleType</c> is the type derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="6848b-244">Risultato dell'inizializzazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-244">The result of the initialization.</span></span></param>
        <summary><span data-ttu-id="6848b-245">Fornisce l'implementazione per le operazioni che creano una nuova istanza di un oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="6848b-245">Provides the implementation for operations that initialize a new instance of a dynamic object.</span></span> <span data-ttu-id="6848b-246">Questo metodo non può essere utilizzato in C# o in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="6848b-246">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="6848b-247"><see langword="true" /> se l'operazione riesce; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-247"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6848b-248">Se questo metodo restituisce <see langword="false" />, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-248">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-249">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-249">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6848b-250">Le classi derivate dal <xref:System.Dynamic.DynamicObject> classe può eseguire l'override di questo metodo per specificare il modo in cui deve essere inizializzata una nuova istanza dell'oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="6848b-250">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized.</span></span> <span data-ttu-id="6848b-251">Se il metodo non è sottoposto a override, il binder di runtime del linguaggio determina il comportamento.</span><span class="sxs-lookup"><span data-stu-id="6848b-251">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-252">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-252">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="6848b-253">Compilatori Visual Basic e c# non generano mai il codice per usare questo metodo perché non supportano i tipi di prima classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-253">C# and Visual Basic compilers never emit code to use this method because they do not support first-class types.</span></span> <span data-ttu-id="6848b-254">Questo metodo viene utilizzato per i linguaggi che supportano l'inizializzazione di oggetti dinamici utilizzando la seguente sintassi `dynamic new`.</span><span class="sxs-lookup"><span data-stu-id="6848b-254">This method is intended for languages that support the initialization of dynamic objects by using syntax like `dynamic new`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteIndex (System.Dynamic.DeleteIndexBinder binder, object[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteIndex(class System.Dynamic.DeleteIndexBinder binder, object[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteIndex (binder As DeleteIndexBinder, indexes As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteIndex(System::Dynamic::DeleteIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool&#xA;override this.TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool" Usage="dynamicObject.TryDeleteIndex (binder, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="6848b-255">Fornisce informazioni sull'operazione di eliminazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-255">Provides information about the deletion.</span></span></param>
        <param name="indexes"><span data-ttu-id="6848b-256">Indici da eliminare.</span><span class="sxs-lookup"><span data-stu-id="6848b-256">The indexes to be deleted.</span></span></param>
        <summary><span data-ttu-id="6848b-257">Fornisce l'implementazione per operazioni che eliminano un oggetto in base all'indice.</span><span class="sxs-lookup"><span data-stu-id="6848b-257">Provides the implementation for operations that delete an object by index.</span></span> <span data-ttu-id="6848b-258">Questo metodo non può essere utilizzato in C# o in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="6848b-258">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="6848b-259"><see langword="true" /> se l'operazione riesce; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-259"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6848b-260">Se questo metodo restituisce <see langword="false" />, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-260">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-261">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-261">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6848b-262">Le classi derivate dal <xref:System.Dynamic.DynamicObject> classe può eseguire l'override di questo metodo per specificare come deve essere eliminato un valore che contiene un indice specificato.</span><span class="sxs-lookup"><span data-stu-id="6848b-262">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted.</span></span> <span data-ttu-id="6848b-263">Se il metodo non è sottoposto a override, il binder di runtime del linguaggio determina il comportamento.</span><span class="sxs-lookup"><span data-stu-id="6848b-263">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-264">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-264">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="6848b-265">Compilatori Visual Basic e c# non generano mai il codice per usare questo metodo perché non supportano questo tipo di operazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-265">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="6848b-266">Questo metodo è destinato ai linguaggi che supportano la sintassi per l'eliminazione di oggetti in base all'indice, ad esempio `del sampleObject[1,2]` in Python.</span><span class="sxs-lookup"><span data-stu-id="6848b-266">This method is intended for languages that support syntax for deleting objects by index, such as `del sampleObject[1,2]` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteMember">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteMember (System.Dynamic.DeleteMemberBinder binder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteMember(class System.Dynamic.DeleteMemberBinder binder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteMember (binder As DeleteMemberBinder) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteMember(System::Dynamic::DeleteMemberBinder ^ binder);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool&#xA;override this.TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool" Usage="dynamicObject.TryDeleteMember binder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteMemberBinder" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="6848b-267">Fornisce informazioni sull'operazione di eliminazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-267">Provides information about the deletion.</span></span></param>
        <summary><span data-ttu-id="6848b-268">Fornisce l'implementazione per operazioni che eliminano un membro di un oggetto.</span><span class="sxs-lookup"><span data-stu-id="6848b-268">Provides the implementation for operations that delete an object member.</span></span> <span data-ttu-id="6848b-269">Questo metodo non può essere utilizzato in C# o in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="6848b-269">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="6848b-270"><see langword="true" /> se l'operazione riesce; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-270"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6848b-271">Se questo metodo restituisce <see langword="false" />, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-271">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-272">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-272">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6848b-273">Le classi derivate dal <xref:System.Dynamic.DynamicObject> classe può eseguire l'override di questo metodo per specificare come un membro dell'oggetto deve essere eliminato.</span><span class="sxs-lookup"><span data-stu-id="6848b-273">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted.</span></span> <span data-ttu-id="6848b-274">Quando questo metodo non è sottoposto a override, il binder di runtime del linguaggio determina il comportamento.</span><span class="sxs-lookup"><span data-stu-id="6848b-274">When this method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-275">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-275">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="6848b-276">Compilatori Visual Basic e c# non generano mai il codice per usare questo metodo perché non supportano questo tipo di operazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-276">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="6848b-277">Questo metodo viene utilizzato per i linguaggi che supportano la sintassi per l'eliminazione di membri, ad esempio `del sampleObject.SampleMember` in Python.</span><span class="sxs-lookup"><span data-stu-id="6848b-277">This method is intended for languages that support syntax for deleting members, such as `del sampleObject.SampleMember` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetIndex(class System.Dynamic.GetIndexBinder binder, object[] indexes, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetIndex (binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetIndex(System::Dynamic::GetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetIndex : System.Dynamic.GetIndexBinder * obj[] *  -&gt; bool&#xA;override this.TryGetIndex : System.Dynamic.GetIndexBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryGetIndex (binder, indexes, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="6848b-278">Fornisce informazioni sull'operazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-278">Provides information about the operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="6848b-279">Indici utilizzati nell'operazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-279">The indexes that are used in the operation.</span></span> <span data-ttu-id="6848b-280">Ad esempio, per l'operazione <c>sampleObject[3]</c> in C# (<c>sampleObject(3)</c> in Visual Basic), dove <c>sampleObject</c> è derivato dalla classe <see langword="DynamicObject" />, <c>indexes[0]</c> è uguale a 3.</span><span class="sxs-lookup"><span data-stu-id="6848b-280">For example, for the <c>sampleObject[3]</c> operation in C# (<c>sampleObject(3)</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see langword="DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span></span></param>
        <param name="result"><span data-ttu-id="6848b-281">Risultato dell'operazione di indicizzazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-281">The result of the index operation.</span></span></param>
        <summary><span data-ttu-id="6848b-282">Fornisce l'implementazione per operazioni che ottengono un valore in base all'indice.</span><span class="sxs-lookup"><span data-stu-id="6848b-282">Provides the implementation for operations that get a value by index.</span></span> <span data-ttu-id="6848b-283">Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni di indicizzazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-283">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</span></span></summary>
        <returns><span data-ttu-id="6848b-284"><see langword="true" /> se l'operazione riesce; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-284"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6848b-285">Se questo metodo restituisce <see langword="false" />, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-285">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-286">Nella maggior parte dei casi viene generata eccezione di runtime.</span><span class="sxs-lookup"><span data-stu-id="6848b-286">(In most cases, a run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6848b-287">Le classi derivate dal <xref:System.Dynamic.DynamicObject> classe può eseguire l'override di questo metodo per specificare come ottenere un valore in base all'indice devono essere eseguite per un oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="6848b-287">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object.</span></span> <span data-ttu-id="6848b-288">Se il metodo non è sottoposto a override, il binder di runtime del linguaggio determina il comportamento.</span><span class="sxs-lookup"><span data-stu-id="6848b-288">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-289">Nella maggior parte dei casi viene generata eccezione di runtime.</span><span class="sxs-lookup"><span data-stu-id="6848b-289">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="6848b-290">Se viene eseguito l'override di questo metodo, viene richiamato automaticamente quando si esegue un'operazione quale `sampleObject[3]` in c# o `sampleObject(3)` in Visual Basic, in cui `sampleObject` è derivato dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-290">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3]` in C# or `sampleObject(3)` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6848b-291">Si supponga che si desidera creare un oggetto in cui le proprietà possono essere accessibili tramite i nomi, ad esempio `Property0`, `Property1`e così via, o in base all'indice, in modo che, ad esempio `sampleObject.Property0` equivale a `sampleObject[0]` in c# o `sampleObject(0)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="6848b-291">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="6848b-292">L'esempio di codice seguente illustra il `SampleDynamicObject` classe che deriva dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-292">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="6848b-293">Il `SampleDynamicObject` classe contiene un oggetto del `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` in Visual Basic) per archiviare le coppie chiave-valore.</span><span class="sxs-lookup"><span data-stu-id="6848b-293">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="6848b-294">`SampleDynamicObject` esegue l'override di <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> e <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> metodi per abilitare l'accesso in base all'indice.</span><span class="sxs-lookup"><span data-stu-id="6848b-294">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="6848b-295">Viene eseguito l'override di <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metodi per abilitare l'accesso in base al nome di proprietà.</span><span class="sxs-lookup"><span data-stu-id="6848b-295">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMember">
      <MemberSignature Language="C#" Value="public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetMember(class System.Dynamic.GetMemberBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetMember (binder As GetMemberBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetMember(System::Dynamic::GetMemberBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetMember : System.Dynamic.GetMemberBinder *  -&gt; bool&#xA;override this.TryGetMember : System.Dynamic.GetMemberBinder *  -&gt; bool" Usage="dynamicObject.TryGetMember (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetMemberBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="6848b-296">Fornisce informazioni sull'oggetto che ha chiamato l'operazione dinamica.</span><span class="sxs-lookup"><span data-stu-id="6848b-296">Provides information about the object that called the dynamic operation.</span></span> <span data-ttu-id="6848b-297">La proprietà <c>binder.Name</c> specifica il nome del membro su cui viene eseguita l'operazione dinamica.</span><span class="sxs-lookup"><span data-stu-id="6848b-297">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span></span> <span data-ttu-id="6848b-298">Ad esempio, per l'istruzione <c>Console.WriteLine(sampleObject.SampleProperty)</c>, dove <c>sampleObject</c> è un'istanza della classe derivata dalla classe <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Name</c> restituisce "SampleProperty".</span><span class="sxs-lookup"><span data-stu-id="6848b-298">For example, for the <c>Console.WriteLine(sampleObject.SampleProperty)</c> statement, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span></span> <span data-ttu-id="6848b-299">La proprietà <c>binder.IgnoreCase</c> specifica se per il nome del membro viene applicata la distinzione tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="6848b-299">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="result"><span data-ttu-id="6848b-300">Risultato dell'operazione get.</span><span class="sxs-lookup"><span data-stu-id="6848b-300">The result of the get operation.</span></span> <span data-ttu-id="6848b-301">Ad esempio, se il metodo viene chiamato per una proprietà, è possibile assegnare il valore della proprietà a <paramref name="result" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-301">For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</span></span></param>
        <summary><span data-ttu-id="6848b-302">Fornisce l'implementazione per operazioni che ottengono valori dei membri.</span><span class="sxs-lookup"><span data-stu-id="6848b-302">Provides the implementation for operations that get member values.</span></span> <span data-ttu-id="6848b-303">Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni quale l'acquisizione di un valore per una proprietà.</span><span class="sxs-lookup"><span data-stu-id="6848b-303">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</span></span></summary>
        <returns><span data-ttu-id="6848b-304"><see langword="true" /> se l'operazione riesce; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-304"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6848b-305">Se questo metodo restituisce <see langword="false" />, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-305">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-306">Nella maggior parte dei casi viene generata eccezione di runtime.</span><span class="sxs-lookup"><span data-stu-id="6848b-306">(In most cases, a run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6848b-307">Le classi derivate dal <xref:System.Dynamic.DynamicObject> classe può eseguire l'override di questo metodo per specificare come devono essere eseguite le operazioni che ottengono i valori del membro per un oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="6848b-307">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object.</span></span> <span data-ttu-id="6848b-308">Se il metodo non è sottoposto a override, il binder di runtime del linguaggio determina il comportamento.</span><span class="sxs-lookup"><span data-stu-id="6848b-308">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-309">Nella maggior parte dei casi viene generata eccezione di runtime.</span><span class="sxs-lookup"><span data-stu-id="6848b-309">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="6848b-310">Questo metodo viene chiamato quando si dispone di istruzioni, ad esempio `Console.WriteLine(sampleObject.SampleProperty)`, dove `sampleObject` è un'istanza della classe derivata dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-310">This method is called when you have statements like `Console.WriteLine(sampleObject.SampleProperty)`, where `sampleObject` is an instance of the class derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="6848b-311">È anche possibile aggiungere i propri membri alle classi derivate dal `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-311">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="6848b-312">Se la classe definisce le proprietà ed esegue l'override di <xref:System.Dynamic.DynamicObject.TrySetMember%2A> (metodo), dynamic language runtime (DLR) prima di tutto viene utilizzato lo strumento di associazione di linguaggio per cercare una definizione di una proprietà nella classe statica.</span><span class="sxs-lookup"><span data-stu-id="6848b-312">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="6848b-313">Se è presente nessuna di tali proprietà, DLR chiama il <xref:System.Dynamic.DynamicObject.TrySetMember%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="6848b-313">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6848b-314">Si supponga di voler fornire una sintassi alternativa per l'accesso ai valori in un dizionario, in modo che anziché la scrittura `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), è possibile scrivere `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="6848b-314">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="6848b-315">Inoltre, questa sintassi deve essere tra maiuscole e minuscole, in modo che `sampleDictionary.Text` equivale a `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="6848b-315">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="6848b-316">L'esempio di codice seguente illustra il `DynamicDictionary` classe che deriva dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-316">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="6848b-317">Il `DynamicDictionary` classe contiene un oggetto del `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` in Visual Basic) per archiviare le coppie chiave-valore ed esegue l'override di <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metodi per supportare la nuova sintassi.</span><span class="sxs-lookup"><span data-stu-id="6848b-317">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="6848b-318">Fornisce inoltre un `Count` contiene proprietà, che mostra quanti proprietà dinamiche del dizionario.</span><span class="sxs-lookup"><span data-stu-id="6848b-318">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvoke">
      <MemberSignature Language="C#" Value="public virtual bool TryInvoke (System.Dynamic.InvokeBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvoke(class System.Dynamic.InvokeBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvoke (binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvoke(System::Dynamic::InvokeBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvoke : System.Dynamic.InvokeBinder * obj[] *  -&gt; bool&#xA;override this.TryInvoke : System.Dynamic.InvokeBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryInvoke (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="6848b-319">Fornisce informazioni sull'operazione invoke.</span><span class="sxs-lookup"><span data-stu-id="6848b-319">Provides information about the invoke operation.</span></span></param>
        <param name="args"><span data-ttu-id="6848b-320">Argomenti passati all'oggetto durante l'operazione invoke.</span><span class="sxs-lookup"><span data-stu-id="6848b-320">The arguments that are passed to the object during the invoke operation.</span></span> <span data-ttu-id="6848b-321">Ad esempio, per l'operazione <c>sampleObject(100)</c>, dove <c>sampleObject</c> è derivato dalla classe <see cref="T:System.Dynamic.DynamicObject" />, <c>args[0]</c> è uguale a 100.</span><span class="sxs-lookup"><span data-stu-id="6848b-321">For example, for the <c>sampleObject(100)</c> operation, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="6848b-322">Risultato della chiamata all'oggetto.</span><span class="sxs-lookup"><span data-stu-id="6848b-322">The result of the object invocation.</span></span></param>
        <summary><span data-ttu-id="6848b-323">Fornisce l'implementazione per operazioni che richiamano un oggetto.</span><span class="sxs-lookup"><span data-stu-id="6848b-323">Provides the implementation for operations that invoke an object.</span></span> <span data-ttu-id="6848b-324">Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni quale il richiamo di un oggetto o un delegato.</span><span class="sxs-lookup"><span data-stu-id="6848b-324">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</span></span></summary>
        <returns><span data-ttu-id="6848b-325"><see langword="true" /> se l'operazione riesce; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-325"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6848b-326">Se questo metodo restituisce <see langword="false" />, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-326">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-327">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-327">(In most cases, a language-specific run-time exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6848b-328">Le classi derivate dal <xref:System.Dynamic.DynamicObject> classe può eseguire l'override di questo metodo per specificare come devono essere eseguite le operazioni che richiamano un oggetto per un oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="6848b-328">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object.</span></span> <span data-ttu-id="6848b-329">Se il metodo non è sottoposto a override, il binder di runtime del linguaggio determina il comportamento.</span><span class="sxs-lookup"><span data-stu-id="6848b-329">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-330">Nella maggior parte dei casi viene generata eccezione di runtime.</span><span class="sxs-lookup"><span data-stu-id="6848b-330">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="6848b-331">Se viene eseguito l'override di questo metodo, viene richiamato automaticamente quando si esegue un'operazione quale `sampleObject(100)`, dove `sampleObject` è derivato dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-331">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject(100)`, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="6848b-332">L'operazione per richiamare un oggetto è supportato in c#, ma non in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="6848b-332">The operation for invoking an object is supported in C# but not in Visual Basic.</span></span> <span data-ttu-id="6848b-333">Il compilatore Visual Basic non genera mai il codice per usare questo metodo e il linguaggio Visual Basic non supporta una sintassi come `sampleObject(100)`.</span><span class="sxs-lookup"><span data-stu-id="6848b-333">The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like `sampleObject(100)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6848b-334">Si supponga che sia necessaria una struttura di dati per archiviare le rappresentazioni testuali e numeriche di numeri.</span><span class="sxs-lookup"><span data-stu-id="6848b-334">Assume that you need a data structure to store textual and numeric representations of numbers.</span></span> <span data-ttu-id="6848b-335">Si desidera essere in grado di specificare il valore per ogni proprietà singolarmente e anche essere in grado di inizializzare tutte le proprietà in una singola istruzione.</span><span class="sxs-lookup"><span data-stu-id="6848b-335">You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.</span></span>  
  
 <span data-ttu-id="6848b-336">L'esempio di codice seguente illustra il `DynamicNumber` classe che deriva dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-336">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="6848b-337">`DynamicNumber` esegue l'override di <xref:System.Dynamic.DynamicObject.TryInvoke%2A> metodo per abilitare l'inizializzazione di tutte le proprietà in una sola volta.</span><span class="sxs-lookup"><span data-stu-id="6848b-337">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryInvoke%2A> method to enable initialization of all properties at one time.</span></span> <span data-ttu-id="6848b-338">Viene anche eseguito l'override di <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metodi per abilitare l'accesso alle proprietà degli oggetti singoli.</span><span class="sxs-lookup"><span data-stu-id="6848b-338">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to individual object properties.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvokeMember">
      <MemberSignature Language="C#" Value="public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvokeMember(class System.Dynamic.InvokeMemberBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvokeMember (binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvokeMember(System::Dynamic::InvokeMemberBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] *  -&gt; bool&#xA;override this.TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryInvokeMember (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeMemberBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="6848b-339">Fornisce informazioni sull'operazione dinamica.</span><span class="sxs-lookup"><span data-stu-id="6848b-339">Provides information about the dynamic operation.</span></span> <span data-ttu-id="6848b-340">La proprietà <c>binder.Name</c> specifica il nome del membro su cui viene eseguita l'operazione dinamica.</span><span class="sxs-lookup"><span data-stu-id="6848b-340">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span></span> <span data-ttu-id="6848b-341">Ad esempio, per l'istruzione <c>sampleObject.SampleMethod(100)</c>, dove <c>sampleObject</c> è un'istanza della classe derivata dalla classe <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Name</c> restituisce "SampleMethod".</span><span class="sxs-lookup"><span data-stu-id="6848b-341">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleMethod".</span></span> <span data-ttu-id="6848b-342">La proprietà <c>binder.IgnoreCase</c> specifica se per il nome del membro viene applicata la distinzione tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="6848b-342">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="args"><span data-ttu-id="6848b-343">Argomenti passati al membro dell'oggetto durante l'operazione invoke.</span><span class="sxs-lookup"><span data-stu-id="6848b-343">The arguments that are passed to the object member during the invoke operation.</span></span> <span data-ttu-id="6848b-344">Ad esempio, per l'istruzione <c>sampleObject.SampleMethod(100)</c>, dove <c>sampleObject</c> è derivato dalla classe <see cref="T:System.Dynamic.DynamicObject" />, <c>args [0]</c> è uguale a 100.</span><span class="sxs-lookup"><span data-stu-id="6848b-344">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="6848b-345">Risultato della chiamata al membro.</span><span class="sxs-lookup"><span data-stu-id="6848b-345">The result of the member invocation.</span></span></param>
        <summary><span data-ttu-id="6848b-346">Fornisce l'implementazione per operazioni che richiamano un membro.</span><span class="sxs-lookup"><span data-stu-id="6848b-346">Provides the implementation for operations that invoke a member.</span></span> <span data-ttu-id="6848b-347">Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni quale la chiamata a un metodo.</span><span class="sxs-lookup"><span data-stu-id="6848b-347">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.</span></span></summary>
        <returns><span data-ttu-id="6848b-348"><see langword="true" /> se l'operazione riesce; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-348"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6848b-349">Se questo metodo restituisce <see langword="false" />, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-349">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-350">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-350">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6848b-351">Le classi derivate dal <xref:System.Dynamic.DynamicObject> classe può eseguire l'override di questo metodo per specificare come devono essere eseguite le operazioni che richiamano un membro dell'oggetto per un oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="6848b-351">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object.</span></span> <span data-ttu-id="6848b-352">Se il metodo non è sottoposto a override, il binder di runtime del linguaggio determina il comportamento.</span><span class="sxs-lookup"><span data-stu-id="6848b-352">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-353">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-353">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="6848b-354">Se viene eseguito l'override di questo metodo, viene richiamato automaticamente quando si esegue un'operazione simile `sampleObject.SampleMethod(100)`, dove `sampleObject` è derivato dal `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-354">If this method is overridden, it is automatically invoked when you perform an operation like `sampleObject.SampleMethod(100)`, where `sampleObject` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="6848b-355">È anche possibile aggiungere i propri metodi alle classi che derivano dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-355">You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="6848b-356">Ad esempio, se si esegue l'override di <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> metodo, il sistema di invio dinamico innanzitutto tenta di determinare se il metodo specificato è presente nella classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-356">For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class.</span></span> <span data-ttu-id="6848b-357">Se il metodo non viene trovato, viene usato il <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-357">If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation.</span></span>  
  
 <span data-ttu-id="6848b-358">Questo metodo non supporta `ref` e `out` parametri.</span><span class="sxs-lookup"><span data-stu-id="6848b-358">This method does not support `ref` and `out` parameters.</span></span> <span data-ttu-id="6848b-359">Tutti i parametri di `args` matrice vengono passati per valore.</span><span class="sxs-lookup"><span data-stu-id="6848b-359">All parameters in the `args` array are passed by value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6848b-360">Si supponga di voler fornire una sintassi alternativa per l'accesso ai valori in un dizionario, in modo che anziché la scrittura `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), è possibile scrivere `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="6848b-360">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="6848b-361">Inoltre, si desidera essere in grado di chiamare tutti i metodi di dizionario standard in questo dizionario.</span><span class="sxs-lookup"><span data-stu-id="6848b-361">Also, you want to be able to call all the standard dictionary methods on this dictionary.</span></span>  
  
 <span data-ttu-id="6848b-362">L'esempio di codice seguente illustra il `DynamicDictionary` classe che deriva dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-362">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="6848b-363">Il `DynamicDictionary` classe contiene un oggetto del `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` in Visual Basic) per archiviare le coppie chiave-valore.</span><span class="sxs-lookup"><span data-stu-id="6848b-363">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="6848b-364">Viene eseguito l'override di <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> metodo per supportare i metodi del <xref:System.Collections.Generic.Dictionary%602> classe ed esegue l'override la <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metodi per supportare la nuova sintassi.</span><span class="sxs-lookup"><span data-stu-id="6848b-364">It overrides the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method to support methods of the <xref:System.Collections.Generic.Dictionary%602> class and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="6848b-365">Fornisce inoltre un `Print` metodo, che stampa tutti i valori e le chiavi del dizionario.</span><span class="sxs-lookup"><span data-stu-id="6848b-365">It also provides a `Print` method, which prints out all dictionary keys and values.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#6)]
 [!code-vb[System.Dynamic.DynamicObject#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetIndex(class System.Dynamic.SetIndexBinder binder, object[] indexes, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetIndex (binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetIndex(System::Dynamic::SetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool&#xA;override this.TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TrySetIndex (binder, indexes, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="6848b-366">Fornisce informazioni sull'operazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-366">Provides information about the operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="6848b-367">Indici utilizzati nell'operazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-367">The indexes that are used in the operation.</span></span> <span data-ttu-id="6848b-368">Ad esempio, per l'operazione <c>sampleObject[3] = 10</c> in C# (<c>sampleObject(3) = 10</c> in Visual Basic), dove <c>sampleObject</c> è derivato dalla classe <see cref="T:System.Dynamic.DynamicObject" />, <c>indexes[0]</c> è uguale a 3.</span><span class="sxs-lookup"><span data-stu-id="6848b-368">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span></span></param>
        <param name="value"><span data-ttu-id="6848b-369">Valore da impostare per l'oggetto con l'indice specificato.</span><span class="sxs-lookup"><span data-stu-id="6848b-369">The value to set to the object that has the specified index.</span></span> <span data-ttu-id="6848b-370">Ad esempio, per l'operazione <c>sampleObject[3] = 10</c> in C# (<c>sampleObject(3) = 10</c> in Visual Basic), dove <c>sampleObject</c> è derivato dalla classe <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="value" /> è uguale a 10.</span><span class="sxs-lookup"><span data-stu-id="6848b-370">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</span></span></param>
        <summary><span data-ttu-id="6848b-371">Fornisce l'implementazione per operazioni che impostano un valore in base all'indice.</span><span class="sxs-lookup"><span data-stu-id="6848b-371">Provides the implementation for operations that set a value by index.</span></span> <span data-ttu-id="6848b-372">Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni che accedono a oggetti in base a un indice specificato.</span><span class="sxs-lookup"><span data-stu-id="6848b-372">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</span></span></summary>
        <returns><span data-ttu-id="6848b-373"><see langword="true" /> se l'operazione riesce; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-373"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6848b-374">Se questo metodo restituisce <see langword="false" />, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-374">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-375">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-375">(In most cases, a language-specific run-time exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6848b-376">Le classi derivate dal <xref:System.Dynamic.DynamicObject> classe può eseguire l'override di questo metodo per specificare come devono essere eseguite le operazioni che accedono a un oggetto in base all'indice per un oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="6848b-376">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object.</span></span> <span data-ttu-id="6848b-377">Se il metodo non è sottoposto a override, il binder di runtime del linguaggio determina il comportamento.</span><span class="sxs-lookup"><span data-stu-id="6848b-377">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-378">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-378">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="6848b-379">Se viene eseguito l'override di questo metodo, viene richiamato automaticamente quando si esegue un'operazione quale `sampleObject[3] = 10` in c# o `sampleObject(3) = 10` in Visual Basic, in cui `sampleObject` è derivato dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-379">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3] = 10` in C# or `sampleObject(3) = 10` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6848b-380">Si supponga che si desidera creare un oggetto in cui le proprietà possono essere accessibili tramite i nomi, ad esempio `Property0`, `Property1`e così via, o in base all'indice, in modo che, ad esempio `sampleObject.Property0` equivale a `sampleObject[0]` in c# o `sampleObject(0)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="6848b-380">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="6848b-381">L'esempio di codice seguente illustra il `SampleDynamicObject` classe che deriva dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-381">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="6848b-382">Il `SampleDynamicObject` classe contiene un oggetto del `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` in Visual Basic) per archiviare le coppie chiave-valore.</span><span class="sxs-lookup"><span data-stu-id="6848b-382">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="6848b-383">`SampleDynamicObject` esegue l'override di <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> e <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> metodi per abilitare l'accesso in base all'indice.</span><span class="sxs-lookup"><span data-stu-id="6848b-383">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="6848b-384">Viene eseguito l'override di <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metodi per abilitare l'accesso in base al nome di proprietà.</span><span class="sxs-lookup"><span data-stu-id="6848b-384">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetMember">
      <MemberSignature Language="C#" Value="public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetMember(class System.Dynamic.SetMemberBinder binder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetMember (binder As SetMemberBinder, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetMember(System::Dynamic::SetMemberBinder ^ binder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool&#xA;override this.TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool" Usage="dynamicObject.TrySetMember (binder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetMemberBinder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="6848b-385">Fornisce informazioni sull'oggetto che ha chiamato l'operazione dinamica.</span><span class="sxs-lookup"><span data-stu-id="6848b-385">Provides information about the object that called the dynamic operation.</span></span> <span data-ttu-id="6848b-386">La proprietà <c>binder.Name</c> specifica il nome del membro a cui viene assegnato il valore.</span><span class="sxs-lookup"><span data-stu-id="6848b-386">The <c>binder.Name</c> property provides the name of the member to which the value is being assigned.</span></span> <span data-ttu-id="6848b-387">Ad esempio, per l'istruzione <c>sampleObject.SampleProperty = "Test"</c>, dove <c>sampleObject</c> è un'istanza della classe derivata dalla classe <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Name</c> restituisce "SampleProperty".</span><span class="sxs-lookup"><span data-stu-id="6848b-387">For example, for the statement <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span></span> <span data-ttu-id="6848b-388">La proprietà <c>binder.IgnoreCase</c> specifica se per il nome del membro viene applicata la distinzione tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="6848b-388">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="value"><span data-ttu-id="6848b-389">Valore su cui impostare il membro.</span><span class="sxs-lookup"><span data-stu-id="6848b-389">The value to set to the member.</span></span> <span data-ttu-id="6848b-390">Ad esempio, per l'istruzione <c>sampleObject.SampleProperty = "Test"</c>, dove <c>sampleObject</c> è un'istanza della classe derivata dalla classe <see cref="T:System.Dynamic.DynamicObject" />, l'elemento <paramref name="value" /> è "Test".</span><span class="sxs-lookup"><span data-stu-id="6848b-390">For example, for <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</span></span></param>
        <summary><span data-ttu-id="6848b-391">Fornisce l'implementazione per operazioni che impostano valori dei membri.</span><span class="sxs-lookup"><span data-stu-id="6848b-391">Provides the implementation for operations that set member values.</span></span> <span data-ttu-id="6848b-392">Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni quale l'impostazione di un valore per una proprietà.</span><span class="sxs-lookup"><span data-stu-id="6848b-392">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</span></span></summary>
        <returns><span data-ttu-id="6848b-393"><see langword="true" /> se l'operazione riesce; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-393"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6848b-394">Se questo metodo restituisce <see langword="false" />, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-394">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-395">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-395">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6848b-396">Le classi derivate dal <xref:System.Dynamic.DynamicObject> classe può eseguire l'override di questo metodo per specificare come devono essere eseguite le operazioni che impostano un valore a un membro di un oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="6848b-396">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object.</span></span> <span data-ttu-id="6848b-397">Se il metodo non è sottoposto a override, il binder di runtime del linguaggio determina il comportamento.</span><span class="sxs-lookup"><span data-stu-id="6848b-397">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-398">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-398">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="6848b-399">Questo metodo viene chiamato quando si dispone di istruzioni, ad esempio `sampleObject.SampleProperty = "Test"`, dove `sampleObject` è un'istanza della classe che deriva dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-399">This method is called when you have statements like `sampleObject.SampleProperty = "Test"`, where `sampleObject` is an instance of the class that is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="6848b-400">È anche possibile aggiungere i propri membri alle classi derivate dal `DynamicObject` classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-400">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="6848b-401">Se la classe definisce le proprietà ed esegue l'override di <xref:System.Dynamic.DynamicObject.TrySetMember%2A> (metodo), dynamic language runtime (DLR) prima di tutto viene utilizzato lo strumento di associazione di linguaggio per cercare una definizione di una proprietà nella classe statica.</span><span class="sxs-lookup"><span data-stu-id="6848b-401">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="6848b-402">Se è presente nessuna di tali proprietà, DLR chiama il <xref:System.Dynamic.DynamicObject.TrySetMember%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="6848b-402">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6848b-403">Si supponga di voler fornire una sintassi alternativa per l'accesso ai valori in un dizionario, in modo che anziché la scrittura `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), è possibile scrivere `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="6848b-403">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="6848b-404">Inoltre, questa sintassi deve essere tra maiuscole e minuscole, in modo che `sampleDictionary.Text` equivale a `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="6848b-404">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="6848b-405">L'esempio di codice seguente illustra il `DynamicDictionary` classe che deriva dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-405">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="6848b-406">Il `DynamicDictionary` classe contiene un oggetto del `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` in Visual Basic) per archiviare le coppie chiave-valore ed esegue l'override di <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metodi per supportare la nuova sintassi.</span><span class="sxs-lookup"><span data-stu-id="6848b-406">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="6848b-407">Fornisce inoltre un `Count` contiene proprietà, che mostra quanti proprietà dinamiche del dizionario.</span><span class="sxs-lookup"><span data-stu-id="6848b-407">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUnaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUnaryOperation(class System.Dynamic.UnaryOperationBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryUnaryOperation (binder As UnaryOperationBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryUnaryOperation(System::Dynamic::UnaryOperationBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryUnaryOperation : System.Dynamic.UnaryOperationBinder *  -&gt; bool&#xA;override this.TryUnaryOperation : System.Dynamic.UnaryOperationBinder *  -&gt; bool" Usage="dynamicObject.TryUnaryOperation (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.UnaryOperationBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="6848b-408">Fornisce informazioni sull'operazione unaria.</span><span class="sxs-lookup"><span data-stu-id="6848b-408">Provides information about the unary operation.</span></span> <span data-ttu-id="6848b-409">La proprietà <c>binder.Operation</c> restituisce un oggetto <see cref="T:System.Linq.Expressions.ExpressionType" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-409">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span></span> <span data-ttu-id="6848b-410">Ad esempio, per l'istruzione <c>negativeNumber = -number</c>, dove <c>number</c> è derivato dalla classe <see langword="DynamicObject" />, <c>binder.Operation</c> restituisce "Negate".</span><span class="sxs-lookup"><span data-stu-id="6848b-410">For example, for the <c>negativeNumber = -number</c> statement, where <c>number</c> is derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns "Negate".</span></span></param>
        <param name="result"><span data-ttu-id="6848b-411">Risultato dell'operazione unaria.</span><span class="sxs-lookup"><span data-stu-id="6848b-411">The result of the unary operation.</span></span></param>
        <summary><span data-ttu-id="6848b-412">Fornisce l'implementazione per le operazioni unarie.</span><span class="sxs-lookup"><span data-stu-id="6848b-412">Provides implementation for unary operations.</span></span> <span data-ttu-id="6848b-413">Le classi derivate dalla classe <see cref="T:System.Dynamic.DynamicObject" /> possono eseguire l'override di questo metodo per specificare il comportamento dinamico per operazioni quale negazione, incremento o decremento.</span><span class="sxs-lookup"><span data-stu-id="6848b-413">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</span></span></summary>
        <returns><span data-ttu-id="6848b-414"><see langword="true" /> se l'operazione riesce; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6848b-414"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6848b-415">Se questo metodo restituisce <see langword="false" />, il comportamento viene determinato dal gestore di associazione di runtime del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-415">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-416">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-416">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6848b-417">Le classi derivate dal <xref:System.Dynamic.DynamicObject> classe può eseguire l'override di questo metodo per specificare come operazioni unarie devono essere eseguite per un oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="6848b-417">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="6848b-418">Se il metodo non è sottoposto a override, il binder di runtime del linguaggio determina il comportamento.</span><span class="sxs-lookup"><span data-stu-id="6848b-418">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="6848b-419">Nella maggior parte dei casi viene generata un'eccezione di runtime specifica del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="6848b-419">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="6848b-420">Questo metodo viene chiamato quando si hanno operazioni unarie, ad esempio negazione, incremento o decremento.</span><span class="sxs-lookup"><span data-stu-id="6848b-420">This method is called when you have unary operations such as negation, increment, or decrement.</span></span> <span data-ttu-id="6848b-421">Ad esempio, se il <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> è sottoposto a override, questo metodo viene richiamato automaticamente, ad esempio le istruzioni `negativeNumber = -number`, dove `number` è derivato dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-421">For example, if the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method is overridden, this method is automatically invoked for statements like `negativeNumber = -number`, where `number` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="6848b-422">È possibile ottenere informazioni sul tipo di operazione unaria usando il `Operation` proprietà del `binder` parametro.</span><span class="sxs-lookup"><span data-stu-id="6848b-422">You can get information about the type of the unary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="6848b-423">Se l'oggetto dinamico viene usato solo in c# e Visual Basic, il `binder.Operation` proprietà può avere uno dei seguenti valori dal <xref:System.Linq.Expressions.ExpressionType> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-423">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="6848b-424">In altri linguaggi, ad esempio IronPython o IronRuby, tuttavia, si possono avere altri valori.</span><span class="sxs-lookup"><span data-stu-id="6848b-424">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="6848b-425">Valore</span><span class="sxs-lookup"><span data-stu-id="6848b-425">Value</span></span>|<span data-ttu-id="6848b-426">Descrizione</span><span class="sxs-lookup"><span data-stu-id="6848b-426">Description</span></span>|<span data-ttu-id="6848b-427">C#</span><span class="sxs-lookup"><span data-stu-id="6848b-427">C#</span></span>|<span data-ttu-id="6848b-428">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="6848b-428">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Decrement`|<span data-ttu-id="6848b-429">Un'operazione di decremento unaria.</span><span class="sxs-lookup"><span data-stu-id="6848b-429">A unary decrement operation.</span></span>|`a--`|<span data-ttu-id="6848b-430">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-430">Not supported.</span></span>|  
|`Increment`|<span data-ttu-id="6848b-431">Un'operazione di incremento unaria.</span><span class="sxs-lookup"><span data-stu-id="6848b-431">A unary increment operation.</span></span>|`a++`|<span data-ttu-id="6848b-432">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-432">Not supported.</span></span>|  
|`Negate`|<span data-ttu-id="6848b-433">Negazione aritmetica.</span><span class="sxs-lookup"><span data-stu-id="6848b-433">An arithmetic negation.</span></span>|`-a`|`-a`|  
|`Not`|<span data-ttu-id="6848b-434">Negazione logica.</span><span class="sxs-lookup"><span data-stu-id="6848b-434">A logical negation.</span></span>|`!a`|`Not a`|  
|`OnesComplement`|<span data-ttu-id="6848b-435">Un quelli complemento.</span><span class="sxs-lookup"><span data-stu-id="6848b-435">A ones complement.</span></span>|`~a`|<span data-ttu-id="6848b-436">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-436">Not supported.</span></span>|  
|`IsFalse`|<span data-ttu-id="6848b-437">Valore di una condizione false.</span><span class="sxs-lookup"><span data-stu-id="6848b-437">A false condition value.</span></span>|`a && b`|<span data-ttu-id="6848b-438">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-438">Not supported.</span></span>|  
|`IsTrue`|<span data-ttu-id="6848b-439">Un valore della condizione true.</span><span class="sxs-lookup"><span data-stu-id="6848b-439">A true condition value.</span></span>|`a &#124;&#124; b`|<span data-ttu-id="6848b-440">Non supportato.</span><span class="sxs-lookup"><span data-stu-id="6848b-440">Not supported.</span></span>|  
|`UnaryPlus`|<span data-ttu-id="6848b-441">Un operatore più unario.</span><span class="sxs-lookup"><span data-stu-id="6848b-441">A unary plus.</span></span>|`+a`|`+a`|  
  
> [!NOTE]
>  <span data-ttu-id="6848b-442">Per implementare `OrElse` (`a || b`) e `AndAlso` (`a && b`) operazioni per gli oggetti dinamici in c#, si può essere utile implementare entrambi i <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> metodo e il <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="6848b-442">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="6848b-443">Il `OrElse` operazione è costituita da unari `IsTrue` operazione e il file binario `Or` operazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-443">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="6848b-444">Il `Or` operazione viene eseguita solo se il risultato del `IsTrue` operazione `false`.</span><span class="sxs-lookup"><span data-stu-id="6848b-444">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="6848b-445">Il `AndAlso` operazione è costituita da unari `IsFalse` operazione e il file binario `And` operazione.</span><span class="sxs-lookup"><span data-stu-id="6848b-445">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="6848b-446">Il `And` operazione viene eseguita solo se il risultato del `IsFalse` operazione `false`.</span><span class="sxs-lookup"><span data-stu-id="6848b-446">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6848b-447">Si supponga che sia necessaria una struttura di dati per archiviare le rappresentazioni testuali e numeriche di numeri e si vuole definire un'operazione di negazione matematici per questo tipo di dati.</span><span class="sxs-lookup"><span data-stu-id="6848b-447">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.</span></span>  
  
 <span data-ttu-id="6848b-448">L'esempio di codice seguente illustra il `DynamicNumber` classe che deriva dal <xref:System.Dynamic.DynamicObject> classe.</span><span class="sxs-lookup"><span data-stu-id="6848b-448">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="6848b-449">`DynamicNumber` esegue l'override di <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> metodo per consentire l'operazione di negazione matematiche.</span><span class="sxs-lookup"><span data-stu-id="6848b-449">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method to enable the mathematical negation operation.</span></span> <span data-ttu-id="6848b-450">Viene anche eseguito l'override di <xref:System.Dynamic.DynamicObject.TrySetMember%2A> e <xref:System.Dynamic.DynamicObject.TryGetMember%2A> metodi per abilitare l'accesso agli elementi.</span><span class="sxs-lookup"><span data-stu-id="6848b-450">Is also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="6848b-451">In questo esempio, è supportata solo l'operazione di negazione matematiche.</span><span class="sxs-lookup"><span data-stu-id="6848b-451">In this example, only the mathematical negation operation is supported.</span></span> <span data-ttu-id="6848b-452">Se si prova a scrivere un'istruzione come `negativeNumber = +number`, si verifica un'eccezione in fase di esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6848b-452">If you try to write a statement like `negativeNumber = +number`, a run-time exception occurs.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#7)]
 [!code-vb[System.Dynamic.DynamicObject#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>