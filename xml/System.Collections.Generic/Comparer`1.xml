<Type Name="Comparer&lt;T&gt;" FullName="System.Collections.Generic.Comparer&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3605f22f18741f9d594c6aa830f85604d9b8bf52" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37701653" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Comparer&lt;T&gt; : System.Collections.Generic.IComparer&lt;T&gt;, System.Collections.IComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Comparer`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IComparer`1&lt;!T&gt;, class System.Collections.IComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Comparer`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Comparer(Of T)&#xA;Implements IComparer, IComparer(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Comparer abstract : System::Collections::Generic::IComparer&lt;T&gt;, System::Collections::IComparer" />
  <TypeSignature Language="F#" Value="type Comparer&lt;'T&gt; = class&#xA;    interface IComparer&#xA;    interface IComparer&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Tipo di oggetti da confrontare.</typeparam>
    <summary>Fornisce una classe base per le implementazioni dell'interfaccia generica <see cref="T:System.Collections.Generic.IComparer`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Derivare da questa classe per fornire un'implementazione personalizzata del <xref:System.Collections.Generic.IComparer%601> interfaccia per l'uso con classi di raccolta, ad esempio il <xref:System.Collections.Generic.SortedList%602> e <xref:System.Collections.Generic.SortedDictionary%602> classi generiche.  
  
 La differenza tra la derivazione dal <xref:System.Collections.Generic.Comparer%601> classe e l'implementazione di <xref:System.IComparable?displayProperty=nameWithType> interfaccia è come segue:  
  
-   Per specificare la modalità di due oggetti devono essere confrontati per impostazione predefinita, implementare il <xref:System.IComparable?displayProperty=nameWithType> interfaccia nella classe. Ciò garantisce che le operazioni di ordinamento userà il codice di confronto predefinito fornito dall'utente.  
  
-   Per definire un operatore di confronto da utilizzare anziché l'operatore di confronto predefinito, derivare dal <xref:System.Collections.Generic.Comparer%601> classe. È quindi possibile utilizzare questo operatore di confronto nelle operazioni di ordinamento che accettano un operatore di confronto come parametro.  
  
 L'oggetto restituito dal <xref:System.Collections.Generic.Comparer%601.Default%2A> utilizzata dalla proprietà di <xref:System.IComparable%601?displayProperty=nameWithType> generico interfaccia (`IComparable<T>` in c#, `IComparable(Of T)` in Visual Basic) per confrontare due oggetti. Se tipo `T` non implementa il <xref:System.IComparable%601?displayProperty=nameWithType> generico interfaccia, il <xref:System.Collections.Generic.Comparer%601.Default%2A> restituisce proprietà una <xref:System.Collections.Generic.Comparer%601> che usa il <xref:System.IComparable?displayProperty=nameWithType> interfaccia.  
  
   
  
## Examples  
 Nell'esempio seguente deriva una classe `BoxLengthFirst`, dal <xref:System.Collections.Generic.Comparer%601> classe. Questo operatore di confronto Confronta due oggetti di tipo `Box`. Li ordina innanzitutto in base alla lunghezza, altezza e dalla larghezza. Il `Box` classe implementa le <xref:System.IComparable%601> interfaccia per controllare il confronto predefinito tra due `Box` oggetti. Questa implementazione predefinita viene ordinata prima per l'altezza, lunghezza e dalla larghezza. L'esempio illustra le differenze tra i confronti per ordinare un elenco di due `Box` oggetti prima di tutto tramite il `BoxLengthFirst` operatore di confronto e quindi usando l'operatore di confronto.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.BoxCompare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> e <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> potrebbe comportarsi in modo diverso in termini di sensibilità alla lingua e riconoscimento maiuscole/minuscole.  Per i confronti di stringhe, il <see cref="T:System.StringComparer" /> classe è consigliata rispetto <c>Comparer&lt;stringa&gt;</c>.  Proprietà del <see cref="T:System.StringComparer" /> classe restituire istanze predefinite che eseguono confronti tra stringhe con diverse combinazioni di distinzione maiuscole/minuscole e distinzione di impostazioni cultura.  La distinzione maiuscole/minuscole e distinzione di impostazioni cultura sono coerenti tra i membri dello stesso <see cref="T:System.StringComparer" /> istanza.  Per altre informazioni sui confronti di impostazioni cultura specifiche, vedere il <see cref="N:System.Globalization" /> dello spazio dei nomi e [globalizzazione e Localization](~/docs/standard/globalization-localization/index.md).</para>
    </block>
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.StringComparer" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Comparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Comparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.Generic.Comparer`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (T x, T y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(!T x, !T y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As T, y As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(T x, T y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : 'T * 'T -&gt; int" Usage="comparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="T" />
      </Parameters>
      <Docs>
        <param name="x">Primo oggetto da confrontare.</param>
        <param name="y">Secondo oggetto da confrontare.</param>
        <summary>Quando è sottoposto a override in una classe derivata, esegue un confronto tra due oggetti dello stesso tipo e restituisce un valore che indica se un oggetto è minore, uguale o maggiore dell'altro.</summary>
        <returns>Intero con segno che indica i valori relativi di <paramref name="x" /> e <paramref name="y" />, come illustrato nella tabella seguente.  
  
 <list type="table"><listheader><term> Valore  </term><description> Significato  </description></listheader><item><term> Minore di zero  </term><description><paramref name="x" /> è minore di <paramref name="y" />.  </description></item><item><term> Zero  </term><description><paramref name="x" /> è uguale a <paramref name="y" />.  </description></item><item><term> Maggiore di zero  </term><description><paramref name="x" /> è maggiore di <paramref name="y" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare questo metodo per fornire un oggetto personalizzato per il tipo di confronto di ordinamento `T`.  
  
   
  
## Examples  
 L'esempio seguente definisce un operatore di confronto di `Box` gli oggetti che è possibile usare invece l'operatore di confronto predefinito. In questo esempio fa parte di un esempio più esaustivo disponibile per il <xref:System.Collections.Generic.Comparer%601> classe.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#5)]
 [!code-vb[System.Collections.Generic.BoxCompare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il tipo <paramref name="T" /> non implementa l'interfaccia generica <see cref="T:System.IComparable`1" /> o l'interfaccia <see cref="T:System.IComparable" />.</exception>
        <block subset="none" type="overrides">
          <para>Confronto tra <see langword="null" /> con qualsiasi riferimento di tipo è consentito e non genera un'eccezione. Un riferimento null viene considerato minore rispetto a qualsiasi riferimento che non sia null.  Per informazioni sui confronti di impostazioni cultura specifiche, vedere il <see cref="N:System.Globalization" /> dello spazio dei nomi e [globalizzazione e Localization](~/docs/standard/globalization-localization/index.md).</para>
        </block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Create (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Comparer`1&lt;!T&gt; Create(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (comparison As Comparison(Of T)) As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::Comparer&lt;T&gt; ^ Create(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="static member Create : Comparison&lt;'T&gt; -&gt; System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Create comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison">Confronto da utilizzare.</param>
        <summary>Crea un operatore di confronto utilizzando il confronto specificato.</summary>
        <returns>Nuovo operatore di confronto.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.Comparer`1&lt;!T&gt; Default" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Comparer`1.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::Comparer&lt;T&gt; ^ Default { System::Collections::Generic::Comparer&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce un operatore di confronto di ordinamento predefinito per il tipo specificato dall'argomento generico.</summary>
        <value>Oggetto che eredita l'oggetto <see cref="T:System.Collections.Generic.Comparer`1" /> e viene utilizzato come un operatore di confronto di ordinamento per il tipo <paramref name="T" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Collections.Generic.Comparer%601> restituita da questa proprietà Usa il <xref:System.IComparable%601?displayProperty=nameWithType> generico interfaccia (`IComparable<T>` in c#, `IComparable(Of T)` in Visual Basic) per confrontare due oggetti. Se tipo `T` non implementa le <xref:System.IComparable%601?displayProperty=nameWithType> interfaccia generica, questa proprietà restituisce una <xref:System.Collections.Generic.Comparer%601> che utilizza il <xref:System.IComparable?displayProperty=nameWithType> interfaccia.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Collections.Generic.Comparer%601.Default%2A> proprietà da ottenere un oggetto che esegue il confronto predefinito. In questo esempio fa parte di un esempio più esaustivo disponibile per il <xref:System.Collections.Generic.Comparer%601> classe.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxCompare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Per i confronti di stringhe, il <see cref="T:System.StringComparer" /> classe è consigliata rispetto <c>Comparer&lt;stringa&gt; </c> (<c>operatore di confronto (Of String)</c> in Visual Basic).  Proprietà del <see cref="T:System.StringComparer" /> classe restituire istanze predefinite che eseguono confronti tra stringhe con diverse combinazioni di distinzione maiuscole/minuscole e distinzione di impostazioni cultura.  La distinzione maiuscole/minuscole e distinzione di impostazioni cultura sono coerenti tra i membri dello stesso <see cref="T:System.StringComparer" /> istanza.  Per altre informazioni sui confronti di impostazioni cultura specifiche, vedere il <see cref="N:System.Globalization" /> dello spazio dei nomi e [globalizzazione e Localization](~/docs/standard/globalization-localization/index.md).</para>
        </block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">Primo oggetto da confrontare.</param>
        <param name="y">Secondo oggetto da confrontare.</param>
        <summary>Confronta due oggetti e restituisce un valore indicante se uno è minore, uguale o maggiore dell'altro.</summary>
        <returns>Intero con segno che indica i valori relativi di <paramref name="x" /> e <paramref name="y" />, come illustrato nella tabella seguente.  
  
 <list type="table"><listheader><term> Valore  </term><description> Significato  </description></listheader><item><term> Minore di zero  </term><description><paramref name="x" /> è minore di <paramref name="y" />.  </description></item><item><term> Zero  </term><description><paramref name="x" /> è uguale a <paramref name="y" />.  </description></item><item><term> Maggiore di zero  </term><description><paramref name="x" /> è maggiore di <paramref name="y" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un wrapper per il <xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29> metodo, pertanto `obj` necessario eseguire il cast al tipo specificato dall'argomento generico `T` dell'istanza corrente. Se non è possibile eseguire il cast da `T`, un <xref:System.ArgumentException> viene generata un'eccezione.  
  
 Confronto tra `null` con qualsiasi riferimento di tipo è consentito e non genera un'eccezione. Durante l'ordinamento, `null` è considerata minore rispetto a qualsiasi altro oggetto.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A> metodo per confrontare due oggetti. In questo esempio fa parte di un esempio più esaustivo disponibile per il <xref:System.Collections.Generic.Comparer%601> classe.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#4)]
 [!code-vb[System.Collections.Generic.BoxCompare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il tipo del parametro <paramref name="x" /> o <paramref name="y" /> non consente di effettuare il cast al tipo <paramref name="T" />.  -oppure-  I parametri <paramref name="x" /> e <paramref name="y" /> non implementano l'interfaccia generica <see cref="T:System.IComparable`1" /> o l'interfaccia <see cref="T:System.IComparable" />.</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> e <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> si comportano in modo diverso in termini di sensibilità alla lingua e riconoscimento maiuscole/minuscole.  Per i confronti di stringhe, il <see cref="T:System.StringComparer" /> classe è consigliata rispetto <c>Comparer&lt;stringa&gt;</c>.  Proprietà del <see cref="T:System.StringComparer" /> classe restituire istanze predefinite che eseguono confronti tra stringhe con diverse combinazioni di distinzione maiuscole/minuscole e distinzione di impostazioni cultura.  La distinzione maiuscole/minuscole e distinzione di impostazioni cultura sono coerenti tra i membri dello stesso <see cref="T:System.StringComparer" /> istanza.  Per altre informazioni sui confronti di impostazioni cultura specifiche, vedere il <see cref="N:System.Globalization" /> dello spazio dei nomi e [globalizzazione e Localization](~/docs/standard/globalization-localization/index.md).</para>
        </block>
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>