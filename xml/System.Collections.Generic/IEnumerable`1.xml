<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b070a7cd2a9068b0547b21f8ce100d5e69573a1c" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46637910" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Tipo degli oggetti da enumerare.</typeparam>
    <summary>Espone l'enumeratore, che supporta un'iterazione semplice su una raccolta di un tipo specificato.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerable%601> è l'interfaccia di base per le raccolte nel <xref:System.Collections.Generic> dello spazio dei nomi, ad esempio <xref:System.Collections.Generic.List%601>, <xref:System.Collections.Generic.Dictionary%602>, e <xref:System.Collections.Generic.Stack%601> e altre raccolte generiche, ad esempio <xref:System.Collections.ObjectModel.ObservableCollection%601> e <xref:System.Collections.Concurrent.ConcurrentStack%601>. Le raccolte che implementano <xref:System.Collections.Generic.IEnumerable%601> possono essere enumerate usando il `foreach` istruzione.  
  
 Per la versione non generica di questa interfaccia, vedere <xref:System.Collections.IEnumerable?displayProperty=nameWithType>.  
  
 <xref:System.Collections.Generic.IEnumerable%601> contiene un solo metodo che è necessario implementare quando si implementa questa interfaccia. <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>, che restituisce un <xref:System.Collections.Generic.IEnumerator%601> oggetto. L'oggetto restituito <xref:System.Collections.Generic.IEnumerator%601> offre la possibilità di scorrere la raccolta tramite l'esposizione di un <xref:System.Collections.Generic.IEnumerator%601.Current%2A> proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come implementare il <xref:System.Collections.Generic.IEnumerable%601> interfaccia e su come usare tale implementazione per creare una query LINQ. Quando si implementa <xref:System.Collections.Generic.IEnumerable%601>, è inoltre necessario implementare <xref:System.Collections.Generic.IEnumerator%601> oppure, solo per c#, è possibile utilizzare il [yield](~/docs/csharp/language-reference/keywords/yield.md) (parola chiave). Implementazione <xref:System.Collections.Generic.IEnumerator%601> richiede anche <xref:System.IDisposable> da implementare, che viene visualizzata in questo esempio.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 Per un altro esempio di c# che illustra come implementare il <xref:System.Collections.Generic.IEnumerable%601> dell'interfaccia, vedere la [Generics esempio](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). Questo esempio Usa la `yield` parola chiave anziché implementare <xref:System.Collections.Generic.IEnumerator%601>.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> è incluso per la parità con gli insiemi non generici. implementazione <see cref="T:System.Collections.Generic.IEnumerable`1" /> consente a una raccolta generica deve essere passato a un metodo che prevede un <see cref="T:System.Collections.IEnumerable" /> oggetto.</para>
    </block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
    <related type="Article" href="http://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">Procedura dettagliata: implementazione di IEnumerable(Of T) in Visual Basic</related>
    <related type="Article" href="http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">Iteratori (C# e Visual Basic)</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593">Esempio di generics</related>
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
        <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'oggetto restituito <xref:System.Collections.Generic.IEnumerator%601> offre la possibilità di scorrere la raccolta tramite l'esposizione di un <xref:System.Collections.Generic.IEnumerator%601.Current%2A> proprietà. È possibile utilizzare enumeratori per leggere i dati in una raccolta, ma non per modificare la raccolta.  
  
 Inizialmente l'enumeratore è posizionato davanti al primo elemento della raccolta. In questa posizione, la proprietà <xref:System.Collections.Generic.IEnumerator%601.Current%2A> è indefinita. Pertanto, è necessario chiamare il <xref:System.Collections.IEnumerator.MoveNext%2A> per passare l'enumeratore al primo elemento della raccolta prima di leggere il valore del metodo <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> Restituisce lo stesso oggetto finché <xref:System.Collections.IEnumerator.MoveNext%2A> viene chiamato nuovamente come <xref:System.Collections.IEnumerator.MoveNext%2A> imposta <xref:System.Collections.Generic.IEnumerator%601.Current%2A> all'elemento successivo.  
  
 Se <xref:System.Collections.IEnumerator.MoveNext%2A> raggiunge la fine della raccolta, l'enumeratore è posizionato dopo l'ultimo elemento nella raccolta e <xref:System.Collections.IEnumerator.MoveNext%2A> restituisce `false`. Quando l'enumeratore si trova in questa posizione, le chiamate successive a <xref:System.Collections.IEnumerator.MoveNext%2A> restituire anche `false`. Se l'ultima chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A> restituite `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> è definito. Non è possibile impostare nuovamente la proprietà <xref:System.Collections.Generic.IEnumerator%601.Current%2A> sul primo elemento della raccolta; è necessario creare una nuova istanza di enumeratore.  

 Se vengono apportate modifiche alla raccolta, ad esempio aggiungendo, modificando o eliminando elementi, non è definito il comportamento dell'enumeratore.  
  
 Un enumeratore non hanno accesso esclusivo alla raccolta in modo che un enumeratore rimane valido fino a quando la raccolta rimane invariata. Se vengono apportate modifiche alla raccolta, ad esempio aggiungendo, modificando o eliminando elementi, l'enumeratore viene invalidato e si potrebbero ottenere risultati imprevisti. Inoltre, l'enumerazione di una raccolta non è una procedura thread-safe. Per garantire la thread safety, si devono bloccare la raccolta enumeratore o implementare la sincronizzazione per la raccolta.  
  
 Le implementazioni predefinite di raccolte nel <xref:System.Collections.Generic?displayProperty=nameWithType> dello spazio dei nomi non sono sincronizzate.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come implementare il <xref:System.Collections.Generic.IEnumerable%601> l'interfaccia e tale implementazione viene utilizzata per creare una query LINQ. Quando si implementa <xref:System.Collections.Generic.IEnumerable%601>, è inoltre necessario implementare <xref:System.Collections.Generic.IEnumerator%601> oppure, solo per c#, è possibile utilizzare il [yield](~/docs/csharp/language-reference/keywords/yield.md) (parola chiave). Implementazione <xref:System.Collections.Generic.IEnumerator%601> richiede anche <xref:System.IDisposable> da implementare, che viene visualizzata in questo esempio.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 Per un altro esempio di c# che illustra come implementare il <xref:System.Collections.Generic.IEnumerable%601> dell'interfaccia, vedere la [Generics esempio](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). In questo esempio Usa del `yield` parola chiave anziché implementare <xref:System.Collections.Generic.IEnumerator%601>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
        <related type="Article" href="http://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">Procedura dettagliata: implementazione di IEnumerable(Of T) in Visual Basic</related>
        <related type="Article" href="http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">Iteratori (C# e Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>