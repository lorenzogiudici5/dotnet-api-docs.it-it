<Type Name="StrongNameIdentityPermission" FullName="System.Security.Permissions.StrongNameIdentityPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4cd6efecc919691cfac62dd14c29c7c4a95ba52f" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39829095" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class StrongNameIdentityPermission : System.Security.CodeAccessPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit StrongNameIdentityPermission extends System.Security.CodeAccessPermission" />
  <TypeSignature Language="DocId" Value="T:System.Security.Permissions.StrongNameIdentityPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StrongNameIdentityPermission&#xA;Inherits CodeAccessPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class StrongNameIdentityPermission sealed : System::Security::CodeAccessPermission" />
  <TypeSignature Language="F#" Value="type StrongNameIdentityPermission = class&#xA;    inherit CodeAccessPermission" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.CodeAccessPermission</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definisce l'autorizzazione di identità per i nomi sicuri. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  A partire dal [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], non vengono utilizzate le autorizzazioni di identità.  
>   
>  Nelle versioni 1.0 e 1.1 di .NET Framework, le autorizzazioni di identità non possono avere un <xref:System.Security.Permissions.PermissionState.Unrestricted> valore dello stato di autorizzazione. In .NET Framework versione 2.0 e versioni successive, le autorizzazioni di identità possono avere qualsiasi valore di stato di autorizzazione.  Ciò significa che nella versione 2.0 e versioni successive, le autorizzazioni di identità hanno lo stesso comportamento delle autorizzazioni che implementano il <xref:System.Security.Permissions.IUnrestrictedPermission> interfaccia. Vale a dire, una richiesta per un'identità sempre ha esito positivo, indipendentemente dall'identità dell'assembly, se l'assembly è stata concessa l'attendibilità totale.  
  
 Usare <xref:System.Security.Permissions.StrongNameIdentityPermission> per confermare che il codice chiamante è in un assembly di codice sicuro specifico. Richieste complete per <xref:System.Security.Permissions.StrongNameIdentityPermission> esito positivo solo se tutti gli assembly nello stack di avere l'evidenza corretta per soddisfare la richiesta. Le richieste di collegamento che utilizzano il <xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute> attributo esito positivo solo se il chiamante immediato disponga della prova corretta.  
  
 Un'identità del nome sicuro si basa su una chiave crittografica pubblica chiamata un oggetto binario di grandi dimensioni (BLOB), che facoltativamente viene combinato con il nome e la versione di un assembly specifico. La chiave definisce uno spazio dei nomi univoco e offre la verifica forte che il nome sia autentico, perché la definizione del nome deve essere in un assembly viene firmato dalla chiave privata corrispondente.  
  
 Si noti che la validità della chiave con nome sicuro non richiede l'intervento su una relazione di trust o su qualsiasi certificato emesso per la chiave.  
  
 Nelle versioni 1.0 e 1.1 di .NET Framework, le richieste per le autorizzazioni di identità sono valide anche quando l'assembly chiamante sia completamente attendibile. Vale a dire, anche se l'assembly chiamante sia totalmente attendibile, una richiesta per un'autorizzazione di identità ha esito negativo se l'assembly non soddisfa i criteri richiesti. In .NET Framework versione 2.0 e versioni successive, le richieste di autorizzazioni di identità sono inefficaci se l'assembly chiamante sia totalmente attendibile. Questo assicura una coerenza per tutte le autorizzazioni ed elimina il trattamento delle autorizzazioni di identità come caso speciale.  
  
 Per una descrizione completa dei nomi sicuri, vedere il <xref:System.Security.Policy.StrongName> pagina di riferimento. Per altre informazioni sugli assembly con nome sicuro, vedere [assembly con nomi sicuri](~/docs/framework/app-domains/strong-named-assemblies.md).  
  
 Il <xref:System.Security.Permissions.StrongNameIdentityPermission> classe viene utilizzata per definire i requisiti di un nome sicuro per l'accesso ai membri pubblici di un tipo. Il <xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute> attributo può essere utilizzato per definire i requisiti di un nome sicuro a livello di assembly. In .NET Framework versione 2.0 e versioni successive, è anche possibile usare il <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attributo per specificare che tutti i tipi non pubblici nell'assembly sono visibili a un altro assembly. Per altre informazioni, vedere [Friend Assemblies](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055) (Assembly friend).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.Permissions.StrongNameIdentityPermission" />
    <altmember cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" />
    <altmember cref="T:System.Security.Policy.StrongName" />
    <altmember cref="T:System.Security.Policy.StrongNameMembershipCondition" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StrongNameIdentityPermission (System.Security.Permissions.PermissionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.PermissionState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.PermissionState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (state As PermissionState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StrongNameIdentityPermission(System::Security::Permissions::PermissionState state);" />
      <MemberSignature Language="F#" Value="new System.Security.Permissions.StrongNameIdentityPermission : System.Security.Permissions.PermissionState -&gt; System.Security.Permissions.StrongNameIdentityPermission" Usage="new System.Security.Permissions.StrongNameIdentityPermission state" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Security.Permissions.PermissionState" />
      </Parameters>
      <Docs>
        <param name="state">Uno dei valori di <see cref="T:System.Security.Permissions.PermissionState" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> con l'oggetto <see cref="T:System.Security.Permissions.PermissionState" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Crea una con restrizioni (`None`) o `Unrestricted` autorizzazione.  
  
> [!NOTE]
>  Nelle versioni 1.0 e 1.1 di .NET Framework, le autorizzazioni di identità non possono avere un <xref:System.Security.Permissions.PermissionState.Unrestricted> valore dello stato di autorizzazione. In .NET Framework versione 2.0 e versioni successive, le autorizzazioni di identità possono avere qualsiasi valore di stato di autorizzazione.  Ciò significa che nella versione 2.0 e versioni successive, le autorizzazioni di identità hanno lo stesso comportamento delle autorizzazioni che implementano il <xref:System.Security.Permissions.IUnrestrictedPermission> interfaccia. Vale a dire, una richiesta per un'identità sempre ha esito positivo, indipendentemente dall'identità dell'assembly, se l'assembly è stata concessa l'attendibilità totale.  
  
 Nelle versioni 1.0 e 1.1 di .NET Framework, le richieste per le autorizzazioni di identità sono valide, anche quando l'assembly chiamante sia completamente attendibile. Vale a dire, anche se l'assembly chiamante sia totalmente attendibile, una richiesta per un'autorizzazione di identità ha esito negativo se l'assembly non soddisfa i criteri richiesti. In .NET Framework versione 2.0 e versioni successive, le richieste di autorizzazioni di identità sono inefficaci se l'assembly chiamante sia totalmente attendibile. Questo assicura una coerenza per tutte le autorizzazioni, eliminando il trattamento delle autorizzazioni di identità come caso speciale.  
  
 Utilizzare questo costruttore con un valore dello stato di autorizzazione <xref:System.Security.Permissions.PermissionState.None> per creare un'autorizzazione di identità che corrisponde a nessun nomi sicuri. Se successivamente si impostano i <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> e <xref:System.Security.Permissions.StrongNameIdentityPermission.Version%2A> proprietà, un'identità del nome sicuro specifico può essere rappresentata dall'autorizzazione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Security.Permissions.StrongNameIdentityPermission.%23ctor%2A> costruttore.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#7)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#7)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="state" /> non è un valore valido di <see cref="T:System.Security.Permissions.PermissionState" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StrongNameIdentityPermission (System.Security.Permissions.StrongNamePublicKeyBlob blob, string name, Version version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Permissions.StrongNamePublicKeyBlob blob, string name, class System.Version version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StrongNameIdentityPermission(System::Security::Permissions::StrongNamePublicKeyBlob ^ blob, System::String ^ name, Version ^ version);" />
      <MemberSignature Language="F#" Value="new System.Security.Permissions.StrongNameIdentityPermission : System.Security.Permissions.StrongNamePublicKeyBlob * string * Version -&gt; System.Security.Permissions.StrongNameIdentityPermission" Usage="new System.Security.Permissions.StrongNameIdentityPermission (blob, name, version)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blob" Type="System.Security.Permissions.StrongNamePublicKeyBlob" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="version" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="blob">Chiave pubblica che definisce lo spazio dei nomi dell'identità del nome sicuro.</param>
        <param name="name">Parte del nome semplice dell'identità del nome sicuro. Corrisponde al nome dell'assembly.</param>
        <param name="version">Numero di versione dell'identità.</param>
        <summary>Consente di inizializzare una nuova istanza della classe <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> per l'identità del nome sicuro specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `name` e `version` i parametri possono essere `null` solo quando la chiave pubblica viene usata per identificare l'assembly. Una stringa vuota ("") non deve essere utilizzato al posto di `null`. Se `name` è una stringa vuota, un <xref:System.ArgumentException> viene generata un'eccezione.  
  
 Per altre informazioni sui nomi e numeri di versione dell'assembly, vedere [assembly con nomi sicuri](~/docs/framework/app-domains/strong-named-assemblies.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Security.Permissions.StrongNameIdentityPermission.%23ctor%2A> costruttore.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#8)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#8)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="blob" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="name" /> è una stringa vuota ("").</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Security.IPermission" Usage="strongNameIdentityPermission.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea e restituisce una copia identica dell'autorizzazione corrente.</summary>
        <returns>Copia dell'autorizzazione corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una copia di un'autorizzazione rappresenta lo stesso accesso alle risorse come autorizzazione per l'originale.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato il comportamento del <xref:System.Security.Permissions.StrongNameIdentityPermission.Copy%2A> (metodo). In questo esempio fa parte di un esempio più esaustivo disponibile per il <xref:System.Security.Permissions.StrongNameIdentityPermission> classe. L'uso in questo esempio consiste nella compilazione ed eseguire l'intero esempio e visualizzarne l'output.  
  
> [!NOTE]
>  L'esempio di codice è scopo di illustrare il comportamento del metodo, non per dimostrarne l'utilizzo. In generale, i metodi delle classi di autorizzazione vengono utilizzati dall'infrastruttura di sicurezza; essi non vengono utilizzati in genere nelle applicazioni.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#5)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#5)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public override void FromXml (System.Security.SecurityElement e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXml(class System.Security.SecurityElement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXml (e As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXml(System::Security::SecurityElement ^ e);" />
      <MemberSignature Language="F#" Value="override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="strongNameIdentityPermission.FromXml e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="e">Codifica XML da usare per ricostruire l'autorizzazione.</param>
        <summary>Ricostruisce un'autorizzazione con uno stato specificato da una codifica XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non viene utilizzato dal codice dell'applicazione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato il comportamento del <xref:System.Security.Permissions.StrongNameIdentityPermission.FromXml%2A> (metodo). In questo esempio fa parte di un esempio più esaustivo disponibile per il <xref:System.Security.Permissions.StrongNameIdentityPermission> classe. L'uso in questo esempio consiste nella compilazione ed eseguire l'intero esempio e visualizzarne l'output.  
  
> [!NOTE]
>  L'esempio di codice è scopo di illustrare il comportamento del metodo, non per dimostrarne l'utilizzo. In generale, i metodi delle classi di autorizzazione vengono utilizzati dall'infrastruttura di sicurezza; essi non vengono utilizzati in genere nelle applicazioni.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#6)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#6)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="e" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="e" /> non è un elemento di autorizzazione valido.  
  
oppure 
Il numero di versione del parametro <paramref name="e" /> non è valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="strongNameIdentityPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Autorizzazione da intersecare con quella corrente. Deve essere dello stesso tipo dell'autorizzazione corrente.</param>
        <summary>Crea e restituisce un'autorizzazione che rappresenta l'intersezione tra l'autorizzazione corrente e quella specificata.</summary>
        <returns>Nuova autorizzazione che rappresenta l'intersezione tra l'autorizzazione corrente e quella specificata oppure <see langword="null" /> se l'intersezione è vuota.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'intersezione delle due autorizzazioni è un'autorizzazione che descrive il set di operazioni che hanno in comune. Solo una richiesta che supera entrambe le autorizzazioni originali passerà l'intersezione.  
  
 L'intersezione delle due autorizzazioni di identità del nome sicuro uguali è la stessa autorizzazione. L'intersezione di due diverse (non jolly) espressioni è un'autorizzazione vuota. L'intersezione di un'espressione con caratteri jolly e un nome sicuro corrispondente è il nome sicuro. L'intersezione di due espressioni con caratteri jolly che corrispondono a è il più lungo, più specifici delle due espressioni.  
  
   
  
## Examples  
 Esempio di codice seguente mostra i risultati dell'uso del <xref:System.Security.Permissions.StrongNameIdentityPermission.Intersect%2A> metodo, non su come usare il metodo. In questo esempio fa parte di un esempio più esaustivo disponibile per il <xref:System.Security.Permissions.StrongNameIdentityPermission> classe. L'uso in questo esempio consiste nella compilazione ed eseguire l'intero esempio e visualizzarne l'output.  
  
> [!NOTE]
>  L'esempio di codice è scopo di illustrare il comportamento del metodo, non per dimostrarne l'utilizzo. In generale, i metodi delle classi di autorizzazione vengono utilizzati dall'infrastruttura di sicurezza; essi non vengono utilizzati in genere nelle applicazioni.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#4)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#4)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="target" /> non è <see langword="null" /> ed è di un tipo diverso rispetto all'autorizzazione corrente.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public override bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="strongNameIdentityPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Autorizzazione da testare per la relazione del subset. Questa autorizzazione deve essere dello stesso tipo di quella corrente.</param>
        <summary>Determina se l'autorizzazione corrente è un subset di quella specificata.</summary>
        <returns>
          <see langword="true" /> se l'autorizzazione corrente è un sottoinsieme dell'autorizzazione specificata; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'autorizzazione corrente è un subset dell'autorizzazione specificata, se l'autorizzazione corrente specifica un set di operazioni che è completamente contenuto all'autorizzazione specificata. Ad esempio, le altre proprietà parità, un'identità con il <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> proprietà che contiene l'espressione con caratteri jolly reparto viene identificato come un subset di un'identità con il <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> proprietà reparto .  
  
   
  
## Examples  
 Esempio di codice seguente mostra i risultati dell'uso del <xref:System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf%2A> metodo, non su come usare il metodo. In questo esempio fa parte di un esempio più esaustivo disponibile per il <xref:System.Security.Permissions.StrongNameIdentityPermission> classe. L'uso in questo esempio consiste nella compilazione ed eseguire l'intero esempio e visualizzarne l'output.  
  
> [!NOTE]
>  L'esempio di codice è scopo di illustrare il comportamento del metodo, non per dimostrarne l'utilizzo. In generale, i metodi delle classi di autorizzazione vengono utilizzati dall'infrastruttura di sicurezza; essi non vengono utilizzati in genere nelle applicazioni.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#2)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#2)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="target" /> non è <see langword="null" /> ed è di un tipo diverso rispetto all'autorizzazione corrente.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Security.Permissions.StrongNameIdentityPermission.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Security.Permissions.StrongNameIdentityPermission.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la parte del nome semplice dell'identità del nome sicuro.</summary>
        <value>Nome semplice dell'identità.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore della <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> proprietà può essere un nome esatto o può essere modificata da un carattere jolly nella posizione finale, ad esempio, file e reparto sono nomi validi. Se si prova a impostare il <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> proprietà in una stringa vuota (""), un <xref:System.ArgumentException> viene generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il valore è una stringa vuota ("").</exception>
        <exception cref="T:System.NotSupportedException">Il valore della proprietà non può essere recuperato perché contiene un'identità ambigua.</exception>
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public System.Security.Permissions.StrongNamePublicKeyBlob PublicKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Permissions.StrongNamePublicKeyBlob PublicKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Permissions.StrongNameIdentityPermission.PublicKey" />
      <MemberSignature Language="VB.NET" Value="Public Property PublicKey As StrongNamePublicKeyBlob" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Permissions::StrongNamePublicKeyBlob ^ PublicKey { System::Security::Permissions::StrongNamePublicKeyBlob ^ get(); void set(System::Security::Permissions::StrongNamePublicKeyBlob ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PublicKey : System.Security.Permissions.StrongNamePublicKeyBlob with get, set" Usage="System.Security.Permissions.StrongNameIdentityPermission.PublicKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.StrongNamePublicKeyBlob</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il BLOB a chiave pubblica che definisce lo spazio dei nomi dell'identità del nome sicuro.</summary>
        <value>
          <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> contenente la chiave pubblica dell'identità oppure <see langword="null" /> in mancanza di chiave.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Il valore della proprietà è impostato su <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Il valore della proprietà non può essere recuperato perché contiene un'identità ambigua.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public override System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="strongNameIdentityPermission.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una codifica XML dell'autorizzazione e del relativo stato corrente.</summary>
        <returns>Codifica XML dell'autorizzazione, che include le eventuali informazioni sullo stato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è in genere usato dal codice dell'applicazione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato il comportamento del <xref:System.Security.Permissions.StrongNameIdentityPermission.ToXml%2A> (metodo).  
  
> [!NOTE]
>  L'esempio di codice è scopo di illustrare il comportamento del metodo, non per dimostrarne l'utilizzo. In generale, i metodi delle classi di autorizzazione vengono utilizzati dall'infrastruttura di sicurezza; essi non vengono utilizzati in genere nelle applicazioni.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#6)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#6)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.StrongNameIdentityPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="strongNameIdentityPermission.Union target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Autorizzazione da combinare con quella corrente. Deve essere dello stesso tipo dell'autorizzazione corrente.</param>
        <summary>Crea un'autorizzazione che rappresenta l'unione dell'autorizzazione corrente e di quella specificata.</summary>
        <returns>Nuova autorizzazione che rappresenta l'unione dell'autorizzazione corrente e di quella specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il risultato di una chiamata a <xref:System.Security.Permissions.StrongNameIdentityPermission.Union%2A> è un'autorizzazione che rappresenta tutte le operazioni indicate dall'autorizzazione corrente sia l'autorizzazione specificata. Qualsiasi richiesta che supera una di queste autorizzazioni passa l'unione.  
  
 L'unione di un'autorizzazione e `null` è l'autorizzazione non `null`. L'unione di un'autorizzazione e un subset di tale autorizzazione sia dell'autorizzazione che contiene l'altro. Qualsiasi altra combinazione comporta un <xref:System.ArgumentException> eccezione generata.  
  
   
  
## Examples  
 Esempio di codice seguente mostra i risultati dell'uso del <xref:System.Security.Permissions.StrongNameIdentityPermission.Union%2A> metodo, non su come usare il metodo. In questo esempio fa parte di un esempio più esaustivo disponibile per il <xref:System.Security.Permissions.StrongNameIdentityPermission> classe. L'uso in questo esempio consiste nella compilazione ed eseguire l'intero esempio e visualizzarne l'output.  
  
> [!NOTE]
>  L'esempio di codice è scopo di illustrare il comportamento del metodo, non per dimostrarne l'utilizzo. In generale, i metodi delle classi di autorizzazione vengono utilizzati dall'infrastruttura di sicurezza; essi non vengono utilizzati in genere nelle applicazioni.  
  
 [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CPP/strongnameidentity.cpp#3)]
 [!code-csharp[System.Security.Permissions.StrongNameIdentityPermission#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/CS/strongnameidentity.cs#3)]
 [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.StrongNameIdentityPermission/VB/strongnameidentity.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="target" /> non è <see langword="null" /> ed è di un tipo diverso rispetto all'autorizzazione corrente.  
  
oppure 
Le due autorizzazioni sono diverse e una rappresenta un subset dell'altra.</exception>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public Version Version { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version Version" />
      <MemberSignature Language="DocId" Value="P:System.Security.Permissions.StrongNameIdentityPermission.Version" />
      <MemberSignature Language="VB.NET" Value="Public Property Version As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ Version { Version ^ get(); void set(Version ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Version : Version with get, set" Usage="System.Security.Permissions.StrongNameIdentityPermission.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il numero di versione dell'identità.</summary>
        <value>Versione dell'identità.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Il valore della proprietà non può essere recuperato perché contiene un'identità ambigua.</exception>
      </Docs>
    </Member>
  </Members>
</Type>