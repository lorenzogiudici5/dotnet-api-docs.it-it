<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IRandomAccessIterator`1.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e0bbc0fbe8acd575bb7d2bfcbbf8e73c4741fa1f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0bbc0fbe8acd575bb7d2bfcbbf8e73c4741fa1f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1">
          <source>Defines the interface for a random access iterator.</source>
          <target state="translated">Definisce l'interfaccia per un iteratore di accesso casuale.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1">
          <source>Random access iterators support the following operations: moving forward one position by calling <bpt id="p1">&lt;c&gt;</bpt>operator++<ept id="p1">&lt;/c&gt;</ept>, moving backward one position by calling <bpt id="p2">&lt;c&gt;</bpt>operator--<ept id="p2">&lt;/c&gt;</ept>, accessing an element by using <bpt id="p3">&lt;c&gt;</bpt>operator[]<ept id="p3">&lt;/c&gt;</ept>, and accessing an element by using pointer arithmetic.</source>
          <target state="translated">Gli iteratori di accesso casuale supportano le operazioni seguenti: spostamento avanti di una posizione chiamando <bpt id="p1">&lt;c&gt;</bpt>operator++<ept id="p1">&lt;/c&gt;</ept>, spostamento indietro di una posizione chiamando <bpt id="p2">&lt;c&gt;</bpt>operator--<ept id="p2">&lt;/c&gt;</ept>, accesso a un elemento tramite <bpt id="p3">&lt;c&gt;</bpt>operator[]<ept id="p3">&lt;/c&gt;</ept> e accesso a un elemento mediante l'aritmetica dei puntatori.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">Iteratore valido che punta allo stesso contenitore dell'iteratore corrente.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
          <target state="translated">Determina la distanza tra l'elemento al quale l'iteratore corrente sta puntando e l'elemento al quale sta puntando l'iteratore specificato.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The distance, in number of elements, between the element that the current iterator is pointing to and the element that <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> is pointing to.</source>
          <target state="translated">Distanza, come numero di elementi, tra l'elemento al quale l'iteratore corrente sta puntando e l'elemento al quale sta puntando <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>This number is negative if <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> points to an element that is before the element that the current iterator points to.</source>
          <target state="translated">Questo numero è negativo se <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> punta a un elemento che precede l'elemento al quale punta l'iteratore corrente.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">Iteratore valido che punta allo stesso contenitore dell'iteratore corrente.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines whether the current iterator is pointing to an element in the container that precedes the element that the given iterator points to.</source>
          <target state="translated">Determina se l'iteratore corrente sta puntando a un elemento nel contenitore che precede l'elemento al quale sta puntando l'iteratore specificato.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current iterator is pointing to an element that comes before the element that <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph> is pointing to; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'iteratore corrente punta a un elemento che precede l'elemento a cui punta <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph>; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)">
          <source>The number of elements to traverse.</source>
          <target state="translated">Numero di elementi da attraversare.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)">
          <source>To move the iterator forward, specify a positive number.</source>
          <target state="translated">Per spostare avanti l'iteratore, specificare un numero positivo.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)">
          <source>To move the iterator backward, use a negative number.</source>
          <target state="translated">Per spostare indietro l'iteratore, utilizzare un numero negativo.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)">
          <source>Moves the iterator by the given number of elements.</source>
          <target state="translated">Sposta l'iteratore del numero specificato di elementi.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)">
          <source>The actual number of elements traversed.</source>
          <target state="translated">Il numero effettivo di elementi attraversati.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)">
          <source>This number will differ from <ph id="ph1">&lt;paramref name="_Offset" /&gt;</ph> if the beginning or end of the container is reached before iterating the desired number of elements.</source>
          <target state="translated">Questo numero differirà da <ph id="ph1">&lt;paramref name="_Offset" /&gt;</ph> se l'inizio o fine del contenitore viene raggiunta prima di iterare il numero desiderato di elementi.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>