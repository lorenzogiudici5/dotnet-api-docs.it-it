<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ConstReverseRandomAccessIterator`1.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50b3f560d6b7ef09bac71870b3bc3e591b92271c1.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b3f560d6b7ef09bac71870b3bc3e591b92271c1</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
          <source>Provides an iterator that supports the following operations: moving forward one position by calling <bpt id="p1">&lt;c&gt;</bpt>operator--<ept id="p1">&lt;/c&gt;</ept>, moving backward one position by calling <bpt id="p2">&lt;c&gt;</bpt>operator++<ept id="p2">&lt;/c&gt;</ept>, accessing an element by using <bpt id="p3">&lt;c&gt;</bpt>operator[]<ept id="p3">&lt;/c&gt;</ept>, and accessing an element by using pointer arithmetic.</source>
          <target state="translated">Specifica un iteratore che supporta le operazioni seguenti: spostamento avanti di una posizione chiamando <bpt id="p1">&lt;c&gt;</bpt>operator--<ept id="p1">&lt;/c&gt;</ept>, spostamento indietro di una posizione chiamando <bpt id="p2">&lt;c&gt;</bpt>operator++<ept id="p2">&lt;/c&gt;</ept>, accesso a un elemento tramite <bpt id="p3">&lt;c&gt;</bpt>operator[]<ept id="p3">&lt;/c&gt;</ept> e accesso a un elemento mediante l'aritmetica dei puntatori.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
          <source>The element accessed by the iterator cannot be modified.</source>
          <target state="translated">Impossibile modificare l'elemento a cui accede l'iteratore.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Alloca e inizializza un nuovo oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Alloca e inizializza un nuovo oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>An existing <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object to be copied to the current container.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> esistente da copiare al contenitore corrente.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object from an existing <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Alloca e inizializza un nuovo oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> esistente.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>An existing <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> object to be copied to the current container.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> esistente da copiare al contenitore corrente.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object from an existing <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Alloca e inizializza un nuovo oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> esistente.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>An existing <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object to be copied to the current container.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> esistente da copiare al contenitore corrente.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object from an existing <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Alloca e inizializza un nuovo oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> esistente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.base">
          <source>Gets the underlying base iterator for the <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Ottiene l'iteratore base sottostante per l'oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.base">
          <source>The underlying base iterator for the <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Iteratore base sottostante per l'oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Clone">
          <source>Creates a copy of the current <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Crea una copia dell'oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Clone">
          <source>A copy of the current <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Copia dell'oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.container">
          <source>Gets the container that the iterator is traversing.</source>
          <target state="translated">Ottiene il contenitore che l'iteratore sta attraversando.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.container">
          <source>The container that the iterator is traversing.</source>
          <target state="translated">Contenitore che l'iteratore sta attraversando.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
          <target state="translated">Determina la distanza tra l'elemento al quale l'iteratore corrente sta puntando e l'elemento al quale sta puntando l'iteratore specificato.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">Iteratore valido che punta allo stesso contenitore dell'iteratore corrente.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
          <target state="translated">Determina la distanza tra l'elemento al quale l'iteratore corrente sta puntando e l'elemento al quale sta puntando l'iteratore specificato.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The distance, in number of elements, between the element that the current iterator is pointing to and the element that <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> is pointing to.</source>
          <target state="translated">Distanza, come numero di elementi, tra l'elemento al quale l'iteratore corrente sta puntando e l'elemento al quale sta puntando <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>This number is negative if <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> points to an element that is before the element that the current iterator points to.</source>
          <target state="translated">Questo numero è negativo se <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> punta a un elemento che precede l'elemento al quale punta l'iteratore corrente.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">Iteratore valido che punta allo stesso contenitore dell'iteratore corrente.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
          <target state="translated">Determina la distanza tra l'elemento al quale l'iteratore corrente sta puntando e l'elemento al quale sta puntando l'iteratore specificato.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The distance, in number of elements, between the element that the current iterator is pointing to and the element that <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> is pointing to.</source>
          <target state="translated">Distanza, come numero di elementi, tra l'elemento al quale l'iteratore corrente sta puntando e l'elemento al quale sta puntando <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>This number is negative if <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> points to an element that is before the element that the current iterator points to.</source>
          <target state="translated">Questo numero è negativo se <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> punta a un elemento che precede l'elemento al quale punta l'iteratore corrente.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
          <source>Determines whether two iterators are the same object.</source>
          <target state="translated">Determina se due iteratori sono lo stesso oggetto.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> da confrontare con l'oggetto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Determina se l'oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> specificato corrisponde all'oggetto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> objects are the same object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se i due oggetti <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> sono uguali; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> da confrontare con l'oggetto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Determina se l'oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> specificato corrisponde all'oggetto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are the same object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se i due iteratori sono lo stesso oggetto; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item(System.Int32)">
          <source>The position of the element to access.</source>
          <target state="translated">Posizione dell'elemento a cui accedere.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item(System.Int32)">
          <source>Accesses the element at the given position in the container.</source>
          <target state="translated">Accede all'elemento alla posizione specificata nel contenitore.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item(System.Int32)">
          <source>The element at the given position in the container.</source>
          <target state="translated">Elemento alla posizione specificata nel contenitore.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
          <source>Determines whether the current iterator is pointing to an element in the container that is before the element that a given iterator points to.</source>
          <target state="translated">Determina se l'iteratore corrente sta puntando a un elemento nel contenitore che precede l'elemento al quale sta puntando un iteratore specificato.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">Iteratore valido che punta allo stesso contenitore dell'iteratore corrente.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</source>
          <target state="translated">Determina se l'iteratore corrente sta puntando a un elemento nel contenitore che precede l'elemento al quale sta puntando l'iteratore specificato.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current iterator is pointing to an element that comes before the element that <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph> is pointing to; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'iteratore corrente punta a un elemento che precede l'elemento a cui punta <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph>; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>A valid iterator pointing to the same container as the current iterator.</source>
          <target state="translated">Iteratore valido che punta allo stesso contenitore dell'iteratore corrente.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</source>
          <target state="translated">Determina se l'iteratore corrente sta puntando a un elemento nel contenitore che precede l'elemento al quale sta puntando l'iteratore specificato.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current iterator is pointing to an element that comes before the element that <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph> is pointing to; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'iteratore corrente punta a un elemento che precede l'elemento a cui punta <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph>; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)">
          <source>The number of elements to traverse.</source>
          <target state="translated">Numero di elementi da attraversare.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)">
          <source>To move the iterator forward, specify a negative number.</source>
          <target state="translated">Per spostare avanti l'iteratore, specificare un numero negativo.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)">
          <source>To move the iterator backward, use a positive number.</source>
          <target state="translated">Per spostare indietro l'iteratore, utilizzare un numero positivo.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)">
          <source>Moves the iterator by the given number of elements.</source>
          <target state="translated">Sposta l'iteratore del numero specificato di elementi.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)">
          <source>The actual number of elements traversed.</source>
          <target state="translated">Il numero effettivo di elementi attraversati.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)">
          <source>This number will differ from <ph id="ph1">&lt;paramref name="_Offset" /&gt;</ph> if the beginning or end of the container is reached before iterating the desired number of elements.</source>
          <target state="translated">Questo numero differirà da <ph id="ph1">&lt;paramref name="_Offset" /&gt;</ph> se l'inizio o fine del contenitore viene raggiunta prima di iterare il numero desiderato di elementi.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.next">
          <source>Increments the reverse iterator to the next position in the underlying container, or to the first position in front of the beginning of container if the container has been completely traversed.</source>
          <target state="translated">Incrementa l'iteratore inverso alla posizione successiva nel contenitore sottostante o alla prima posizione che precede l'inizio del contenitore se il contenitore è stato completamente attraversato.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
          <source>Increments the reverse iterator by the given number of elements.</source>
          <target state="translated">Incrementa l'iteratore inverso del numero specificato di elementi.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>The number of elements to increment.</source>
          <target state="translated">Numero di elementi da incrementare.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>Increments the reverse iterator by the given number of elements.</source>
          <target state="translated">Incrementa l'iteratore inverso del numero specificato di elementi.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>The integer parameter is specified on the right side of the addition operator.</source>
          <target state="translated">Il parametro integer è specificato sul lato destro dell'operatore di addizione.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">Iteratore.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The number of elements to increment.</source>
          <target state="translated">Numero di elementi da incrementare.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to increment.</source>
          <target state="translated">Iteratore da incrementare.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Increments the reverse iterator by the given number of elements.</source>
          <target state="translated">Incrementa l'iteratore inverso del numero specificato di elementi.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The integer parameter is specified on the left side of the addition operator.</source>
          <target state="translated">Il parametro integer è specificato sul lato sinistro dell'operatore di addizione.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>An iterator.</source>
          <target state="translated">Iteratore.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
          <source>Assigns a given object to the current object.</source>
          <target state="translated">Assegna un oggetto specificato all'oggetto corrente.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object to assign to the current object.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> da assegnare all'oggetto corrente.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Assigns the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object to the current object.</source>
          <target state="translated">Assegna l'oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> specificato all'oggetto corrente.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The current object (<bpt id="p1">&lt;c&gt;</bpt>*this<ept id="p1">&lt;/c&gt;</ept>).</source>
          <target state="translated">L'oggetto corrente (<bpt id="p1">&lt;c&gt;</bpt>*this<ept id="p1">&lt;/c&gt;</ept>).</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object to assign to the current object.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> da assegnare all'oggetto corrente.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Assigns the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object to the current object.</source>
          <target state="translated">Assegna l'oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> specificato all'oggetto corrente.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The current object (<bpt id="p1">&lt;c&gt;</bpt>*this<ept id="p1">&lt;/c&gt;</ept>).</source>
          <target state="translated">L'oggetto corrente (<bpt id="p1">&lt;c&gt;</bpt>*this<ept id="p1">&lt;/c&gt;</ept>).</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
          <source>Decrements the reverse iterator by one element.</source>
          <target state="translated">Decrementa l'iteratore inverso di un elemento.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)">
          <source>Decrements the reverse iterator by one element.</source>
          <target state="translated">Decrementa l'iteratore inverso di un elemento.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)">
          <source>This is the prefix version of the decrement operator.</source>
          <target state="translated">Si tratta della versione prefisso dell'operatore di decremento.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)">
          <source>An iterator.</source>
          <target state="translated">Iteratore.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>Decrements the reverse iterator by one element.</source>
          <target state="translated">Decrementa l'iteratore inverso di un elemento.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>This is the postfix version of the decrement operator.</source>
          <target state="translated">Si tratta della versione suffisso dell'operatore di decremento.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">Iteratore.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> da confrontare con l'oggetto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether two iterators are the same object.</source>
          <target state="translated">Determina se due iteratori sono lo stesso oggetto.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are the same object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se i due iteratori sono lo stesso oggetto; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">Iteratore da confrontare con l'iteratore di sinistra.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is greater than the position of the given right-side iterator.</source>
          <target state="translated">Determina se la posizione dell'iteratore di sinistra è maggiore della posizione dell'iteratore di destra specificato.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is greater than the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'iteratore di sinistra è maggiore dell'iteratore di destra specificato; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">Iteratore da confrontare con l'iteratore di sinistra.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.</source>
          <target state="translated">Determina se la posizione dell'iteratore di sinistra è maggiore o uguale della posizione dell'iteratore di destra specificato.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'iteratore di sinistra è maggiore o uguale dell'iteratore di destra specificato; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
          <source>Converts a <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph>.</source>
          <target state="translated">Converte un oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> in oggetto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
          <source>The current iterator as an <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph>.</source>
          <target state="translated">Iteratore corrente come oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
          <source>Increments the reverse iterator by one element.</source>
          <target state="translated">Incrementa l'iteratore inverso di un elemento.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)">
          <source>Increments the reverse iterator by one element.</source>
          <target state="translated">Incrementa l'iteratore inverso di un elemento.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)">
          <source>This is the prefix version of the increment operator.</source>
          <target state="translated">Si tratta della versione prefisso dell'operatore di incremento.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)">
          <source>An iterator.</source>
          <target state="translated">Iteratore.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>Increments the reverse iterator by one element.</source>
          <target state="translated">Incrementa l'iteratore inverso di un elemento.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>This is the postfix version of the increment operator.</source>
          <target state="translated">Si tratta della versione suffisso dell'operatore di incremento.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">Iteratore.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> da confrontare con l'oggetto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object differs from the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Determina se l'oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> specificato è diverso dall'oggetto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are different objects; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se I due iteratori sono diversi; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">Iteratore da confrontare con l'iteratore di sinistra.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.</source>
          <target state="translated">Determina se la posizione dell'iteratore di sinistra è minore della posizione dell'iteratore di destra specificato.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is less than the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'iteratore di sinistra è minore dell'iteratore di destra specificato; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">Iteratore da confrontare con l'iteratore di sinistra.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is less than or equal to the position of the given right-side iterator.</source>
          <target state="translated">Determina se la posizione dell'iteratore di sinistra è minore o uguale della posizione dell'iteratore di destra specificato.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is less than or equal to the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'iteratore di sinistra è minore o uguale dell'iteratore di destra specificato; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator that the operator is applied to.</source>
          <target state="translated">Iteratore a cui viene applicato l'operatore.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Returns the element that the iterator is currently pointing to.</source>
          <target state="translated">Restituisce l'elemento al quale l'iteratore sta puntando attualmente.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The element that the iterator is currently pointing to.</source>
          <target state="translated">Elemento al quale l'iteratore sta puntando attualmente.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator that the operator is applied to.</source>
          <target state="translated">Iteratore a cui viene applicato l'operatore.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Returns the element that the iterator is currently pointing to.</source>
          <target state="translated">Restituisce l'elemento al quale l'iteratore sta puntando attualmente.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The element that the iterator is currently pointing to.</source>
          <target state="translated">Elemento al quale l'iteratore sta puntando attualmente.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
          <source>Decrements the iterator by the given number of elements, or determines the difference between two iterators.</source>
          <target state="translated">Decrementa l'iteratore dal numero specificato di elementi o determina la differenza tra due iteratore.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> to be subtracted from the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> da sottrarre dall'oggetto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines the difference between two iterators.</source>
          <target state="translated">Determina la differenza tra due iteratori.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The difference (number of elements) between the two iterators.</source>
          <target state="translated">La differenza (in numero di elementi) tra i due iteratori.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>The number of elements to decrement.</source>
          <target state="translated">Numero di elementi da decrementare.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>Decrements the iterator by the given number of elements.</source>
          <target state="translated">Decrementa l'iteratore del numero specificato di elementi.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>The integer parameter is specified on the right side of the subtraction operator.</source>
          <target state="translated">Il parametro Integer è specificato a destra dell'operatore di sottrazione.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">Iteratore.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.prev">
          <source>Positions the iterator to the element immediately after the current element.</source>
          <target state="translated">Posiziona l'iteratore sull'elemento immediatamente successiva all'elemento corrente.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.valid">
          <source>Determines whether the iterator is valid and can be safely used to traverse the underlying container.</source>
          <target state="translated">Determina se l'iteratore è valido e può essere utilizzato in modo sicuro per attraversare il contenitore sottostante.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.valid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the iterator is valid and safe to use; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'iteratore è valido e può essere utilizzato in modo sicuro; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>