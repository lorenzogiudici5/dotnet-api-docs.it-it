<Type Name="ConstReverseRandomAccessIterator&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;TValue&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa273bb05836f13f82f7fe45d762e8938beb381e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36658335" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ConstReverseRandomAccessIterator&lt;TValue&gt; : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConstReverseRandomAccessIterator`1&lt;TValue&gt; extends System.Object implements class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ConstReverseRandomAccessIterator(Of TValue)&#xA;Implements IRandomAccessIterator(Of TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public ref class ConstReverseRandomAccessIterator : Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt;" />
  <TypeSignature Language="F#" Value="type ConstReverseRandomAccessIterator&lt;'Value&gt; = class&#xA;    interface IRandomAccessIterator&lt;'Value&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue">
      <span data-ttu-id="683c9-101">[! INCLUDE[cpp_iter_arg](~/Includes/cpp-iter-arg-MD.MD)]</span>
      <span class="sxs-lookup">
        <span data-stu-id="683c9-101">[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="683c9-102">Specifica un iteratore che supporta le operazioni seguenti: spostamento avanti di una posizione chiamando <c>operator--</c>, spostamento indietro di una posizione chiamando <c>operator++</c>, accesso a un elemento tramite <c>operator[]</c> e accesso a un elemento mediante l'aritmetica dei puntatori.</span>
      <span class="sxs-lookup">
        <span data-stu-id="683c9-102">Provides an iterator that supports the following operations: moving forward one position by calling <c>operator--</c>, moving backward one position by calling <c>operator++</c>, accessing an element by using <c>operator[]</c>, and accessing an element by using pointer arithmetic.</span>
      </span>
      <span data-ttu-id="683c9-103">Impossibile modificare l'elemento a cui accede l'iteratore.</span>
      <span class="sxs-lookup">
        <span data-stu-id="683c9-103">The element accessed by the iterator cannot be modified.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="683c9-104">Alloca e inizializza un nuovo oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-104">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstReverseRandomAccessIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConstReverseRandomAccessIterator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="683c9-105">Alloca e inizializza un nuovo oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-105">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstReverseRandomAccessIterator (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (_Right As ConstReverseRandomAccessIterator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConstReverseRandomAccessIterator(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-106">Oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> esistente da copiare al contenitore corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-106">An existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object to be copied to the current container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-107">Alloca e inizializza un nuovo oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> da un oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-107">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object from an existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstReverseRandomAccessIterator (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Iter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Iter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (_Iter As IRandomAccessIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConstReverseRandomAccessIterator(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Iter);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;'Value&gt; : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;'Value&gt;" Usage="new Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;'Value&gt; _Iter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="_Iter" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Iter">
          <span data-ttu-id="683c9-108">Oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> esistente da copiare al contenitore corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-108">An existing <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> object to be copied to the current container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-109">Alloca e inizializza un nuovo oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> da un oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-109">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object from an existing <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstReverseRandomAccessIterator (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Iter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Iter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (_Iter As ReverseRandomAccessIterator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConstReverseRandomAccessIterator(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Iter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="_Iter" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Iter">
          <span data-ttu-id="683c9-110">Oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> esistente da copiare al contenitore corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-110">An existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object to be copied to the current container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-111">Alloca e inizializza un nuovo oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> da un oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-111">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object from an existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="base">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; base ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; base() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.base" />
      <MemberSignature Language="VB.NET" Value="Public Function base () As IRandomAccessIterator(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ base();" />
      <MemberSignature Language="F#" Value="member this.base : unit -&gt; Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt;" Usage="constReverseRandomAccessIterator.base " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="683c9-112">Ottiene l'iteratore base sottostante per l'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-112">Gets the underlying base iterator for the <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-113">Iteratore base sottostante per l'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-113">The underlying base iterator for the <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="constReverseRandomAccessIterator.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="683c9-114">Crea una copia dell'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-114">Creates a copy of the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-115">Copia dell'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-115">A copy of the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="container">
      <MemberSignature Language="C#" Value="public virtual object container ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object container() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.container" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function container () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ container();" />
      <MemberSignature Language="F#" Value="abstract member container : unit -&gt; obj&#xA;override this.container : unit -&gt; obj" Usage="constReverseRandomAccessIterator.container " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="683c9-116">Ottiene il contenitore che l'iteratore sta attraversando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-116">Gets the container that the iterator is traversing.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-117">Contenitore che l'iteratore sta attraversando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-117">The container that the iterator is traversing.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="distance">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="683c9-118">Determina la distanza tra l'elemento al quale l'iteratore corrente sta puntando e l'elemento al quale sta puntando l'iteratore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-118">Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="distance">
      <MemberSignature Language="C#" Value="public int distance (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 distance(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Function distance (_Right As ConstReverseRandomAccessIterator) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int distance(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-119">Iteratore valido che punta allo stesso contenitore dell'iteratore corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-119">A valid iterator that points to the same container as the current iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-120">Determina la distanza tra l'elemento al quale l'iteratore corrente sta puntando e l'elemento al quale sta puntando l'iteratore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-120">Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-121">Distanza, come numero di elementi, tra l'elemento al quale l'iteratore corrente sta puntando e l'elemento al quale sta puntando <paramref name="_Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-121">The distance, in number of elements, between the element that the current iterator is pointing to and the element that <paramref name="_Right" /> is pointing to.</span>
          </span>
          <span data-ttu-id="683c9-122">Questo numero è negativo se <paramref name="_Right" /> punta a un elemento che precede l'elemento al quale punta l'iteratore corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-122">This number is negative if <paramref name="_Right" /> points to an element that is before the element that the current iterator points to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="distance">
      <MemberSignature Language="C#" Value="public virtual int distance (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 distance(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function distance (_Right As IRandomAccessIterator(Of TValue)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int distance(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member distance : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; int&#xA;override this.distance : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; int" Usage="constReverseRandomAccessIterator.distance _Right" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-123">Iteratore valido che punta allo stesso contenitore dell'iteratore corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-123">A valid iterator that points to the same container as the current iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-124">Determina la distanza tra l'elemento al quale l'iteratore corrente sta puntando e l'elemento al quale sta puntando l'iteratore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-124">Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-125">Distanza, come numero di elementi, tra l'elemento al quale l'iteratore corrente sta puntando e l'elemento al quale sta puntando <paramref name="_Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-125">The distance, in number of elements, between the element that the current iterator is pointing to and the element that <paramref name="_Right" /> is pointing to.</span>
          </span>
          <span data-ttu-id="683c9-126">Questo numero è negativo se <paramref name="_Right" /> punta a un elemento che precede l'elemento al quale punta l'iteratore corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-126">This number is negative if <paramref name="_Right" /> points to an element that is before the element that the current iterator points to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="equal_to">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="683c9-127">Determina se due iteratori sono lo stesso oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-127">Determines whether two iterators are the same object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="equal_to">
      <MemberSignature Language="C#" Value="public bool equal_to (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool equal_to(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Function equal_to (_Right As ConstReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool equal_to(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-128">Oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> da confrontare con l'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-128">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-129">Determina se l'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> specificato corrisponde all'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-129">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-130">
            <see langword="true" /> se i due oggetti <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> sono uguali; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-130">
              <see langword="true" /> if the two <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> objects are the same object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="equal_to">
      <MemberSignature Language="C#" Value="public virtual bool equal_to (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool equal_to(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function equal_to (_Right As IInputIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool equal_to(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member equal_to : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool&#xA;override this.equal_to : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool" Usage="constReverseRandomAccessIterator.equal_to _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-131">Oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> da confrontare con l'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-131">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-132">Determina se l'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> specificato corrisponde all'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-132">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-133">
            <see langword="true" /> se i due iteratori sono lo stesso oggetto; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-133">
              <see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_bias">
      <MemberSignature Language="C#" Value="public virtual int get_bias ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 get_bias() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_bias" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_bias () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int get_bias();" />
      <MemberSignature Language="F#" Value="abstract member get_bias : unit -&gt; int&#xA;override this.get_bias : unit -&gt; int" Usage="constReverseRandomAccessIterator.get_bias " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_cref">
      <MemberSignature Language="C#" Value="public virtual TValue get_cref ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue get_cref() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_cref" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_cref () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TValue % get_cref();" />
      <MemberSignature Language="F#" Value="abstract member get_cref : unit -&gt; &#xA;override this.get_cref : unit -&gt; " Usage="constReverseRandomAccessIterator.get_cref " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_node">
      <MemberSignature Language="C#" Value="public virtual object get_node ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object get_node() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_node" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_node () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ get_node();" />
      <MemberSignature Language="F#" Value="abstract member get_node : unit -&gt; obj&#xA;override this.get_node : unit -&gt; obj" Usage="constReverseRandomAccessIterator.get_node " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_ref">
      <MemberSignature Language="C#" Value="public virtual TValue get_ref ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue get_ref() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_ref" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_ref () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TValue % get_ref();" />
      <MemberSignature Language="F#" Value="abstract member get_ref : unit -&gt; &#xA;override this.get_ref : unit -&gt; " Usage="constReverseRandomAccessIterator.get_ref " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[int _Pos] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(_Pos As Integer) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue % default[int] { TValue % get(int _Pos); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : " Usage="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;'Value&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Pos">
          <span data-ttu-id="683c9-134">Posizione dell'elemento a cui accedere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-134">The position of the element to access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-135">Accede all'elemento alla posizione specificata nel contenitore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-135">Accesses the element at the given position in the container.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="683c9-136">Elemento alla posizione specificata nel contenitore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-136">The element at the given position in the container.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="less_than">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="683c9-137">Determina se l'iteratore corrente sta puntando a un elemento nel contenitore che precede l'elemento al quale sta puntando un iteratore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-137">Determines whether the current iterator is pointing to an element in the container that is before the element that a given iterator points to.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="less_than">
      <MemberSignature Language="C#" Value="public bool less_than (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool less_than(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Function less_than (_Right As ConstReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool less_than(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-138">Iteratore valido che punta allo stesso contenitore dell'iteratore corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-138">A valid iterator that points to the same container as the current iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-139">Determina se l'iteratore corrente sta puntando a un elemento nel contenitore che precede l'elemento al quale sta puntando l'iteratore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-139">Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-140">
            <see langword="true" /> se l'iteratore corrente punta a un elemento che precede l'elemento a cui punta <paramref name="_Right" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-140">
              <see langword="true" /> if the current iterator is pointing to an element that comes before the element that <paramref name="_Right" /> is pointing to; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="less_than">
      <MemberSignature Language="C#" Value="public virtual bool less_than (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool less_than(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function less_than (_Right As IRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool less_than(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member less_than : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; bool&#xA;override this.less_than : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="constReverseRandomAccessIterator.less_than _Right" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-141">Iteratore valido che punta allo stesso contenitore dell'iteratore corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-141">A valid iterator pointing to the same container as the current iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-142">Determina se l'iteratore corrente sta puntando a un elemento nel contenitore che precede l'elemento al quale sta puntando l'iteratore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-142">Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-143">
            <see langword="true" /> se l'iteratore corrente punta a un elemento che precede l'elemento a cui punta <paramref name="_Right" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-143">
              <see langword="true" /> if the current iterator is pointing to an element that comes before the element that <paramref name="_Right" /> is pointing to; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="move">
      <MemberSignature Language="C#" Value="public virtual int move (int _Offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 move(int32 _Offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function move (_Offset As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int move(int _Offset);" />
      <MemberSignature Language="F#" Value="abstract member move : int -&gt; int&#xA;override this.move : int -&gt; int" Usage="constReverseRandomAccessIterator.move _Offset" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Offset">
          <span data-ttu-id="683c9-144">Numero di elementi da attraversare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-144">The number of elements to traverse.</span>
          </span>
          <span data-ttu-id="683c9-145">Per spostare avanti l'iteratore, specificare un numero negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-145">To move the iterator forward, specify a negative number.</span>
          </span>
          <span data-ttu-id="683c9-146">Per spostare indietro l'iteratore, utilizzare un numero positivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-146">To move the iterator backward, use a positive number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-147">Sposta l'iteratore del numero specificato di elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-147">Moves the iterator by the given number of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-148">Il numero effettivo di elementi attraversati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-148">The actual number of elements traversed.</span>
          </span>
          <span data-ttu-id="683c9-149">Questo numero differirà da <paramref name="_Offset" /> se l'inizio o fine del contenitore viene raggiunta prima di iterare il numero desiderato di elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-149">This number will differ from <paramref name="_Offset" /> if the beginning or end of the container is reached before iterating the desired number of elements.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="next">
      <MemberSignature Language="C#" Value="public virtual void next ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void next() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.next" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub next ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void next();" />
      <MemberSignature Language="F#" Value="abstract member next : unit -&gt; unit&#xA;override this.next : unit -&gt; unit" Usage="constReverseRandomAccessIterator.next " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="683c9-150">Incrementa l'iteratore inverso alla posizione successiva nel contenitore sottostante o alla prima posizione che precede l'inizio del contenitore se il contenitore è stato completamente attraversato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-150">Increments the reverse iterator to the next position in the underlying container, or to the first position in front of the beginning of container if the container has been completely traversed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="683c9-151">Incrementa l'iteratore inverso del numero specificato di elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-151">Increments the reverse iterator by the given number of elements.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public void operator + (ref Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;TValue&gt; , int _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Addition(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Operator + (ByRef  As ConstReverseRandomAccessIterator(Of TValue), _Right As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator +(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator&lt;TValue&gt; ^ % , int _Right);" />
      <MemberSignature Language="F#" Value="member this.( + ) :  * int -&gt; unit" Usage=" + _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="_Right" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <param name="_Right">
          <span data-ttu-id="683c9-152">Numero di elementi da incrementare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-152">The number of elements to increment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-153">Incrementa l'iteratore inverso del numero specificato di elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-153">Increments the reverse iterator by the given number of elements.</span>
          </span>
          <span data-ttu-id="683c9-154">Il parametro integer è specificato sul lato destro dell'operatore di addizione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-154">The integer parameter is specified on the right side of the addition operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-155">Iteratore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-155">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static void operator + (ref Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;TValue&gt; , int _Left, Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Addition(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 _Left, class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (ByRef  As ConstReverseRandomAccessIterator(Of TValue), _Left As Integer, _Right As ConstReverseRandomAccessIterator) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ^ operator +(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator&lt;TValue&gt; ^ % , int _Left, Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="_Left" Type="System.Int32" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <param name="_Left">
          <span data-ttu-id="683c9-156">Numero di elementi da incrementare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-156">The number of elements to increment.</span>
          </span>
        </param>
        <param name="_Right">
          <span data-ttu-id="683c9-157">Iteratore da incrementare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-157">The iterator to increment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-158">Incrementa l'iteratore inverso del numero specificato di elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-158">Increments the reverse iterator by the given number of elements.</span>
          </span>
          <span data-ttu-id="683c9-159">Il parametro integer è specificato sul lato sinistro dell'operatore di addizione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-159">The integer parameter is specified on the left side of the addition operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-160">Iteratore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-160">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Assign">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="683c9-161">Assegna un oggetto specificato all'oggetto corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-161">Assigns a given object to the current object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Assign">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator op_Assign (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public op_Assign (_Right As ConstReverseRandomAccessIterator) As ConstReverseRandomAccessIterator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ op_Assign(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-162">Oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> da assegnare all'oggetto corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-162">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object to assign to the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-163">Assegna l'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> specificato all'oggetto corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-163">Assigns the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object to the current object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-164">L'oggetto corrente (<c>\*this</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-164">The current object (<c>\*this</c>).</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Assign">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator op_Assign (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public op_Assign (_Right As ReverseRandomAccessIterator) As ConstReverseRandomAccessIterator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ op_Assign(Microsoft::VisualC::StlClr::Generic::ReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-165">Oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> da assegnare all'oggetto corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-165">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object to assign to the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-166">Assegna l'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> specificato all'oggetto corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-166">Assigns the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> object to the current object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-167">L'oggetto corrente (<c>\*this</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-167">The current object (<c>\*this</c>).</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Decrement">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="683c9-168">Decrementa l'iteratore inverso di un elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-168">Decrements the reverse iterator by one element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public void operator -- (ref Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Decrement(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public op_Decrement (ByRef  As ConstReverseRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator --(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="member this.op_Decrement :  -&gt; unit" Usage="constReverseRandomAccessIterator.op_Decrement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;TValue&gt;&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <summary>
          <span data-ttu-id="683c9-169">Decrementa l'iteratore inverso di un elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-169">Decrements the reverse iterator by one element.</span>
          </span>
          <span data-ttu-id="683c9-170">Si tratta della versione prefisso dell'operatore di decremento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-170">This is the prefix version of the decrement operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-171">Iteratore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-171">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public void operator -- (ref Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;TValue&gt; , int A_0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Decrement(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 A_0) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public op_Decrement (ByRef  As ConstReverseRandomAccessIterator(Of TValue), A_0 As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator --(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator&lt;TValue&gt; ^ % , int A_0);" />
      <MemberSignature Language="F#" Value="member this.op_Decrement :  * int -&gt; unit" Usage="constReverseRandomAccessIterator.op_Decrement (, A_0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="A_0" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <param name="A_0">To be added.</param>
        <summary>
          <span data-ttu-id="683c9-172">Decrementa l'iteratore inverso di un elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-172">Decrements the reverse iterator by one element.</span>
          </span>
          <span data-ttu-id="683c9-173">Si tratta della versione suffisso dell'operatore di decremento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-173">This is the postfix version of the decrement operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-174">Iteratore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-174">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public bool operator == (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Equality(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator == (_Right As ConstReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator ==(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-175">Oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> da confrontare con l'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-175">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-176">Determina se due iteratori sono lo stesso oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-176">Determines whether two iterators are the same object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-177">
            <see langword="true" /> se i due iteratori sono lo stesso oggetto; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-177">
              <see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public bool operator &gt; (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_GreaterThan(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &gt; (_Right As ConstReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &gt;(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-178">Iteratore da confrontare con l'iteratore di sinistra.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-178">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-179">Determina se la posizione dell'iteratore di sinistra è maggiore della posizione dell'iteratore di destra specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-179">Determines whether the position of the left-side iterator is greater than the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-180">
            <see langword="true" /> se l'iteratore di sinistra è maggiore dell'iteratore di destra specificato; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-180">
              <see langword="true" /> if the left-side iterator is greater than the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public bool operator &gt;= (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_GreaterThanOrEqual(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &gt;= (_Right As ConstReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &gt;=(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-181">Iteratore da confrontare con l'iteratore di sinistra.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-181">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-182">Determina se la posizione dell'iteratore di sinistra è maggiore o uguale della posizione dell'iteratore di destra specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-182">Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-183">
            <see langword="true" /> se l'iteratore di sinistra è maggiore o uguale dell'iteratore di destra specificato; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-183">
              <see langword="true" /> if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public implicit operator Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; op_Implicit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Widening Operator CType () As IRandomAccessIterator(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; operator Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^();" />
      <MemberSignature Language="F#" Value="member this.op_Implicit : unit -&gt; Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt;" Usage="constReverseRandomAccessIterator.op_Implicit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="683c9-184">Converte un oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> in oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-184">Converts a <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> to an <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-185">Iteratore corrente come oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-185">The current iterator as an <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Increment">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="683c9-186">Incrementa l'iteratore inverso di un elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-186">Increments the reverse iterator by one element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public void operator ++ (ref Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Increment(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public op_Increment (ByRef  As ConstReverseRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator ++(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="member this.op_Increment :  -&gt; unit" Usage="constReverseRandomAccessIterator.op_Increment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;TValue&gt;&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <summary>
          <span data-ttu-id="683c9-187">Incrementa l'iteratore inverso di un elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-187">Increments the reverse iterator by one element.</span>
          </span>
          <span data-ttu-id="683c9-188">Si tratta della versione prefisso dell'operatore di incremento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-188">This is the prefix version of the increment operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-189">Iteratore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-189">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public void operator ++ (ref Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;TValue&gt; , int A_0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Increment(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 A_0) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public op_Increment (ByRef  As ConstReverseRandomAccessIterator(Of TValue), A_0 As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator ++(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator&lt;TValue&gt; ^ % , int A_0);" />
      <MemberSignature Language="F#" Value="member this.op_Increment :  * int -&gt; unit" Usage="constReverseRandomAccessIterator.op_Increment (, A_0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="A_0" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <param name="A_0">To be added.</param>
        <summary>
          <span data-ttu-id="683c9-190">Incrementa l'iteratore inverso di un elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-190">Increments the reverse iterator by one element.</span>
          </span>
          <span data-ttu-id="683c9-191">Si tratta della versione suffisso dell'operatore di incremento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-191">This is the postfix version of the increment operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-192">Iteratore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-192">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public bool operator != (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Inequality(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator != (_Right As ConstReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator !=(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-193">Oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> da confrontare con l'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-193">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-194">Determina se l'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> specificato è diverso dall'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-194">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object differs from the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-195">
            <see langword="true" /> se I due iteratori sono diversi; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-195">
              <see langword="true" /> if the two iterators are different objects; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public bool operator &lt; (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_LessThan(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &lt; (_Right As ConstReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &lt;(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-196">Iteratore da confrontare con l'iteratore di sinistra.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-196">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-197">Determina se la posizione dell'iteratore di sinistra è minore della posizione dell'iteratore di destra specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-197">Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-198">
            <see langword="true" /> se l'iteratore di sinistra è minore dell'iteratore di destra specificato; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-198">
              <see langword="true" /> if the left-side iterator is less than the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public bool operator &lt;= (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_LessThanOrEqual(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &lt;= (_Right As ConstReverseRandomAccessIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &lt;=(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-199">Iteratore da confrontare con l'iteratore di sinistra.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-199">The iterator to compare with the left-side iterator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-200">Determina se la posizione dell'iteratore di sinistra è minore o uguale della posizione dell'iteratore di destra specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-200">Determines whether the position of the left-side iterator is less than or equal to the position of the given right-side iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-201">
            <see langword="true" /> se l'iteratore di sinistra è minore o uguale dell'iteratore di destra specificato; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-201">
              <see langword="true" /> if the left-side iterator is less than or equal to the given right-side iterator; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_MemberSelection">
      <MemberSignature Language="C#" Value="public static TValue op_MemberSelection (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Left);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname !TValue op_MemberSelection(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_MemberSelection (_Left As ConstReverseRandomAccessIterator) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TValue % op_MemberSelection(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ _Left);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Left">
          <span data-ttu-id="683c9-202">Iteratore a cui viene applicato l'operatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-202">The iterator that the operator is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-203">Restituisce l'elemento al quale l'iteratore sta puntando attualmente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-203">Returns the element that the iterator is currently pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-204">Elemento al quale l'iteratore sta puntando attualmente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-204">The element that the iterator is currently pointing to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_PointerDereference">
      <MemberSignature Language="C#" Value="public static TValue op_PointerDereference (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Left);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname !TValue op_PointerDereference(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_PointerDereference (_Left As ConstReverseRandomAccessIterator) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TValue % op_PointerDereference(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator ^ _Left);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator" />
      </Parameters>
      <Docs>
        <param name="_Left">
          <span data-ttu-id="683c9-205">Iteratore a cui viene applicato l'operatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-205">The iterator that the operator is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-206">Restituisce l'elemento al quale l'iteratore sta puntando attualmente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-206">Returns the element that the iterator is currently pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-207">Elemento al quale l'iteratore sta puntando attualmente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-207">The element that the iterator is currently pointing to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="683c9-208">Decrementa l'iteratore dal numero specificato di elementi o determina la differenza tra due iteratore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-208">Decrements the iterator by the given number of elements, or determines the difference between two iterators.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public int operator - (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance int32 op_Subtraction(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator - (_Right As IRandomAccessIterator(Of TValue)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int operator -(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( - ) : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; int" Usage="- _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="683c9-209">Oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> da sottrarre dall'oggetto <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-209">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> to be subtracted from the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-210">Determina la differenza tra due iteratori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-210">Determines the difference between two iterators.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-211">La differenza (in numero di elementi) tra i due iteratori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-211">The difference (number of elements) between the two iterators.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public void operator - (ref Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;TValue&gt; , int _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Subtraction(class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Operator - (ByRef  As ConstReverseRandomAccessIterator(Of TValue), _Right As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator -(Microsoft::VisualC::StlClr::Generic::ConstReverseRandomAccessIterator&lt;TValue&gt; ^ % , int _Right);" />
      <MemberSignature Language="F#" Value="member this.( - ) :  * int -&gt; unit" Usage=" - _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator&lt;TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="_Right" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <param name="_Right">
          <span data-ttu-id="683c9-212">Numero di elementi da decrementare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-212">The number of elements to decrement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="683c9-213">Decrementa l'iteratore del numero specificato di elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-213">Decrements the iterator by the given number of elements.</span>
          </span>
          <span data-ttu-id="683c9-214">Il parametro Integer è specificato a destra dell'operatore di sottrazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-214">The integer parameter is specified on the right side of the subtraction operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-215">Iteratore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-215">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="prev">
      <MemberSignature Language="C#" Value="public virtual void prev ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void prev() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.prev" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub prev ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void prev();" />
      <MemberSignature Language="F#" Value="abstract member prev : unit -&gt; unit&#xA;override this.prev : unit -&gt; unit" Usage="constReverseRandomAccessIterator.prev " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="683c9-216">Posiziona l'iteratore sull'elemento immediatamente successiva all'elemento corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-216">Positions the iterator to the element immediately after the current element.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="valid">
      <MemberSignature Language="C#" Value="public virtual bool valid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool valid() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.valid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function valid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool valid();" />
      <MemberSignature Language="F#" Value="abstract member valid : unit -&gt; bool&#xA;override this.valid : unit -&gt; bool" Usage="constReverseRandomAccessIterator.valid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="683c9-217">Determina se l'iteratore è valido e può essere utilizzato in modo sicuro per attraversare il contenitore sottostante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-217">Determines whether the iterator is valid and can be safely used to traverse the underlying container.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="683c9-218">
            <see langword="true" /> se l'iteratore è valido e può essere utilizzato in modo sicuro; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="683c9-218">
              <see langword="true" /> if the iterator is valid and safe to use; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>