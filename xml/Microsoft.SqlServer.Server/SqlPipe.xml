<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c591e65fa92805a7a1e5c96fa03d5a45d1f410bb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30339755" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlPipe" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPipe sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Consente la restituzione dei risultati al chiamante da parte delle stored procedure gestite in esecuzione in-process su SQL Server. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'istanza di questa classe è resa disponibile per stored procedure gestite mediante il <xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> proprietà la <xref:Microsoft.SqlServer.Server.SqlContext> classe.  
  
   
  
## Examples  
 L'esempio seguente usa <xref:System.Data.SqlClient.SqlConnection> e <xref:System.Data.SqlClient.SqlCommand> per selezionare le righe da un'origine dati in una stored procedure. Nell'esempio viene utilizzata una <xref:Microsoft.SqlServer.Server.SqlPipe> per eseguire il comando e inviare i risultati al client.  
  
 [!code-csharp[DataWorks SqlPipe#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAndSend (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteAndSend(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">Oggetto <see cref="T:System.Data.SqlClient.SqlCommand" /> da eseguire.</param>
        <summary>Esegue il comando passato come parametro e invia i risultati al client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oltre a eventuali risultati effettivi, altri errori e i messaggi vengono inoltre inviati direttamente al client.  
  
 Parametri di output e valori restituiti non vengono inviati al client. sono disponibili per il chiamante, tramite la raccolta di parametri dell'oggetto command.  
  
 Se il comando non è associato a una connessione in-process, un <xref:System.InvalidOperationException> viene generata un'eccezione. Questo metodo non è supportato sui comandi associati a connessioni out-of-process.  
  
 Se sono presenti errori di <xref:System.Data.SqlClient.SqlCommand> oggetto inviato, le eccezioni vengono inviate alla pipe, ma una copia viene inviata anche al codice gestito chiamante. Se il codice chiamante non rileva l'eccezione, verrà propaga lo stack per il codice Transact-SQL e vengono visualizzati due volte nell'output. Se il codice chiamante rileva l'eccezione, il consumer della pipe verrà comunque visualizzato l'errore, ma non ci sarà un errore di duplicato.  
  
   
  
## Examples  
 L'esempio seguente usa <xref:System.Data.SqlClient.SqlConnection> e <xref:System.Data.SqlClient.SqlCommand> per selezionare le righe da un'origine dati in una stored procedure. Nell'esempio viene utilizzata una <xref:Microsoft.SqlServer.Server.SqlPipe> per eseguire il comando e inviare i risultati al client.  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="command" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Questo metodo non è supportato sui comandi associati a connessioni out-of-process.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSendingResults As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSendingResults { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la classe <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> è in modalità di invio di singoli set di risultati al client. Questa proprietà è di sola lettura.</summary>
        <value>
          <see langword="true" /> se è stato chiamato il metodo <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> e la classe <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> si trova nella modalità di invio di singoli set di risultati al client; in caso contrario <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Invia i risultati direttamente al client o al consumer dell'output corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il **inviare** metodo invia dati direttamente al client o al chiamante. In genere è il client che utilizza l'output dal **Pipe** (metodo), ma nel caso di CLR nidificati stored procedure il consumer dell'output può anche essere una stored procedure. Ad esempio, Procedure1 chiama <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> con il testo del comando "EXEC Procedure2". Procedure2 è anche una stored procedure gestita. Se Procedure2 chiama <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>, la riga viene inviata al lettore di Procedure1, non al client.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Gruppo di risultati a riga singola inviato al client: oggetto <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />.</param>
        <summary>Invia un gruppo di risultati a riga singola direttamente al client o al consumer dell'output corrente.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="record" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (reader As SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Data::SqlClient::SqlDataReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Il set di risultati a riga multipla da inviare al client: oggetto <see cref="T:System.Data.SqlClient.SqlDataReader" />.</param>
        <summary>Invia un gruppo di risultati a riga multipla direttamente al client o al consumer dell'output corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Data.SqlClient.SqlDataReader> oggetto passato come parametro dispone di colonne nascoste, tali colonne non vengono propagate al set di risultati inviati al client.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="reader" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Stringa di messaggio da inviare al client.</param>
        <summary>Invia un messaggio stringa direttamente al client o al consumer dell'output corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di messaggio viene inviata come messaggio informativo al client. Le applicazioni client possono attendere i messaggi mediante meccanismi diversi, a seconda di dati accesso API application programming interface () che utilizzano. Ad esempio, se il client utilizza ADO.NET, i messaggi vengono trasmessi attraverso il <xref:System.Data.SqlClient.SqlConnection.InfoMessage> evento.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> metodo per inviare una stringa di messaggio direttamente al client.  
  
 [!code-csharp[DataWorks SqlPipe.Send#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">L'oggetto <paramref name="message" /> è composto da più di 4.000 caratteri.</exception>
        <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="message" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsEnd ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsEnd();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Contrassegna la fine di un gruppo di risultati e riporta l'istanza di <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> allo stato iniziale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stored procedure gestite possono inviare set di risultati ai client che non sta implementando un <xref:System.Data.SqlClient.SqlDataReader>. Questo metodo, insieme a <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> e <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, consente alle stored procedure di inviare set di risultati personalizzati al client.  
  
   
  
## Examples  
 L'esempio seguente crea un nuovo <xref:Microsoft.SqlServer.Server.SqlDataRecord> e il relativo <xref:Microsoft.SqlServer.Server.SqlMetaData>. Nell'esempio viene quindi contrassegna l'inizio di un set di risultati utilizzando il <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> metodo, invia i record con i dati di esempio al client utilizzando il <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> metodo e contrassegni la fine del risultato è impostata con il <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> (metodo).  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> non è stato chiamato precedentemente.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsRow (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsRow(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Oggetto <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> con i valori di colonna relativi alla riga da inviare al client. Lo schema del record dovrà corrispondere allo schema descritto dai metadati della classe <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> passata al metodo <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</param>
        <summary>Invia direttamente al client una riga singola di dati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stored procedure gestite possono inviare set di risultati ai client che non sta implementando un <xref:System.Data.SqlClient.SqlDataReader>. Questo metodo, insieme a <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> e <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, consente alle stored procedure di inviare set di risultati personalizzati al client.  
  
 Il <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> metodo invia una singola riga di dati al client. Le righe possono essere successivamente restituite al chiamante chiamando <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, una volta per ogni riga inviata. Dopo che tutte le righe sono state inviate, una chiamata al <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> metodo è necessario per contrassegnare la fine del set di risultati.  
  
   
  
## Examples  
 L'esempio seguente crea un nuovo <xref:Microsoft.SqlServer.Server.SqlDataRecord> e il relativo <xref:Microsoft.SqlServer.Server.SqlMetaData>. Nell'esempio viene quindi contrassegna l'inizio di un set di risultati utilizzando il <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> metodo, invia i record con i dati di esempio al client utilizzando il <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> metodo e contrassegni la fine del risultato è impostata con il <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> (metodo).  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="record" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> non è stato chiamato precedentemente.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsStart (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsStart(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Oggetto <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> da cui i metadati vengono estratti e utilizzati per descrivere il gruppo di risultati.</param>
        <summary>Contrassegna l'inizio di un set di risultati da inviare al client e utilizza il parametro record per costruire i metadati che descrivono il set di risultati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stored procedure gestite possono inviare set di risultati ai client che non sta implementando un <xref:System.Data.SqlClient.SqlDataReader>. Questo metodo, insieme a <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> e <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, consente alle stored procedure di inviare set di risultati personalizzati al client.  
  
 Il <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> metodo contrassegna l'inizio di un set di risultati e utilizza il parametro record per costruire i metadati che descrivono il set di risultati. Tutte le righe successive, inviate mediante il <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> metodo, deve corrispondere una definizione dei metadati.  
  
 Si noti che la chiamata dopo <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>, solo <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> e <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> può essere chiamato. Qualsiasi altro metodo nella stessa istanza di <xref:Microsoft.SqlServer.Server.SqlPipe> genera un <xref:System.InvalidOperationException>. <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> imposta <xref:Microsoft.SqlServer.Server.SqlPipe> lo stato iniziale in cui è possano chiamare altri metodi.  
  
 Dopo il controllo viene restituito in Transact-SQL da un'esecuzione CLR, non tentare di utilizzare una variabile statica o locale inizializzata per la memoria CLR. Ad esempio, non archiviare un'istanza di un processo nella classe, ad esempio `SQLDataRecord`, che verrà utilizzata dopo la restituzione del controllo da CLR. Fa eccezione la `SQLMetaData` classe in-process.  
  
   
  
## Examples  
 L'esempio seguente crea un nuovo <xref:Microsoft.SqlServer.Server.SqlDataRecord> e il relativo <xref:Microsoft.SqlServer.Server.SqlMetaData>. Nell'esempio viene quindi contrassegna l'inizio di un set di risultati utilizzando il <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> metodo, invia i record con i dati di esempio al client utilizzando il <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> metodo e contrassegni la fine del risultato è impostata con il <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> (metodo).  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="record" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il <paramref name="record" /> non contiene colonne oppure non è stato inizializzato.</exception>
        <exception cref="T:System.InvalidOperationException">È stato specificato un metodo diverso da <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> oppure è stato chiamato il metodo <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> dopo il metodo <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>