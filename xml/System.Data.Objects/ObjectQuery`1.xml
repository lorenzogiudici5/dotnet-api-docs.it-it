<Type Name="ObjectQuery&lt;T&gt;" FullName="System.Data.Objects.ObjectQuery&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8e027e6fef4f5781783db2f6d90dfce411c5fadd" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30390915" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ObjectQuery&lt;T&gt; : System.Data.Objects.ObjectQuery, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Linq.IOrderedQueryable&lt;T&gt;, System.Linq.IQueryable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectQuery`1&lt;T&gt; extends System.Data.Objects.ObjectQuery implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Linq.IOrderedQueryable, class System.Linq.IOrderedQueryable`1&lt;!T&gt;, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectQuery`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectQuery(Of T)&#xA;Inherits ObjectQuery&#xA;Implements IEnumerable(Of T), IOrderedQueryable(Of T), IQueryable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ObjectQuery : System::Data::Objects::ObjectQuery, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IOrderedQueryable&lt;T&gt;, System::Linq::IQueryable&lt;T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.ObjectQuery</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Tipo di entità della query.</typeparam>
    <summary>Rappresenta una query tipizzata su un modello concettuale in un contesto dell'oggetto specifico.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La classe generica <xref:System.Data.Objects.ObjectQuery%601> rappresenta una query che restituisce una raccolta di zero o più oggetti di un tipo specifico. Per eseguire una query di oggetto è necessario che l'oggetto <xref:System.Data.Objects.ObjectContext> sia definito. Il contesto fornisce le informazioni relative a connessione e metadati necessarie per comporre ed eseguire la query. Una query di oggetto viene eseguita negli scenari seguenti:  
  
-   Quando viene utilizzata, ad esempio durante un'enumerazione `foreach` (C#) o `For Each` (Visual Basic).  
  
-   Quando viene assegnata per il riempimento di una raccolta <xref:System.Collections.Generic.List%601>.  
  
-   Quando il metodo <xref:System.Data.Objects.ObjectQuery%601.Execute%2A> viene chiamato esplicitamente.  
  
 La query stessa può essere creata utilizzando un'istruzione [!INCLUDE[esql](~/includes/esql-md.md)] o una query LINQ o può essere compilata in modo incrementale utilizzando i metodi del generatore di query inclusi nella classe. In ogni caso, il risultato è una nuova istanza di <xref:System.Data.Objects.ObjectQuery%601> che, quando enumerata o eseguita in modo esplicito, invia la query all'origine dati per l'esecuzione e restituisce i risultati.  
  
 Un oggetto <xref:System.Data.Objects.ObjectQuery%601> è in genere di un tipo di entità, ma può essere anche di tipo <xref:System.Data.Common.DbDataRecord>, per le proiezioni a un tipo anonimo, o di un tipo primitivo, ad esempio un integer o una stringa. Per ulteriori informazioni, vedere [le query di oggetto](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
   
  
## Examples  
 L'esempio in questo argomento è basato sul [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 Nell'esempio viene illustrato come costruire un'istanza della classe <xref:System.Data.Objects.ObjectQuery%601>.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.Objects.ObjectQuery`1" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile inizializzare un oggetto <xref:System.Data.Objects.ObjectQuery%601> in modo che rappresenti un singolo risultato scalare e non una raccolta di risultati scalari. Alcuni metodi di estensione richiedono come input risultati costituiti da una raccolta. In questo caso, viene generata un'eccezione <xref:System.ArgumentException> quando viene chiamato uno di questi metodi. Per ulteriori informazioni, vedere [le query di oggetto](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
 Quando l'applicazione genera query Entity SQL in fase di esecuzione, è necessario tenere presenti le limitazioni di lunghezza comando dell'origine dati. Entity SQL non impone limitazioni per la lunghezza del testo del comando nelle query.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandText As String, context As ObjectContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
      </Parameters>
      <Docs>
        <param name="commandText">Query [!INCLUDE[esql](~/includes/esql-md.md)].</param>
        <param name="context">Oggetto <see cref="T:System.Data.Objects.ObjectContext" /> su cui eseguire la query.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Data.Objects.ObjectQuery`1" /> utilizzando il comando [!INCLUDE[esql](~/includes/esql-md.md)] specificato come query iniziale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando l'applicazione genera query Entity SQL in fase di esecuzione, è necessario tenere presenti le limitazioni di lunghezza comando dell'origine dati. Entity SQL non impone limitazioni per la lunghezza del testo del comando nelle query.  
  
   
  
## Examples  
 L'esempio in questo argomento è basato sul [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Nell'esempio viene illustrato come costruire un'istanza della classe <xref:System.Data.Objects.ObjectQuery%601>.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context, System::Data::Objects::MergeOption mergeOption);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="commandText">Query [!INCLUDE[esql](~/includes/esql-md.md)].</param>
        <param name="context">Oggetto <see cref="T:System.Data.Objects.ObjectContext" /> su cui eseguire la query.</param>
        <param name="mergeOption">Specifica il modo in cui le entità recuperate mediante questa query devono essere unite con le entità restituite dalle query precedenti sullo stesso oggetto <see cref="T:System.Data.Objects.ObjectContext" />.</param>
        <summary>Crea una nuova istanza di <see cref="T:System.Data.Objects.ObjectQuery`1" /> utilizzando il comando [!INCLUDE[esql](~/includes/esql-md.md)] specificato come query iniziale e l'opzione di unione specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando l'applicazione genera query Entity SQL in fase di esecuzione, è necessario tenere presenti le limitazioni di lunghezza comando dell'origine dati. Entity SQL non impone limitazioni per la lunghezza del testo del comando nelle query.  
  
   
  
## Examples  
 Questo esempio è basato il [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). L'oggetto <xref:System.Data.Objects.ObjectQuery%601> viene inizializzato con la query specificata, <xref:System.Data.Objects.ObjectContext> e <xref:System.Data.Objects.MergeOption>.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Distinct">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Distinct ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Distinct() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Distinct" />
      <MemberSignature Language="VB.NET" Value="Public Function Distinct () As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Distinct();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Limita la query in modo da visualizzare risultati univoci.</summary>
        <returns>Nuova istanza di <see cref="T:System.Data.Objects.ObjectQuery`1" /> equivalente all'istanza originale con la clausola [SELECT DISTINCT](~/docs/framework/data/adonet/ef/language-reference/select-entity-sql.md) applicata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo del generatore di query restituisce un <xref:System.Data.Objects.ObjectQuery%601> istanza è equivalente alla query originale con [SELECT DISTINCT](~/docs/framework/data/adonet/ef/language-reference/select-entity-sql.md) applicato.  
  
 Il `DISTINCT` operatore non può essere applicato a un oggetto che include il mapping a una colonna non confrontabile nell'origine dati (ad esempio ntext).  
  
   
  
## Examples  
 L'esempio in questo argomento è basato sul [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Nell'esempio viene utilizzato il metodo <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> per creare un nuovo oggetto <xref:System.Data.Objects.ObjectQuery%601>. Viene quindi chiamato il metodo <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> sul nuovo oggetto <xref:System.Data.Objects.ObjectQuery%601> per ottenere i risultati univoci di questa query.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Except">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Except (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Except(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Except (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Except(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">Oggetto <see cref="T:System.Data.Objects.ObjectQuery`1" /> che rappresenta i risultati da escludere dalla query.</param>
        <summary>Limita i risultati della query escludendo quelli basati sui risultati di un'altra query di oggetto.</summary>
        <returns>Nuova istanza di <see cref="T:System.Data.Objects.ObjectQuery`1" /> equivalente all'istanza originale con l'operatore [EXCEPT](~/docs/framework/data/adonet/ef/language-reference/except-entity-sql.md) applicato in base al parametro <paramref name="query" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fornito `query` che definisce i risultati da escludere deve essere dello stesso tipo o di un tipo compatibile con il <xref:System.Data.Objects.ObjectQuery%601>.  
  
 I parametri definiti nella classe fornita `query` vengono unite con parametri che sono definiti nel <xref:System.Data.Objects.ObjectQuery%601> istanza. I parametri devono essere univoci nell'oggetto <xref:System.Data.Objects.ObjectParameterCollection> combinato. Nella raccolta combinata non possono essere presenti due parametri con lo stesso nome. Per ulteriori informazioni, vedere [metodi del generatore di Query](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 La query risultante eredita la connessione dall'istanza di <xref:System.Data.Objects.ObjectQuery%601> su cui è stato chiamato il metodo <xref:System.Data.Objects.ObjectQuery%601.Except%2A>.  
  
   
  
## Examples  
 Questo esempio è basato il [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Nell'esempio viene utilizzato il metodo <xref:System.Data.Objects.ObjectQuery%601.Except%2A> per creare un nuovo oggetto <xref:System.Data.Objects.ObjectQuery%601>, quindi vengono scorsi i risultati della nuova query.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_except)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_except)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="query" /> è <see langword="null" /> oppure una stringa vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;T&gt; Execute (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!T&gt; Execute(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectResult&lt;T&gt; ^ Execute(System::Data::Objects::MergeOption mergeOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">Oggetto <see cref="T:System.Data.Objects.MergeOption" /> da utilizzare quando viene eseguita la query. Il valore predefinito è <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
        <summary>Esegue la query di oggetto con l'opzione di merge specificata.</summary>
        <returns>Oggetto <see cref="T:System.Data.Objects.ObjectResult`1" /> contenente una raccolta di oggetti entità restituiti dalla query.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'opzione di unione predefinita per le query di oggetto è <xref:System.Data.Objects.MergeOption.AppendOnly>. Per ulteriori informazioni, vedere [risoluzione di identità, la gestione dello stato e il rilevamento delle modifiche](http://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0).  
  
   
  
## Examples  
 Questo esempio è basato il [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Nell'esempio viene restituito un oggetto <xref:System.Data.Objects.ObjectResult%601> dal metodo <xref:System.Data.Objects.ObjectQuery.Execute%2A>. Viene quindi ottenuto un enumeratore e vengono scorsi i risultati della query. Vengono infine rilasciati l'enumeratore e l'oggetto <xref:System.Data.Objects.ObjectResult%601>.  
  
 [!code-csharp[DP ObjectServices Concepts#QueryResult](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#queryresult)]
 [!code-vb[DP ObjectServices Concepts#QueryResult](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#queryresult)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; GroupBy (string keys, string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; GroupBy(string keys, string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupBy (keys As String, projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ GroupBy(System::String ^ keys, System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">Colonne chiave in base alle quali raggruppare i risultati.</param>
        <param name="projection">Elenco delle proprietà selezionate che definisce la proiezione.</param>
        <param name="parameters">Zero o più parametri utilizzati in questo metodo.</param>
        <summary>Raggruppa i risultati della query in base ai criteri specificati.</summary>
        <returns>Nuova istanza di <see cref="T:System.Data.Objects.ObjectQuery`1" /> di tipo <see cref="T:System.Data.Common.DbDataRecord" /> equivalente all'istanza originale con la clausola [GROUP BY](~/docs/framework/data/adonet/ef/language-reference/group-by-entity-sql.md) applicata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A> si applica la proiezione specificata dal `projection` parametro. Pertanto l'oggetto <xref:System.Data.Objects.ObjectQuery%601> restituito dal metodo <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A> è sempre di tipo <xref:System.Data.Common.DbDataRecord>. Per ulteriori informazioni, vedere [le query di oggetto](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
   
  
## Examples  
 Questo esempio è basato il [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 In questo esempio viene creato un nuovo oggetto <xref:System.Data.Objects.ObjectQuery%601> contenente i risultati della query esistente raggruppati in base al nome del prodotto.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_groupby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_groupby)]  
  
 Questo esempio viene restituito un set di record di dati nidificati che contengono il `Contact.LastName` raggruppati e ordinati in ordine alfabetico per la prima lettera della colonna `Contact.LastName`.  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_groupby)]
 [!code-vb[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_groupby)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="query" /> è <see langword="null" /> oppure una stringa vuota.  
  
 oppure  
  
 Il parametro <paramref name="projection" /> è <see langword="null" /> oppure una stringa vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="Include">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Include (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Include(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Include(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Include (path As String) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Include(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Elenco di oggetti correlati separato da punti da restituire nei risultati della query.</param>
        <summary>Specifica gli oggetti correlati da includere nei risultati della query.</summary>
        <returns>Nuovo oggetto <see cref="T:System.Data.Objects.ObjectQuery`1" /> con il percorso della query definito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I percorsi della query possono essere usati con le query Entity SQL e LINQ.  
  
 I percorsi sono inclusivi. Ad esempio, se una chiamata di inclusione indica `Include("Orders.OrderLines")`, non solo verranno `OrderLines` da includere, ma anche `Orders`. Per ulteriori informazioni, vedere [durante il caricamento di oggetti correlati](http://msdn.microsoft.com/library/452347d2-7b3b-44cd-9001-231299a28cb1).  
  
 Quando si chiama il metodo <xref:System.Data.Objects.ObjectQuery%601.Include%2A>, il percorso della query è valido solo nell'istanza restituita dell'oggetto <xref:System.Data.Objects.ObjectQuery%601>. Le altre istanze di <xref:System.Data.Objects.ObjectQuery%601> e il contesto dell'oggetto stesso non sono interessati.  
  
 Poiché il metodo <xref:System.Data.Objects.ObjectQuery%601.Include%2A> restituisce l'oggetto query, è possibile chiamare questo metodo più volte su un oggetto <xref:System.Data.Objects.ObjectQuery%601> per specificare più percorsi per la query, come nell'esempio seguente:  
  
 [!code-csharp[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#spanonlywithmultiplepaths)]
 [!code-vb[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#spanonlywithmultiplepaths)]  
  
   
  
## Examples  
 [!code-csharp[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithspan)]
 [!code-vb[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithspan)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> è <see langword="empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Intersect (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Intersect(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Intersect(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">Oggetto <see cref="T:System.Data.Objects.ObjectQuery`1" /> che rappresenta i risultati da includere nella query.</param>
        <summary>Limita i risultati della query includendo solo i risultati presenti in un'altra query di oggetto.</summary>
        <returns>Nuova istanza di <see cref="T:System.Data.Objects.ObjectQuery`1" /> equivalente all'istanza originale con l'operatore [INTERSECT](~/docs/framework/data/adonet/ef/language-reference/intersect-entity-sql.md) applicato in base al parametro <paramref name="query" /> specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fornito `query` che definisce i risultati da includere deve essere dello stesso tipo o di un tipo compatibile con il <xref:System.Data.Objects.ObjectQuery%601>.  
  
 I parametri definiti nella classe fornita `query` vengono unite con parametri che sono definiti nel <xref:System.Data.Objects.ObjectQuery%601> istanza. I parametri devono essere univoci nell'oggetto <xref:System.Data.Objects.ObjectParameterCollection> combinato. Nella raccolta combinata non possono essere presenti due parametri con lo stesso nome. Per ulteriori informazioni, vedere [metodi del generatore di Query](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 La query risultante eredita la connessione dall'istanza di <xref:System.Data.Objects.ObjectQuery%601> su cui è stato chiamato il metodo <xref:System.Data.Objects.ObjectQuery%601.Intersect%2A>.  
  
   
  
## Examples  
 L'esempio in questo argomento è basato sul [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). In questo esempio viene creato un nuovo oggetto <xref:System.Data.Objects.ObjectQuery%601> contenente i risultati di altre due query.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_intersect)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_intersect)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="query" /> è <see langword="null" /> oppure una stringa vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectQuery`1.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome della query di oggetto.</summary>
        <value>Valore <see langword="string" /> che rappresenta il nome di questo oggetto <see cref="T:System.Data.Objects.ObjectQuery`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome della query di oggetto identifica la query di oggetto corrente nella sequenza in base al nome durante la costruzione dei metodi del generatore di query. Per impostazione predefinita, il nome della query è `it`. Ciò risulta utile quando si fa riferimento alla sequenza corrente nei join nel metodo <xref:System.Data.Objects.ObjectQuery`1.Where*> o nel metodo <xref:System.Data.Objects.ObjectQuery`1.SelectValue*>. Per ulteriori informazioni, vedere [metodi del generatore di Query](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Quando si imposta la proprietà <xref:System.Data.Objects.ObjectQuery%601.Name%2A> di un oggetto <xref:System.Data.Objects.ObjectQuery%601>, tale valore diventa l'alias nei metodi successivi.  
  
 Il valore della proprietà <xref:System.Data.Objects.ObjectQuery%601.Name%2A> deve iniziare con una lettera e può contenere lettere, cifre e caratteri di sottolineatura.  
  
   
  
## Examples  
 In questo esempio viene impostato il nome del primo oggetto <xref:System.Data.Objects.ObjectQuery%601> su "product", quindi viene utilizzato l'alias nel metodo <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> successivo. L'esempio in questo argomento è basato sul [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 [!code-csharp[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithaliasnamed)]
 [!code-vb[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithaliasnamed)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il valore specificato nel set non è valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; OfType&lt;TResultType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; OfType&lt;TResultType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OfType``1" />
      <MemberSignature Language="VB.NET" Value="Public Function OfType(Of TResultType) () As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ OfType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResultType">Tipo di entità dell'oggetto <see cref="T:System.Data.Objects.ObjectResult`1" /> restituito quando viene eseguita la query con il filtro applicato.</typeparam>
        <summary>Limita la query in modo da visualizzare solo i risultati di un tipo specifico.</summary>
        <returns>Nuova istanza di <see cref="T:System.Data.Objects.ObjectQuery`1" /> equivalente all'istanza originale con l'operatore [OFTYPE](~/docs/framework/data/adonet/ef/language-reference/oftype-entity-sql.md) applicato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<xref:System.Data.Objects.ObjectQuery`1.OfType*> viene utilizzato per filtrare i risultati della query in base a un'entità specifica o a un tipo complesso. Supporta un modello concettuale con ereditarietà degli oggetti. Per ulteriori informazioni, vedere [Entity Data Model: ereditarietà](~/docs/framework/data/adonet/entity-data-model-inheritance.md).

Il <xref:System.Data.Objects.ObjectQuery`1.OfType*> metodo può essere applicato solo a un <xref:System.Data.Objects.ObjectQuery%601> di un tipo di entità o un tipo complesso definito in EDM.
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.EntitySqlException">Il tipo specificato non è valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; OrderBy (string keys, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; OrderBy(string keys, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OrderBy (keys As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ OrderBy(System::String ^ keys, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">Colonne chiave in base alle quali ordinare i risultati.</param>
        <param name="parameters">Zero o più parametri utilizzati in questo metodo.</param>
        <summary>Ordina i risultati della query in base ai criteri specificati.</summary>
        <returns>Nuova istanza di <see cref="T:System.Data.Objects.ObjectQuery`1" /> equivalente all'istanza originale con la clausola [ORDER BY](~/docs/framework/data/adonet/ef/language-reference/order-by-entity-sql.md) applicata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'ordinamento dei risultati in una query annidata non può essere garantito.  
  
 <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> deve essere sempre il metodo del generatore di query finale nella sequenza.  
  
   
  
## Examples  
 Questo esempio è basato il [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Nell'esempio viene creato un nuovo <xref:System.Data.Objects.ObjectQuery%601> oggetto che contiene i risultati dell'ordine di query esistente da `ProductID`.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_orderby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_orderby)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="keys" /> o il parametro <paramref name="parameters" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="key" /> è una stringa vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; Select (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; Select(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ Select(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="projection">Elenco delle proprietà selezionate che definisce la proiezione.</param>
        <param name="parameters">Zero o più parametri utilizzati in questo metodo.</param>
        <summary>Limita i risultati della query solo alle proprietà definite nella proiezione specificata.</summary>
        <returns>Nuova istanza di <see cref="T:System.Data.Objects.ObjectQuery`1" /> di tipo <see cref="T:System.Data.Common.DbDataRecord" /> equivalente all'istanza originale con la clausola [SELECT](~/docs/framework/data/adonet/ef/language-reference/select-entity-sql.md) applicata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Select%2A> si applica la proiezione specificata dal `projection` parametro. L'oggetto <xref:System.Data.Objects.ObjectQuery%601> restituito dal metodo <xref:System.Data.Objects.ObjectQuery%601.Select%2A> è sempre un tipo di riga di <xref:System.Data.Common.DbDataRecord>. Utilizzare il metodo <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> per restituire valori che sono tipi semplici, tipi di entità o tipi complessi. Per ulteriori informazioni, vedere [LINQ to Entities](~/docs/framework/data/adonet/ef/language-reference/linq-to-entities.md).  
  
 Quando una proprietà di navigazione viene inclusa nella proiezione, i risultati della query includono una raccolta di oggetti <xref:System.Data.Common.DbDataRecord> annidati. Per ulteriori informazioni, vedere [procedura: esplorare relazioni tramite proprietà di navigazione](http://msdn.microsoft.com/library/b1d71c7d-16a7-4b46-96ac-690176bd5057).  
  
   
  
## Examples  
 Questo esempio è basato il [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Nell'esempio viene creato un nuovo <xref:System.Data.Objects.ObjectQuery%601> cui risultati sono record di dati che contengono il `ProductID` campi dei risultati della query.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projection" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="parameters" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="projection" /> è una stringa vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectValue&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; SelectValue&lt;TResultType&gt; (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; SelectValue&lt;TResultType&gt;(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectValue(Of TResultType) (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ SelectValue(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResultType">Tipo dell'oggetto <see cref="T:System.Data.Objects.ObjectQuery`1" /> restituito dal metodo <see cref="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" />.</typeparam>
        <param name="projection">Elenco di proiezione.</param>
        <param name="parameters">Set facoltativo di parametri di query che devono trovarsi nell'ambito durante l'analisi.</param>
        <summary>Limita i risultati della query solo alla proprietà specificata nella proiezione.</summary>
        <returns>Nuova istanza di <see cref="T:System.Data.Objects.ObjectQuery`1" /> di un tipo compatibile con la proiezione specifica. L'oggetto <see cref="T:System.Data.Objects.ObjectQuery`1" /> restituito è equivalente all'istanza originale con la clausola [SELECT VALUE](~/docs/framework/data/adonet/ef/language-reference/select-entity-sql.md) applicata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> viene utilizzato per restituire valori che sono tipi semplici, tipi di entità o tipi complessi. Utilizzare il metodo <xref:System.Data.Objects.ObjectQuery%601.Select%2A> per proiezioni che richiedono un tipo di riga anziché un tipo di valore. Per ulteriori informazioni, vedere [le query di oggetto](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
 Il <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> metodo si applica la proiezione specificata dal `projection` parametro. L'oggetto <xref:System.Data.Objects.ObjectQuery%601> restituito dal metodo <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> deve essere di un tipo di valore compatibile con la proiezione e deve essere dello stesso tipo di <xref:System.Data.Objects.ObjectQuery`1.SelectValue*>.  
  
   
  
## Examples  
 Questo esempio è basato il [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Nell'esempio viene creato un nuovo <xref:System.Data.Objects.ObjectQuery%601> contenente i risultati di una sequenza di `ProductID` valori proiettata dai risultati della query esistente.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_selectvalue)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_selectvalue)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projection" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="parameters" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="projection" /> è una stringa vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Skip (string keys, string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Skip(string keys, string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Skip (keys As String, count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Skip(System::String ^ keys, System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">Colonne chiave in base alle quali ordinare i risultati.</param>
        <param name="count">Numero di risultati da ignorare. Deve trattarsi di una costante o di un riferimento ai parametri.</param>
        <param name="parameters">Set facoltativo di parametri di query che devono trovarsi nell'ambito durante l'analisi.</param>
        <summary>Ordina i risultati della query in base ai criteri specificati e ignora un numero di risultati specificato.</summary>
        <returns>Nuova istanza di <see cref="T:System.Data.Objects.ObjectQuery`1" /> equivalente all'istanza originale con le clausole [ORDER BY](~/docs/framework/data/adonet/ef/language-reference/order-by-entity-sql.md) e [SKIP](~/docs/framework/data/adonet/ef/language-reference/skip-entity-sql.md) applicate.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> non può essere utilizzato dopo il metodo <xref:System.Data.Objects.ObjectQuery%601.Top%2A>. Quando si utilizza <xref:System.Data.Objects.ObjectQuery%601.Top%2A> dopo <xref:System.Data.Objects.ObjectQuery%601.Skip%2A>, il risultato è analogo di [limite](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md) istruzione di una clausola.  
  
   
  
## Examples  
 Questo esempio mostra come ottenere cinque `Product` oggetti dopo aver ignorato le prime tre nel risultato della query, ordinato in base `Product.ListPrice`.  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Tutti gli argomenti sono <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Il parametro <paramref name="keys" /> è una stringa vuota.  
  
 oppure  
  
 Il parametro <paramref name="count" /> è una stringa vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un enumeratore con cui è possibile scorrere i risultati della query.</summary>
        <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerator`1" /> che può essere utilizzato per scorrere i risultati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il metodo <xref:System.Data.Objects.ObjectQuery%601.System%23Collections%23Generic%23IEnumerable%7BT%7D%23GetEnumerator%2A> per eseguire la query.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Top (string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Top(string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Top (count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Top(System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="count">Numero di elementi presenti nei risultati sotto forma di stringa.</param>
        <param name="parameters">Set facoltativo di parametri di query che devono trovarsi nell'ambito durante l'analisi.</param>
        <summary>Limita i risultati della query in modo da visualizzare un numero di elementi specificato.</summary>
        <returns>Nuova istanza di <see cref="T:System.Data.Objects.ObjectQuery`1" /> equivalente all'istanza originale con la clausola [TOP](~/docs/framework/data/adonet/ef/language-reference/top-entity-sql.md) applicata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Top%2A> non è deterministico a meno che la query non venga ordinata.  
  
 Quando si utilizza il <xref:System.Data.Objects.ObjectQuery%601.Top%2A> metodo dopo il <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> (metodo), il risultato è analogo di [limite](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md) istruzione di un [ORDER BY](~/docs/framework/data/adonet/ef/language-reference/order-by-entity-sql.md) clausola.  
  
   
  
## Examples  
 Questi esempi sono basati sul [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 In questo esempio viene creato un nuovo oggetto <xref:System.Data.Objects.ObjectQuery%601> contenente i primi due risultati della query esistente.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_top)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_top)]  
  
 Questo esempio mostra come ottenere cinque `Product` oggetti dopo aver ignorato le prime tre nel risultato della query, ordinato in base `Product.ListPrice`. <xref:System.Data.Objects.ObjectQuery%601.Top%2A> viene usata invece di [limite](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md) per il paging.  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="count" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Il parametro <paramref name="count" /> è una stringa vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Union (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Union(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Union(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">Oggetto <see cref="T:System.Data.Objects.ObjectQuery`1" /> che rappresenta i risultati da aggiungere.</param>
        <summary>Combina i risultati della query con i risultati di un'altra query di oggetto senza duplicati.</summary>
        <returns>Nuova istanza di <see cref="T:System.Data.Objects.ObjectQuery`1" /> equivalente all'istanza originale con l'operatore [UNION](~/docs/framework/data/adonet/ef/language-reference/union-entity-sql.md) applicato per aggiungere i risultati del parametro <paramref name="query" /> specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Union%2A> Aggiunge i risultati del metodo `query` senza duplicati.  
  
 Fornito `query` che definisce i risultati da aggiungere deve essere dello stesso tipo o di un tipo che può essere promosso al tipo di questo <xref:System.Data.Objects.ObjectQuery%601>. Ad esempio, il seguente codice è valido perché `DiscontinuedProducts` può essere promossa a `Products`:  
  
```  
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)  
```  
  
 Nell'esempio verrà generata un'eccezione perché `Products` non può essere promossa a `DiscontinuedProducts`.  
  
```  
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)   
```  
  
 Per un <xref:System.Data.Objects.ObjectQuery%601> di tipo <xref:System.Data.Common.DbDataRecord>, i record in entrambe le query devono avere lo stesso numero di colonne e i tipi nelle colonne di <xref:System.Data.Common.DbDataRecord> dell'oggetto passato `query` deve essere promuovibile ai tipi di colonne il <xref:System.Data.Common.DbDataRecord> del <xref:System.Data.Objects.ObjectQuery%601>.  
  
 I parametri definiti nella classe fornita `query` vengono unite con parametri che sono definiti nel <xref:System.Data.Objects.ObjectQuery%601> istanza. I parametri devono essere univoci nell'oggetto <xref:System.Data.Objects.ObjectParameterCollection> combinato. Nella raccolta combinata non possono essere presenti due parametri con lo stesso nome. Per ulteriori informazioni, vedere [metodi del generatore di Query](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 La query risultante eredita la connessione dall'istanza di <xref:System.Data.Objects.ObjectQuery%601> su cui è stato chiamato il metodo <xref:System.Data.Objects.ObjectQuery%601.Union%2A>.  
  
   
  
## Examples  
 Questo esempio è basato il [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Nell'esempio viene utilizzato il metodo <xref:System.Data.Objects.ObjectQuery%601.Union%2A> per creare un nuovo oggetto <xref:System.Data.Objects.ObjectQuery%601>.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_union)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_union)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="query" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UnionAll">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; UnionAll (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; UnionAll(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function UnionAll (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ UnionAll(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">Oggetto <see cref="T:System.Data.Objects.ObjectQuery`1" /> che rappresenta i risultati da aggiungere.</param>
        <summary>Combina i risultati della query con i risultati di un'altra query di oggetto inclusi tutti i duplicati.</summary>
        <returns>Nuova istanza di <see cref="T:System.Data.Objects.ObjectQuery`1" /> equivalente all'istanza originale con l'operatore [UNION ALL](~/docs/framework/data/adonet/ef/language-reference/union-entity-sql.md) applicato per aggiungere i risultati del parametro <paramref name="query" /> specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> Aggiunge i risultati del metodo `query` inclusi tutti i duplicati.  
  
 Fornito `query` che definisce i risultati da aggiungere deve essere dello stesso tipo o di un tipo che può essere promosso al tipo di questo <xref:System.Data.Objects.ObjectQuery%601>. Ad esempio, il seguente codice è valido perché `DiscontinuedProducts` può essere promossa a `Products`:  
  
```  
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)  
```  
  
 Nell'esempio verrà generata un'eccezione perché `Products` non può essere promossa a `DiscontinuedProducts`.  
  
```  
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)   
```  
  
 Per un <xref:System.Data.Objects.ObjectQuery%601> di tipo <xref:System.Data.Common.DbDataRecord>, i record in entrambe le query devono avere lo stesso numero di colonne e i tipi nelle colonne di <xref:System.Data.Common.DbDataRecord> dell'oggetto passato `query` deve essere promuovibile ai tipi di colonne il <xref:System.Data.Common.DbDataRecord> del <xref:System.Data.Objects.ObjectQuery%601>.  
  
 I parametri definiti nella classe fornita `query` vengono unite con parametri che sono definiti nel <xref:System.Data.Objects.ObjectQuery%601> istanza. I parametri devono essere univoci nell'oggetto <xref:System.Data.Objects.ObjectParameterCollection> combinato. Nella raccolta combinata non possono essere presenti due parametri con lo stesso nome. Per ulteriori informazioni, vedere [metodi del generatore di Query](http://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 La query risultante eredita la connessione dall'istanza di <xref:System.Data.Objects.ObjectQuery%601> su cui è stato chiamato il metodo <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A>.  
  
   
  
## Examples  
 L'esempio in questo argomento è basato sul [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Nell'esempio viene utilizzato il metodo <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> per creare un nuovo oggetto <xref:System.Data.Objects.ObjectQuery%601>. Viene quindi chiamato il metodo <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> sul nuovo oggetto <xref:System.Data.Objects.ObjectQuery%601> per ottenere i risultati univoci di questa query.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="query" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Where (string predicate, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Where(string predicate, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Where (predicate As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Where(System::String ^ predicate, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="predicate">Predicato del filtro.</param>
        <param name="parameters">Zero o più parametri utilizzati in questo metodo.</param>
        <summary>Limita la query in modo dai visualizzare i risultati che corrispondono ai criteri di filtro specificati.</summary>
        <returns>Nuova istanza di <see cref="T:System.Data.Objects.ObjectQuery`1" /> equivalente all'istanza originale con la clausola [WHERE](~/docs/framework/data/adonet/ef/language-reference/where-entity-sql.md) applicata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Questo esempio è basato il [modello Sales di AdventureWorks](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). Nell'esempio viene creato un nuovo <xref:System.Data.Objects.ObjectQuery%601> contenente i risultati della query esistente filtrati in base ai seguenti criteri: `"it.ProductID = 900"`.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_where)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_where)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="parameters" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="predicate" /> è una stringa vuota.</exception>
      </Docs>
    </Member>
  </Members>
</Type>