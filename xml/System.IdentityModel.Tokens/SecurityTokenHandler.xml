<Type Name="SecurityTokenHandler" FullName="System.IdentityModel.Tokens.SecurityTokenHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="24ee9e0178965939d224c31ccbd71a445222d09c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36480596" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SecurityTokenHandler : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SecurityTokenHandler extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SecurityTokenHandler&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityTokenHandler abstract : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type SecurityTokenHandler = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>La classe di base astratta per i gestori del token di sicurezza.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.IdentityModel.Tokens.SecurityTokenHandler> classe è la classe base dalla protezione tutti i gestori di token derivano. Un gestore di token di sicurezza è responsabile per:  
  
-   La convalida dei token di sicurezza (<xref:System.IdentityModel.Tokens.SecurityToken>) del tipo è progettato per elaborare e creazione di pacchetti le attestazioni contenute nel token in una <xref:System.Security.Claims.ClaimsIdentity> oggetto.  
  
-   Serializzare e deserializzare i token di sicurezza del tipo è progettato per l'elaborazione.  
  
-   Serializzazione e deserializzazione di clausole identificatore di chiave (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) che si riferiscono ai token del tipo è progettato per elaborare e in uscita dai `<wsse:SecurityTokenReference>` elementi.  
  
-   Creazione di token di sicurezza da un <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor> oggetto passato dalle implementazioni del <xref:System.IdentityModel.SecurityTokenService> classe.  
  
-   Creazione di clausole identificatore di chiave da un token di sicurezza per le implementazioni del <xref:System.IdentityModel.SecurityTokenService> classe.  
  
 Windows Identity Foundation (WIF) i gestori di token di sicurezza seguenti sono disponibili altri elementi:  
  
-   <xref:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.KerberosSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.RsaSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.Saml2SecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.SamlSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.UserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.X509SecurityTokenHandler>  
  
 La maggior parte di queste classi espone membri aggiuntivi che implementano funzionalità specifiche per l'elaborazione dei token per il quale la classe è progettata. In molti casi potrebbe essere preferibile derivare da una di queste classi anziché direttamente nella <xref:System.IdentityModel.Tokens.SecurityTokenHandler> classe.  
  
 Un gestore di token di sicurezza può essere aggiunti o rimossi da una raccolta di gestore dei token, specificando il [ &lt;aggiungere&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md), [ &lt;rimuovere&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md), o [ &lt;cancellare&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md) elementi sotto il [ &lt;securityTokenHandlers&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md) elemento in un file di configurazione. Il <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration> oggetto che contiene le impostazioni di configurazione per la raccolta di gestori sono accessibili tramite il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> proprietà e la raccolta di gestori che il gestore dei token è un membro di è possibile accedere dal <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A> proprietà. È possibile eseguire l'override di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> metodo per elaborare elementi di configurazione personalizzata che accetta il gestore.  
  
 Il <xref:System.IdentityModel.Tokens.SecurityTokenHandler> classe espone molte altre proprietà e metodi. A seconda della funzionalità che si sceglie di implementare, è possibile eseguire l'override di alcuni o tutti questi membri.  
  
 È necessario eseguire l'override di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> proprietà e il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> metodo per fornire l'infrastruttura WIF con informazioni sul tipo di token di sicurezza che la classe è progettato per l'elaborazione.  
  
 Convalida, la serializzazione e deserializzazione funzionalità viene esposta tramite proprietà o metodi che indicano se il gestore può eseguire una funzione specifica combinata con il metodo o i metodi che implementano la funzionalità. Nell'elenco seguente coppie di proprietà o metodi che indicano la funzionalità con i metodi che implementano la funzionalità:  
  
-   Il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> proprietà e il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metodo: convalida un token e le include le attestazioni contenute nel token in una <xref:System.Security.Claims.ClaimsIdentity>.  
  
-   Il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> proprietà e il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> metodi: serializzazione del Token.  
  
-   Il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> metodi e le <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> metodi: la deserializzazione del Token.  
  
-   Il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A> metodo e il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> metodo: deserializzazione di clausole identificatore di chiave.  
  
-   Il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> metodo e il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> metodo: serializzazione di clausole identificatore di chiave.  
  
 Il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> e il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> metodi vengono chiamati dalla pipeline nelle implementazioni del <xref:System.IdentityModel.SecurityTokenService> classe.  
  
 Il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> metodo viene chiamato dall'infrastruttura di WIF per determinare se è già stato ricevuto il token specificato. Per impostazione predefinita, questo metodo restituisce `false`, a indicare che il token non è già stato ricevuto. È possibile eseguire l'override del metodo e fornire la logica per il rilevamento riproduzione token.  
  
   
  
## Examples  
 Gli esempi di codice in tutti i <xref:System.IdentityModel.Tokens.SecurityTokenHandler> negli argomenti vengono estratti dal `Custom Token` esempio. In questo esempio fornisce le classi personalizzate che consentono l'elaborazione del token SWT (Simple Web). Per informazioni su questo esempio e altri esempi disponibili per WIF e per scaricarli, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md). Il codice XML seguente viene illustrato come aggiungere il gestore dei token SWT per la raccolta di gestori di token.  
  
```xml  
<system.identityModel>  
  <identityConfiguration saveBootstrapContext="true">  
    <issuerTokenResolver type="SimpleWebToken.CustomIssuerTokenResolver, SimpleWebToken">  
      <AddAudienceKeyPair  symmetricKey="wAVkldQiFypTQ+kdNdGWCYCHRcee8XmXxOvgmak8vSY=" audience="http://localhost:19851/" />  
    </issuerTokenResolver>  
    <issuerNameRegistry type="RelyingParty.TrustedIssuerNameRegistry, RelyingParty"/>  
    <audienceUris>  
      <add value="http://localhost:19851/"/>  
    </audienceUris>  
    <securityTokenHandlers>  
      <add type="SimpleWebToken.SimpleWebTokenHandler, SimpleWebToken" />  
    </securityTokenHandlers>  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Tokens.SecurityToken" />
    <altmember cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />
    <altmember cref="T:System.IdentityModel.SecurityTokenService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SecurityTokenHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SecurityTokenHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Viene chiamato dai costruttori nelle classi derivate per inizializzare la classe <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool CanReadKeyIdentifierClause (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadKeyIdentifierClause(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadKeyIdentifierClause (reader As XmlReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadKeyIdentifierClause(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member CanReadKeyIdentifierClause : System.Xml.XmlReader -&gt; bool&#xA;override this.CanReadKeyIdentifierClause : System.Xml.XmlReader -&gt; bool" Usage="securityTokenHandler.CanReadKeyIdentifierClause reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Lettore XML posizionato presso l'elemento iniziale. Il lettore non deve essere anticipato in base a questo metodo.</param>
        <summary>Restituisce un valore che indica se l'elemento XML a cui il lettore XML specificato fa riferimento è una clausola dell'identificatore di chiave che può essere deserializzata da questa istanza.</summary>
        <returns>
          <see langword="true" /> se il metodo <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> può leggere l'elemento; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione predefinita restituisce `false` per indicare che la clausola identificatore di chiave non può essere letto.  
  
 Una classe derivata controlla l'elemento a cui fa riferimento il lettore per determinare se l'istanza può deserializzare una clausola identificatore di chiave. Questa operazione viene in genere eseguita tramite una chiamata al <xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=nameWithType> metodo con le stringhe appropriate di elemento e lo spazio dei nomi specificato. Se esegue l'override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, è inoltre necessario sostituire il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> metodo per fornire la logica per deserializzare la clausola identificatore di chiave.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un valore che indica se il token specificato può essere deserializzato come token del tipo elaborato da questa istanza.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public virtual bool CanReadToken (string tokenString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadToken(string tokenString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadToken (tokenString As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadToken(System::String ^ tokenString);" />
      <MemberSignature Language="F#" Value="abstract member CanReadToken : string -&gt; bool&#xA;override this.CanReadToken : string -&gt; bool" Usage="securityTokenHandler.CanReadToken tokenString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tokenString">La stringa del token da leggere.</param>
        <summary>Restituisce un valore che indica se la stringa specificata può essere deserializzata come un token del tipo elaborato da questa istanza.</summary>
        <returns>
          <see langword="true" /> se il metodo <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /> può leggere l'elemento; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione predefinita restituisce sempre `false`.  
  
 Se si esegue l'override di questo metodo, è inoltre necessario sostituire il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> metodo per fornire la logica per deserializzare il token.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public virtual bool CanReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadToken (reader As XmlReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member CanReadToken : System.Xml.XmlReader -&gt; bool&#xA;override this.CanReadToken : System.Xml.XmlReader -&gt; bool" Usage="securityTokenHandler.CanReadToken reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Lettore XML posizionato presso un elemento iniziale. Il lettore non deve essere anticipato in base a questo metodo.</param>
        <summary>Restituisce un valore che indica se l'elemento XML a cui il lettore XML specificato fa riferimento può essere letto come token del tipo elaborato da questa istanza.</summary>
        <returns>
          <see langword="true" /> se il metodo <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> può leggere l'elemento; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione predefinita restituisce sempre `false`.  
  
 Una classe derivata controlla l'elemento a cui fa riferimento il lettore per determinare se l'istanza può deserializzare un token di sicurezza. Questa operazione viene in genere eseguita tramite una chiamata al <xref:System.Xml.XmlReader.IsStartElement%2A> metodo con le stringhe appropriate di elemento e lo spazio dei nomi specificato. Se esegue l'override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, è inoltre necessario sostituire il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> metodo o la <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> metodo per fornire la logica per deserializzare la clausola identificatore di chiave.  
  
   
  
## Examples  
 Nel codice seguente viene illustrato come eseguire l'override di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> metodo per determinare se un token può essere letto da un gestore. Il codice è tratto dal `Custom Token` esempio. In questo esempio fornisce le classi personalizzate che consentono l'elaborazione del token SWT (Simple Web). Per informazioni su questo esempio e altri esempi disponibili per WIF e per scaricarli, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanValidateToken">
      <MemberSignature Language="C#" Value="public virtual bool CanValidateToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanValidateToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanValidateToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanValidateToken { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanValidateToken : bool" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il gestore supporta la convalida dei token di sicurezza.</summary>
        <value>
          <see langword="true" /> se la classe consente di convalidare i token di sicurezza; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per implementare la convalida in una classe derivata, eseguire l'override di questa proprietà per restituire `true` ed eseguire l'override di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metodo per implementare la logica di convalida.  
  
   
  
## Examples  
 Nel codice seguente viene illustrato come eseguire l'override di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> proprietà per indicare che un gestore personalizzato può convalidare i token. Il codice è tratto dal `Custom Token` esempio. In questo esempio fornisce le classi personalizzate che consentono l'elaborazione del token SWT (Simple Web). Per informazioni su questo esempio e altri esempi disponibili per WIF e per scaricarli, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool CanWriteKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanWriteKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanWriteKeyIdentifierClause(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ securityKeyIdentifierClause);" />
      <MemberSignature Language="F#" Value="abstract member CanWriteKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool&#xA;override this.CanWriteKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool" Usage="securityTokenHandler.CanWriteKeyIdentifierClause securityKeyIdentifierClause" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityKeyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="securityKeyIdentifierClause">Clausola dell'identificatore di chiave da selezionare.</param>
        <summary>Restituisce un valore che indica se la clausola dell'identificatore chiave specificata può essere serializzata da questa istanza.</summary>
        <returns>
          <see langword="true" /> se è possibile serializzare la clausola dell'identificatore di chiave; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione predefinita restituisce sempre `false`.  
  
 Se esegue l'override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>, è inoltre necessario sostituire il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> metodo per fornire la logica per serializzare la clausola identificatore di chiave.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteToken">
      <MemberSignature Language="C#" Value="public virtual bool CanWriteToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWriteToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanWriteToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWriteToken { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWriteToken : bool" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il gestore può serializzare i token di sicurezza.</summary>
        <value>
          <see langword="true" /> se la classe consente di serializzare i token; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per implementare serializzazione in una classe derivata, eseguire l'override di questa proprietà per restituire `true` ed eseguire l'override di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> metodi per implementare la logica di serializzazione.  
  
   
  
## Examples  
 Nel codice seguente viene illustrato come eseguire l'override di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> proprietà per indicare che un gestore personalizzato può serializzare i token. Il codice è tratto dal `Custom Token` esempio. In questo esempio fornisce le classi personalizzate che consentono l'elaborazione del token SWT (Simple Web). Per informazioni su questo esempio e altri esempi disponibili per WIF e per scaricarli, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Configuration">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" />
      <MemberSignature Language="VB.NET" Value="Public Property Configuration As SecurityTokenHandlerConfiguration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ Configuration { System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ get(); void set(System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Configuration : System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration with get, set" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'oggetto <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> che fornisce la configurazione per l'istanza corrente.</summary>
        <value>Oggetto configurazione per l'istanza corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> proprietà in genere è impostata tramite l'infrastruttura di configurazione dal [ &lt;securityTokenHandlerConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md) iniziale per l'elemento nel file di configurazione durante l'applicazione di.  
  
 Nelle classi derivate, utilizzare il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> proprietà per accedere alle impostazioni di configurazione, ad esempio, il Registro di sistema nome autorità emittente da usare nel <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metodo è possibile accedere dal <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType> proprietà dell'oggetto di configurazione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainingCollection">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContainingCollection As SecurityTokenHandlerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SecurityTokenHandlerCollection ^ ContainingCollection { System::IdentityModel::Tokens::SecurityTokenHandlerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainingCollection : System.IdentityModel.Tokens.SecurityTokenHandlerCollection" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandlerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la raccolta di gestori di token che contiene l'istanza corrente.</summary>
        <value>La raccolta di gestori di token che contiene l'istanza corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando il gestore dei token viene aggiunto a un <xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection> istanza, questa proprietà viene impostata automaticamente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSecurityTokenReference">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference (System.IdentityModel.Tokens.SecurityToken token, bool attached);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference(class System.IdentityModel.Tokens.SecurityToken token, bool attached) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSecurityTokenReference (token As SecurityToken, attached As Boolean) As SecurityKeyIdentifierClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ CreateSecurityTokenReference(System::IdentityModel::Tokens::SecurityToken ^ token, bool attached);" />
      <MemberSignature Language="F#" Value="abstract member CreateSecurityTokenReference : System.IdentityModel.Tokens.SecurityToken * bool -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause&#xA;override this.CreateSecurityTokenReference : System.IdentityModel.Tokens.SecurityToken * bool -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Usage="securityTokenHandler.CreateSecurityTokenReference (token, attached)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="attached" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="token">Token per cui deve essere creato il riferimento.</param>
        <param name="attached">
          <see langword="true" /> se un riferimento associato deve essere creato; <see langword="false" /> se un riferimento non associato deve essere creato.</param>
        <summary>Una volta eseguito l'override in una classe derivata, crea il riferimento del token di sicurezza per i token elaborati da quella classe. Questo metodo in genere viene chiamato da un servizio token di sicurezza (STS).</summary>
        <returns>Clausola dell'identificatore di chiave a cui fa riferimento il token specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo genera un <xref:System.NotImplementedException> (eccezione).  
  
 Le classi derivate di eseguire l'override questo metodo per restituire una clausola identificatore di chiave (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) che può essere usato per creare un `<wsse:SecurityTokenReference>` elemento per il token specificato.  
  
 Chiamato dalle implementazioni del <xref:System.IdentityModel.SecurityTokenService> classe.  
  
 In genere, un <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> non dovrà essere utilizzata solo quando viene creato un servizio token di sicurezza personalizzato. Quando un servizio token di sicurezza restituisce un token di sicurezza, il token di sicurezza emesso contiene riferimenti a token di sicurezza associati e non associati. I riferimenti associati fanno riferimento a token di sicurezza contenuti nell'intestazione di sicurezza di un messaggio SOAP, mentre i riferimenti non associati fanno riferimento a token di sicurezza che non sono inclusi nell'intestazione di sicurezza di un messaggio SOAP. Questi riferimenti confermano in genere l'autenticità del token di sicurezza emesso.  
  
   
  
## Examples  
 Nel codice seguente viene illustrato come eseguire l'override di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> metodo per creare una clausola dell'identificatore di chiave dal token specificato. Il codice è tratto dal `Custom Token` esempio. In questo esempio fornisce le classi personalizzate che consentono l'elaborazione del token SWT (Simple Web). Per informazioni su questo esempio e altri esempi disponibili per WIF e per scaricarli, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken CreateToken (System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken CreateToken(class System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateToken (tokenDescriptor As SecurityTokenDescriptor) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ CreateToken(System::IdentityModel::Tokens::SecurityTokenDescriptor ^ tokenDescriptor);" />
      <MemberSignature Language="F#" Value="abstract member CreateToken : System.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.CreateToken : System.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.CreateToken tokenDescriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenDescriptor" Type="System.IdentityModel.Tokens.SecurityTokenDescriptor" />
      </Parameters>
      <Docs>
        <param name="tokenDescriptor">Descrittore del token di sicurezza da cui il token deve essere creato. Le proprietà del descrittore di token vengono impostate prima della chiamata a questo metodo.</param>
        <summary>Quando è sottoposto a override in una classe derivata, crea un nuovo token di sicurezza utilizzando il descrittore di token specificato. Questo metodo viene chiamato da un servizio token di sicurezza (STS).</summary>
        <returns>Token di sicurezza che corrisponde alle proprietà del descrittore dei token.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo genera un <xref:System.NotImplementedException> (eccezione).  
  
 Chiamato dalle implementazioni del <xref:System.IdentityModel.SecurityTokenService> classe.  
  
   
  
## Examples  
 Nel codice seguente viene illustrato come eseguire l'override di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> metodo per creare e restituire un token da un descrittore del token. Il codice è tratto dal `Custom Token` esempio. In questo esempio fornisce le classi personalizzate che consentono l'elaborazione del token SWT (Simple Web). Per informazioni su questo esempio e altri esempi disponibili per WIF e per scaricarli, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectReplayedToken">
      <MemberSignature Language="C#" Value="protected virtual void DetectReplayedToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DetectReplayedToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DetectReplayedToken (token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DetectReplayedToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member DetectReplayedToken : System.IdentityModel.Tokens.SecurityToken -&gt; unit&#xA;override this.DetectReplayedToken : System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="securityTokenHandler.DetectReplayedToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">Token da verificare per la riproduzione.</param>
        <summary>Una volta eseguito l'override in una classe derivata, viene generata un'eccezione se il token specificato viene rilevato come ripetuto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione predefinita non esegue alcuna operazione.  
  
 Le classi derivate devono generare un <xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException> se il token è già stato utilizzato.  
  
 Windows Identity Foundation (WIF) fornisce il <xref:System.IdentityModel.Tokens.TokenReplayCache> classe dalla quale riproduzione può essere derivata memorizza nella cache e la [ &lt;tokenReplayCache&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md) elemento di configurazione, che può essere usato per configurare il cache di riproduzione utilizzata da gestori di token in un'applicazione. Tuttavia, l'implementazione esatta del <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> metodo riguarda la finestra di progettazione della classe derivata.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenTypeIdentifiers">
      <MemberSignature Language="C#" Value="public abstract string[] GetTokenTypeIdentifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetTokenTypeIdentifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetTokenTypeIdentifiers () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::String ^&gt; ^ GetTokenTypeIdentifiers();" />
      <MemberSignature Language="F#" Value="abstract member GetTokenTypeIdentifiers : unit -&gt; string[]" Usage="securityTokenHandler.GetTokenTypeIdentifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Una volta eseguito l'override in una classe derivata, restituisce il set di URI utilizzati nelle richieste per identificare un token del tipo elaborato dalla classe derivata.</summary>
        <returns>Set di URI che identificano il tipo di token supportato da questo gestore.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Type> del token elaborate dall'istanza corrente è possibile accedervi tramite la <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> proprietà. Il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> metodo restituisce il set di identificatori accettabili che può essere usato nei messaggi per fare riferimento al tipo di token. Ad esempio, il valore dell'URI utilizzato nel `<wst:TokenType>` elemento sotto il `<wst:RequestSecurityToken>` elemento per richiedere un tipo specifico di token (rappresentato dal <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=nameWithType> proprietà nel modello a oggetti).  
  
   
  
## Examples  
 Nel codice seguente viene illustrato come eseguire l'override di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> metodo per restituire gli identificatori di tipo di token per un token personalizzato. Il codice è tratto dal `Custom Token` esempio. In questo esempio fornisce le classi personalizzate che consentono l'elaborazione del token SWT (Simple Web). Per informazioni su questo esempio e altri esempi disponibili per WIF e per scaricarli, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#17](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#17)]  
[!code-csharp[WifRcCustomToken#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="securityTokenHandler.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Elementi di configurazione XML. Ogni nodo nell'elenco è del tipo <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>Quando sottoposto a override in una classe derivata, carica la configurazione personalizzata dall'XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> viene chiamato dall'infrastruttura di configurazione. Quando questo metodo viene chiamato, il `nodelist` conterrà gli elementi figlio di livello superiore del gestore di token [ &lt;aggiungere&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md) elemento dal file di configurazione. Ognuna di queste a sua volta, potrà contenere attributi o elementi figlio a seconda dello schema di configurazione che si definisce per le classi derivate.  
  
 L'implementazione predefinita genera un <xref:System.NotImplementedException>. Eseguire l'override di questo metodo nella classe derivata per abilitare l'inizializzazione del gestore di token di sicurezza da un file di configurazione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadKeyIdentifierClause (reader As XmlReader) As SecurityKeyIdentifierClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ ReadKeyIdentifierClause(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadKeyIdentifierClause : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause&#xA;override this.ReadKeyIdentifierClause : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Usage="securityTokenHandler.ReadKeyIdentifierClause reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Lettore XML posizionato presso l'elemento iniziale del codice XML da deserializzare nell'identificatore della chiave</param>
        <summary>Quando viene sottoposto a override in una classe derivata, deserializza l'XML a cui fa riferimento il lettore XML specificato a una clausola dell'identificatore di chiave che si riferisce a un token elaborato dalla classe derivata.</summary>
        <returns>La clausola identificatore di chiave che è stata deserializzata da XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo genera un <xref:System.NotImplementedException> (eccezione).  
  
 Eseguire l'override di questo metodo per fornire la logica per deserializzare una clausola identificatore di chiave da XML. Se si esegue l'override di questo metodo, è inoltre necessario sostituire il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=nameWithType> metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Una volta eseguito l'override in una classe derivata, deserializza l'XML specificato in un token del tipo elaborato dalla classe derivata.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (string tokenString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(string tokenString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (tokenString As String) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::String ^ tokenString);" />
      <MemberSignature Language="F#" Value="abstract member ReadToken : string -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.ReadToken : string -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.ReadToken tokenString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tokenString">Stringa da deserializzare.</param>
        <summary>Una volta eseguito l'override in una classe derivata, deserializza la stringa specificata in un token del tipo elaborato dalla classe derivata.</summary>
        <returns>Token di sicurezza deserializzato dalla stringa specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Chiamare questo metodo con dati non attendibili costituisce un rischio di sicurezza. Chiamare questo metodo solo con dati attendibili. Per altre informazioni, vedere [la convalida dei dati](https://www.owasp.org/index.php/Data_Validation).  
  
 Per impostazione predefinita, questo metodo genera un <xref:System.NotImplementedException> (eccezione).  
  
 Eseguire l'override di questo metodo per fornire una funzionalità che può deserializzare un token di sicurezza da una stringa. Se si esegue l'override, questo metodo, è inoltre necessario sostituire il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType> metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (reader As XmlReader) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadToken : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.ReadToken : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.ReadToken reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Lettore XML posizionato presso l'elemento iniziale del token.</param>
        <summary>Una volta eseguito l'override in una classe derivata, deserializza l'XML cui si fa riferimento dal lettore XML specificato in un token del tipo elaborato dalla classe derivata.</summary>
        <returns>Token di sicurezza deserializzato dal codice XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Chiamare questo metodo con dati non attendibili costituisce un rischio di sicurezza. Chiamare questo metodo solo con dati attendibili. Per altre informazioni, vedere [la convalida dei dati](https://www.owasp.org/index.php/Data_Validation).  
  
 Per impostazione predefinita, questo metodo genera un <xref:System.NotImplementedException> (eccezione).  
  
 Eseguire l'override di questo metodo per fornire la logica per deserializzare un token di sicurezza da XML. Se si esegue l'override di questo metodo, è inoltre necessario sostituire il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType> metodo. In genere, nelle classi derivate, se il metodo non è possibile deserializzare il token da XML cui viene fatto riferimento, viene generata un' <xref:System.Xml.XmlException>.  
  
   
  
## Examples  
 Nel codice seguente viene illustrato come eseguire l'override di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> metodo per leggere un token personalizzato dal lettore XML specificato. Il codice è tratto dal `Custom Token` esempio. In questo esempio fornisce le classi personalizzate che consentono l'elaborazione del token SWT (Simple Web). Per informazioni su questo esempio e altri esempi disponibili per WIF e per scaricarli, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#7)]  
[!code-csharp[WifRcCustomToken#8](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#8)]  
[!code-csharp[WifRcCustomToken#14](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (reader As XmlReader, tokenResolver As SecurityTokenResolver) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenResolver ^ tokenResolver);" />
      <MemberSignature Language="F#" Value="abstract member ReadToken : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.ReadToken : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.ReadToken (reader, tokenResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="tokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="reader">Lettore XML posizionato presso l'elemento iniziale del token.</param>
        <param name="tokenResolver">Resolver di token che contiene i token fuori banda e memorizzati nella cache.</param>
        <summary>Una volta eseguito l'override in una classe derivata, deserializza l'XML cui si fa riferimento dal lettore XML specificato in un token del tipo elaborato dalla classe derivata utilizzando il resolver di token specificato.</summary>
        <returns>Token di sicurezza deserializzato dal codice XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Chiamare questo metodo con dati non attendibili costituisce un rischio di sicurezza. Chiamare questo metodo solo con dati attendibili. Per altre informazioni, vedere [la convalida dei dati](https://www.owasp.org/index.php/Data_Validation).  
  
 Ignora l'implementazione predefinita di `tokenResolver` parametro e delega la chiamata al <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> metodo.  
  
 Eseguire l'override di questo metodo per fornire la logica per deserializzare un token di sicurezza da XML. Se si esegue l'override di questo metodo, è inoltre necessario sostituire il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType> metodo. In genere, nelle classi derivate, se il metodo non è possibile deserializzare il token da XML cui viene fatto riferimento, viene generata un' <xref:System.Xml.XmlException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public abstract Type TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TokenType" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TokenType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ TokenType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenType : Type" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se sottoposta a override in una classe derivata, ottiene il tipo di token di sicurezza elaborato dall'istanza.</summary>
        <value>Tipo di token di sicurezza elaborato da questa istanza.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È necessario eseguire l'override di questa proprietà per le classi derivate e restituire il <xref:System.Type> del token di sicurezza (<xref:System.IdentityModel.Tokens.SecurityToken>) che viene elaborato dalla classe derivata.  
  
   
  
## Examples  
 Nel codice seguente viene illustrato come eseguire l'override di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> proprietà per restituire il <xref:System.Type> dei token di sicurezza che vengono elaborati da un gestore personalizzato. Il codice è tratto dal `Custom Token` esempio. In questo esempio fornisce le classi personalizzate che consentono l'elaborazione del token SWT (Simple Web). Per informazioni su questo esempio e altri esempi disponibili per WIF e per scaricarli, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#18](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTokenValidationFailure">
      <MemberSignature Language="C#" Value="protected void TraceTokenValidationFailure (System.IdentityModel.Tokens.SecurityToken token, string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TraceTokenValidationFailure(class System.IdentityModel.Tokens.SecurityToken token, string errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub TraceTokenValidationFailure (token As SecurityToken, errorMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void TraceTokenValidationFailure(System::IdentityModel::Tokens::SecurityToken ^ token, System::String ^ errorMessage);" />
      <MemberSignature Language="F#" Value="member this.TraceTokenValidationFailure : System.IdentityModel.Tokens.SecurityToken * string -&gt; unit" Usage="securityTokenHandler.TraceTokenValidationFailure (token, errorMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="errorMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="token">Il token di sicurezza da convalidare.</param>
        <param name="errorMessage">Messaggio da scrivere nella traccia.</param>
        <summary>Traccia l'evento di errore durante la convalida dei token di sicurezza se è abilitata la tracciatura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo deve essere chiamato dal <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metodo quando si verifica un errore di convalida del token.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTokenValidationSuccess">
      <MemberSignature Language="C#" Value="protected void TraceTokenValidationSuccess (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TraceTokenValidationSuccess(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub TraceTokenValidationSuccess (token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void TraceTokenValidationSuccess(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="member this.TraceTokenValidationSuccess : System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="securityTokenHandler.TraceTokenValidationSuccess token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">Il token convalidato.</param>
        <summary>Traccia la convalida dell'evento dei token di sicurezza se è abilitata la tracciatura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo deve essere chiamato dal <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metodo dopo che il token non è stato convalidato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateToken">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt; ValidateToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.Claims.ClaimsIdentity&gt; ValidateToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateToken (token As SecurityToken) As ReadOnlyCollection(Of ClaimsIdentity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Security::Claims::ClaimsIdentity ^&gt; ^ ValidateToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member ValidateToken : System.IdentityModel.Tokens.SecurityToken -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;&#xA;override this.ValidateToken : System.IdentityModel.Tokens.SecurityToken -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;" Usage="securityTokenHandler.ValidateToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">Token da convalidare.</param>
        <summary>Una volta eseguito l'override in una classe derivata, convalida il token di sicurezza specificato. Il token deve essere del tipo elaborato dalla classe derivata.</summary>
        <returns>Identità contenute nel token.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo genera un <xref:System.NotImplementedException> (eccezione).  
  
 Il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metodo viene chiamato dall'infrastruttura per convalidare ed estrarre le attestazioni del token di sicurezza deserializzato. Queste attestazioni vengono restituite nella raccolta di <xref:System.Security.Claims.ClaimsIdentity> gli oggetti restituiti dal metodo. In genere, questa raccolta conterrà una singola identità.  
  
 Nelle classi derivate, convalida include in genere i destinatari specificati nel token con i destinatari URI specificati nella convalida la <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=nameWithType> proprietà dell'oggetto di configurazione gestore dei token specificato nel <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> proprietà. Gli URI vengono in genere impostati nel file di configurazione sotto il [ &lt;audienceUris&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md) elemento. Se i destinatari non possono essere convalidati, un <xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException> eccezione deve essere generata.  
  
 Quando si elabora il token, l'autorità emittente viene in genere convalidato passando il token dell'autorità di certificazione a uno del <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> metodi sul <xref:System.IdentityModel.Tokens.IssuerNameRegistry> oggetto che è configurato per il gestore tramite il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> proprietà. Il Registro di sistema di nome dell'autorità emittente viene in genere configurato tramite il [ &lt;issuerNameRegistry&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md) elemento nel file di configurazione. Il <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> restituisce il nome dell'autorità emittente. Questo nome deve essere usato per impostare il <xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=nameWithType> proprietà nelle attestazioni contenute nel token. Se il Registro di sistema di nome dell'autorità di certificazione non contiene una voce per il token dell'autorità di certificazione <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> restituisce `null`. In questo caso un <xref:System.IdentityModel.Tokens.SecurityTokenException> viene in genere generata nelle classi derivate, ma questo comportamento è fino alla finestra di progettazione della classe.  
  
   
  
## Examples  
 Il codice seguente viene illustrato un override del <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metodo per un gestore di token di sicurezza che elabora i token web semplice (SWT). Il codice è tratto dal `CustomToken` esempio. Per informazioni su questo esempio e altri esempi disponibili per WIF e per scaricarli, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#9](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#9)]  
  
 Il codice seguente illustra `CreateClaims` che viene richiamata dall'override del metodo di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metodo nell'esempio precedente. Questo metodo restituisce un <xref:System.Security.Claims.ClaimsIdentity> oggetto creato dalle attestazioni nel token. Il codice è tratto dal `CustomToken` esempio. Per informazioni su questo esempio e altri esempi disponibili per WIF e per scaricarli, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#15](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#15)]  
  
 Il codice seguente illustra `ValidateSignature` che viene richiamata dall'override del metodo di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metodo nel gestore token web semplice. Questo metodo convalida la firma sul token tramite l'applicazione configurata <xref:System.IdentityModel.Tokens.IssuerTokenResolver>. Il codice è tratto dal `CustomToken` esempio. Per informazioni su questo esempio e altri esempi disponibili per WIF e per scaricarli, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#12](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#12)]  
[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]  
  
 Il codice seguente illustra `ValidateAudience` che viene richiamata dall'override del metodo di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> metodo nel gestore token web semplice. Questo metodo convalida i destinatari contenuti nel token contro i destinatari URI specificati nella configurazione. Il codice è tratto dal `CustomToken` esempio. Per informazioni su questo esempio e altri esempi disponibili per WIF e per scaricarli, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#13](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual void WriteKeyIdentifierClause (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteKeyIdentifierClause(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteKeyIdentifierClause(System::Xml::XmlWriter ^ writer, System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ securityKeyIdentifierClause);" />
      <MemberSignature Language="F#" Value="abstract member WriteKeyIdentifierClause : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; unit&#xA;override this.WriteKeyIdentifierClause : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; unit" Usage="securityTokenHandler.WriteKeyIdentifierClause (writer, securityKeyIdentifierClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="securityKeyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="writer">Writer XML.</param>
        <param name="securityKeyIdentifierClause">Clausola dell'identificatore di chiave da serializzare.</param>
        <summary>Una volta eseguito l'override in una classe derivata, serializza la clausola identificatore chiave specificata in XML. La clausola identificatore di chiave deve essere di tipo supportato dalla classe derivata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo genera un <xref:System.NotImplementedException> (eccezione).  
  
 Eseguire l'override di questo metodo per fornire la logica per serializzare una clausola identificatore di chiave in formato XML. Se si esegue l'override di questo metodo, è inoltre necessario sostituire il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Una volta eseguito l'override in una classe derivata, serializza il token di sicurezza specificato. Il token deve essere del tipo elaborato dalla classe derivata.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual string WriteToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string WriteToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteToken (token As SecurityToken) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ WriteToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member WriteToken : System.IdentityModel.Tokens.SecurityToken -&gt; string&#xA;override this.WriteToken : System.IdentityModel.Tokens.SecurityToken -&gt; string" Usage="securityTokenHandler.WriteToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">Token da serializzare.</param>
        <summary>Una volta eseguito l'override in una classe derivata, serializza il token di sicurezza specificato in una stringa. Il token deve essere del tipo elaborato dalla classe derivata.</summary>
        <returns>Token da serializzare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo genera un <xref:System.NotImplementedException> (eccezione).  
  
 Eseguire l'override di questo metodo per fornire la logica per serializzare un token di sicurezza in formato XML. Se si esegue l'override di questo metodo, è inoltre necessario sostituire il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteToken(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteToken (writer As XmlWriter, token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteToken(System::Xml::XmlWriter ^ writer, System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member WriteToken : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityToken -&gt; unit&#xA;override this.WriteToken : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="securityTokenHandler.WriteToken (writer, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="writer">Writer XML.</param>
        <param name="token">Token da serializzare.</param>
        <summary>Una volta eseguito l'override in una classe derivata, serializza il token di sicurezza specificato in XML. Il token deve essere del tipo elaborato dalla classe derivata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo genera un <xref:System.NotImplementedException> (eccezione).  
  
 Eseguire l'override di questo metodo per fornire la logica per serializzare un token di sicurezza in formato XML. Se si esegue l'override di questo metodo, è inoltre necessario sostituire il <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> proprietà.  
  
   
  
## Examples  
 Nel codice seguente viene illustrato come eseguire l'override di <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> metodo per serializzare un token personalizzato. Il codice è tratto dal `Custom Token` esempio. In questo esempio fornisce le classi personalizzate che consentono l'elaborazione del token SWT (Simple Web). Per informazioni su questo esempio e altri esempi disponibili per WIF e per scaricarli, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 [!code-csharp[WifRcCustomToken#10](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#10)]  
[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>