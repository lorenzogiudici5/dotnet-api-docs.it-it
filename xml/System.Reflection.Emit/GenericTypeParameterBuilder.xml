<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="GenericTypeParameterBuilder.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5235896b9ddecdf929b635c0069551c988b47b79a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">235896b9ddecdf929b635c0069551c988b47b79a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Defines and creates generic type parameters for dynamically defined generic types and methods.</source>
          <target state="translated">Definisce e crea i parametri di tipo generico per tipi e metodi generici definiti in modo dinamico.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>This class cannot be inherited.</source>
          <target state="translated">Questa classe non può essere ereditata.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>You can get an array of <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> objects by using the <ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=nameWithType&gt;</ph> method to add type parameters to a dynamic type, thus making it a generic type, or by using the <ph id="ph3">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType&gt;</ph> method to add type parameters to a dynamic method.</source>
          <target state="translated">È possibile ottenere una matrice di <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> oggetti usando il <ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=nameWithType&gt;</ph> metodo per aggiungere parametri di tipo a un tipo dinamico, rendendo così un tipo generico, oppure utilizzando il <ph id="ph3">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType&gt;</ph> metodo per aggiungere parametri di tipo a un metodo dinamico.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> objects to add constraints to the type parameters.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> oggetti da aggiungere vincoli per i parametri di tipo.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Constraints are of three kinds:</source>
          <target state="translated">I vincoli sono dei tre tipi:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>The base type constraint specifies that any type assigned to the generic type parameter must derive from a particular base type.</source>
          <target state="translated">Il vincolo di tipo di base specifica che qualsiasi tipo assegnato al parametro di tipo generico deve derivare da un particolare tipo di base.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Set this constraint by using the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A&gt;</ph> method.</source>
          <target state="translated">Impostando questo vincolo utilizzando la <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>An interface constraint specifies that any type assigned to the generic type parameter must implement a particular interface.</source>
          <target state="translated">Un vincolo di interfaccia specifica che qualsiasi tipo assegnato al parametro di tipo generico debba implementare un'interfaccia specifica.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Set the interface constraints by using the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints%2A&gt;</ph> method.</source>
          <target state="translated">Impostare i vincoli di interfaccia utilizzando il <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Special constraints specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type.</source>
          <target state="translated">I vincoli speciali specificano qualsiasi tipo assegnato al parametro di tipo generico deve avere un costruttore predefinito, deve essere un tipo riferimento o deve essere un tipo di valore.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Set the special constraints for a type parameter by using the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A&gt;</ph> method.</source>
          <target state="translated">Impostare i vincoli speciali per un parametro di tipo utilizzando il <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Interface constraints and special constraints cannot be retrieved using methods of the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> class.</source>
          <target state="translated">Vincoli di interfaccia e i vincoli speciali possono essere recuperati utilizzando i metodi di <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Once you have created the generic type that contains the type parameters, you can use its <ph id="ph1">&lt;xref:System.Type&gt;</ph> object to reflect the constraints.</source>
          <target state="translated">Dopo aver creato il tipo generico che contiene i parametri di tipo, è possibile utilizzare il relativo <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto in modo da riflettere i vincoli.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method to get the type parameters, and for each type parameter use the <ph id="ph2">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType&gt;</ph> method to get the base type constraint and interface constraints, and the <ph id="ph3">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType&gt;</ph> property to get the special constraints.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metodo per ottenere i parametri di tipo e per ogni parametro di tipo di <ph id="ph2">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType&gt;</ph> metodo per ottenere il vincolo di tipo di base e i vincoli di interfaccia e <ph id="ph3">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType&gt;</ph> proprietà da ottenere i vincoli speciali.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>The following code example creates a generic type with two type parameters, and saves them in the assembly GenericEmitExample1.dll.</source>
          <target state="translated">Esempio di codice seguente crea un tipo generico con due parametri di tipo e salvarli nell'assembly Genericemitexample1.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to view the generated types.</source>
          <target state="translated">È possibile utilizzare il <bpt id="p1">[</bpt>Ildasm.exe (Disassembler IL)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> per visualizzare i tipi generati.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>For a more detailed explanation of the steps involved in defining a dynamic generic type, see <bpt id="p1">[</bpt>How to: Define a Generic Type with Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>.</source>
          <target state="translated">Per una spiegazione più dettagliata dei passaggi coinvolti nella definizione di un tipo generico dinamico, vedere <bpt id="p1">[</bpt>procedura: definire un tipo generico tramite Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</source>
          <target state="translated">Ottiene un oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> che rappresenta l'assembly dinamico che contene la definizione di tipo generico a cui appartiene il parametro di tipo corrente.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> che rappresenta l'assembly dinamico che contene la definizione di tipo generico a cui appartiene il parametro di tipo corrente.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
          <source>Gets <ph id="ph1">&lt;see langword="null" /&gt;</ph> in all cases.</source>
          <target state="translated">Ottiene <ph id="ph1">&lt;see langword="null" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) in all cases.</source>
          <target state="translated">Riferimento Null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) in tutti i casi.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
          <source>There is no assembly-qualified name for type parameters because their scope is limited to the generic type that declares them.</source>
          <target state="translated">Nessun nome completo dell'assembly per i parametri di tipo infatti l'ambito è limitato al tipo generico che li dichiara.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
          <source>Gets the base type constraint of the current generic type parameter.</source>
          <target state="translated">Ottiene il vincolo di tipo di base del parametro di tipo generico corrente.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the base type constraint of the generic type parameter, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the type parameter has no base type constraint.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta il vincolo di tipo di base del parametro di tipo generico oppure <ph id="ph2">&lt;see langword="null" /&gt;</ph> se il parametro di tipo non presenta vincoli di tipo di base.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
          <source>To set the base type constraint, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A&gt;</ph> method.</source>
          <target state="translated">Per impostare il vincolo di tipo di base, utilizzare il <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
          <source>Gets <ph id="ph1">&lt;see langword="true" /&gt;</ph> in all cases.</source>
          <target state="translated">Ottiene <ph id="ph1">&lt;see langword="true" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> in all cases.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> object always represents a generic type parameter.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> oggetto rappresenta sempre un parametro di tipo generico.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
          <source>The value of the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters%2A&gt;</ph> property reflects that fact and does not imply anything about any generic type argument that might be assigned to the type parameter.</source>
          <target state="translated">Il valore di <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters%2A&gt;</ph> proprietà riflette tale e non implica necessariamente un argomento di tipo generico che è possibile assegnare al parametro di tipo.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the declaring method, if the current <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> represents a type parameter of a generic method.</source>
          <target state="translated">Ottiene una classe <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> che rappresenta il metodo dichiarante se la classe <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> corrente rappresenta un parametro di tipo di un metodo generico.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the declaring method, if the current <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> represents a type parameter of a generic method; otherwise, <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> che rappresenta il metodo dichiarante, se l'oggetto <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> rappresenta un parametro di tipo di un metodo generico; in caso contrario, <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
          <source>If the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod%2A&gt;</ph> property is not <ph id="ph2">`null`</ph>, then the declaring method is a generic method definition and <ph id="ph3">`DeclaringMethod.IsGenericMethodDefinition`</ph> is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">Se il <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod%2A&gt;</ph> proprietà non è <ph id="ph2">`null`</ph>, quindi il metodo dichiarante è una definizione di metodo generico e <ph id="ph3">`DeclaringMethod.IsGenericMethodDefinition`</ph> è <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
          <source>Gets the generic type definition or generic method definition to which the generic type parameter belongs.</source>
          <target state="translated">Ottiene la definizione di tipo generico o di metodo generico a cui appartiene il parametro di tipo generico.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
          <source>If the type parameter belongs to a generic type, a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing that generic type; if the type parameter belongs to a generic method, a <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> object representing that type that declared that generic method.</source>
          <target state="translated">Se il parametro di tipo appartiene a un tipo generico, oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta il tipo generico; se il parametro di tipo appartiene a un metodo generico, oggetto <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta il tipo che ha dichiarato il metodo generico.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
          <source>The declaring type is not necessarily a generic type.</source>
          <target state="translated">Il tipo dichiarante non è necessariamente un tipo generico.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
          <source>If the current type parameter belongs to a generic method, the type in which the method is declared might not be generic.</source>
          <target state="translated">Se il parametro di tipo corrente appartiene a un metodo generico, il tipo in cui è dichiarato il metodo potrebbe non essere generico.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
          <source>The object to be compared with the current instance.</source>
          <target state="translated">Oggetto da confrontare con l'istanza corrente.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
          <source>Tests whether the given object is an instance of <ph id="ph1">&lt;see langword="EventToken" /&gt;</ph> and is equal to the current instance.</source>
          <target state="translated">Verifica se l'oggetto dato è un'istanza di <ph id="ph1">&lt;see langword="EventToken" /&gt;</ph> ed è uguale all'istanza corrente.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="o" /&gt;</ph> is an instance of <ph id="ph3">&lt;see langword="EventToken" /&gt;</ph> and equals the current instance; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="o" /&gt;</ph> è un'istanza di <ph id="ph3">&lt;see langword="EventToken" /&gt;</ph> ed è uguale all'istanza corrente; in caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
          <source>Gets <ph id="ph1">&lt;see langword="null" /&gt;</ph> in all cases.</source>
          <target state="translated">Ottiene <ph id="ph1">&lt;see langword="null" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) in all cases.</source>
          <target state="translated">Riferimento Null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) in tutti i casi.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
          <source>A generic type parameter does not have a full name, because its scope is limited to the generic type that declares it.</source>
          <target state="translated">Un parametro di tipo generico è un nome completo, poiché l'ambito è limitato al tipo generico che lo dichiara.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes">
          <source>Gets a combination of <ph id="ph1">&lt;see cref="T:System.Reflection.GenericParameterAttributes" /&gt;</ph> flags that describe the covariance and special constraints of the current generic type parameter.</source>
          <target state="translated">Ottiene una combinazione di flag <ph id="ph1">&lt;see cref="T:System.Reflection.GenericParameterAttributes" /&gt;</ph> che descrivono la covariante e i vincoli speciali del parametro di tipo generico corrente.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes">
          <source>A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter.</source>
          <target state="translated">Combinazione bit per bit di valori che descrive la covariante e i vincoli speciali del parametro di tipo generico corrente.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
          <source>Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</source>
          <target state="translated">Ottiene la posizione del parametro di tipo nell'elenco dei parametri di tipo del tipo o del metodo generico che ha dichiarato il parametro.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
          <source>The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</source>
          <target state="translated">Posizione del parametro di tipo nell'elenco dei parametri di tipo del tipo o del metodo generico che ha dichiarato il parametro.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
          <source>Specifies whether to search this member's inheritance chain to find the attributes.</source>
          <target state="translated">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The type of attribute to search for.</source>
          <target state="translated">Tipo di attributo da cercare.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Only attributes that are assignable to this type are returned.</source>
          <target state="translated">Vengono restituiti solo gli attributi assegnabili a questo tipo.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Specifies whether to search this member's inheritance chain to find the attributes.</source>
          <target state="translated">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> in all cases.</source>
          <target state="translated">Genera un'eccezione <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
          <source>The type referred to by the current array type, pointer type, or <ph id="ph1">&lt;see langword="ByRef" /&gt;</ph> type; or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the current type is not an array type, is not a pointer type, and is not passed by reference.</source>
          <target state="translated">Il tipo a cui fa riferimento il tipo di matrice corrente, il tipo di puntatore o il tipo <ph id="ph1">&lt;see langword="ByRef" /&gt;</ph> oppure <ph id="ph2">&lt;see langword="null" /&gt;</ph> se il tipo corrente non è un tipo di matrice o di puntatore e se non viene passato per riferimento.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
          <source>A generic type parameter is a placeholder for a type.</source>
          <target state="translated">Un parametro di tipo generico è un segnaposto per un tipo.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
          <source>Because that type cannot be known in advance, there is no way to know whether it has an element type or what that element type might be.</source>
          <target state="translated">Perché tale tipo non è noto in anticipo, non vi è alcun modo per sapere se dispone di un tipo di elemento o di ciò che potrebbe essere il tipo di elemento.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
          <source>Any return value would be misleading, so the method throws a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Qualsiasi restituito il valore sarà fuorvianti, pertanto il metodo genera un <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
          <source>Not valid for generic type parameters.</source>
          <target state="translated">Non valido per i parametri di tipo generico.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
          <source>Not valid for generic type parameters.</source>
          <target state="translated">Non valido per i parametri di tipo generico.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
          <source>In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</source>
          <target state="translated">In un tipo costruito, il tipo assegnato a un parametro di tipo generico può essere un tipo generico, ma il parametro di tipo stesso non è generico.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
          <source>Not valid for generic type parameters.</source>
          <target state="translated">Non valido per i parametri di tipo generico.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
          <source>Not valid for generic type parameters.</source>
          <target state="translated">Non valido per i parametri di tipo generico.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
          <source>In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</source>
          <target state="translated">In un tipo costruito, il tipo assegnato a un parametro di tipo generico può essere un tipo generico, ma il parametro di tipo stesso non è generico.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
          <source>Returns a 32-bit integer hash code for the current instance.</source>
          <target state="translated">Restituisce un codice hash di valori interi a 32 bit per l'istanza corrente.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
          <source>A 32-bit integer hash code.</source>
          <target state="translated">Codice hash di valori interi a 32 bit.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
          <source>The name of the interface.</source>
          <target state="translated">Nome dell'interfaccia.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search without regard for case; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to make a case-sensitive search.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> per eseguire la ricerca senza distinzione tra maiuscole e minuscole; <ph id="ph2">&lt;see langword="false" /&gt;</ph> per eseguire la ricerca con la distinzione tra maiuscole e minuscole.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the interface type for which the mapping is to be retrieved.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta il tipo di interfaccia per il quale recuperare il mapping.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
          <source>This property is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questa proprietà non è supportata per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> exception in all cases.</source>
          <target state="translated">Genera un'eccezione <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>The object to test.</source>
          <target state="translated">Oggetto da testare.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> exception in all cases.</source>
          <target state="translated">Genera un'eccezione <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> exception in all cases.</source>
          <target state="translated">Genera un'eccezione <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
          <source>The object to test.</source>
          <target state="translated">Oggetto da testare.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> exception in all cases.</source>
          <target state="translated">Genera un'eccezione <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> exception in all cases.</source>
          <target state="translated">Genera un'eccezione <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType">
          <source>Gets a value that indicates whether this object represents a constructed generic type.</source>
          <target state="translated">Ottiene un valore che indica se l'oggetto rappresenta un tipo generico costruito.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a constructed generic type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se questo oggetto rappresenta una definizione di tipo generico; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
          <source>Gets <ph id="ph1">&lt;see langword="true" /&gt;</ph> in all cases.</source>
          <target state="translated">Ottiene <ph id="ph1">&lt;see langword="true" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> in all cases.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
          <source>Returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see langword="false" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
          <source>In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</source>
          <target state="translated">In un tipo costruito, il tipo assegnato a un parametro di tipo generico può essere un tipo generico, ma il parametro di tipo stesso non è generico.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
          <source>Gets <ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases.</source>
          <target state="translated">Ottiene <ph id="ph1">&lt;see langword="false" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
          <source>In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</source>
          <target state="translated">In un tipo costruito, il tipo assegnato a un parametro di tipo generico può essere un tipo generico, ma il parametro di tipo stesso non è generico.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
          <source>Not supported.</source>
          <target state="translated">Non supportato.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
          <source>This method is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Returns the type of an array whose element type is the generic type parameter.</source>
          <target state="translated">Restituisce il tipo di una matrice il cui tipo di elemento è il parametro di tipo generico.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
          <source>Returns the type of a one-dimensional array whose element type is the generic type parameter.</source>
          <target state="translated">Restituisce il tipo di una matrice unidimensionale il cui tipo di elemento è il parametro di tipo generico.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the type of a one-dimensional array whose element type is the generic type parameter.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta il tipo di una matrice unidimensionale il cui tipo di elemento è il parametro di tipo generico.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
          <source>The <ph id="ph1">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph> method provides a way to generate array types for parameter lists.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph> metodo fornisce un modo per generare i tipi di matrice per elenchi di parametri.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
          <source>The following code example creates a dynamic module, an abstract generic type named <ph id="ph1">`Sample`</ph> with one type parameter, <ph id="ph2">`T`</ph>, and an abstract method named <ph id="ph3">`TestMethod`</ph>.</source>
          <target state="translated">Esempio di codice seguente crea un modulo dinamico, un tipo generico astratto denominato <ph id="ph1">`Sample`</ph> con un parametro di tipo, <ph id="ph2">`T`</ph>e un metodo astratto denominato <ph id="ph3">`TestMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
          <source><ph id="ph1">`TestMethod`</ph> takes a <ph id="ph2">`ref`</ph> parameter (<ph id="ph3">`ByRef`</ph> in Visual Basic) of type <ph id="ph4">`T`</ph>, a pointer to type <ph id="ph5">`T`</ph>, and an array of <ph id="ph6">`T`</ph>.</source>
          <target state="translated"><ph id="ph1">`TestMethod`</ph> accetta un <ph id="ph2">`ref`</ph> parametro (<ph id="ph3">`ByRef`</ph> in Visual Basic) di tipo <ph id="ph4">`T`</ph>, un puntatore al tipo <ph id="ph5">`T`</ph>e una matrice di <ph id="ph6">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
          <source>This method returns a two-dimensional array of <ph id="ph1">`T`</ph>.</source>
          <target state="translated">Questo metodo restituisce una matrice bidimensionale di <ph id="ph1">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
          <source>The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</source>
          <target state="translated">L'esempio di codice salva il modulo dinamico su disco, è possibile esaminarlo utilizzando MSIL Disassembler (Ildasm.exe).</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>The number of dimensions for the array.</source>
          <target state="translated">Numero di dimensioni della matrice.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</source>
          <target state="translated">Restituisce il tipo di una matrice il cui tipo di elemento è il parametro di tipo generico con il numero di dimensioni specificato.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta il tipo di una matrice il cui tipo di elemento è il parametro di tipo generico con il numero di dimensioni specificato.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph> method provides a way to generate array types for parameter lists.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph> metodo fornisce un modo per generare i tipi di matrice per elenchi di parametri.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>The following code example creates a dynamic module, an abstract generic type named <ph id="ph1">`Sample`</ph> with one type parameter, <ph id="ph2">`T`</ph>, and an abstract method named <ph id="ph3">`TestMethod`</ph>.</source>
          <target state="translated">Esempio di codice seguente crea un modulo dinamico, un tipo generico astratto denominato <ph id="ph1">`Sample`</ph> con un parametro di tipo, <ph id="ph2">`T`</ph>e un metodo astratto denominato <ph id="ph3">`TestMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source><ph id="ph1">`TestMethod`</ph> takes a <ph id="ph2">`ref`</ph> parameter (<ph id="ph3">`ByRef`</ph> in Visual Basic) of type <ph id="ph4">`T`</ph>, a pointer to type <ph id="ph5">`T`</ph>, and an array of <ph id="ph6">`T`</ph>.</source>
          <target state="translated"><ph id="ph1">`TestMethod`</ph> accetta un <ph id="ph2">`ref`</ph> parametro (<ph id="ph3">`ByRef`</ph> in Visual Basic) di tipo <ph id="ph4">`T`</ph>, un puntatore al tipo <ph id="ph5">`T`</ph>e una matrice di <ph id="ph6">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>This method returns a two-dimensional array of <ph id="ph1">`T`</ph>.</source>
          <target state="translated">Questo metodo restituisce una matrice bidimensionale di <ph id="ph1">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</source>
          <target state="translated">L'esempio di codice salva il modulo dinamico su disco, è possibile esaminarlo utilizzando MSIL Disassembler (Ildasm.exe).</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="rank" /&gt;</ph> is not a valid number of dimensions.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rank" /&gt;</ph> non è un numero di dimensioni valido.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
          <source>For example, its value is less than 1.</source>
          <target state="translated">Ad esempio, il relativo valore è minore di 1.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the current generic type parameter when passed as a reference parameter.</source>
          <target state="translated">Restituisce un oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta il parametro di tipo generico corrente quando viene passato come parametro di riferimento.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the current generic type parameter when passed as a reference parameter.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta il parametro di tipo generico corrente quando viene passato come parametro di riferimento.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType%2A&gt;</ph> method provides a way to generate <ph id="ph2">`ref`</ph> types (<ph id="ph3">`ByRef`</ph> in Visual Basic) for parameter lists.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType%2A&gt;</ph> metodo fornisce un modo per generare <ph id="ph2">`ref`</ph> tipi (<ph id="ph3">`ByRef`</ph> in Visual Basic) per elenchi di parametri.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
          <source>The following code example creates a dynamic module, an abstract generic type named <ph id="ph1">`Sample`</ph> with one type parameter, <ph id="ph2">`T`</ph>, and an abstract method named <ph id="ph3">`TestMethod`</ph>.</source>
          <target state="translated">Esempio di codice seguente crea un modulo dinamico, un tipo generico astratto denominato <ph id="ph1">`Sample`</ph> con un parametro di tipo, <ph id="ph2">`T`</ph>e un metodo astratto denominato <ph id="ph3">`TestMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
          <source><ph id="ph1">`TestMethod`</ph> takes a <ph id="ph2">`ref`</ph> parameter (<ph id="ph3">`ByRef`</ph> in Visual Basic) of type <ph id="ph4">`T`</ph>, a pointer to type <ph id="ph5">`T`</ph>, and an array of <ph id="ph6">`T`</ph>.</source>
          <target state="translated"><ph id="ph1">`TestMethod`</ph> accetta un <ph id="ph2">`ref`</ph> parametro (<ph id="ph3">`ByRef`</ph> in Visual Basic) di tipo <ph id="ph4">`T`</ph>, un puntatore al tipo <ph id="ph5">`T`</ph>e una matrice di <ph id="ph6">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
          <source>This method returns a two-dimensional array of <ph id="ph1">`T`</ph>.</source>
          <target state="translated">Questo metodo restituisce una matrice bidimensionale di <ph id="ph1">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
          <source>The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</source>
          <target state="translated">L'esempio di codice salva il modulo dinamico su disco, è possibile esaminarlo utilizzando MSIL Disassembler (Ildasm.exe).</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
          <source>An array of type arguments.</source>
          <target state="translated">Matrice di argomenti tipo.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
          <source>Not valid for incomplete generic type parameters.</source>
          <target state="translated">Non valido per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
          <source>This method is invalid for incomplete generic type parameters.</source>
          <target state="translated">Questo metodo non è valido per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents a pointer to the current generic type parameter.</source>
          <target state="translated">Restituisce un oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta un puntatore al parametro di tipo generico corrente.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents a pointer to the current generic type parameter.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta un puntatore al parametro di tipo generico corrente.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType%2A&gt;</ph> method provides a way to generate pointer types for parameter lists.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType%2A&gt;</ph> metodo fornisce un modo per generare i tipi di puntatore per elenchi di parametri.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
          <source>The following code example creates a dynamic module, an abstract generic type named <ph id="ph1">`Sample`</ph> with one type parameter, <ph id="ph2">`T`</ph>, and an abstract method named <ph id="ph3">`TestMethod`</ph>.</source>
          <target state="translated">Esempio di codice seguente crea un modulo dinamico, un tipo generico astratto denominato <ph id="ph1">`Sample`</ph> con un parametro di tipo, <ph id="ph2">`T`</ph>e un metodo astratto denominato <ph id="ph3">`TestMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
          <source><ph id="ph1">`TestMethod`</ph> takes a <ph id="ph2">`ref`</ph> parameter (<ph id="ph3">`ByRef`</ph> in Visual Basic) of type <ph id="ph4">`T`</ph>, a pointer to type <ph id="ph5">`T`</ph>, and an array of <ph id="ph6">`T`</ph>.</source>
          <target state="translated"><ph id="ph1">`TestMethod`</ph> accetta un <ph id="ph2">`ref`</ph> parametro (<ph id="ph3">`ByRef`</ph> in Visual Basic) di tipo <ph id="ph4">`T`</ph>, un puntatore al tipo <ph id="ph5">`T`</ph>e una matrice di <ph id="ph6">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
          <source>This method returns a two-dimensional array of <ph id="ph1">`T`</ph>.</source>
          <target state="translated">Questo metodo restituisce una matrice bidimensionale di <ph id="ph1">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
          <source>The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</source>
          <target state="translated">L'esempio di codice salva il modulo dinamico su disco, è possibile esaminarlo utilizzando MSIL Disassembler (Ildasm.exe).</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
          <source>Gets the dynamic module that contains the generic type parameter.</source>
          <target state="translated">Ottiene il modulo dinamico che contiene il parametro di tipo generico.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> object that represents the dynamic module that contains the generic type parameter.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> che rappresenta il modulo dinamico che contiene il parametro di tipo generico.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
          <source>Gets the name of the generic type parameter.</source>
          <target state="translated">Ottiene il nome del parametro di tipo generico.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
          <source>The name of the generic type parameter.</source>
          <target state="translated">Il nome del parametro di tipo generico.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
          <source>Gets <ph id="ph1">&lt;see langword="null" /&gt;</ph> in all cases.</source>
          <target state="translated">Ottiene <ph id="ph1">&lt;see langword="null" /&gt;</ph> in tutti i casi.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) in all cases.</source>
          <target state="translated">Riferimento Null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) in tutti i casi.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that was used to obtain the <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph>.</source>
          <target state="translated">Ottiene l'oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> utilizzato per ottenere la classe <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that was used to obtain the <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> utilizzato per ottenere la classe <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that must be inherited by any type that is to be substituted for the type parameter.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che deve essere ereditato da qualsiasi tipo che deve essere sostituito con il parametro di tipo.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>Sets the base type that a type must inherit in order to be substituted for the type parameter.</source>
          <target state="translated">Imposta il tipo di base che un tipo deve ereditare per essere sostituito con il parametro di tipo.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>To retrieve the base type constraint use the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType%2A&gt;</ph> property.</source>
          <target state="translated">Per recuperare l'utilizzo di vincolo di tipo di base di <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>Once you have created the generic type that contains the type parameter, you can use its <ph id="ph1">&lt;xref:System.Type&gt;</ph> object to reflect the type parameter and their constraints.</source>
          <target state="translated">Dopo aver creato il tipo generico che contiene il parametro di tipo, è possibile utilizzare il relativo <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto in modo da riflettere il parametro di tipo e i vincoli.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>To get the type parameters of a completed generic type, use the <ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per ottenere i parametri di tipo di un tipo generico completato, usare il <ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>For each type parameter, get the base type constraint and interface constraints by using the <ph id="ph1">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType&gt;</ph> method, and get the special constraints by using the <ph id="ph2">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Per ogni parametro di tipo, ottenere il tipo di base vincoli di interfaccia e vincolo utilizzando la <ph id="ph1">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType&gt;</ph> (metodo) e ottenere i vincoli speciali mediante il <ph id="ph2">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>The following code example creates a generic type with two type parameters, the second of which has a base type constraint, and saves them in the assembly GenericEmitExample1.dll.</source>
          <target state="translated">Esempio di codice seguente crea un tipo generico con due parametri di tipo, il secondo dei quali ha un vincolo di tipo di base e li salva nell'assembly Genericemitexample1.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to view the generated types.</source>
          <target state="translated">È possibile utilizzare il <bpt id="p1">[</bpt>Ildasm.exe (Disassembler IL)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> per visualizzare i tipi generati.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
          <source>For a more detailed explanation of the steps involved in defining a dynamic generic type, see <bpt id="p1">[</bpt>How to: Define a Generic Type with Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>.</source>
          <target state="translated">Per una spiegazione più dettagliata dei passaggi coinvolti nella definizione di un tipo generico dinamico, vedere <bpt id="p1">[</bpt>procedura: definire un tipo generico tramite Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.GenericTypeParameterBuilder">
          <source>Sets a custom attribute.</source>
          <target state="translated">Imposta un attributo personalizzato.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>An instance of a helper class that defines the custom attribute.</source>
          <target state="translated">Istanza di una classe di supporto che definisce l'attributo personalizzato.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>Set a custom attribute using a custom attribute builder.</source>
          <target state="translated">Impostare un attributo personalizzato usando un generatore di attributi personalizzati.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source><ph id="ph1">&lt;paramref name="customBuilder" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="customBuilder" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The constructor for the custom attribute.</source>
          <target state="translated">Costruttore dell'attributo personalizzato.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>A byte blob representing the attribute.</source>
          <target state="translated">BLOB di byte che rappresenta l'attributo.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>Sets a custom attribute using a specified custom attribute blob.</source>
          <target state="translated">Imposta un attributo personalizzato usando un BLOB di attributi personalizzati specificato.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>For details on how to format <ph id="ph1">`binaryAttribute`</ph>, see the documentation for Partition II: Metadata Definition and Semantics.</source>
          <target state="translated">Per informazioni dettagliate su come formattare <ph id="ph1">`binaryAttribute`</ph>, vedere la documentazione relativa a Partition II: definizione dei metadati e semantica.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentazione è disponibile online; vedere <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> (ECMA C# e standard di Common Language Infrastructure) in MSDN e <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> nel sito Web internazionale Ecma.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="con" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="con" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="binaryAttribute" /&gt;</ph> is a null reference.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="binaryAttribute" /&gt;</ph> è un riferimento null.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.GenericParameterAttributes" /&gt;</ph> values that represent the variance characteristics and special constraints of the generic type parameter.</source>
          <target state="translated">Combinazione bit per bit di valori <ph id="ph1">&lt;see cref="T:System.Reflection.GenericParameterAttributes" /&gt;</ph> che rappresentano le caratteristiche di varianza e i vincoli speciali del parametro di tipo generico.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.</source>
          <target state="translated">Imposta le caratteristiche di varianza e i vincoli speciali del parametro generico, ad esempio il vincolo del costruttore senza parametri.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>Special constraints can specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type.</source>
          <target state="translated">I vincoli speciali è possono specificare qualsiasi tipo assegnato al parametro di tipo generico deve avere un costruttore predefinito, deve essere un tipo riferimento o deve essere un tipo di valore.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>Special constraints cannot be retrieved using methods of the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> class.</source>
          <target state="translated">I vincoli speciali possono essere recuperati utilizzando metodi di <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>Once you have created the generic type that contains the type parameter, you can use its <ph id="ph1">&lt;xref:System.Type&gt;</ph> object to reflect the type parameters and their constraints.</source>
          <target state="translated">Dopo aver creato il tipo generico che contiene il parametro di tipo, è possibile utilizzare il relativo <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto in modo da riflettere i parametri di tipo e i vincoli.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>To get the type parameters of a completed generic type, use the <ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per ottenere i parametri di tipo di un tipo generico completato, usare il <ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>To get the special constraints for each type parameter, use the <ph id="ph1">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Per ottenere i vincoli speciali per ogni parametro di tipo, usare il <ph id="ph1">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes&gt;</ph> enumeration values that refer to the variance characteristics of a type parameter are relevant only in languages that support covariance and contravariance, such as Microsoft intermediate language (MSIL).</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes&gt;</ph> valori di enumerazione che fanno riferimento alle caratteristiche di varianza di un parametro di tipo sono rilevanti solo per le lingue che supportano la covarianza e controvarianza, ad esempio Microsoft intermediate language (MSIL).</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>Visual Basic and C# currently do not support covariance and contravariance.</source>
          <target state="translated">Visual Basic e c# attualmente non supportano la covarianza e controvarianza.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>The following code example creates a generic type with two type parameters, the first of which is constrained to have a default constructor and to be a reference type, and saves them in the assembly GenericEmitExample1.dll.</source>
          <target state="translated">Esempio di codice seguente crea un tipo generico con due parametri di tipo, il primo dei quali è vincolato per avere un costruttore predefinito e deve essere un tipo di riferimento e li salva nell'assembly Genericemitexample1.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to view the generated types.</source>
          <target state="translated">È possibile utilizzare il <bpt id="p1">[</bpt>Ildasm.exe (Disassembler IL)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> per visualizzare i tipi generati.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
          <source>For a more detailed explanation of the steps involved in defining a dynamic generic type, see <bpt id="p1">[</bpt>How to: Define a Generic Type with Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>.</source>
          <target state="translated">Per una spiegazione più dettagliata dei passaggi coinvolti nella definizione di un tipo generico dinamico, vedere <bpt id="p1">[</bpt>procedura: definire un tipo generico tramite Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that represent the interfaces a type must implement in order to be substituted for the type parameter.</source>
          <target state="translated">Matrice di oggetti <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresentano le interfacce che devono essere implementate da un tipo perché questo venga sostituito per il parametro di tipo.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>Sets the interfaces a type must implement in order to be substituted for the type parameter.</source>
          <target state="translated">Imposta le interfacce che devono essere implementate da un tipo perché questo venga sostituito per il parametro di tipo.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>Interface constraints cannot be retrieved using methods of the <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> class.</source>
          <target state="translated">Vincoli di interfaccia possono essere recuperati utilizzando metodi di <ph id="ph1">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>Once you have created the generic type that contains the type parameter, you can use its <ph id="ph1">&lt;xref:System.Type&gt;</ph> object to reflect the type parameters and their constraints.</source>
          <target state="translated">Dopo aver creato il tipo generico che contiene il parametro di tipo, è possibile utilizzare il relativo <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto in modo da riflettere i parametri di tipo e i vincoli.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>To get the type parameters of a completed generic type, use the <ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per ottenere i parametri di tipo di un tipo generico completato, usare il <ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>For each type parameter, get the base type constraint and interface constraints by using the <ph id="ph1">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per ogni parametro di tipo, ottenere il tipo di base vincoli di interfaccia e vincolo utilizzando la <ph id="ph1">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>The following code example creates a generic type with two type parameters, the second of which has two interface constraints, and saves them in the assembly GenericEmitExample1.dll.</source>
          <target state="translated">Esempio di codice seguente crea un tipo generico con due parametri di tipo, il secondo dei quali dispone di due vincoli di interfaccia e li salva nell'assembly Genericemitexample1.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to view the generated types.</source>
          <target state="translated">È possibile utilizzare il <bpt id="p1">[</bpt>Ildasm.exe (Disassembler IL)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> per visualizzare i tipi generati.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
          <source>For a more detailed explanation of the steps involved in defining a dynamic generic type, see <bpt id="p1">[</bpt>How to: Define a Generic Type with Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>.</source>
          <target state="translated">Per una spiegazione più dettagliata dei passaggi coinvolti nella definizione di un tipo generico dinamico, vedere <bpt id="p1">[</bpt>procedura: definire un tipo generico tramite Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept>.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
          <source>Returns a string representation of the current generic type parameter.</source>
          <target state="translated">Restituisce una rappresentazione in formato stringa del parametro di tipo generico corrente.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
          <source>A string that contains the name of the generic type parameter.</source>
          <target state="translated">Stringa che contiene il nome del parametro di tipo generico.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
          <source>Not supported for incomplete generic type parameters.</source>
          <target state="translated">Valore non supportato per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
          <source>This property is not supported for incomplete generic type parameters.</source>
          <target state="translated">Questa proprietà non è supportata per i parametri di tipo generico incompleti.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
          <source>Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</source>
          <target state="translated">Recuperare il parametro di tipo dalla definizione del tipo generico completo e quindi usare la reflection sul tipo recuperato.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
          <source>Gets the current generic type parameter.</source>
          <target state="translated">Ottiene il parametro di tipo generico corrente.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> object.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /&gt;</ph> corrente.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>