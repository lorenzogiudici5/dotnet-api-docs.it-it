<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ILGenerator.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b971b055a0abb94aa8ce0cafb4405bfb277c6e50.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b971b055a0abb94aa8ce0cafb4405bfb277c6e50</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.ILGenerator">
          <source>Generates Microsoft intermediate language (MSIL) instructions.</source>
          <target state="translated">Genera istruzioni MSIL (Microsoft Intermediate Language).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ILGenerator">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is used to generate method bodies for methods and constructors in dynamic assemblies (represented by the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph> classes) and for standalone dynamic methods (represented by the <ph id="ph4">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> viene utilizzato per generare il corpo di metodi e costruttori in assembly dinamici (rappresentato dal <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> e <ph id="ph3">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph> classi) e di metodi dinamici autonomi (rappresentato dalla <ph id="ph4">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> classe).</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ILGenerator">
          <source>To obtain an <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Reflection.Emit.ConstructorBuilder.GetILGenerator%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.Emit.MethodBuilder.GetILGenerator%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">Per ottenere un <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>, utilizzare il <ph id="ph2">&lt;xref:System.Reflection.Emit.ConstructorBuilder.GetILGenerator%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A?displayProperty=nameWithType&gt;</ph>, e <ph id="ph4">&lt;xref:System.Reflection.Emit.MethodBuilder.GetILGenerator%2A?displayProperty=nameWithType&gt;</ph> metodi.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ILGenerator">
          <source>MSIL is used as input to a just-in-time (JIT) compiler.</source>
          <target state="translated">MSIL viene utilizzato come input per un compilatore just-in-time (JIT).</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the exception.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta l'eccezione.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source>Begins a catch block.</source>
          <target state="translated">Inizia un blocco catch.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source>Emits a branch instruction to the end of the current exception block.</source>
          <target state="translated">Crea un'istruzione branch alla fine del blocco di eccezioni corrente.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source>If the filter exception block returns the <ph id="ph1">`constant exception_execute_handler`</ph> (see the documentation for the Common Language Infrastructure Instruction Set), the argument to the <ph id="ph2">`BeginCatchBlock`</ph> is not checked.</source>
          <target state="translated">Se il blocco di eccezioni di filtro restituisce il <ph id="ph1">`constant exception_execute_handler`</ph> (vedere la documentazione relativa a Common Language Infrastructure Instruction Set), l'argomento di <ph id="ph2">`BeginCatchBlock`</ph> non è selezionata.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source>The code sample below demonstrates the contextual usage of the <ph id="ph1">`BeginCatchBlock`</ph> method.</source>
          <target state="translated">Esempio di codice seguente illustra l'uso di scelta rapida del <ph id="ph1">`BeginCatchBlock`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source>The catch block is within a filtered exception.</source>
          <target state="translated">Il blocco catch si trova all'interno di un'eccezione filtrata.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source><ph id="ph1">&lt;paramref name="exceptionType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptionType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph> e il blocco di filtro delle eccezioni non ha restituito un valore indicante che i blocchi devono essere eseguiti fino all'individuazione del blocco catch.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.</source>
          <target state="translated">Il flusso MSIL (Microsoft Intermediate Language) generato non si trova attualmente in un blocco di eccezioni.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
          <source>Begins an exception block for a filtered exception.</source>
          <target state="translated">Inizia un blocco di eccezioni per un'eccezione filtrata.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
          <source>Emits a branch instruction to the end of the current exception block.</source>
          <target state="translated">Crea un'istruzione branch alla fine del blocco di eccezioni corrente.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, emitting filtered exception blocks is not supported.</source>
          <target state="translated">Se l'oggetto corrente <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> è associato un <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> oggetto, la creazione di blocchi di eccezioni filtrati non è supportato.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> can be used to construct a dynamic method that uses filtered exception blocks.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> può essere utilizzato per costruire un metodo dinamico che utilizza i blocchi di eccezioni filtrati.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
          <source>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.</source>
          <target state="translated">Il flusso MSIL (Microsoft Intermediate Language) generato non si trova attualmente in un blocco di eccezioni.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
          <source>This <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> belongs to a <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">Questa classe <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> appartiene già a una classe <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
          <source>Begins an exception block for a non-filtered exception.</source>
          <target state="translated">Inizia un blocco di eccezioni per un'eccezione non filtrata.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
          <source>The label for the end of the block.</source>
          <target state="translated">Etichetta per la fine del blocco.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
          <source>This will leave you in the correct place to execute finally blocks or to finish the try.</source>
          <target state="translated">Tale etichetta definisce la posizione corretta per l'esecuzione dei blocchi finally o per terminare il blocco try.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
          <source>Creating an exception block records some information, but does not actually emit any Microsoft intermediate language (MSIL) onto the stream.</source>
          <target state="translated">Creazione di un blocco di eccezioni registra alcune informazioni, ma non creare effettivamente qualsiasi codice Microsoft intermediate language (MSIL) nel flusso.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
          <source>The code sample below demonstrates the contextual usage of the <ph id="ph1">`BeginExceptionBlock`</ph> method.</source>
          <target state="translated">Esempio di codice seguente illustra l'uso di scelta rapida del <ph id="ph1">`BeginExceptionBlock`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
          <source>Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.</source>
          <target state="translated">Inizia un blocco di errori delle eccezioni nel flusso MSIL (Microsoft Intermediate Language).</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, emitting exception fault blocks is not supported.</source>
          <target state="translated">Se l'oggetto corrente <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> è associato un <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> oggetto, la creazione di blocchi di errore di eccezione non è supportato.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> can be used to construct a dynamic method that uses exception fault blocks.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> può essere utilizzato per costruire un metodo dinamico che utilizza blocchi di errori di eccezione.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
          <source>The following code sample illustrates the use of <ph id="ph1">`BeginFaultBlock`</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato l'utilizzo di <ph id="ph1">`BeginFaultBlock`</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
          <source>The MSIL being generated is not currently in an exception block.</source>
          <target state="translated">Il linguaggio MSIL generato non si trova attualmente in un blocco di eccezioni.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
          <source>This <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> belongs to a <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">Questa classe <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> appartiene già a una classe <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
          <source>Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.</source>
          <target state="translated">Inizia un blocco finally nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
          <source>The following code sample illustrates the use of <ph id="ph1">`BeginFinallyBlock`</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato l'utilizzo di <ph id="ph1">`BeginFinallyBlock`</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
          <source>The MSIL being generated is not currently in an exception block.</source>
          <target state="translated">Il linguaggio MSIL generato non si trova attualmente in un blocco di eccezioni.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginScope">
          <source>Begins a lexical scope.</source>
          <target state="translated">Inizia un ambito lessicale.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginScope">
          <source>This method is used to emit symbolic information.</source>
          <target state="translated">Questo metodo viene utilizzato per generare informazioni sui simboli.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginScope">
          <source>Local variables declared after <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.BeginScope%2A&gt;</ph> are scoped until the corresponding <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.EndScope%2A&gt;</ph> is called.</source>
          <target state="translated">Le variabili locali dichiarate dopo <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.BeginScope%2A&gt;</ph> nell'ambito fino a quando il corrispondente <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.EndScope%2A&gt;</ph> viene chiamato.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginScope">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, it does not support symbolic information.</source>
          <target state="translated">Se l'oggetto corrente <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> è associato un <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> dell'oggetto, non supporta le informazioni sui simboli.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginScope">
          <source>The following code sample illustrates the use of <ph id="ph1">`BeginScope`</ph> and <ph id="ph2">`EndScope`</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato l'utilizzo di <ph id="ph1">`BeginScope`</ph> e <ph id="ph2">`EndScope`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginScope">
          <source>This <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> belongs to a <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">Questa classe <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> appartiene già a una classe <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.ILGenerator">
          <source>Declares a local variable.</source>
          <target state="translated">Dichiara una variabile locale.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the type of the local variable.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta il tipo della variabile locale.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>Declares a local variable of the specified type.</source>
          <target state="translated">Dichiara una variabile locale del tipo specificato.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>The declared local variable.</source>
          <target state="translated">Variabile locale dichiarata.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>The local variable is created in the current lexical scope; for example, if code is being emitted in a <ph id="ph1">`for`</ph> loop (<ph id="ph2">`For`</ph> loop in Visual Basic), the scope of the variable is the loop.</source>
          <target state="translated">La variabile locale viene creata nell'ambito lessicale corrente; ad esempio, se viene emessa in codice un <ph id="ph1">`for`</ph> ciclo (<ph id="ph2">`For`</ph> ciclo in Visual Basic), l'ambito della variabile è il ciclo.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>A local variable created with this overload is not pinned.</source>
          <target state="translated">Una variabile locale creata con questo overload non è stato aggiunto.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>To create a pinned variable for use with unmanaged pointers, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DeclareLocal%28System.Type%2CSystem.Boolean%29&gt;</ph> method overload.</source>
          <target state="translated">Per creare una variabile bloccata per l'utilizzo con i puntatori non gestiti, utilizzare il <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DeclareLocal%28System.Type%2CSystem.Boolean%29&gt;</ph> overload del metodo.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>The following code example demonstrates the use of the <ph id="ph1">`DeclareLocal`</ph> method.</source>
          <target state="translated">Esempio di codice seguente viene illustrato l'utilizzo del <ph id="ph1">`DeclareLocal`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>This code is part of a larger code example for the <ph id="ph1">&lt;xref:System.Reflection.Emit.LocalBuilder&gt;</ph> class.</source>
          <target state="translated">Questo codice è parte di un esempio di codice per la <ph id="ph1">&lt;xref:System.Reflection.Emit.LocalBuilder&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source><ph id="ph1">&lt;paramref name="localType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>The containing type has been created by the <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> method.</source>
          <target state="translated">Il tipo contenitore è stato creato dal metodo <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the type of the local variable.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta il tipo della variabile locale.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to pin the object in memory; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> per bloccare l'oggetto in memoria; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>Declares a local variable of the specified type, optionally pinning the object referred to by the variable.</source>
          <target state="translated">Dichiara una variabile locale del tipo specificato che facoltativamente può bloccare l'oggetto a cui fa riferimento la variabile.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.LocalBuilder" /&gt;</ph> object that represents the local variable.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.LocalBuilder" /&gt;</ph> che rappresenta la variabile locale.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>The local variable is created in the current lexical scope; for example, if code is being emitted in a <ph id="ph1">`for`</ph> loop (<ph id="ph2">`For`</ph> loop in Visual Basic), the scope of the variable is the loop.</source>
          <target state="translated">La variabile locale viene creata nell'ambito lessicale corrente; ad esempio, se viene emessa in codice un <ph id="ph1">`for`</ph> ciclo (<ph id="ph2">`For`</ph> ciclo in Visual Basic), l'ambito della variabile è il ciclo.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer.</source>
          <target state="translated">Nel codice unsafe, un oggetto deve essere bloccato affinché sia possibile farvi riferimento da un puntatore non gestito.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>While the referenced object is pinned, it cannot be moved by garbage collection.</source>
          <target state="translated">Mentre l'oggetto di riferimento è bloccato, non può essere spostato da garbage collection.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="localType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>The containing type has been created by the <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> method.</source>
          <target state="translated">Il tipo contenitore è stato creato dal metodo <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>The method body of the enclosing method has been created by the <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" /&gt;</ph> method.</source>
          <target state="translated">Il corpo del metodo contenitore è stato creato dal metodo <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>The method with which this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> is associated is not represented by a <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph>.</source>
          <target state="translated">Il metodo a cui l'oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> è associato non è rappresentato da un oggetto <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DefineLabel">
          <source>Declares a new label.</source>
          <target state="translated">Dichiara una nuova etichetta.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DefineLabel">
          <source>Returns a new label that can be used as a token for branching.</source>
          <target state="translated">Restituisce una nuova etichetta che può essere utilizzata come token per la creazione di rami.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DefineLabel">
          <source>To set the position of the label within the stream, you must call <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>.</source>
          <target state="translated">Per impostare la posizione dell'etichetta all'interno del flusso, è necessario chiamare <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DefineLabel">
          <source>This is just a token and does not yet represent any particular location within the stream.</source>
          <target state="translated">Questo è un token e non rappresenta una posizione particolare all'interno del flusso.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DefineLabel">
          <source>The code sample below demonstrates the contextual usage of the <ph id="ph1">`DefineLabel`</ph> method.</source>
          <target state="translated">Esempio di codice seguente illustra l'uso di scelta rapida del <ph id="ph1">`DefineLabel`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.ILGenerator">
          <source>Puts an instruction onto the Microsoft Intermediate Language (MSIL) stream for the just-in-time (JIT) compiler.</source>
          <target state="translated">Inserisce un'istruzione nel flusso MSIL (Microsoft Intermediate Language) per il compilatore JIT (Just-In-Time).</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.</source>
          <target state="translated">Istruzione MSIL (Microsoft Intermediate Language) da inserire nel flusso.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>Puts the specified instruction onto the stream of instructions.</source>
          <target state="translated">Inserisce l'istruzione specificata nel flusso di istruzioni.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>If the <ph id="ph1">`opcode`</ph> parameter requires an argument, the caller must ensure that the argument length matches the length of the declared parameter.</source>
          <target state="translated">Se il <ph id="ph1">`opcode`</ph> parametro richiede un argomento, il chiamante deve garantire che la lunghezza dell'argomento corrisponda alla lunghezza del parametro dichiarato.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>Otherwise, results will be unpredictable.</source>
          <target state="translated">In caso contrario, i risultati potrebbero essere imprevedibili.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>For example, if the Emit instruction requires a 2-byte operand and the caller supplies a 4-byte operand, the runtime will emit two additional bytes to the instruction stream.</source>
          <target state="translated">Ad esempio, se l'istruzione Emit richiede un operando a 2 byte e il chiamante fornisce un operando a 4 byte, il runtime genererà due byte aggiuntivi per il flusso di istruzioni.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>These extra bytes will be <ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes.Nop&gt;</ph> instructions.</source>
          <target state="translated">Questi byte aggiuntivi sarà <ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes.Nop&gt;</ph> istruzioni.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>The instruction values are defined in <ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes&gt;</ph>.</source>
          <target state="translated">I valori dell'istruzione sono definiti <ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>The code sample below demonstrates the use of <ph id="ph1">`Emit`</ph> to generate MSIL output via an instance of <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato l'utilizzo di <ph id="ph1">`Emit`</ph> per generare output MSIL tramite un'istanza di <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
          <source>The MSIL instruction to be put onto the stream.</source>
          <target state="translated">Istruzione MSIL da inserire nel flusso.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
          <source>The character argument pushed onto the stream immediately after the instruction.</source>
          <target state="translated">Argomento del carattere inserito nel flusso subito dopo l'istruzione.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
          <source>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">Inserisce l'istruzione e l'argomento del carattere specificati nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
          <source>The MSIL instruction to be put onto the stream.</source>
          <target state="translated">Istruzione MSIL da inserire nel flusso.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
          <source>Defined in the <ph id="ph1">&lt;see langword="OpCodes" /&gt;</ph> enumeration.</source>
          <target state="translated">definita nell'enumerazione <ph id="ph1">&lt;see langword="OpCodes" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
          <source>The numerical argument pushed onto the stream immediately after the instruction.</source>
          <target state="translated">Argomento numerico inserito nel flusso subito dopo l'istruzione.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
          <source>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">Inserisce l'istruzione e l'argomento numerico specificati nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">Istruzione MSIL da emettere nel flusso.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
          <source>The <ph id="ph1">&lt;see langword="Int" /&gt;</ph> argument pushed onto the stream immediately after the instruction.</source>
          <target state="translated">Argomento <ph id="ph1">&lt;see langword="Int" /&gt;</ph> inserito nel flusso subito dopo l'istruzione.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
          <source>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">Inserisce l'istruzione e l'argomento numerico specificati nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
          <source>The MSIL instruction to be put onto the stream.</source>
          <target state="translated">Istruzione MSIL da inserire nel flusso.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
          <source>The numerical argument pushed onto the stream immediately after the instruction.</source>
          <target state="translated">Argomento numerico inserito nel flusso subito dopo l'istruzione.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
          <source>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">Inserisce l'istruzione e l'argomento numerico specificati nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
          <source>The MSIL instruction to be put onto the stream.</source>
          <target state="translated">Istruzione MSIL da inserire nel flusso.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
          <source>The numerical argument pushed onto the stream immediately after the instruction.</source>
          <target state="translated">Argomento numerico inserito nel flusso subito dopo l'istruzione.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
          <source>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">Inserisce l'istruzione e l'argomento numerico specificati nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">Istruzione MSIL da emettere nel flusso.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
          <source>A <ph id="ph1">&lt;see langword="ConstructorInfo" /&gt;</ph> representing a constructor.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="ConstructorInfo" /&gt;</ph> che rappresenta un costruttore.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
          <source>Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">Inserisce l'istruzione e il token di metadati specificati per il costruttore indicato nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
          <source>The location of <ph id="ph1">`con`</ph> is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.</source>
          <target state="translated">Il percorso di <ph id="ph1">`con`</ph> viene registrato in modo che il flusso di istruzioni possa essere corretto, se necessario, durante il salvataggio del modulo in un file eseguibile portabile (PE).</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
          <source><ph id="ph1">&lt;paramref name="con" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="con" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
          <source>This exception is new in the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>.</source>
          <target state="translated">Questa eccezione è nuova nell'oggetto <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">Istruzione MSIL da emettere nel flusso.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>The label to which to branch from this location.</source>
          <target state="translated">Etichetta per la quale creare un ramo dalla posizione in questione.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</source>
          <target state="translated">Inserisce l'istruzione specificata nel flusso MSIL (Microsoft Intermediate Language) e lascia spazio per includere un'etichetta dopo l'esecuzione delle correzioni.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>Labels are created using <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A&gt;</ph>, and their location within the stream is fixed by using <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>.</source>
          <target state="translated">Le etichette vengono create utilizzando <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A&gt;</ph>, e la posizione all'interno del flusso è corretta tramite <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream.</source>
          <target state="translated">Se viene utilizzata un'istruzione a byte singolo, l'etichetta può rappresentare un passaggio di al massimo 127 byte all'interno del flusso.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source><ph id="ph1">`opcode`</ph> must represent a branch instruction.</source>
          <target state="translated"><ph id="ph1">`opcode`</ph> deve rappresentare un'istruzione branch.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>Because branches are relative instructions, <ph id="ph1">`label`</ph> will be replaced with the correct offset to branch during the fixup process.</source>
          <target state="translated">Poiché i rami le istruzioni sono relative, <ph id="ph1">`label`</ph> verrà sostituito con l'offset corretto al ramo durante il processo di correzione.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>The code sample below illustrates the creation of a dynamic method with a jump table.</source>
          <target state="translated">Esempio di codice seguente viene illustrata la creazione di un metodo con una tabella di collegamento dinamico.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>The jump table is built using an array of <ph id="ph1">&lt;xref:System.Reflection.Emit.Label&gt;</ph>.</source>
          <target state="translated">La tabella di passaggio viene compilata utilizzando una matrice di <ph id="ph1">&lt;xref:System.Reflection.Emit.Label&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">Istruzione MSIL da emettere nel flusso.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>The array of label objects to which to branch from this location.</source>
          <target state="translated">Matrice di oggetti label per la quale creare un ramo dalla posizione in questione.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>All of the labels will be used.</source>
          <target state="translated">Verranno utilizzate tutte le etichette.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</source>
          <target state="translated">Inserisce l'istruzione specificata nel flusso MSIL (Microsoft Intermediate Language) e lascia spazio per includere un'etichetta dopo l'esecuzione delle correzioni.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>Emits a switch table.</source>
          <target state="translated">Genera una tabella di opzioni.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>Labels are created using <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A&gt;</ph> and their location within the stream is fixed by using <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>.</source>
          <target state="translated">Le etichette vengono create utilizzando <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A&gt;</ph> e la posizione all'interno del flusso è corretta tramite <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream.</source>
          <target state="translated">Se viene utilizzata un'istruzione a byte singolo, l'etichetta può rappresentare un passaggio di al massimo 127 byte all'interno del flusso.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source><ph id="ph1">`opcode`</ph> must represent a branch instruction.</source>
          <target state="translated"><ph id="ph1">`opcode`</ph> deve rappresentare un'istruzione branch.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>Because branches are relative instructions, <ph id="ph1">`label`</ph> will be replaced with the correct offset to branch during the fixup process.</source>
          <target state="translated">Poiché i rami le istruzioni sono relative, <ph id="ph1">`label`</ph> verrà sostituito con l'offset corretto al ramo durante il processo di correzione.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>The code sample below illustrates the creation of a dynamic method with a jump table.</source>
          <target state="translated">Esempio di codice seguente viene illustrata la creazione di un metodo con una tabella di collegamento dinamico.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>The jump table is built using an array of <ph id="ph1">&lt;xref:System.Reflection.Emit.Label&gt;</ph>.</source>
          <target state="translated">La tabella di passaggio viene compilata utilizzando una matrice di <ph id="ph1">&lt;xref:System.Reflection.Emit.Label&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source><ph id="ph1">&lt;paramref name="con" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="con" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>This exception is new in the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>.</source>
          <target state="translated">Questa eccezione è nuova nell'oggetto <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">Istruzione MSIL da emettere nel flusso.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
          <source>A local variable.</source>
          <target state="translated">Una variabile locale.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.</source>
          <target state="translated">Inserisce l'istruzione specificata nel flusso MSIL (Microsoft Intermediate Language), seguita dall'indice della variabile locale indicata.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
          <source>The parent method of the <ph id="ph1">&lt;paramref name="local" /&gt;</ph> parameter does not match the method associated with this <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph>.</source>
          <target state="translated">Il metodo padre del parametro <ph id="ph1">&lt;paramref name="local" /&gt;</ph> non corrisponde al metodo associato a tale <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
          <source><ph id="ph1">&lt;paramref name="local" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="local" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
          <source><ph id="ph1">&lt;paramref name="opcode" /&gt;</ph> is a single-byte instruction, and <ph id="ph2">&lt;paramref name="local" /&gt;</ph> represents a local variable with an index greater than <ph id="ph3">&lt;see langword="Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="opcode" /&gt;</ph> è un'istruzione a byte singolo e <ph id="ph2">&lt;paramref name="local" /&gt;</ph> rappresenta una variabile locale con un indice maggiore di <ph id="ph3">&lt;see langword="Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">Istruzione MSIL da emettere nel flusso.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
          <source>A helper for constructing a signature token.</source>
          <target state="translated">Supporto per la costruzione di un token di firme.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
          <source>Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">Inserisce l'istruzione specificata e un token di firme nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
          <source><ph id="ph1">&lt;paramref name="signature" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="signature" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">Istruzione MSIL da emettere nel flusso.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
          <source>A <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph> representing a field.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph> che rappresenta un campo.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
          <source>Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">Inserisce l'istruzione e il token di metadati specificati per il campo indicato nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
          <source>The location of <ph id="ph1">`field`</ph> is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.</source>
          <target state="translated">Il percorso di <ph id="ph1">`field`</ph> viene registrato in modo che il flusso di istruzioni possa essere corretto, se necessario, durante il salvataggio del modulo in un file eseguibile portabile (PE).</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">Istruzione MSIL da emettere nel flusso.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> representing a method.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> che rappresenta un metodo.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.</source>
          <target state="translated">Inserisce l'istruzione specificata nel flusso MSIL (Microsoft Intermediate Language), seguita dal token di metadati per il metodo indicato.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source>The location of <ph id="ph1">`meth`</ph> is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.</source>
          <target state="translated">Il percorso di <ph id="ph1">`meth`</ph> viene registrato in modo che il flusso di istruzioni possa essere corretto, se necessario, durante il salvataggio del modulo in un file eseguibile portabile (PE).</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`meth`</ph> represents a generic method, it must be a generic method definition.</source>
          <target state="translated">Se <ph id="ph1">`meth`</ph> rappresenta un metodo generico, deve essere una definizione di metodo generico.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source>That is, its <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A?displayProperty=nameWithType&gt;</ph> property must be <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Vale a dire il relativo <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A?displayProperty=nameWithType&gt;</ph> proprietà deve essere <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="meth" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="meth" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="meth" /&gt;</ph> is a generic method for which the <ph id="ph2">&lt;see cref="P:System.Reflection.MethodInfo.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="meth" /&gt;</ph> è un metodo generico per il quale la proprietà <ph id="ph2">&lt;see cref="P:System.Reflection.MethodInfo.IsGenericMethodDefinition" /&gt;</ph> è <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
          <source>The MSIL instruction to be put onto the stream.</source>
          <target state="translated">Istruzione MSIL da inserire nel flusso.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
          <source>The character argument pushed onto the stream immediately after the instruction.</source>
          <target state="translated">Argomento del carattere inserito nel flusso subito dopo l'istruzione.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
          <source>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">Inserisce l'istruzione e l'argomento del carattere specificati nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
          <source>The MSIL instruction to be put onto the stream.</source>
          <target state="translated">Istruzione MSIL da inserire nel flusso.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
          <source>The <ph id="ph1">&lt;see langword="Single" /&gt;</ph> argument pushed onto the stream immediately after the instruction.</source>
          <target state="translated">Argomento <ph id="ph1">&lt;see langword="Single" /&gt;</ph> inserito nel flusso subito dopo l'istruzione.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
          <source>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">Inserisce l'istruzione e l'argomento numerico specificati nel flusso di istruzioni MSIL (Microsoft Intermediate Language).</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">Istruzione MSIL da emettere nel flusso.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
          <source>The <ph id="ph1">&lt;see langword="String" /&gt;</ph> to be emitted.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="String" /&gt;</ph> da creare.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.</source>
          <target state="translated">Inserisce l'istruzione specificata nel flusso MSIL (Microsoft Intermediate Language), seguita dal token di metadati per la stringa indicata.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
          <source>The location of <ph id="ph1">`str`</ph> is recorded for future fixups if the module is persisted to a portable executable (PE) file.</source>
          <target state="translated">Il percorso di <ph id="ph1">`str`</ph> è registrata per correzioni future se il modulo viene salvato in un file eseguibile portabile (PE).</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
          <source>The MSIL instruction to be put onto the stream.</source>
          <target state="translated">Istruzione MSIL da inserire nel flusso.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
          <source>A <ph id="ph1">&lt;see langword="Type" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="Type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.</source>
          <target state="translated">Inserisce l'istruzione specificata nel flusso MSIL (Microsoft Intermediate Language), seguita dal token di metadati per il tipo indicato.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">I valori dell'istruzione sono definiti nel <ph id="ph1">`OpCodes`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
          <source>The location of <ph id="ph1">`cls`</ph> is recorded so that the token can be patched if necessary when persisting the module to a portable executable (PE) file.</source>
          <target state="translated">Il percorso di <ph id="ph1">`cls`</ph> viene registrato in modo che il token può essere corretto, se necessario, durante il salvataggio del modulo in un file eseguibile portabile (PE).</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
          <source><ph id="ph1">&lt;paramref name="cls" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cls" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">Istruzione MSIL da emettere nel flusso.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>Must be <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Callvirt" /&gt;</ph>, or <ph id="ph3">&lt;see cref="F:System.Reflection.Emit.OpCodes.Newobj" /&gt;</ph>.</source>
          <target state="translated">Deve essere <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Callvirt" /&gt;</ph> o <ph id="ph3">&lt;see cref="F:System.Reflection.Emit.OpCodes.Newobj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>The <ph id="ph1">&lt;see langword="varargs" /&gt;</ph> method to be called.</source>
          <target state="translated">Metodo <ph id="ph1">&lt;see langword="varargs" /&gt;</ph> da chiamare.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>The types of the optional arguments if the method is a <ph id="ph1">&lt;see langword="varargs" /&gt;</ph> method; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Tipi degli argomenti facoltativi se il metodo è un metodo <ph id="ph1">&lt;see langword="varargs" /&gt;</ph>; in caso contrario, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>Puts a <ph id="ph1">&lt;see langword="call" /&gt;</ph> or <ph id="ph2">&lt;see langword="callvirt" /&gt;</ph> instruction onto the Microsoft intermediate language (MSIL) stream to call a <ph id="ph3">&lt;see langword="varargs" /&gt;</ph> method.</source>
          <target state="translated">Inserisce un'istruzione <ph id="ph1">&lt;see langword="call" /&gt;</ph> o <ph id="ph2">&lt;see langword="callvirt" /&gt;</ph> nel flusso MSIL (Microsoft Intermediate Language) per chiamare un metodo <ph id="ph3">&lt;see langword="varargs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCall%2A&gt;</ph> method is used to emit calls to <ph id="ph2">`varargs`</ph> methods because there is no overload of the <ph id="ph3">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph> method that specifies the parameter types of the variable arguments.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCall%2A&gt;</ph> metodo viene utilizzato per generare chiamate a <ph id="ph2">`varargs`</ph> metodi perché non esiste nessun overload della funzione di <ph id="ph3">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph> metodo che specifica i tipi di parametro degli argomenti variabili.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>To emit calls to methods that do not use the <ph id="ph1">&lt;xref:System.Reflection.CallingConventions.VarArgs&gt;</ph> calling convention, use the <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29&gt;</ph> method overload.</source>
          <target state="translated">Per generare chiamate ai metodi che non utilizzano il <ph id="ph1">&lt;xref:System.Reflection.CallingConventions.VarArgs&gt;</ph> la convenzione di chiamata, utilizzare il <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29&gt;</ph> overload del metodo.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>Version Information</source>
          <target state="translated">Informazioni sulla versione</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>Beginning with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCall%2A&gt;</ph> method does not throw an exception when optional parameter types are specified for a method that is not <ph id="ph2">`varargs`</ph>.</source>
          <target state="translated">A partire da .NET Framework versione 2.0, il <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCall%2A&gt;</ph> metodo non genera un'eccezione quando vengono specificati tipi di parametro facoltativi per un metodo che non è <ph id="ph2">`varargs`</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source><ph id="ph1">&lt;xref:System.InvalidProgramException&gt;</ph> is thrown when the call is executed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidProgramException&gt;</ph> viene generata quando viene eseguita la chiamata.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>The following code example emits two methods, a <ph id="ph1">`varargs`</ph> method and a method that calls the <ph id="ph2">`varargs`</ph> method.</source>
          <target state="translated">Esempio di codice seguente genera due metodi, ovvero un <ph id="ph1">`varargs`</ph> metodo e un metodo che chiama il <ph id="ph2">`varargs`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>The <ph id="ph1">`EmitCall`</ph> method is used to emit the call to the <ph id="ph2">`varargs`</ph> method.</source>
          <target state="translated">Il <ph id="ph1">`EmitCall`</ph> metodo viene utilizzato per generare la chiamata al <ph id="ph2">`varargs`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source><ph id="ph1">&lt;paramref name="opcode" /&gt;</ph> does not specify a method call.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="opcode" /&gt;</ph> non specifica una chiamata al metodo.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source><ph id="ph1">&lt;paramref name="methodInfo" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="methodInfo" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>The calling convention for the method is not <ph id="ph1">&lt;see langword="varargs" /&gt;</ph>, but optional parameter types are supplied.</source>
          <target state="translated">La convenzione di chiamata per il metodo non è <ph id="ph1">&lt;see langword="varargs" /&gt;</ph>, ma vengono forniti tipi di parametro facoltativi.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.</source>
          <target state="translated">Questa eccezione viene generata nelle versioni 1.0 e 1.1 di .NET Framework. Nelle versioni successive non viene generata alcuna eccezione.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.ILGenerator">
          <source>Puts a <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph> instruction onto the Microsoft intermediate language (MSIL) stream.</source>
          <target state="translated">Inserisce un'istruzione <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph> nel flusso MSIL (Microsoft Intermediate Language).</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">Istruzione MSIL da emettere nel flusso.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>Must be <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph>.</source>
          <target state="translated">Deve essere <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>The unmanaged calling convention to be used.</source>
          <target state="translated">Convenzione di chiamata non gestita da utilizzare.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the result.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> del risultato.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>The types of the required arguments to the instruction.</source>
          <target state="translated">Tipi di argomenti necessari per l'istruzione.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>Puts a <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph> instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.</source>
          <target state="translated">Inserisce un'istruzione <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph> nel flusso di istruzioni MSIL (Microsoft Intermediate Language), specificando una convenzione di chiamata non gestita per la chiamata indiretta.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph> to put a <ph id="ph2">&lt;xref:System.Reflection.Emit.OpCodes.Calli&gt;</ph> instruction onto the stream.</source>
          <target state="translated">Utilizzare <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph> per inserire un <ph id="ph2">&lt;xref:System.Reflection.Emit.OpCodes.Calli&gt;</ph> istruzione nel flusso.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>Do not use <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph>.</source>
          <target state="translated">Non utilizzare la proprietà <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>The following code sample demonstrates the contextual usage of the <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph> method to call an unmanaged type method external to the dynamic class.</source>
          <target state="translated">Esempio di codice seguente illustra l'uso di scelta rapida del <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph> metodo per chiamare un metodo di tipo non gestito esterno alla classe dinamica.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">Istruzione MSIL da emettere nel flusso.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>Must be <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph>.</source>
          <target state="translated">Deve essere <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>The managed calling convention to be used.</source>
          <target state="translated">Convenzione di chiamata gestita da utilizzare.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the result.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> del risultato.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>The types of the required arguments to the instruction.</source>
          <target state="translated">Tipi di argomenti necessari per l'istruzione.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>The types of the optional arguments for <ph id="ph1">&lt;see langword="varargs" /&gt;</ph> calls.</source>
          <target state="translated">Tipi di argomenti facoltativi per le chiamate a <ph id="ph1">&lt;see langword="varargs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>Puts a <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph> instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.</source>
          <target state="translated">Inserisce un'istruzione <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph> nel flusso di istruzioni MSIL (Microsoft Intermediate Language), specificando una convenzione di chiamata gestita per la chiamata indiretta.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph> to put a <ph id="ph2">&lt;xref:System.Reflection.Emit.OpCodes.Calli&gt;</ph> instruction onto the stream.</source>
          <target state="translated">Utilizzare <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph> per inserire un <ph id="ph2">&lt;xref:System.Reflection.Emit.OpCodes.Calli&gt;</ph> istruzione nel flusso.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>Do not use <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph>.</source>
          <target state="translated">Non utilizzare la proprietà <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>If <ph id="ph1">`optionalParameterTypes`</ph> specifies optional arguments, <ph id="ph2">`callingConvention`</ph> must include the <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.VarArgs?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">Se <ph id="ph1">`optionalParameterTypes`</ph> specifica gli argomenti facoltativi, <ph id="ph2">`callingConvention`</ph> deve includere il <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.VarArgs?displayProperty=nameWithType&gt;</ph> flag.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source><ph id="ph1">&lt;paramref name="optionalParameterTypes" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph>, but <ph id="ph3">&lt;paramref name="callingConvention" /&gt;</ph> does not include the <ph id="ph4">&lt;see cref="F:System.Reflection.CallingConventions.VarArgs" /&gt;</ph> flag.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="optionalParameterTypes" /&gt;</ph> non è <ph id="ph2">&lt;see langword="null" /&gt;</ph>, ma <ph id="ph3">&lt;paramref name="callingConvention" /&gt;</ph> non include il flag <ph id="ph4">&lt;see cref="F:System.Reflection.CallingConventions.VarArgs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.ILGenerator">
          <source>Helper functions to emit a call to <ph id="ph1">&lt;see cref="M:System.Console.WriteLine" /&gt;</ph> with different types of values.</source>
          <target state="translated">Funzioni di supporto utilizzate per creare una chiamata al metodo <ph id="ph1">&lt;see cref="M:System.Console.WriteLine" /&gt;</ph> con tipi di valori diversi.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source>The local variable whose value is to be written to the console.</source>
          <target state="translated">Variabile locale il cui valore deve essere scritto nella console.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source>Emits the Microsoft intermediate language (MSIL) necessary to call <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> with the given local variable.</source>
          <target state="translated">Crea il linguaggio MSIL (Microsoft Intermediate Language) necessario per chiamare <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> con la variabile locale specificata.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source>The type of <ph id="ph1">`localBuilder`</ph> must match the parameter type of an overload of the <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Il tipo di <ph id="ph1">`localBuilder`</ph> deve corrispondere al tipo di parametro di un overload del <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source>The code sample below demonstrates the contextual usage of the <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitWriteLine%2A&gt;</ph> method to write a string to the console in a dynamic method.</source>
          <target state="translated">Esempio di codice seguente illustra l'uso di scelta rapida del <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitWriteLine%2A&gt;</ph> metodo per scrivere una stringa sulla console in un metodo dinamico.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source>The type of <ph id="ph1">&lt;paramref name="localBuilder" /&gt;</ph> is <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.TypeBuilder" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>, which are not supported.</source>
          <target state="translated">Il tipo di <ph id="ph1">&lt;paramref name="localBuilder" /&gt;</ph> è <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.TypeBuilder" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>, che non sono valori supportati.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source>There is no overload of <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> that accepts the type of <ph id="ph2">&lt;paramref name="localBuilder" /&gt;</ph>.</source>
          <target state="translated">Nessun overload di <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> accetta il tipo di <ph id="ph2">&lt;paramref name="localBuilder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source><ph id="ph1">&lt;paramref name="localBuilder" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localBuilder" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
          <source>The field whose value is to be written to the console.</source>
          <target state="translated">Campo il cui valore deve essere scritto nella console.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
          <source>Emits the Microsoft intermediate language (MSIL) necessary to call <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> with the given field.</source>
          <target state="translated">Crea il flusso MSIL (Microsoft Intermediate Language) necessario per chiamare il metodo <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> con il campo indicato.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
          <source>The type of <ph id="ph1">`fld`</ph> must match the parameter type of an overload of the <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Il tipo di <ph id="ph1">`fld`</ph> deve corrispondere al tipo di parametro di un overload del <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
          <source>The following code sample demonstrates the use of the <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitWriteLine%2A&gt;</ph> method to write a string to the console in a dynamic method.</source>
          <target state="translated">Esempio di codice riportato di seguito viene illustrato l'utilizzo del <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitWriteLine%2A&gt;</ph> metodo per scrivere una stringa sulla console in un metodo dinamico.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
          <source>There is no overload of the <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> method that accepts the type of the specified field.</source>
          <target state="translated">Non è presente alcun overload del metodo <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> che accetti il tipo del campo specificato.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
          <source><ph id="ph1">&lt;paramref name="fld" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fld" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
          <source>The type of the field is <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.TypeBuilder" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>, which are not supported.</source>
          <target state="translated">Il tipo del campo è <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.TypeBuilder" /&gt;</ph> o <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>, oggetti non supportati.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
          <source>The string to be printed.</source>
          <target state="translated">Stringa da stampare.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
          <source>Emits the Microsoft intermediate language (MSIL) to call <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> with a string.</source>
          <target state="translated">Crea il flusso MSIL (Microsoft Intermediate Language) necessario per chiamare il metodo <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> con una stringa.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
          <source>The string must have already been defined.</source>
          <target state="translated">La stringa deve già definita.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
          <source>The code sample below demonstrates the contextual usage of the <ph id="ph1">`EmitWriteLine`</ph> method to write a string to the console in a dynamic method.</source>
          <target state="translated">Esempio di codice seguente illustra l'uso di scelta rapida del <ph id="ph1">`EmitWriteLine`</ph> metodo per scrivere una stringa sulla console in un metodo dinamico.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
          <source>Ends an exception block.</source>
          <target state="translated">Termina un blocco di eccezioni.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
          <source>The code sample below demonstrates the contextual usage of the <ph id="ph1">`EndExceptionBlock`</ph> method.</source>
          <target state="translated">Esempio di codice seguente illustra l'uso di scelta rapida del <ph id="ph1">`EndExceptionBlock`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
          <source>The end exception block occurs in an unexpected place in the code stream.</source>
          <target state="translated">Il blocco di eccezioni finale si trova in una posizione non prevista nel flusso del codice.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
          <source>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.</source>
          <target state="translated">Il flusso MSIL (Microsoft Intermediate Language) generato non si trova attualmente in un blocco di eccezioni.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EndScope">
          <source>Ends a lexical scope.</source>
          <target state="translated">Termina un ambito lessicale.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EndScope">
          <source>This method is used to emit symbolic information.</source>
          <target state="translated">Questo metodo viene utilizzato per generare informazioni sui simboli.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EndScope">
          <source>It is used with <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.BeginScope%2A&gt;</ph>.</source>
          <target state="translated">Viene utilizzato con <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.BeginScope%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EndScope">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, it does not support symbolic information.</source>
          <target state="translated">Se l'oggetto corrente <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> è associato un <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> dell'oggetto, non supporta le informazioni sui simboli.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EndScope">
          <source>The following code sample illustrates the use of <ph id="ph1">`BeginScope`</ph> and <ph id="ph2">`EndScope`</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato l'utilizzo di <ph id="ph1">`BeginScope`</ph> e <ph id="ph2">`EndScope`</ph>.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EndScope">
          <source>This <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> belongs to a <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">Questa classe <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> appartiene già a una classe <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.ILGenerator.ILOffset">
          <source>Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph>.</source>
          <target state="translated">Ottiene l'offset corrente, in byte, nel flusso Microsoft Intermediate Language (MSIL) emesso dall'oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ILGenerator.ILOffset">
          <source>The offset in the MSIL stream at which the next instruction will be emitted.</source>
          <target state="translated">Offset nel flusso MSIL in corrispondenza del quale verrà emessa l'istruzione successiva.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ILGenerator.ILOffset">
          <source>This method is transparent, and can be called from partially trusted code.</source>
          <target state="translated">Questo metodo è trasparente e può essere chiamato da codice parzialmente attendibile.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ILGenerator.ILOffset">
          <source>If the <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.ILOffset%2A&gt;</ph> property is accessed before any MSIL instructions have been emitted, it returns 0 (zero).</source>
          <target state="translated">Se il <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.ILOffset%2A&gt;</ph> proprietà avviene prima che sono state generate eventuali istruzioni MSIL, restituisce 0 (zero).</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ILGenerator.ILOffset">
          <source>When MSIL is generated for dynamic languages, this property can be used to map offsets in the MSIL stream to source code line numbers.</source>
          <target state="translated">Quando MSIL viene generato per i linguaggi dinamici, questa proprietà può essere utilizzata per eseguire il mapping di offset nel flusso MSIL per i numeri di riga di codice sorgente.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ILGenerator.ILOffset">
          <source>The resulting information can be used to provide stack traces when exceptions are thrown.</source>
          <target state="translated">Per fornire analisi dello stack quando vengono generate eccezioni, è possono utilizzare le informazioni risultanti.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
          <source>The label for which to set an index.</source>
          <target state="translated">Etichetta per la quale impostare un indice.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
          <source>Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.</source>
          <target state="translated">Contrassegna la posizione corrente del flusso MSIL (Microsoft Intermediate Language) con l'etichetta indicata.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
          <source>A label cannot be defined more than once.</source>
          <target state="translated">Un'etichetta non può essere definita più volte.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
          <source>The code sample below demonstrates the contextual usage of <ph id="ph1">`MarkLabel`</ph> to implement MSIL branching in a dynamic method.</source>
          <target state="translated">Esempio di codice seguente illustra l'uso di scelta rapida di <ph id="ph1">`MarkLabel`</ph> per l'implementazione MSIL rami in un metodo dinamico.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
          <source><ph id="ph1">&lt;paramref name="loc" /&gt;</ph> represents an invalid index into the label array.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="loc" /&gt;</ph> rappresenta un indice non valido nella matrice delle etichette.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
          <source>An index for <ph id="ph1">&lt;paramref name="loc" /&gt;</ph> has already been defined.</source>
          <target state="translated">È già stato definito un indice per <ph id="ph1">&lt;paramref name="loc" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The document for which the sequence point is being defined.</source>
          <target state="translated">Documento per il quale definire il punto di sequenza.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The line where the sequence point begins.</source>
          <target state="translated">Riga di inizio del punto di sequenza.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The column in the line where the sequence point begins.</source>
          <target state="translated">Colonna nella riga di inizio del punto di sequenza.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The line where the sequence point ends.</source>
          <target state="translated">Riga di fine del punto di sequenza.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The column in the line where the sequence point ends.</source>
          <target state="translated">Colonna nella riga di fine del punto di sequenza.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Marks a sequence point in the Microsoft intermediate language (MSIL) stream.</source>
          <target state="translated">Contrassegna un punto di sequenza nel flusso MSIL (Microsoft Intermediate Language).</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Line numbers are indexed from 1.</source>
          <target state="translated">Numeri di riga sono indicizzati da 1.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Columns are indexed from 0.</source>
          <target state="translated">Le colonne sono indicizzate da 0.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The symbolic information normally includes at least one MSIL offset for each source line.</source>
          <target state="translated">Le informazioni sui simboli includono generalmente almeno un offset MSIL per ogni riga di origine.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved.</source>
          <target state="translated">Quando il compilatore JIT (Just-In-Time) sta per compilare un metodo, richiede ai servizi relativi ai profili un elenco di offset MSIL da conservare.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>These MSIL offsets are called <bpt id="p1">*</bpt>sequence points<ept id="p1">*</ept>.</source>
          <target state="translated">Tali offset MSIL sono denominati <bpt id="p1">*</bpt>punti di sequenza<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, it does not support symbolic information.</source>
          <target state="translated">Se l'oggetto corrente <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> è associato un <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> dell'oggetto, non supporta le informazioni sui simboli.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startLine" /&gt;</ph> or <ph id="ph2">&lt;paramref name="endLine" /&gt;</ph> is <ph id="ph3">&amp;lt;</ph>= 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startLine" /&gt;</ph> o <ph id="ph2">&lt;paramref name="endLine" /&gt;</ph> è <ph id="ph3">&amp;lt;</ph>= 0.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>This <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> belongs to a <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">Questa classe <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> appartiene già a una classe <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Riservato per utilizzi futuri.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve essere IID_NULL.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Matrice di nomi passata di cui eseguire il mapping.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Conteggio dei nomi di cui eseguire il mapping.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Contesto delle impostazioni locali in cui interpretare i nomi.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array that receives the IDs corresponding to the names.</source>
          <target state="translated">Matrice allocata dal chiamante che riceve gli ID corrispondenti ai nomi.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Esegue il mapping di un set di nomi a un set corrispondente di ID dispatch.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo per l'accesso a classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">Il metodo viene chiamato ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Informazioni sul tipo da restituire.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Identificatore delle impostazioni locali per le informazioni sul tipo.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Riceve un puntatore all'oggetto relativo alle informazioni sul tipo richiesto.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Recupera le informazioni sul tipo relative a un oggetto che può quindi essere usato per ottenere informazioni sul tipo relative a un'interfaccia.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo per l'accesso a classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">Il metodo viene chiamato ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Punta a una posizione che riceve il numero di interfacce di informazioni sul tipo fornite dall'oggetto.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Recupera il numero delle interfacce di informazioni sul tipo fornite da un oggetto (0 o 1).</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo per l'accesso a classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">Il metodo viene chiamato ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Identifica il membro.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Riservato per utilizzi futuri.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve essere IID_NULL.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Contesto di impostazioni locali all'interno del quale devono essere interpretati gli argomenti.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Flag che descrivono il contesto della chiamata.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Puntatore a una struttura contenente una matrice di argomenti, una matrice di DISPID per argomenti denominati e i conteggi del numero di elementi nelle matrici.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Puntatore alla posizione in cui deve essere archiviato il risultato.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Puntatore a una struttura contenente informazioni sull'eccezione.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Indice del primo argomento che contiene un errore.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Fornisce l'accesso a proprietà e metodi esposti da un oggetto.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo per l'accesso a classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::Invoke`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">Il metodo viene chiamato ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
          <source>The class of the type of exception to throw.</source>
          <target state="translated">Classe del tipo di eccezione da generare.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
          <source>Emits an instruction to throw an exception.</source>
          <target state="translated">Crea un'istruzione per generare un'eccezione.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
          <source>The following code sample demonstrates the contextual usage of <ph id="ph1">`ThrowException`</ph> to throw an exception inside the MSIL of a dynamic method.</source>
          <target state="translated">Esempio di codice seguente illustra l'uso di scelta rapida di <ph id="ph1">`ThrowException`</ph> per generare un'eccezione all'interno di codice MSIL di un metodo dinamico.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
          <source><ph id="ph1">&lt;paramref name="excType" /&gt;</ph> is not the <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> class or a derived class of <ph id="ph3">&lt;see cref="T:System.Exception" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="excType" /&gt;</ph> non è la classe <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> né una classe derivata di <ph id="ph3">&lt;see cref="T:System.Exception" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
          <source>The type does not have a default constructor.</source>
          <target state="translated">Il tipo non dispone di un costruttore predefinito.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
          <source><ph id="ph1">&lt;paramref name="excType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="excType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
          <source>The namespace to be used in evaluating locals and watches for the current active lexical scope</source>
          <target state="translated">Specifica lo spazio dei nomi da utilizzare nella valutazione delle variabili locali e controlla l'ambito lessicale attualmente attivo.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
          <source>Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.</source>
          <target state="translated">Specifica lo spazio dei nomi da utilizzare nella valutazione delle variabili locali e controlla l'ambito lessicale attualmente attivo.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, this method is not supported.</source>
          <target state="translated">Se l'oggetto corrente <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> è associato un <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> dell'oggetto, questo metodo non è supportato.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
          <source>Length of <ph id="ph1">&lt;paramref name="usingNamespace" /&gt;</ph> is zero.</source>
          <target state="translated">La lunghezza di <ph id="ph1">&lt;paramref name="usingNamespace" /&gt;</ph> è zero.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
          <source><ph id="ph1">&lt;paramref name="usingNamespace" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="usingNamespace" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
          <source>This <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> belongs to a <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">Questa classe <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> appartiene già a una classe <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>