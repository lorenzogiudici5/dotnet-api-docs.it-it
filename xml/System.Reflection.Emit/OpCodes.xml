<Type Name="OpCodes" FullName="System.Reflection.Emit.OpCodes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a136bc8fb48fe619f1be21928afbfcd9094d7463" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30474585" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class OpCodes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OpCodes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.OpCodes" />
  <TypeSignature Language="VB.NET" Value="Public Class OpCodes" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpCodes" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornisce le rappresentazioni dei campi delle istruzioni MSIL (Microsoft Intermediate Language) per la creazione da parte dei membri della classe <see cref="T:System.Reflection.Emit.ILGenerator" />, ad esempio il metodo <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per una descrizione dettagliata dei codici operativi membro, vedere la documentazione di Common Language Infrastructure (CLI), in particolare "Partition III: CIL Instruction Set" e "Partition II: metadati definizione e la semantica". La documentazione è disponibile online; vedere [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) (ECMA C# e standard di Common Language Infrastructure) in MSDN e [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) nel sito Web internazionale Ecma.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrata la costruzione di un metodo dinamico utilizzando <xref:System.Reflection.Emit.ILGenerator> per generare `OpCodes` in un <xref:System.Reflection.Emit.MethodBuilder>.  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Somma due valori e inserisce il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|58|aggiunta|Aggiunge due valori numerici, restituendo un nuovo valore numerico.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; `value1` viene aggiunto a `value2`.  
  
4.  Il risultato viene inserito nello stack.  
  
 Overflow non viene rilevato per operazioni su numeri interi (per gestire l'overflow appropriato, vedere <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).  
  
 Aggiunta di integer determina il passaggio al valore iniziale, anziché una saturazione. Ad esempio, supponendo di valori integer a 8 bit in cui `value1` è impostata su 255 e `value2` è impostato su 1, il risultato sarà 0 anziché 256.  
  
 Restituisce un overflow a virgola mobile `+inf` (`PositiveInfinity`) o `-inf` (`NegativeInfinity`).  
  
 Nella tabella seguente sono elencati i tipi di operando accettabili e i tipi di dati corrispondenti. Se è presente alcuna voce per una particolare combinazione di tipi (ad esempio, `int32` e `float`; `int32` e `int64`), è un non valido Microsoft Intermediate Language (MSIL) e genera un errore.  
  
|Operando|tipo di value1|tipo di value2|Tipo di risultato|  
|-------------|-----------------|-----------------|-----------------|  
|aggiunta|`int32`|`int32`|`int32`|  
|aggiunta|`int32`|`native int`|`native int`|  
|aggiunta|`int32`|`&`|`&`|  
|aggiunta|`int32`|`*`|`*`|  
|aggiunta|`int64`|`int64`|`int64`|  
|aggiunta|`native int`|`int32`|`native int`|  
|aggiunta|`native int`|`native int`|`native int`|  
|aggiunta|`native int`|`&`|`&`|  
|aggiunta|`native int`|`*`|`*`|  
|aggiunta|`F`|`F`|`F`|  
|aggiunta|`&`|`int32`|`&`|  
|aggiunta|`&`|`native int`|`&`|  
|aggiunta|`*`|`int32`|`*`|  
|aggiunta|`*`|`native int`|`*`|  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `add` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Somma due valori interi, esegue un controllo dell'overflow e inserisce il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|D6|add.ovf|Aggiunge due valori integer con segno con un controllo dell'overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; `value1` viene aggiunto a `value2` con un controllo dell'overflow.  
  
4.  Il risultato viene inserito nello stack.  
  
 <xref:System.OverflowException> viene generata se il risultato non è rappresentato nel tipo di risultato.  
  
 È possibile eseguire questa operazione sui valori signed integer. Per i valori a virgola mobile, usare <xref:System.Reflection.Emit.OpCodes.Add>.  
  
 Nella tabella seguente sono elencati i tipi di operando accettabili e i tipi di dati corrispondenti. Se è presente alcuna voce per una particolare combinazione di tipi (ad esempio, `int32` e `float`; `int32` e `int64`), è un'istruzione non valida di Microsoft Intermediate Language (MSIL) e genera un errore.  
  
|Operando|tipo di value1|tipo di value2|Tipo di risultato|  
|-------------|-----------------|-----------------|-----------------|  
|aggiunta|`int32`|`int32`|`int32`|  
|aggiunta|`int32`|`native int`|`native int`|  
|aggiunta|`int32`|`&`|`&`|  
|aggiunta|`int32`|`*`|`*`|  
|aggiunta|`int64`|`int64`|`int64`|  
|aggiunta|`native int`|`int32`|`native int`|  
|aggiunta|`native int`|`native int`|`native int`|  
|aggiunta|`native int`|`&`|`&`|  
|aggiunta|`native int`|`*`|`*`|  
|aggiunta|`F`|`F`|`F`|  
|aggiunta|`&`|`int32`|`&`|  
|aggiunta|`&`|`native int`|`&`|  
|aggiunta|`*`|`int32`|`*`|  
|aggiunta|`*`|`native int`|`*`|  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `add.ovf` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Somma due valori interi senza segno, esegue un controllo dell'overflow e inserisce il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|D7|add.ovf.un|Aggiunge due valori integer senza segno con un controllo dell'overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; `value1` viene aggiunto a `value2` con un controllo dell'overflow.  
  
4.  Il risultato viene inserito nello stack.  
  
 <xref:System.OverflowException> viene generata se il risultato non è rappresentato nel tipo di risultato.  
  
 È possibile eseguire questa operazione sui valori signed integer. Per i valori a virgola mobile, usare <xref:System.Reflection.Emit.OpCodes.Add>.  
  
 Nella tabella seguente sono elencati i tipi di operando accettabili e i tipi di dati corrispondenti. Se è presente alcuna voce per una particolare combinazione di tipi (ad esempio, `int32` e `float`; `int32` e `int64`), è un'istruzione non valida di Microsoft Intermediate Language (MSIL) e genera un errore.  
  
|Operando|tipo di value1|tipo di value2|Tipo di risultato|  
|-------------|-----------------|-----------------|-----------------|  
|aggiunta|`int32`|`int32`|`int32`|  
|aggiunta|`int32`|`native int`|`native int`|  
|aggiunta|`int32`|`&`|`&`|  
|aggiunta|`int32`|`*`|`*`|  
|aggiunta|`int64`|`int64`|`int64`|  
|aggiunta|`native int`|`int32`|`native int`|  
|aggiunta|`native int`|`native int`|`native int`|  
|aggiunta|`native int`|`&`|`&`|  
|aggiunta|`native int`|`*`|`*`|  
|aggiunta|`F`|`F`|`F`|  
|aggiunta|`&`|`int32`|`&`|  
|aggiunta|`&`|`native int`|`&`|  
|aggiunta|`*`|`int32`|`*`|  
|aggiunta|`*`|`native int`|`*`|  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `add.ovf.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode And;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode And" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.And" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly And As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode And;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Calcola l'operatore AND bit per bit di due valori e inserisce il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Istruzione|Descrizione|  
|------------|-----------------|-----------------|  
|5F|e|Determina l'AND bit per bit di due valori integer.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value1` e `value2` vengono estratti dallo stack; viene calcolato l'AND bit per bit dei due valori.  
  
4.  Il risultato viene inserito nello stack.  
  
 Il `and` istruzione calcola l'AND bit per bit dei primi due valori nello stack e lascia il risultato nello stack.  
  
 `And` è un'operazione specifica del numero intero.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `and` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arglist">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Arglist;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Arglist" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Arglist" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Arglist As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Arglist;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce un puntatore non gestito all'elenco di argomenti del metodo corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 00|arglist|Restituisce un handle di elenco di argomenti per il metodo corrente.|  
  
 Sullo stack di valutazione viene eseguito da questa operazione.  
  
 Il `arglist` istruzione restituisce un handle opaco (un puntatore non gestito, di tipo `native int`) che rappresenta l'elenco di argomenti del metodo corrente. Questo handle è valido solo per la durata del metodo corrente. È tuttavia possibile passare l'handle ad altri metodi, purché sia il metodo corrente del thread di controllo. È possibile eseguire solo il `arglist` istruzione all'interno di un metodo che accetta un numero variabile di argomenti.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `arglist` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione se due valori sono uguali.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|3B < `int32` >|beq `target`|Branch all'istruzione di destinazione all'offset `target` se i due valori sono uguali.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è uguale a `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `beq` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è uguale a `value2`. L'effetto è equivale all'esecuzione di un `ceq` istruzione seguita da un `brtrue` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 I tipi di operando accettabili sono indicati di seguito:  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi.  
  
 Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione (tali trasferimenti sono limitati gravi e deve utilizzare il <xref:System.Reflection.Emit.OpCodes.Leave> istruzione alternativa).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `beq` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione (forma breve) se due valori sono uguali.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|2E < `int8` >|beq. s `target`|Branch all'istruzione di destinazione all'offset `target` se uguale, forma breve|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è uguale a `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `beq.s` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è uguale a `value2`. L'effetto è equivale all'esecuzione di un `ceq` istruzione seguita da un `brtrue` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 1 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 I tipi di operando accettabili sono indicati di seguito:  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi.  
  
 Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione (tali trasferimenti sono limitati gravi e deve utilizzare il <xref:System.Reflection.Emit.OpCodes.Leave> istruzione alternativa).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `beq.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione se il primo valore è maggiore o uguale al secondo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|3C `<int32>`|bge `target`|Branch all'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è maggiore o uguale al secondo.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è maggiore o uguale a `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `bge` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è maggiore o uguale a `value2`. L'effetto è identico all'esecuzione di un `clt.un` istruzione seguita da un `brfalse` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `bge` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è maggiore o uguale al secondo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|2F `<int8>`|bge. s `target`|Branch all'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è maggiore o uguale al secondo, forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è maggiore o uguale a `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `bge.s` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è maggiore o uguale a `value2`. L'effetto è identico all'esecuzione di un `clt.un` istruzione seguita da un `brfalse` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 1 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `bge.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione se il primo valore è maggiore del secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|41 `<int32>`|bge. un `target`|Branch all'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è maggiore o uguale al secondo (valori senza segno).|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è maggiore o uguale a `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `bge.un` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è maggiore o uguale a `value2`, se confrontata mediante l'intero senza segno o valori float non ordinati. L'effetto è identico all'esecuzione di un `clt` istruzione seguita da un `brfalse` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `bge.un` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è maggiore del secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|34 < `int8` >|bge.un.s `target`|Branch all'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è maggiore o uguale al secondo (valori senza segno), la forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è maggiore o uguale a `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `bge.un.s` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è maggiore o uguale a `value2`, se confrontata mediante l'intero senza segno o valori float non ordinati. L'effetto è identico all'esecuzione di un `clt` istruzione seguita da un `brfalse` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 1 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `bge.un.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione se il primo valore è maggiore del secondo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|3D < `int32` >|bgt `target`|Branch all'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è maggiore del secondo valore.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è maggiore di `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `bgt` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è maggiore di `value2`. L'effetto è identico all'esecuzione di un `cgt` istruzione seguita da un `brtrue` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `bgt` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è maggiore del secondo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|30 < `int8` >|bgt.s `target`|Branch all'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è maggiore del secondo valore, la forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è maggiore di `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `bgt.s` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è maggiore di `value2`. L'effetto è identico all'esecuzione di un `cgt` istruzione seguita da un `brtrue` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 1 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `bgt.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione se il primo valore è maggiore del secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|42 < `int32` >|bgt.un `target`|Branch all'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è maggiore del secondo valore (valori senza segno).|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è maggiore di `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `bgt.un` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è maggiore di `value2`, se confrontata mediante l'intero senza segno o valori float non ordinati. L'effetto è identico all'esecuzione di un `cgt.un` istruzione seguita da un `brtrue` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `bgt.un` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è maggiore del secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|35 < `int8` >|bgt.un.s `target`|Branch all'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è maggiore del secondo valore (valori senza segno), la forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è maggiore di `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `bgt.un.s` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è maggiore di `value2`, se confrontata mediante l'intero senza segno o valori float non ordinati. L'effetto è identico all'esecuzione di un `cgt.un` istruzione seguita da un `brtrue` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 1 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `bgt.un.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione se il primo valore è minore o uguale al secondo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|3E `<int32>`|Disattiva `target`|Branch all'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è minore o uguale al secondo.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è minore o uguale a `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `ble` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è minore o uguale a `value2`. L'effetto è identico all'esecuzione di un `cgt` istruzione (`cgt.un` per valori di float) seguita da un `brfalse` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ble` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è minore o uguale al secondo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|31 `<int8>`|ble. s `target`|Branch all'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è minore o uguale al secondo, forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è minore o uguale a `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `ble.s` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è minore o uguale a `value2`. L'effetto è identico all'esecuzione di un `cgt` istruzione (`cgt.un` per valori di float) seguita da un`brfalse` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 1 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ble.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione se il primo valore è minore o uguale al secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|43 `<int32>`|ble. un `target`|Branch all'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è minore o uguale al secondo (valori senza segno).|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è minore o uguale a `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `ble.un` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è minore o uguale a `value2`, se confrontata mediante l'intero senza segno o valori float non ordinati. L'effetto è identico all'esecuzione di un `cgt.un` istruzione (`cgt` per valori di float) seguita da un `brfalse` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ble.un` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è minore o uguale al secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|36 `<int8>`|ble.un.s `target`|Branch all'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è minore o uguale al secondo (valori senza segno), la forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è minore o uguale a `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `ble.un.s` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è minore o uguale a `value2`, se confrontata mediante l'intero senza segno o valori float non ordinati. L'effetto è identico all'esecuzione di un `cgt.un` istruzione (`cgt` per valori di float) seguita da un `brfalse` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 1 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ble.un.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione se il primo valore è minore del secondo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|3F < `int32` >|blt `target`|Branch all'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è minore del secondo valore.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è minore di `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `blt` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è minore o uguale a `value2`. L'effetto è identico all'esecuzione di un `clt` istruzione seguita da un `brtrue` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `blt` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è minore del secondo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|32 < `int8` >|blt. s `target`|Ramo per l'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è minore del secondo, forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è minore di `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `blt.s` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è minore di `value2`. L'effetto è identico all'esecuzione di un `clt` istruzione seguita da un `brtrue` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 1 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `blt.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione se il primo valore è minore del secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|44 < `int32` >|blt.un `target`|Branch all'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è minore del secondo valore (valori senza segno).|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è minore di `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `blt.un` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è minore di `value2`, se confrontata mediante l'intero senza segno o valori float non ordinati. L'effetto è identico all'esecuzione di un `clt.un` istruzione seguita da un `brtrue` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `blt.un` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è minore del secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|37 < `int8` >|blt.un.s `target`|Branch all'istruzione di destinazione in corrispondenza dell'offset specificato se il primo valore è minore del secondo valore (valori senza segno), la forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` è minore di `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `blt.un` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` è minore di `value2`, se confrontata mediante l'intero senza segno o valori float non ordinati. L'effetto è identico all'esecuzione di un `clt.un` istruzione seguita da un `brtrue` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `blt.un.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione quando due valori interi senza segno o valori float non ordinati non sono uguali.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|40 < `int32` >|bne. un `target`|Ramo di destinazione istruzione in corrispondenza dell'offset specificato, se due valori unsigned integer non sono uguali (valori senza segno).|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` non è uguale a `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `bne.un` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` non è uguale a `value2`, se confrontata mediante l'intero senza segno o valori float non ordinati. L'effetto è identico all'esecuzione di un `ceq` istruzione seguita da un `brfalse` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `bne.un` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione (forma breve) quando due valori interi senza segno o valori float non ordinati non sono uguali.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|33 < `int8` >|bne.un.s `target`|Ramo di destinazione dell'istruzione in corrispondenza dell'offset specificato, se due valori unsigned integer non sono uguali (valori senza segno), forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; se `value1` non è uguale a `value2`, viene eseguita l'operazione di diramazione.  
  
 Il `bne.un` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value1` non è uguale a `value2`, se confrontata mediante l'intero senza segno o valori float non ordinati. L'effetto è identico all'esecuzione di un `ceq` istruzione seguita da un `brfalse` ramo all'istruzione di destinazione specifico. L'istruzione di destinazione è rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `bne.un.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Box">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Box;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Box" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Box" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Box As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Box;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte un tipo di valore in un riferimento a un oggetto di tipo <see langword="O" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|8C < `T` >|box `valTypeToken`|Convertire un tipo di valore (del tipo specificato `valTypeToken`) a un oggetto true.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un tipo di valore viene inserito nello stack.  
  
2.  Il tipo di valore viene estratto dallo stack; il `box` viene eseguita l'operazione.  
  
3.  Un riferimento all'oggetto per il tipo di valore "boxed" risultante viene inserito nello stack.  
  
 Un tipo di valore dispone di due rappresentazioni separate all'interno di Common Language Infrastructure (CLI):  
  
-   'Non elaborato' modulo quando un tipo di valore incorporato all'interno di un altro oggetto o nello stack.  
  
-   Un modulo 'boxed', in cui i dati nel tipo di valore viene inseriti (boxed) in un oggetto affinché possano esistere come entità indipendenti.  
  
 Il `box` istruzione converte il tipo 'non elaborati' valore unboxed in un riferimento all'oggetto (tipo `O`). Questa operazione viene eseguita creando un nuovo oggetto e copiando i dati dal tipo di valore nell'oggetto appena allocato. `valTypeToken` è un token di metadati che indica il tipo del tipo di valore nello stack.  
  
 <xref:System.OutOfMemoryException> viene generata se la memoria è insufficiente per soddisfare la richiesta.  
  
 <xref:System.TypeLoadException> viene generata se la classe non può essere trovata. In genere, questo viene rilevato quando Microsoft Intermediate Language (MSIL) viene convertito in codice nativo, anziché in fase di esecuzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `box` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione in modo incondizionato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|38 < `int32` >|Brasile `target`|Rami di un'istruzione di destinazione in corrispondenza dell'offset specificato.|  
  
 Sullo stack di valutazione viene eseguito da questa operazione.  
  
 Il `br` istruzione trasferisce il controllo a un'istruzione di destinazione. L'istruzione di destinazione è rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `br` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione in modo incondizionato (forma breve).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|2B < `int8` >|br.s `target`|Rami di un'istruzione di destinazione in corrispondenza dell'offset specificato, forma breve.|  
  
 Sullo stack di valutazione viene eseguito da questa operazione.  
  
 Il `br.s` istruzione trasferisce il controllo a un'istruzione di destinazione. L'istruzione di destinazione è rappresentata come offset con segno a 1 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `br.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Break;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Break" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Break" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Break As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Break;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Segnala a Common Language Infrastructure (CLI) di indicare al debugger che è stato raggiunto un punto di interruzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|01|break|indica al debugger che è stato raggiunto un punto di interruzione.|  
  
 Sullo stack di valutazione viene eseguito da questa operazione.  
  
 Il `break` l'istruzione è in fase di debug. Segnala l'interfaccia CLI di indicare al debugger che è stato raggiunto un punto di interruzione. Non ha alcun altro effetto sullo stato dell'interprete.  
  
 Il `break` istruzione è il più piccolo possibile un'istruzione dimensioni l'applicazione di patch con un punto di interruzione e la generazione di interferire con il codice circostante.  
  
 Il `break` istruzione può intercettare a un debugger, non eseguire alcuna operazione o generare un'eccezione di sicurezza. Il comportamento esatto è definito dall'implementazione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `break` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione se <paramref name="value" /> è <see langword="false" />, un riferimento null (<see langword="Nothing" /> in Visual Basic) oppure zero.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|39 < `int32` >|brfalse `target`<br /><br /> rispettivi brnull `target`<br /><br /> brzero `target`|Esegue la diramazione in un'istruzione di destinazione in corrispondenza dell'offset specificato se `false`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack da un'operazione precedente.  
  
2.  `value` viene estratto dallo stack; Se `value` è `false`, creare un ramo a `target`.  
  
 Il `brfalse` istruzione (e i rispettivi alias `brnull` e `brzero`) trasferisce il controllo all'istruzione di destinazione specificato se `value` (di tipo `int32`, `int64`, il riferimento all'oggetto `O`gestita puntatore `&`, puntatore temporaneo `*`, `native int`) è uguale a zero (`false`). Se `value` è diverso da zero (`true`) l'esecuzione continua con l'istruzione successiva.  
  
 L'istruzione di destinazione è rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `brfalse` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione se <paramref name="value" /> è <see langword="false" />, un riferimento null oppure zero.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|2C <`int8` >|brfalse. s `target`<br /><br /> brnull.s `target`<br /><br /> brzero.s `target`|Esegue la diramazione in un'istruzione di destinazione in corrispondenza dell'offset specificato se `false`, forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack da un'operazione precedente.  
  
2.  `value` viene estratto dallo stack; Se `value` è `false`, creare un ramo a `target`.  
  
 Il `brfalse.s` istruzione (e i rispettivi alias `brnull` e `brzero`) trasferisce il controllo all'istruzione di destinazione specificato se `value` (di tipo `int32`, `int64`, il riferimento all'oggetto `O`gestita puntatore `&`, puntatore temporaneo `*`, `native int`) è uguale a zero (`false`). Se `value` è diverso da zero (`true`) l'esecuzione continua con l'istruzione successiva.  
  
 L'istruzione di destinazione è rappresentata come offset con segno a 1 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `brfalse.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione se <paramref name="value" /> è <see langword="true" />, diverso da null o da zero.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|3A < `int32` >|brtrue `target`<br /><br /> brinst, che rappresenta `target`|Ramo in un'istruzione di destinazione in corrispondenza dell'offset specificato, se diverso da zero (`true`).|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack da un'operazione precedente.  
  
2.  `value` viene estratto dallo stack; Se `value` è `true`, creare un ramo a `target`.  
  
 Il `brtrue` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value` (tipo `native int`) è diverso da zero (`true`). Se `value` è zero (`false`) l'esecuzione continua con l'istruzione successiva.  
  
 Se `value` è un riferimento all'oggetto (tipo `O`) quindi `brinst` (un alias per `brtrue`) trasferisce il controllo se rappresenta un'istanza di un oggetto (ad esempio, se non è il riferimento di oggetto null; vedere <xref:System.Reflection.Emit.OpCodes.Ldnull>).  
  
 L'istruzione di destinazione è rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `brtrue` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo a un'istruzione di destinazione (forma breve), se <paramref name="value" /> è <see langword="true" />, diverso da null oppure diverso da zero.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|2D < `int8` >|brtrue.s `target`<br /><br /> brinst.s `target`|Ramo in un'istruzione di destinazione in corrispondenza dell'offset specificato, se diverso da zero (`true`), forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack da un'operazione precedente.  
  
2.  `value` viene estratto dallo stack; Se `value` è `true`, creare un ramo a `target`.  
  
 Il `brtrue.s` istruzione trasferisce il controllo all'istruzione di destinazione specificato se `value` (tipo `native int`) è diverso da zero (`true`). Se `value` è zero (`false`) l'esecuzione continua con l'istruzione successiva.  
  
 Se `value` è un riferimento all'oggetto (tipo `O`) quindi `brinst` (un alias per `brtrue`) trasferisce il controllo se rappresenta un'istanza di un oggetto (ad esempio, se non è il riferimento di oggetto null; vedere <xref:System.Reflection.Emit.OpCodes.Ldnull>).  
  
 L'istruzione di destinazione è rappresentata come offset con segno a 1 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi. Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `brtrue.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Call;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Call" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Call" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Call As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Call;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Chiama il metodo indicato dal descrittore di metodo passato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|28 < `T` >|Chiamata `methodDesc`|Chiamare il metodo descritto da `methodDesc`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Gli argomenti del metodo `arg1` tramite `argN` vengono inseriti nello stack.  
  
2.  Gli argomenti del metodo `arg1` tramite `argN` vengono estratti dallo stack; viene eseguita la chiamata al metodo con questi argomenti e il controllo viene trasferito al metodo a cui fa riferimento il descrittore del metodo. Al termine, un valore restituito è generato dal metodo chiamato e inviato al chiamante.  
  
3.  Il valore restituito viene inserito nello stack.  
  
 Il `call` istruzione chiama il metodo indicato dal descrittore di metodo passato con l'istruzione. Descrittore del metodo è un token di metadati che indica il metodo da chiamare e il numero, tipo e ordine degli argomenti che sono stati inseriti nello stack deve essere passato al metodo, nonché la convenzione di chiamata da utilizzare. Il `call` istruzione può essere immediatamente preceduto da un `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) per specificare che lo stato del metodo corrente deve essere rilasciata prima di trasferire il controllo del prefisso. Se la chiamata trasferisce il controllo a un metodo di attendibilità superiore rispetto al metodo di origine, lo stack frame non viene rilasciato. Al contrario, l'esecuzione continua automaticamente come se il `tail` non è stato specificato. Il token di metadati contiene informazioni sufficienti per determinare se la chiamata di un metodo statico, un metodo di istanza, un metodo virtuale o una funzione globale. In tutti questi casi l'indirizzo di destinazione viene determinato interamente dal descrittore del metodo (confrontare questa operazione con il <xref:System.Reflection.Emit.OpCodes.Callvirt> istruzione per la chiamata di metodi virtuali, in cui l'indirizzo di destinazione dipende inoltre dal tipo di runtime dell'istanza riferimento inserito prima di <xref:System.Reflection.Emit.OpCodes.Callvirt>).  
  
 Gli argomenti vengono inseriti nello stack in ordine da sinistra a destra. Il primo argomento, viene calcolato e inserito in stack, quindi il secondo argomento e il terzo, fino a quando non sono tutti gli argomenti necessari sopra lo stack in ordine decrescente. Esistono tre importanti casi speciali:  
  
 1. Le chiamate a un'istanza (o virtuali) metodo deve inserire il riferimento all'istanza prima di qualsiasi argomento visibile all'utente. Il riferimento all'istanza non deve essere un riferimento null. La firma contenuta nei metadati non contiene una voce nell'elenco di parametri per il `this` puntatore; utilizza invece un bit per indicare se il metodo richiede il passaggio di `this` puntatore.  
  
 2. È possibile chiamare un metodo virtuale utilizzando `call` (anziché `callvirt`); ciò indica che il metodo deve essere risolto utilizzando la classe specificata dal metodo, piuttosto che come specificato in modo dinamico dall'oggetto richiamato.  
  
 3. Si noti che un delegato `Invoke` metodo può essere chiamato con il `call` o `callvirt` (istruzione).  
  
 <xref:System.Security.SecurityException> può essere generata se la protezione del sistema non concede al chiamante di accedere al metodo chiamato. Il controllo di sicurezza può verificarsi quando le istruzioni Microsoft Intermediate Language (MSIL) vengono convertite in codice nativo piuttosto che in fase di esecuzione.  
  
> [!NOTE]
>  Quando si chiamano metodi System. Object sui tipi di valore, è consigliabile utilizzare il `constrained` Anteponi il `callvirt` istruzione invece di generare un `call` istruzione. Questo elimina la necessità di generare un IL diverso a seconda se il tipo di valore esegue l'override del metodo, evitare un potenziale problema di controllo delle versioni. È consigliabile utilizzare il `constrained` prefisso quando si chiamano metodi di interfaccia sui tipi di valore, poiché il metodo con tipo di valore che implementa il metodo di interfaccia può essere modificato utilizzando un `MethodImpl`. Questi problemi sono descritti più dettagliatamente il <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload è possibile utilizzare il `call` opcode:  
  
-   ILGenerator (OpCode, MethodInfo)  
  
-   ILGenerator.EmitCall (OpCode, MethodInfo, Type[])  
  
> [!NOTE]
>  Il <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> metodo è fornito per `varargs` chiamate. Utilizzare il <xref:System.Reflection.Emit.ILGenerator.Emit%2A> metodo per le chiamate normali.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calli">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Calli;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Calli" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Calli" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Calli As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Calli;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Chiama il metodo indicato nello stack di valutazione, come un puntatore a un punto di ingresso, con gli argomenti descritti da una convenzione di chiamata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|29 < `T` >|calli `callSiteDescr`|Chiama il metodo a cui puntato con gli argomenti descritti dalla convenzione di chiamata.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Gli argomenti del metodo `arg1` tramite `argN` vengono inseriti nello stack.  
  
2.  Il puntatore di ingresso del metodo viene inserito nello stack.  
  
3.  Gli argomenti del metodo `arg1` tramite `argN` e il puntatore di ingresso del metodo vengono estratti dallo stack; viene eseguita la chiamata al metodo. Al termine, un valore restituito è generato dal metodo chiamato e inviato al chiamante.  
  
4.  Il valore restituito viene inserito nello stack.  
  
 Il `calli` istruzione chiama il puntatore di ingresso del metodo con gli argomenti `arg1` tramite `argN`. I tipi di questi argomenti sono descritti dalla convenzione di chiamata specifica (`callSiteDesc`). Il `calli` istruzione può essere immediatamente preceduto da un `tail` prefisso (<xref:System.Reflection.Emit.OpCodes.Tailcall>) per specificare che lo stato del metodo corrente deve essere rilasciata prima di trasferire il controllo. Se la chiamata trasferisce il controllo a un metodo di attendibilità superiore rispetto al metodo di origine, lo stack frame non essere rilasciato. al contrario, l'esecuzione continua automaticamente come se il `tail` non è stato specificato.  
  
 Si presuppone che il puntatore di ingresso del metodo specifico puntatore a codice nativo (il computer di destinazione) che può essere chiamato in modo legittimo con gli argomenti descritti dalla convenzione di chiamata (un token di metadati per una firma autonoma). Tale puntatore può essere creata usando il <xref:System.Reflection.Emit.OpCodes.Ldftn> o <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> istruzioni, oppure passato dal codice nativo.  
  
 La convenzione di chiamata non è selezionata in modo dinamico, pertanto il codice che utilizza un `calli` istruzione non funziona correttamente se la destinazione non utilizza effettivamente la convenzione di chiamata specificati.  
  
 Gli argomenti vengono inseriti nello stack in ordine da sinistra a destra. Il primo argomento, viene calcolato e inserito in stack, quindi il secondo argomento e il terzo, fino a quando non sono tutti gli argomenti necessari sopra lo stack in ordine decrescente. La sequenza di codice di compilazione di un argomento per un'istanza o un metodo virtuale deve inserire il riferimento all'istanza (che non deve essere un riferimento null) prima di qualsiasi argomento visibile all'utente.  
  
 <xref:System.Security.SecurityException> può essere generata se la protezione del sistema non concede al chiamante di accedere al metodo chiamato. Il controllo di sicurezza può verificarsi quando le istruzioni Microsoft Intermediate Language (MSIL) vengono convertite in codice nativo piuttosto che in fase di esecuzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> metodi possono essere utilizzati per eseguire un `calli` istruzione nello stack. Si noti che `calli` deve essere chiamato tramite i metodi che seguono anziché utilizzando il <xref:System.Reflection.Emit.ILGenerator.Emit%2A> classe per collocare l'istruzione direttamente sullo stack.  
  
-   ILGenerator. EmitCalli (Opcode, CallingConventions, Type, Type [], Type[]) per chiamate che utilizzano una convenzione di chiamata gestita.  
  
-   ILGenerator. EmitCalli (Opcode, CallingConvention, Type, Type[]) per chiamate che utilizzano una convenzione di chiamata non gestita.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callvirt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Callvirt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Callvirt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Callvirt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Callvirt;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Chiama un metodo ad associazione tardiva su un oggetto, inserendo il valore restituito nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|6F < `T` >|callvirt `method`|Chiama un metodo specifico associato `obj`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto `obj` viene inserito nello stack.  
  
2.  Gli argomenti del metodo `arg1` tramite `argN` vengono inseriti nello stack.  
  
3.  Gli argomenti del metodo `arg1` tramite `argN` e il riferimento all'oggetto `obj` vengono estratti dallo stack; viene eseguita la chiamata al metodo con questi argomenti e il controllo viene trasferito al metodo nel `obj` a cui fa riferimento il metodo token di metadati. Al termine, un valore restituito è generato dal metodo chiamato e inviato al chiamante.  
  
4.  Il valore restituito viene inserito nello stack.  
  
 Il `callvirt` istruzione chiama un metodo ad associazione tardiva su un oggetto. Ovvero, il metodo viene scelto in base al tipo di runtime di `obj` anziché la classe in fase di compilazione visibile nel puntatore al metodo. `Callvirt` Consente di chiamare entrambe virtuale metodi di istanza. Il `callvirt` istruzione può essere immediatamente preceduto da un `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) per specificare che lo stack frame corrente deve essere rilasciato prima di trasferire il controllo. Se la chiamata trasferisce il controllo a un metodo di attendibilità superiore rispetto al metodo originale, lo stack frame non essere rilasciato.  
  
 Il token di metadati del metodo fornisce il nome, una classe e firma del metodo da chiamare. La classe associata `obj` è la classe di cui è un'istanza. Se la classe definisce un metodo non statico che corrisponde al nome del metodo indicato e firma, questo metodo viene chiamato. In caso contrario, tutte le classi nella catena di classe di base di questa classe vengono controllate nell'ordine. È un errore se non è stato trovato alcun metodo.  
  
 `Callvirt` estrae l'oggetto e gli argomenti associati dallo stack di valutazione prima di chiamare il metodo. Se il metodo ha un valore restituito, viene inserito nello stack al completamento del metodo. Sul lato del chiamato, il `obj` parametro avviene come argomento 0, `arg1` come argomento 1 e così via.  
  
 Gli argomenti vengono inseriti nello stack in ordine da sinistra a destra. Il primo argomento, viene calcolato e inserito in stack, quindi il secondo argomento e il terzo, fino a quando non sono tutti gli argomenti necessari sopra lo stack in ordine decrescente. Il riferimento all'istanza `obj` (sempre necessario per `callvirt`) deve essere inserito prima di qualsiasi argomento visibile all'utente. La firma (contenuta nel token di metadati) non debba contenere una voce nell'elenco di parametri per questa puntatore.  
  
 Si noti che un metodo virtuale può essere chiamato anche utilizzando la <xref:System.Reflection.Emit.OpCodes.Call> istruzione.  
  
 <xref:System.MissingMethodException> viene generata un'eccezione se non è stato possibile trovare un metodo non statico con il nome specificato e la firma nella classe associata a `obj` o le relative classi base. In genere, questo viene rilevato quando le istruzioni Microsoft Intermediate Language (MSIL) vengono convertite in codice nativo, anziché in fase di esecuzione.  
  
 <xref:System.NullReferenceException> viene generata se obj è null.  
  
 <xref:System.Security.SecurityException> viene generata se la protezione del sistema non concede al chiamante di accedere al metodo chiamato. Il controllo di sicurezza può verificarsi quando il codice CIL viene convertito in codice nativo piuttosto che in fase di esecuzione.  
  
> [!NOTE]
>  Quando si chiamano metodi System. Object sui tipi di valore, è consigliabile utilizzare il `constrained` Anteponi il `callvirt` istruzione. Questo elimina la necessità di generare un IL diverso a seconda se il tipo di valore esegue l'override del metodo, evitare un potenziale problema di controllo delle versioni. È consigliabile utilizzare il `constrained` prefisso quando si chiamano metodi di interfaccia sui tipi di valore, poiché il metodo con tipo di valore che implementa il metodo di interfaccia può essere modificato utilizzando un `MethodImpl`. Questi problemi sono descritti più dettagliatamente il <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `callvirt` opcode:  
  
-   ILGenerator (OpCode, MethodInfo)  
  
-   ILGenerator.EmitCall (OpCode, MethodInfo, Type[])  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Castclass">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Castclass;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Castclass" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Castclass" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Castclass As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Castclass;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tenta di eseguire il cast di un oggetto passato per riferimento alla classe specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|74 < `T` >|castclass `class`|Esegue il cast di un oggetto in un nuovo oggetto di tipo `class`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Riferimento a un oggetto viene inserito nello stack.  
  
2.  Il riferimento all'oggetto viene estratto dallo stack; l'oggetto di riferimento viene eseguito il cast dell'oggetto specificato `class`.  
  
3.  In caso contrario, nuovo riferimento a un oggetto viene inserito nello stack.  
  
 Il `castclass` istruzione tenta di eseguire il cast il riferimento all'oggetto (tipo `O`) nella parte superiore dello stack di in una classe specificata. La nuova classe viene specificata un token di metadati che indica la classe desiderata. Se la classe dell'oggetto all'inizio dello stack non implementa la nuova classe (presupponendo che la nuova classe è un'interfaccia) e non è una classe derivata della nuova classe di un oggetto <xref:System.InvalidCastException> viene generata un'eccezione. Se il riferimento all'oggetto è un riferimento null, `castclass` ha esito positivo e restituisce il nuovo oggetto come un riferimento null.  
  
 <xref:System.InvalidCastException> viene generata se obj non è possibile eseguire il cast alla classe.  
  
 <xref:System.TypeLoadException> viene generata se non è possibile trovare la classe. In genere, questo viene rilevato quando un'istruzione di Microsoft Intermediate Language (MSIL) viene convertita in codice nativo piuttosto che in fase di esecuzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `castclass` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ceq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ceq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ceq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ceq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ceq;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Confronta due valori. Se tali valori sono uguali, nello stack di valutazione viene inserito il valore intero 1 <see langword="(int32" />); in caso contrario, viene inserito 0 (<see langword="int32" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 01|ceq|Inserisce 1 se `value1` è uguale a `value2`; in caso contrario inserisce 0.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; `value1` viene confrontato con `value2`.  
  
4.  Se `value1` è uguale a `value2`, 1 viene inserito nello stack; in caso contrario 0 viene inserito nello stack.  
  
 Il `ceq` istruzione confronta `value1` e `value2`. Se `value1` è uguale a `value2`, quindi 1 (di tipo `int32`) viene inserito nello stack. In caso contrario, 0 (di tipo `int32`) viene inserito nello stack.  
  
 Per un numero a virgola mobile, `ceq` restituirà 0 se i numeri non sono ordinati (uno o entrambi sono NaN). I valori infiniti sono uguali a se stessi.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ceq` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Confronta due valori. Se il primo valore è maggiore del secondo, nello stack di valutazione viene inserito il valore intero 1 <see langword="(int32" />); in caso contrario, viene inserito 0 (<see langword="int32" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 02|cgt|Inserisce 1 se `value1` è maggiore di `value2`; in caso contrario inserisce 0.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; `cgt` verifica se `value1` è maggiore di `value2`.  
  
4.  Se `value1` è maggiore di `value2`, 1 viene inserito nello stack; in caso contrario 0 viene inserito nello stack.  
  
 Il `cgt` istruzione confronta `value1` e `value2`. Se `value1` è rigorosamente maggiore `value2`, quindi un `int32` valore 1 viene inserito nello stack. In caso contrario, un `int32` il valore 0 viene inserito nello stack.  
  
-   Per i numeri a virgola mobile, `cgt` restituisce 0 se i numeri sono ordinati (ovvero, se uno o entrambi gli argomenti sono NaN).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `cgt` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Confronta due valori senza segno o non ordinati. Se il primo valore è maggiore del secondo, nello stack di valutazione viene inserito il valore intero 1 <see langword="(int32" />); in caso contrario, viene inserito 0 (<see langword="int32" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 03|cgt.un|Inserisce 1 se `value1` è maggiore di `value2`; in caso contrario inserisce 0 (valori senza segno).|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; `cgt.un` verifica se `value1` è maggiore di `value2`.  
  
4.  Se `value1` è maggiore di `value2`, 1 viene inserito nello stack; in caso contrario 0 viene inserito nello stack.  
  
 Un `int32` valore 1 viene inserito nello stack, se una delle seguenti è `true` :  
  
 Per i numeri a virgola mobile, `value1` non è ordinato rispetto a `value2`.  
  
 Per i valori integer `value1` è rigorosamente maggiore `value2` se considerati come numeri senza segno.  
  
 In caso contrario un `int32` il valore 0 viene inserito nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `cgt.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ckfinite">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ckfinite;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ckfinite" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ckfinite As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ckfinite;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Genera un'eccezione <see cref="T:System.ArithmeticException" /> se il valore non è un numero finito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|C3|ckfinite|generare <xref:System.ArithmeticException> se il valore non è un numero finito.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack...  
  
2.  `value` viene estratto dallo stack e `ckfinite` istruzione viene eseguita su di esso.  
  
3.  `value` viene nuovamente inserito nello stack se viene generata alcuna eccezione.  
  
 Il `ckfinite instruction` genera <xref:System.ArithmeticException> se `value` (un numero a virgola mobile) è un valore "non è un numero" (NaN) o un `+-` valore infinito. `Ckfinite` lascia il valore nello stack, se viene generata alcuna eccezione. Esecuzione non è specificata se `value` non è un numero a virgola mobile.  
  
 <xref:System.ArithmeticException> viene generata se `value` non è un numero di 'normal'.  
  
 Si noti che una particolare eccezione o una classe derivata di <xref:System.ArithmeticException> potrebbe essere più appropriato, passando il valore non corretto per il gestore di eccezioni.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ckfinite` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Confronta due valori. Se il primo valore è inferiore al secondo, nello stack di valutazione viene inserito il valore intero 1 <see langword="(int32" />); in caso contrario, viene inserito 0 (<see langword="int32" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 04|clt|Inserisce 1 se `value1` è minore di `value2`; in caso contrario inserisce 0.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è: `value1` viene inserito nello stack.  
  
1.  `value2` viene inserito nello stack.  
  
2.  `value2` e `value1` vengono estratti dallo stack; `clt` verifica se `value1` è minore di `value2`.  
  
3.  Se `value1` è minore di `value2`, 1 viene inserito nello stack; in caso contrario 0 viene inserito nello stack.  
  
 Il `clt` istruzione confronta `value1` e `value2`. Se `value1` è rigorosamente minore di `value2`, quindi un `int32` valore 1 viene inserito nello stack. In caso contrario, un `int32` il valore 0 viene inserito nello stack.  
  
-   Per i numeri a virgola mobile, `clt` restituisce 0 se i numeri sono ordinati (ovvero, se uno o entrambi gli argomenti sono NaN).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `clt` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Confronta i due valori senza segno o non ordinati <paramref name="value1" /> e <paramref name="value2" />. Se <paramref name="value1" /> è minore di <paramref name="value2" />, nello stack di valutazione viene inserito il valore intero 1 <see langword="(int32" />); in caso contrario, viene inserito 0 (<see langword="int32" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 05|clt.un|Inserisce 1 se `value1` è minore di `value2`; in caso contrario inserisce 0 (valori senza segno).|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; `clt.un` verifica se `value1` è minore di `value2`.  
  
4.  Se `value1` è minore di `value2`, 1 viene inserito nello stack; in caso contrario 0 viene inserito nello stack.  
  
 Il `clt.un` istruzione confronta `value1` e `value2`. Un `int32` valore 1 viene inserito nello stack in presenza di una delle operazioni seguenti:  
  
-   `value1` è minore `value2` (come per `clt`).  
  
-   Per i numeri a virgola mobile, `value1` non è ordinato rispetto a `value2`.  
  
-   Per i valori integer `value1` è rigorosamente minore di `value2` se considerati come numeri senza segno.  
  
 In caso contrario, un `int32` il valore 0 viene inserito nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `clt.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constrained">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Constrained;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Constrained" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Constrained" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Constrained As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Constrained;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Vincola il tipo su cui viene eseguita una chiamata al metodo virtuale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La tabella seguente elenca l'istruzione esadecimale e formato assembly di Microsoft intermediate language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 16 &LT; `T` >|vincolato. `thisType`|Chiamata di un metodo virtuale su un tipo è vincolato per essere tipo `T`.|  
  
 Il `constrained` è consentito solo in un `callvirt` istruzione.  
  
 Lo stato dello stack a questo punto di codice MSIL deve essere come segue:  
  
1.  Un puntatore gestito, `ptr`, viene inserito nello stack. Il tipo di `ptr` deve essere un puntatore gestito (`&`) a `thisType`. Si noti che questo è diverso da quello di un senza prefisso `callvirt` (istruzione), che prevede un riferimento a `thisType`.  
  
2.  Gli argomenti del metodo `arg1` tramite `argN` vengono inseriti nello stack, proprio come con un senza prefisso `callvirt` istruzione.  
  
 Il `constrained` prefisso è progettato per consentire `callvirt` istruzioni da eseguire in un uniform modo indipendentemente dal fatto che `thisType` è un tipo di valore o un tipo di riferimento.  
  
 Quando un `callvirt` `method` istruzione è preceduto da `constrained` `thisType`, l'istruzione viene eseguita nel modo seguente:  
  
-   Se `thisType` è un tipo di riferimento (anziché un tipo di valore), quindi `ptr` viene dereferenziato e passato come il puntatore 'this' per il `callvirt` di `method`.  
  
-   Se `thisType` è un tipo di valore e `thisType` implementa `method` quindi `ptr` viene passato senza modifiche come il puntatore 'this' per un `call` `method` (istruzione), per l'implementazione di `method` da `thisType`.  
  
-   Se `thisType` è un tipo di valore e `thisType` non implementa `method` quindi `ptr` è dereferenziato, sottoposto a boxing e passato come il puntatore 'this' per il `callvirt` `method` istruzione.  
  
 Quest'ultimo caso può verificarsi solo quando `method` è stato definito in <xref:System.Object>, <xref:System.ValueType>, o <xref:System.Enum> e non esegue l'override `thisType`. In questo caso, la conversione boxing, una copia dell'oggetto originale da eseguire. Tuttavia, poiché nessuno dei metodi di <xref:System.Object>, <xref:System.ValueType>, e <xref:System.Enum> modificare lo stato dell'oggetto, questo evento non può essere rilevato.  
  
 Il `constrained` prefisso supporta generatori IL per creare codice generico. In genere il `callvirt` istruzione non è valido nei tipi di valore. In alternativa è necessario che i compilatori di linguaggio intermedio svolgere in modo efficace la trasformazione 'this' descritta in precedenza in fase di compilazione, a seconda del tipo di `ptr` e il metodo chiamato. Tuttavia, quando `ptr` è un tipo generico è noto in fase di compilazione non è possibile eseguire questa trasformazione in fase di compilazione.  
  
 Il `constrained` opcode consente ai compilatori di linguaggio intermedio di effettuare una chiamata a una funzione virtuale in un uniform modo indipendentemente dal fatto che `ptr` è un tipo di valore o un tipo di riferimento. Sebbene sia progettato per il caso in cui `thisType` è una variabile di tipo generico, la `constrained` prefisso anche funziona per i tipi non generici e può ridurre la complessità della generazione delle chiamate virtuali nei linguaggi che la differenza tra i tipi di valore e tipi di riferimento.  
  
 Utilizzo di `constrained` prefisso consente anche di evitare i potenziali problemi di controllo delle versioni con tipi di valore. Se il `constrained` prefisso non viene utilizzato IL diverso deve essere inviato a seconda se un tipo di valore esegue l'override di un metodo System. Object. Ad esempio, se un tipo di valore `V` esegue l'override del metodo ToString, un `call` `V.ToString()` viene generata un'istruzione; in caso contrario, un `box` (istruzione) e un `callvirt` `Object.ToString()` istruzione vengono generati. Può sorgere un problema di controllo delle versioni nel primo caso, se la sostituzione verrà rimossa in seguito in quest'ultimo caso se successivamente viene aggiunto un override.  
  
 Il `constrained` prefisso può anche essere utilizzato per la chiamata di metodi di interfaccia sui tipi di valore, perché il metodo che implementa il metodo di interfaccia del tipo di valore può essere modificato utilizzando un `MethodImpl`. Se il `constrained` prefisso non viene utilizzato, il compilatore viene imposto di scegliere quale il valore metodi del tipo da associare in fase di compilazione. Utilizzo di `constrained` prefisso consente il codice MSIL associare il metodo che implementa il metodo di interfaccia in fase di esecuzione, anziché in fase di compilazione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `constrained` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore all'inizio dello stack di valutazione in <see langword="native int" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|D3|conv.i|Convertire `native int`, inserendo `native int` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.i` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, lasciando il valore convertito all'inizio dello stack. Valori integer minore di 4 byte vengono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.i` o `conv.u` viene utilizzato, nel qual caso il risultato è `native int`). I valori a virgola mobile vengono convertiti nel `F` tipo.  
  
 Conversione da numeri a virgola mobile a valori integer tronca il numero verso lo zero. Durante la conversione da un `float64` per un `float32`, precisione può essere persa. Se `value` è troppo grande per essere contenuta in un `float32 (F)`, infinito positivo (se `value` è un valore positivo) o infinito negativo (se `value` è negativo) viene restituito. Se si verifica un overflow convertire un tipo integer a un altro, i bit più significativi vengono troncati. Se il risultato è minore di un `int32`, il valore è con segno esteso per riempire lo slot.  
  
 Conversione di un tipo a virgola mobile a un intero il valore restituito non è specificata se si verifica un overflow.  
  
 Non vengono mai generate eccezioni quando si utilizza questo campo. Vedere <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> e <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> per ottenere istruzioni equivalenti che verranno generata un'eccezione quando il tipo di risultato non corretto può rappresentare il valore del risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.i` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore all'inizio dello stack di valutazione in <see langword="int8" />, quindi lo estende, aggiungendo spazi, a <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|67|conv.i1|Convertire `int8`, inserendo `int32` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.i1` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, lasciando il valore convertito all'inizio dello stack. Valori integer minore di 4 byte vengono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.i` o `conv.u` viene utilizzato, nel qual caso il risultato è `native int`). I valori a virgola mobile vengono convertiti nel `F` tipo.  
  
 Conversione da numeri a virgola mobile a valori integer tronca il numero verso lo zero. Durante la conversione da un `float64` per un `float32`, precisione può essere persa. Se `value` è troppo grande per essere contenuta in un `float32 (F)`, infinito positivo (se `value` è un valore positivo) o infinito negativo (se `value` è negativo) viene restituito. Se si verifica un overflow convertire un tipo integer a un altro, i bit più significativi vengono troncati. Se il risultato è minore di un `int32`, il valore è con segno esteso per riempire lo slot.  
  
 Conversione di un tipo a virgola mobile a un intero il valore restituito non è specificata se si verifica un overflow.  
  
 Non vengono mai generate eccezioni quando si utilizza questo campo. Vedere <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> e <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> per ottenere istruzioni equivalenti che verranno generata un'eccezione quando il tipo di risultato non corretto può rappresentare il valore del risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.i1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore all'inizio dello stack di valutazione in <see langword="int16" />, quindi lo estende, aggiungendo spazi, a <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|68|conv.i2|Convertire `int16`, inserendo `int32` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.i2` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, lasciando il valore convertito all'inizio dello stack. Valori integer minore di 4 byte vengono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.i` o `conv.u` viene utilizzato, nel qual caso il risultato è `native int`). I valori a virgola mobile vengono convertiti nel `F` tipo.  
  
 Conversione da numeri a virgola mobile a valori integer tronca il numero verso lo zero. Durante la conversione da un `float64` per un `float32`, precisione può essere persa. Se `value` è troppo grande per essere contenuta in un `float32 (F)`, infinito positivo (se `value` è un valore positivo) o infinito negativo (se `value` è negativo) viene restituito. Se si verifica un overflow convertire un tipo integer a un altro, i bit più significativi vengono troncati. Se il risultato è minore di un `int32`, il valore è con segno esteso per riempire lo slot.  
  
 Conversione di un tipo a virgola mobile a un intero il valore restituito non è specificata se si verifica un overflow.  
  
 Non vengono mai generate eccezioni quando si utilizza questo campo. Vedere <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> e <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> per ottenere istruzioni equivalenti che verranno generata un'eccezione quando il tipo di risultato non corretto può rappresentare il valore del risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.i2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore all'inizio dello stack di valutazione in <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|69|conv.i4|Convertire `int32`, inserendo `int32` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.i4` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, lasciando il valore convertito all'inizio dello stack. Valori integer minore di 4 byte vengono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.i` o `conv.u` viene utilizzato, nel qual caso il risultato è `native int`). I valori a virgola mobile vengono convertiti nel `F` tipo.  
  
 Conversione da numeri a virgola mobile a valori integer tronca il numero verso lo zero. Durante la conversione da un `float64` per un `float32`, precisione può essere persa. Se `value` è troppo grande per essere contenuta in un `float32 (F)`, infinito positivo (se `value` è un valore positivo) o infinito negativo (se `value` è negativo) viene restituito. Se si verifica un overflow convertire un tipo integer a un altro, i bit più significativi vengono troncati. Se il risultato è minore di un `int32`, il valore è con segno esteso per riempire lo slot.  
  
 Conversione di un tipo a virgola mobile a un intero il valore restituito non è specificata se si verifica un overflow.  
  
 Non vengono mai generate eccezioni quando si utilizza questo campo. Vedere <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> e <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> per ottenere istruzioni equivalenti che verranno generata un'eccezione quando il tipo di risultato non corretto può rappresentare il valore del risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.i4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore all'inizio dello stack di valutazione in <see langword="int64" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|6A|conv.i8|Convertire `int64`, inserendo `int64` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.i8` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, lasciando il valore convertito all'inizio dello stack. Valori integer minore di 4 byte vengono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.i` o `conv.u` viene utilizzato, nel qual caso il risultato è `native int`). I valori a virgola mobile vengono convertiti nel `F` tipo.  
  
 Conversione da numeri a virgola mobile a valori integer tronca il numero verso lo zero. Durante la conversione da un `float64` per un `float32`, precisione può essere persa. Se `value` è troppo grande per essere contenuta in un `float32 (F)`, infinito positivo (se `value` è un valore positivo) o infinito negativo (se `value` è negativo) viene restituito. Se si verifica un overflow convertire un tipo integer a un altro, i bit più significativi vengono troncati. Se il risultato è minore di un `int32`, il valore è con segno esteso per riempire lo slot.  
  
 Conversione di un tipo a virgola mobile a un intero il valore restituito non è specificata se si verifica un overflow.  
  
 Non vengono mai generate eccezioni quando si utilizza questo campo. Vedere <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> e <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> per ottenere istruzioni equivalenti che verranno generata un'eccezione quando il tipo di risultato non corretto può rappresentare il valore del risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.i8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore con segno all'inizio dello stack di valutazione in <see langword="native int" /> con segno, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|D4|conv.ovf.i|Convertire un `native int` (sullo stack come `native int`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.i` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.i` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="native int" /> con segno, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|8A|conv.ovf.i.un|Converte un valore senza segno in un `native int` (sullo stack come `native int`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.i.un` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.i.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore con segno all'inizio dello stack di valutazione in <see langword="int8" /> con segno e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|B3|conv.ovf.i1|Convertire un `int8` (sullo stack come `int32`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.i1` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.i1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="int8" /> con segno e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|82|conv.ovf.i1.un|Converte un valore senza segno in un `int8` (sullo stack come `int32`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.i1.un` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.i1.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore con segno all'inizio dello stack di valutazione in <see langword="int16" /> con segno e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|B5|conv.ovf.i2|Convertire un `int16` (sullo stack come `int32`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.i2` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.i2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="int16" /> con segno e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|83|conv.ovf.i2.un|Converte un valore senza segno in un `int16` (sullo stack come `int32`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.i2.un` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.i2.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore con segno all'inizio dello stack di valutazione in <see langword="int32" /> con segno, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|B7|conv.ovf.i4|Convertire un `int32` (sullo stack come `int32`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.i4` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.i4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="int32" /> con segno, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|84|conv.ovf.i4.un|Converte un valore senza segno in un `int32` (sullo stack come `int32`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.i4.un` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.i4.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore con segno all'inizio dello stack di valutazione in <see langword="int64" /> con segno, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|B9|conv.ovf.i8|Convertire un `int64` (sullo stack come `int64`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.i8` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.i8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="int64" /> con segno, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|85|conv.ovf.i8.un|Converte un valore senza segno in un `int64` (sullo stack come `int64`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.i8.un` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.i8.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore con segno all'inizio dello stack di valutazione in <see langword="unsigned native int" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|D5|conv.ovf.u|Convertire un `unsigned native int` (sullo stack come `native int`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.u` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.u` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="unsigned native int" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|8B|conv.ovf.u.un|Converte un valore senza segno in un `unsigned native int` (sullo stack come `native int`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.u.un` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.uvf.u.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore con segno all'inizio dello stack di valutazione in <see langword="unsigned int8" /> e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|B4|conv.ovf.u1|Convertire un `unsigned int8` (sullo stack come `int32`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.u1` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.u1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="unsigned int8" /> e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|86|conv.ovf.u1.un|Converte un valore senza segno in un `unsigned int8` (sullo stack come `int32`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.u1.un` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.u1.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore con segno all'inizio dello stack di valutazione in <see langword="unsigned int16" /> e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|B6|conv.ovf.u2|Convertire un `unsigned int16` (sullo stack come `int32`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.u2` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.u2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="unsigned int16" /> e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|87|conv.ovf.u2.un|Converte un valore senza segno in un `unsigned int16` (sullo stack come `int32`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.u2.un` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.u2.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore con segno all'inizio dello stack di valutazione in <see langword="unsigned int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|B8|conv.ovf.u4|Convertire un `unsigned int32` (sullo stack come `int32`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.u4` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.u4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="unsigned int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|88|conv.ovf.u4.un|Converte un valore senza segno in un `unsigned int32` (sullo stack come `int32`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.u4.un` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.u4.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore con segno all'inizio dello stack di valutazione in <see langword="unsigned int64" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|BA|conv.ovf.u8|Convertire un `unsigned int64` (sullo stack come `int64`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.u8` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.u8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="unsigned int64" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|89|conv.ovf.u8.un|Converte un valore senza segno in un `unsigned int64` (sullo stack come `int64`) e genera un'eccezione in caso di overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione. Se si verifica un overflow, viene generata un'eccezione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.ovf.u8.un` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, inserendo il valore convertito all'inizio dello stack. Se il valore è troppo grande o troppo piccolo per essere rappresentato dal tipo di destinazione, viene generata un'eccezione.  
  
 Le conversioni da numeri a virgola mobile a valori interi troncano il numero verso lo zero. Si noti che i valori integer con meno di 4 byte sono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.ovf.i` o `conv.ovf.u` vengono utilizzati, nel qual caso il risultato è `native int`).  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.ovf.u8.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore intero senza segno all'inizio dello stack di valutazione in <see langword="float32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|76|conv.r.un|Converti intero senza segno a virgola mobile, inserendo `F` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.r.un` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, lasciando il valore convertito all'inizio dello stack. Valori integer minore di 4 byte vengono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.i` o `conv.u` viene utilizzato, nel qual caso il risultato è `native int`). I valori a virgola mobile vengono convertiti nel `F` tipo.  
  
 Conversione da numeri a virgola mobile a valori integer tronca il numero verso lo zero. Durante la conversione da un `float64` per un `float32`, precisione può essere persa. Se `value` è troppo grande per essere contenuta in un `float32 (F)`, infinito positivo (se `value` è un valore positivo) o infinito negativo (se `value` è negativo) viene restituito. Se si verifica un overflow convertire un tipo integer a un altro, i bit più significativi vengono troncati. Se il risultato è minore di un `int32`, il valore è con segno esteso per riempire lo slot.  
  
 Se si verifica un overflow nella conversione di un tipo a virgola mobile a un numero intero di `result` restituito non è specificato. Il `conv.r.un` operazione accetta un valore integer dallo stack, interpreta come senza segno e lo sostituisce con un numero a virgola mobile per rappresentare il numero intero: entrambi un `float32`, se ciò è sufficiente per rappresentare il valore integer senza perdita di precisione, altrimenti un `float64`.  
  
 Non vengono mai generate eccezioni quando si utilizza questo campo.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.r.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore all'inizio dello stack di valutazione in <see langword="float32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|6B|conv.r4|Convertire `float32`, inserendo `F` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.r4` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, lasciando il valore convertito all'inizio dello stack. Valori integer minore di 4 byte vengono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.i` o `conv.u` viene utilizzato, nel qual caso il risultato è `native int`). I valori a virgola mobile vengono convertiti nel `F` tipo.  
  
 Conversione da numeri a virgola mobile a valori integer tronca il numero verso lo zero. Durante la conversione da un `float64` per un `float32`, precisione può essere persa. Se `value` è troppo grande per essere contenuta in un `float32 (F)`, infinito positivo (se `value` è un valore positivo) o infinito negativo (se `value` è negativo) viene restituito. Se si verifica un overflow convertire un tipo integer a un altro, i bit più significativi vengono troncati. Se il risultato è minore di un `int32`, il valore è con segno esteso per riempire lo slot.  
  
 Conversione di un tipo a virgola mobile a un intero il valore restituito non è specificata se si verifica un overflow.  
  
 Non vengono mai generate eccezioni quando si utilizza questo campo.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.r4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore all'inizio dello stack di valutazione in <see langword="float64" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|6C|conv.r8|Convertire `float64`, inserendo `F` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.r8` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, lasciando il valore convertito all'inizio dello stack. Valori integer minore di 4 byte vengono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.i` o `conv.u` viene utilizzato, nel qual caso il risultato è `native int`). I valori a virgola mobile vengono convertiti nel `F` tipo.  
  
 Conversione da numeri a virgola mobile a valori integer tronca il numero verso lo zero. Durante la conversione da un `float64` per un `float32`, precisione può essere persa. Se `value` è troppo grande per essere contenuta in un `float32 (F)`, infinito positivo (se `value` è un valore positivo) o infinito negativo (se `value` è negativo) viene restituito. Se si verifica un overflow convertire un tipo integer a un altro, i bit più significativi vengono troncati. Se il risultato è minore di un `int32`, il valore è con segno esteso per riempire lo slot.  
  
 Conversione di un tipo a virgola mobile a un intero il valore restituito non è specificata se si verifica un overflow.  
  
 Non vengono mai generate eccezioni quando si utilizza questo campo.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.r8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore all'inizio dello stack di valutazione in <see langword="unsigned native int" /> e lo estende a <see langword="native int" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|E0|conv.u|Convertire `unsigned native int`, inserendo `native int` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.u` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, lasciando il valore convertito all'inizio dello stack. Valori integer minore di 4 byte vengono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.i` o `conv.u` viene utilizzato, nel qual caso il risultato è `native int`). I valori a virgola mobile vengono convertiti nel `F` tipo.  
  
 Conversione da numeri a virgola mobile a valori integer tronca il numero verso lo zero. Durante la conversione da un `float64` per un `float32`, precisione può essere persa. Se `value` è troppo grande per essere contenuta in un `float32 (F)`, infinito positivo (se `value` è un valore positivo) o infinito negativo (se `value` è negativo) viene restituito. Se si verifica un overflow convertire un tipo integer a un altro, i bit più significativi vengono troncati. Se il risultato è minore di un `int32`, il valore è con segno esteso per riempire lo slot.  
  
 Conversione di un tipo a virgola mobile a un intero il valore restituito non è specificata se si verifica un overflow.  
  
 Non vengono mai generate eccezioni quando si utilizza questo campo. Vedere <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> e <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> per ottenere istruzioni equivalenti che verranno generata un'eccezione quando il tipo di risultato non corretto può rappresentare il valore del risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.u` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore all'inizio dello stack di valutazione in <see langword="unsigned int8" /> e lo estende a <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|D2|conv.u1|Convertire `int8`, inserendo `int32` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.u1` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, lasciando il valore convertito all'inizio dello stack. Valori integer minore di 4 byte vengono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.i` o `conv.u` viene utilizzato, nel qual caso il risultato è `native int`). I valori a virgola mobile vengono convertiti nel `F` tipo.  
  
 Conversione da numeri a virgola mobile a valori integer tronca il numero verso lo zero. Durante la conversione da un `float64` per un `float32`, precisione può essere persa. Se `value` è troppo grande per essere contenuta in un `float32 (F)`, infinito positivo (se `value` è un valore positivo) o infinito negativo (se `value` è negativo) viene restituito. Se si verifica un overflow convertire un tipo integer a un altro, i bit più significativi vengono troncati. Se il risultato è minore di un `int32`, il valore è con segno esteso per riempire lo slot.  
  
 Conversione di un tipo a virgola mobile a un intero il valore restituito non è specificata se si verifica un overflow.  
  
 Non vengono mai generate eccezioni quando si utilizza questo campo. Vedere <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> e <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> per ottenere istruzioni equivalenti che verranno generata un'eccezione quando il tipo di risultato non corretto può rappresentare il valore del risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.u1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore all'inizio dello stack di valutazione in <see langword="unsigned int16" /> e lo estende a <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|D1|conv.u2|Convertire `int16`, inserendo `int32` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.u2` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, lasciando il valore convertito all'inizio dello stack. Valori integer minore di 4 byte vengono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.i` o `conv.u` viene utilizzato, nel qual caso il risultato è `native int`). I valori a virgola mobile vengono convertiti nel `F` tipo.  
  
 Conversione da numeri a virgola mobile a valori integer tronca il numero verso lo zero. Durante la conversione da un `float64` per un `float32`, precisione può essere persa. Se `value` è troppo grande per essere contenuta in un `float32 (F)`, infinito positivo (se `value` è un valore positivo) o infinito negativo (se `value` è negativo) viene restituito. Se si verifica un overflow convertire un tipo integer a un altro, i bit più significativi vengono troncati. Se il risultato è minore di un `int32`, il valore è con segno esteso per riempire lo slot.  
  
 Conversione di un tipo a virgola mobile a un intero il valore restituito non è specificata se si verifica un overflow.  
  
 Non vengono mai generate eccezioni quando si utilizza questo campo. Vedere <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> e <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> per ottenere istruzioni equivalenti che verranno generata un'eccezione quando il tipo di risultato non corretto può rappresentare il valore del risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.u2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore all'inizio dello stack di valutazione in <see langword="unsigned int32" /> e lo estende a <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|6D|conv.u4|Convertire `unsigned int32`, inserendo `int32` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.u4` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, lasciando il valore convertito all'inizio dello stack. Valori integer minore di 4 byte vengono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.i` o `conv.u` viene utilizzato, nel qual caso il risultato è `native int`). I valori a virgola mobile vengono convertiti nel `F` tipo.  
  
 Conversione da numeri a virgola mobile a valori integer tronca il numero verso lo zero. Durante la conversione da un `float64` per un `float32`, precisione può essere persa. Se `value` è troppo grande per essere contenuta in un `float32 (F)`, infinito positivo (se `value` è un valore positivo) o infinito negativo (se `value` è negativo) viene restituito. Se si verifica un overflow convertire un tipo integer a un altro, i bit più significativi vengono troncati. Se il risultato è minore di un `int32`, il valore è con segno esteso per riempire lo slot.  
  
 Conversione di un tipo a virgola mobile a un intero il valore restituito non è specificata se si verifica un overflow.  
  
 Non vengono mai generate eccezioni quando si utilizza questo campo. Vedere <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> e <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> per ottenere istruzioni equivalenti che verranno generata un'eccezione quando il tipo di risultato non corretto può rappresentare il valore del risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.u4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte il valore all'inizio dello stack di valutazione in <see langword="unsigned int64" /> e lo estende a <see langword="int64" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|6E|conv.u8|Convertire `int64`, inserendo `int64` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e la conversione viene tentata l'operazione.  
  
3.  Se la conversione ha esito positivo, il valore risultante viene inserito nello stack.  
  
 Il `conv.u8` codice converte il `value` all'inizio dello stack per il tipo specificato nel codice operativo, lasciando il valore convertito all'inizio dello stack. Valori integer minore di 4 byte vengono estesi a `int32` quando vengono caricati nello stack di valutazione (a meno che non `conv.i` o `conv.u` viene utilizzato, nel qual caso il risultato è `native int`). I valori a virgola mobile vengono convertiti nel `F` tipo.  
  
 Conversione da numeri a virgola mobile a valori integer tronca il numero verso lo zero. Durante la conversione da un `float64` per un `float32`, precisione può essere persa. Se `value` è troppo grande per essere contenuta in un `float32 (F)`, infinito positivo (se `value` è un valore positivo) o infinito negativo (se `value` è negativo) viene restituito. Se si verifica un overflow convertire un tipo integer a un altro, i bit più significativi vengono troncati. Se il risultato è minore di un `int32`, il valore è con segno esteso per riempire lo slot.  
  
 Conversione di un tipo a virgola mobile a un intero il valore restituito non è specificata se si verifica un overflow.  
  
 Non vengono mai generate eccezioni quando si utilizza questo campo. Vedere <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> e <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> per ottenere istruzioni equivalenti che verranno generata un'eccezione quando il tipo di risultato non corretto può rappresentare il valore del risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `conv.u8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpblk;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Copia un numero specificato di byte da un indirizzo di origine a un indirizzo di destinazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 17|cpblk|Copiare i dati da un blocco di memoria a un altro.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  L'indirizzo di destinazione viene inserito nello stack.  
  
2.  L'indirizzo di origine viene inserito nello stack.  
  
3.  Il numero di byte da copiare è inserito nello stack.  
  
4.  Il numero di byte, l'indirizzo di origine e l'indirizzo di destinazione viene estratti dallo stack; il numero specificato di byte viene copiato dall'indirizzo di origine per l'indirizzo di destinazione.  
  
 Il `cpblk` istruzione copia un numero (tipo `unsigned int32`) di byte da un indirizzo di origine (di tipo `*`, `native int`, o `&`) a un indirizzo di destinazione (di tipo `*`, `native int`, o `&`). Il comportamento di `cpblk` non è specificato se le aree di origine e di destinazione si sovrappongono.  
  
 `cpblk` si presuppone che l'origine e destinazione risolto sono allineati alle dimensioni fisiche del computer. Il `cpblk` istruzione può essere immediatamente preceduto dal `unaligned.<prefix>` per indicare che l'origine o destinazione non è allineata.  
  
 L'operazione del `cpblk` istruzione può essere modificato da un immediatamente precedente <xref:System.Reflection.Emit.OpCodes.Volatile> o <xref:System.Reflection.Emit.OpCodes.Unaligned> immediatamente precedente.  
  
 <xref:System.NullReferenceException> può essere generata se viene rilevato un indirizzo non valido.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `cpblk` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpobj;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Copia il tipo di valore individuato in corrispondenza dell'indirizzo di un oggetto di tipo <see langword="&amp;" />, <see langword="*" /> o <see langword="native int" /> nell'indirizzo dell'oggetto di destinazione, di tipo <see langword="&amp;" />, <see langword="*" /> o <see langword="native int" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|70 < `T` >|cpobj `classTok`|Copia un valore di tipo da un oggetto di origine a un oggetto di destinazione.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il riferimento all'oggetto di destinazione viene inserito nello stack.  
  
2.  Il riferimento all'oggetto di origine viene inserito nello stack.  
  
3.  I riferimenti agli due oggetti vengono estratti dallo stack; il tipo di valore in corrispondenza dell'indirizzo dell'oggetto di origine viene copiato nell'indirizzo dell'oggetto di destinazione.  
  
 Il comportamento di `cpobj` non è specificato se l'origine e la destinazione oggetto riferimenti non sono puntatori a istanze della classe rappresentata dal token di classe `classTok` (un `typeref` o `typedef`), o se `classTok` non rappresenta un tipo di valore.  
  
 <xref:System.NullReferenceException> può essere generata se viene rilevato un indirizzo non valido.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `cpobj` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Divide due valori e inserisce il risultato come valore in virgola mobile (di tipo <see langword="F" />) o quoziente (di tipo <see langword="int32" />) nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|5B|div|Divide due valori e restituisce un risultato a virgola mobile o il quoziente.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; `value1` viene diviso per `value2`.  
  
4.  Il risultato viene inserito nello stack.  
  
 `result` = `value1` div value2 soddisfa le condizioni seguenti:  
  
 &#124; `result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, and:  
  
 Sign (`result`) = +, se accedere (`value1`) = segno (`value2`), o-, se segno (`value1`) ~ = segno (`value2`)  
  
 Il `div` istruzione calcola il risultato e lo inserisce nello stack.  
  
 Divisione di interi troncata a zero.  
  
 Divisione di un numero finito per zero genera il valore di infinito firmato correttamente.  
  
 Divisione di zero per zero o infinito da infinito produce il valore NaN (Not-A-Number). Qualsiasi numero diviso infinito produrrà un valore pari a zero.  
  
 Le operazioni integrali generano <xref:System.ArithmeticException> se il risultato non può essere rappresentato nel tipo di risultato. Questa situazione può verificarsi se `value1` è il massimo valore negativo, e `value2` è -1.  
  
 Le operazioni integrali generano <xref:System.DivideByZeroException> se `value2` è zero.  
  
 Si noti che nelle piattaforme basate su Intel su un <xref:System.OverflowException> viene generata quando il (minint div -1). Operazioni a virgola mobile non generano mai un'eccezione (producono NaN o valori infiniti invece).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `div` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Divide due valori interi senza segno e inserisce il risultato (<see langword="int32" />) nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|5C|div.un|Divide due valori senza segno, restituendo un quoziente.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; `value1` viene diviso per `value2`.  
  
4.  Il risultato viene inserito nello stack.  
  
 Il `div.un` istruzione calcola `value1` diviso `value2`, entrambi come interi senza segno e inserisce il `result` nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `div.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dup">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Dup;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Dup" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Dup" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Dup As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Dup;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Copia il valore corrente più in alto nello stack di valutazione e inserisce la copia nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|25|dup|Duplica il valore all'inizio dello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene rimosso dallo stack per la duplicazione.  
  
3.  `value` viene nuovamente inserito nello stack.  
  
4.  Un valore duplicato viene inserito nello stack.  
  
 Il `dup` istruzione Duplica l'elemento superiore dello stack e lascia primi due valori identici.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `dup` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfilter">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfilter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfilter" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfilter As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfilter;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo dalla clausola <see langword="filter" /> di un'eccezione nuovamente al gestore di eccezioni di Common Language Infrastructure (CLI).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 11|endfilter|Clausola di filtro al fine di gestione delle eccezioni SEH.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack; `endfilter` viene eseguita e il controllo viene trasferito al gestore di eccezioni.  
  
 `Value` (che deve essere di tipo `int32` e fa parte di un set specifico di valori) viene restituito dalla clausola di filtro. Deve essere uno di:  
  
-   `exception_continue_search` (`value` = 0) per continuare la ricerca di un gestore di eccezioni  
  
-   `exception_execute_handler` (`value` = 1) per avviare la seconda fase della gestione delle eccezioni in cui i blocchi vengono eseguiti fino a quando il gestore associato alla clausola di filtro si trova. Una volta individuato, il gestore viene eseguito.  
  
 Altri valori integer produrrà risultati non specificati.  
  
 Il punto di ingresso di un filtro, come illustrato nella tabella delle eccezioni del metodo, deve essere la prima istruzione nel blocco di codice del filtro. Il `endfilter` istruzione deve essere l'ultima istruzione nel blocco di codice del filtro (pertanto può essere presente una sola `endfilter` per ogni blocco di filtro). Dopo l'esecuzione di `endfilter` (istruzione), il controllo passa di nuovo per il meccanismo di gestione delle eccezioni CLI.  
  
 Il controllo non può essere trasferito in un blocco di filtro solo tramite il meccanismo di eccezione. Controllo non può essere trasferito all'esterno di un blocco di filtro solo tramite l'utilizzo di un `throw` istruzione o l'esecuzione finale `endfilter` istruzione. Non è possibile incorporare un `try` blocco all'interno di un `filter` blocco. Se viene generata un'eccezione all'interno di `filter` blocco, questo viene intercettato e un valore pari a 0 (`exception_continue_search`) viene restituito.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `endfilter` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfinally">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfinally;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfinally" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfinally As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfinally;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trasferisce il controllo dalla clausola <see langword="fault" /> o <see langword="finally" /> di un blocco di eccezioni al gestore di eccezioni di Common Language Infrastructure (CLI).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|DC|endfinally<br /><br /> endfault|Termina il `finally` o `fault` clausola di un blocco di eccezioni.|  
  
 Alcuni comportamenti sono caratteristici nessuno stack transizione per questa istruzione.  
  
 `Endfinally` e `endfault` segnalare la fine del `finally` o `fault` clausola in modo che la rimozione dello stack può continuare finché non viene richiamato il gestore di eccezioni. Il `endfinally` o `endfault` istruzione trasferisce il controllo al meccanismo delle eccezioni CLI. Il meccanismo quindi Cerca successivo `finally` clausola nella catena se il blocco protetto è stato terminato con un'istruzione leave. Se il blocco protetto è stato terminato con un'eccezione, l'interfaccia CLI eseguirà la ricerca per i prossimi `finally` o `fault`, oppure immettere il gestore di eccezioni scelto durante la prima sessione di gestione delle eccezioni.  
  
 Un `endfinally` istruzione può essere presente solo livello lessicale interno un `finally` blocco. A differenza di `endfilter` (istruzione), non è necessario che il blocco terminano con un `endfinally` istruzioni e possono essere tante `endfinally` istruzioni all'interno del blocco. Le stesse restrizioni si applicano al `endfault` istruzione e `fault` blocco.  
  
 Il controllo non può essere trasferito in un `finally` (o `fault`) blocco tranne tramite il meccanismo di eccezione. Il controllo non può essere trasferito da un `finally` (o `fault`) blocco eccezione mediante l'utilizzo di un `throw` istruzione o l'esecuzione di `endfinally` (o `endfault`) (istruzione). In particolare, è possibile "uscire da" di un `finally` (o `fault`) blocco oppure eseguire un <xref:System.Reflection.Emit.OpCodes.Ret> o <xref:System.Reflection.Emit.OpCodes.Leave> istruzione all'interno di un `finally` (o `fault`) blocco.  
  
 Si noti che il `endfault` e `endfinally` sono alias, ovvero corrispondono allo stesso codice operativo.  
  
 Le operazioni seguenti <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `endfinally` (`endfault`) opcode, nonché il `ILGenerator` metodo <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.  
  
-   ILGenerator.Emit(OpCode)  
  
-   ILGenerator.EndExceptionBlock()  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initblk;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inizializza un blocco specificato di memoria in corrispondenza di un indirizzo specifico su una dimensione e un valore iniziale dati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 18|initblk|Impostare ogni posizione in un blocco di memoria per un determinato valore.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo iniziale viene inserito nello stack.  
  
2.  Un valore di inizializzazione viene inserito nello stack.  
  
3.  Il numero di byte da inizializzare viene inserito nello stack.  
  
4.  Il numero di byte, il valore di inizializzazione e l'indirizzo iniziale vengono estratti dallo stack e l'inizializzazione viene eseguita in base ai relativi valori.  
  
 Il `initblk` il numero di set di istruzioni (`unsigned int32`) di byte a partire dall'indirizzo specificato (di tipo `native int`, `&`, o `*`) sul valore di inizializzazione (di tipo `unsigned int8`). `initblk` si presuppone che l'indirizzo iniziale è allineato alle dimensioni fisiche del computer.  
  
 L'operazione del `initblk` istruzioni possono essere modificate da un immediatamente precedente <xref:System.Reflection.Emit.OpCodes.Volatile> o <xref:System.Reflection.Emit.OpCodes.Unaligned> immediatamente precedente.  
  
 <xref:System.NullReferenceException> può essere generata se viene rilevato un indirizzo non valido.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `initblk` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initobj;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inizializza ciascun campo del tipo di valore in corrispondenza di un indirizzo specifico su un riferimento Null o uno 0 di tipo primitivo appropriato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 15 < `T` >|`initobj` `typeTok`|Inizializza un tipo di valore.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  L'indirizzo del tipo di valore per inizializzare viene inserito nello stack.  
  
2.  L'indirizzo viene estratto dallo stack; il tipo di valore in corrispondenza dell'indirizzo specificato viene inizializzato come tipo `typeTok`.  
  
 Il `initobj` istruzione Inizializza ciascun campo del tipo di valore specificato dall'indirizzo inserito (di tipo `native int`, `&`, o `*`) su un riferimento null o uno 0 di tipo primitivo appropriato. Dopo la chiamata di questo metodo, l'istanza è pronta per un metodo del costruttore da chiamare. Se `typeTok` è un tipo riferimento, questa istruzione ha lo stesso effetto `ldnull` seguito da `stind.ref`.  
  
 A differenza di <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` non chiama il metodo del costruttore. `Initobj` è destinato all'inizializzazione dei tipi di valore, mentre `newobj` viene utilizzato per allocare e inizializzare gli oggetti.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `initobj` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Isinst">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Isinst;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Isinst" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Isinst" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Isinst As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Isinst;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Verifica se un riferimento a un oggetto di tipo <see langword="O" /> è un'istanza di una classe particolare.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|75 < `T` >|isinst `class`|Verifica se un riferimento all'oggetto è un'istanza di `class`, che restituisce un riferimento null oppure un'istanza di tale classe o interfaccia.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Riferimento a un oggetto viene inserito nello stack.  
  
2.  Il riferimento all'oggetto viene estratto dallo stack e testato per verificare se si tratta di un'istanza della classe passata `class`.  
  
3.  Il risultato (un riferimento all'oggetto o un riferimento null) viene inserito nello stack.  
  
 `Class` è un token di metadati che indica la classe desiderata. Se la classe dell'oggetto all'inizio dello stack implementa `class` (se `class` è un'interfaccia) o è una classe derivata di `class` (se `class` è una classe normale), quindi ne viene eseguito il cast nel tipo `class` e il risultato viene inserito nello stack, esattamente come se <xref:System.Reflection.Emit.OpCodes.Castclass> fosse stata chiamata. In caso contrario, un riferimento null viene inserito nello stack. Se il riferimento all'oggetto stesso è un riferimento null, quindi `isinst` Analogamente restituisce un riferimento null.  
  
 <xref:System.TypeLoadException> viene generata se non è possibile trovare la classe. In genere, questo viene rilevato quando le istruzioni Microsoft Intermediate Language (MSIL) vengono convertite in codice nativo piuttosto che in fase di esecuzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `isinst` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Jmp">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Jmp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Jmp" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Jmp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Jmp As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Jmp;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Esce dal metodo corrente e passa a quello specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|27 < `T` >|jmp `method`|Esce dal metodo corrente e passa al metodo specificato.|  
  
 Alcuni comportamenti sono caratteristici nessuno stack transizione per questa istruzione.  
  
 Il `jmp` istruzione (jump) trasferisce il controllo al metodo specificato da `method`, ovvero un token di metadati per un riferimento al metodo. Gli argomenti correnti vengono trasferiti al metodo di destinazione.  
  
 Stack di valutazione deve essere vuoto quando viene eseguita questa istruzione. Convenzione di chiamata, numero e tipo di argomenti in corrispondenza dell'indirizzo di destinazione deve corrispondere a quello del metodo corrente.  
  
 Il `jmp` istruzione non può essere utilizzata per trasferire il controllo di un `try`, `filter`, `catch`, o `finally` blocco.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `jmp` opcode:  
  
-   ILGenerator (OpCode, MethodInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica un argomento (a cui fa riferimento un valore di indice specificato) nello stack.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 09 &LT; `unsigned int16` >|ldarg `index`|Carica l'argomento in `index` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Valore dell'argomento in `index` viene inserito nello stack.  
  
 Il `ldarg` istruzione inserisce l'argomento indicizzato in `index`, in cui gli argomenti sono indicizzati da 0 in avanti, nello stack di valutazione. Il `ldarg` istruzione può essere utilizzato per caricare un tipo di valore o un valore primitivo nello stack copiandoli da un argomento in entrata. Il tipo del valore dell'argomento è identico al tipo dell'argomento, come specificato dalla firma del metodo corrente.  
  
 Per le procedure che accettano un elenco di argomenti a lunghezza variabile, il `ldarg` istruzione può essere utilizzata solo per gli argomenti, non quelli nella parte variabile della firma iniziali fissato (vedere il <xref:System.Reflection.Emit.OpCodes.Arglist> istruzioni per altri dettagli).  
  
 Gli argomenti che contengono un valore integer minore di 4 byte vengono espansi nel tipo `int32` quando vengono caricati nello stack. I valori a virgola mobile vengono espansi fino alle dimensioni native (tipo `F`).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldarg` opcode:  
  
-   ILGenerator (OpCode, short)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'argomento in corrispondenza dell'indice 0 nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|02|ldarg.0|Carica l'argomento 0 nello stack|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore dell'argomento in corrispondenza dell'indice 0 viene inserito nello stack.  
  
 Il `ldarg.0` istruzione rappresenta una codifica efficiente per il caricamento del valore di argomento in corrispondenza dell'indice 0.  
  
 Il `ldarg.0` istruzione inserisce l'argomento dell'indice 0 nello stack di valutazione. Il `ldarg.0` istruzione può essere utilizzato per caricare un tipo di valore o un valore primitivo nello stack copiandoli da un argomento in entrata. Il tipo del valore dell'argomento è identico al tipo dell'argomento, come specificato dalla firma del metodo corrente.  
  
 Gli argomenti che contengono un valore integer minore di 4 byte vengono espansi nel tipo `int32` quando vengono caricati nello stack. I valori a virgola mobile vengono espansi fino alle dimensioni native (tipo `F`).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldarg.0` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'argomento in corrispondenza dell'indice 1 nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|03|ldarg.1|Carica l'argomento 1 nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore dell'argomento in corrispondenza dell'indice 1 viene inserito nello stack.  
  
 Il `ldarg.1` istruzione rappresenta una codifica efficiente per il caricamento del valore di argomento in corrispondenza dell'indice 1.  
  
 Il `ldarg.1` istruzione inserisce l'argomento dell'indice 1 nello stack di valutazione. Il `ldarg.1` istruzione può essere utilizzato per caricare un tipo di valore o un valore primitivo nello stack copiandoli da un argomento in entrata. Il tipo del valore dell'argomento è identico al tipo dell'argomento, come specificato dalla firma del metodo corrente.  
  
 Gli argomenti che contengono un valore integer minore di 4 byte vengono espansi nel tipo `int32` quando vengono caricati nello stack. I valori a virgola mobile vengono espansi fino alle dimensioni native (tipo `F`).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldarg.1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'argomento in corrispondenza dell'indice 2 nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|04|ldarg.2|Carica l'argomento 2 nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore dell'argomento in corrispondenza dell'indice 2 viene inserito nello stack.  
  
 Il `ldarg.2` istruzione rappresenta una codifica efficiente per il caricamento del valore di argomento in corrispondenza dell'indice 2.  
  
 Il `ldarg.2` istruzione inserisce l'argomento dell'indice 2 nello stack di valutazione. Il `ldarg.2` istruzione può essere utilizzato per caricare un tipo di valore o un valore primitivo nello stack copiandoli da un argomento in entrata. Il tipo del valore dell'argomento è identico al tipo dell'argomento, come specificato dalla firma del metodo corrente.  
  
 Gli argomenti che contengono un valore integer minore di 4 byte vengono espansi nel tipo `int32` quando vengono caricati nello stack. I valori a virgola mobile vengono espansi fino alle dimensioni native (tipo `F`).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldarg.2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_3;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'argomento in corrispondenza dell'indice 3 nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|05|ldarg.3|Carica l'argomento 3 nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore dell'argomento in corrispondenza dell'indice 3 viene inserito nello stack.  
  
 Il `ldarg.3` istruzione rappresenta una codifica efficiente per il caricamento del valore di argomento in corrispondenza dell'indice 3.  
  
 Il `ldarg.3` istruzione inserisce l'argomento dell'indice 3 nello stack di valutazione. Il `ldarg.3` istruzione può essere utilizzato per caricare un tipo di valore o un valore primitivo nello stack copiandoli da un argomento in entrata. Il tipo del valore dell'argomento è identico al tipo dell'argomento, come specificato dalla firma del metodo corrente.  
  
 Gli argomenti che contengono un valore integer minore di 4 byte vengono espansi nel tipo `int32` quando vengono caricati nello stack. I valori a virgola mobile vengono espansi fino alle dimensioni native (tipo `F`).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldarg.3` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'argomento (a cui fa riferimento un indice specificato in forma breve) nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|0E &LT; `unsigned int8` >|ldarg.s `index`|Carica l'argomento in `index` nello stack, forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Valore dell'argomento in `index` viene inserito nello stack.  
  
 Il `ldarg.s` istruzione rappresenta una codifica efficiente per il caricamento degli argomenti indicizzati da 4 a 255.  
  
 Il `ldarg.s` istruzione inserisce l'argomento indicizzato in `index`, in cui gli argomenti sono indicizzati da 0 in avanti, nello stack di valutazione. Il `ldarg.s` istruzione può essere utilizzato per caricare un tipo di valore o un valore primitivo nello stack copiandoli da un argomento in entrata. Il tipo del valore dell'argomento è identico al tipo dell'argomento, come specificato dalla firma del metodo corrente.  
  
 Per le procedure che accettano un elenco di argomenti a lunghezza variabile, il `ldarg.s` istruzione può essere utilizzata solo per gli argomenti, non quelli nella parte variabile della firma iniziali fissato (vedere il <xref:System.Reflection.Emit.OpCodes.Arglist> istruzioni per altri dettagli).  
  
 Gli argomenti che contengono un valore integer minore di 4 byte vengono espansi nel tipo `int32` quando vengono caricati nello stack. I valori a virgola mobile vengono espansi fino alle dimensioni native (tipo `F`).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldarg.s` opcode:  
  
-   ILGenerator (OpCode, byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'indirizzo di un argomento nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 0A &LT; `unsigned int16` >|ldarga `index`|Recupera l'indirizzo dell'argomento indicizzato da `index`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  L'indirizzo `addr` dell'argomento indicizzato da `index` viene inserito nello stack.  
  
 Il `ldarga` istruzione recupera l'indirizzo (di tipo `*`) dell'argomento indicizzato da `index`, in cui gli argomenti sono indicizzati da 0 in avanti. L'indirizzo `addr` allineato sempre a un limite naturale sul computer di destinazione.  
  
 Per le procedure che accettano un elenco di argomenti a lunghezza variabile, il `ldarga` istruzione può essere utilizzata solo per gli argomenti, non quelli nella parte variabile della firma iniziali fissato.  
  
 `ldarga` viene utilizzato per il passaggio di parametri per riferimento. Per gli altri casi, <xref:System.Reflection.Emit.OpCodes.Ldarg> e <xref:System.Reflection.Emit.OpCodes.Starg> deve essere utilizzato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldarga` opcode:  
  
-   ILGenerator (OpCode, short)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'indirizzo di un argomento, in forma breve, nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|0F < `unsigned int8` >|ldarga.s `index`|Recupera l'indirizzo dell'argomento indicizzato da `index`, forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  L'indirizzo `addr` dell'argomento indicizzato da `index` viene inserito nello stack.  
  
 `ldarga.s` (la versione abbreviata di `ldarga`) è una codifica più efficiente e deve essere utilizzato per i numeri da 0 a 255 argomenti.  
  
 Il `ldarga.s` istruzione recupera l'indirizzo (di tipo`*`) dell'argomento indicizzato da `index`, in cui gli argomenti sono indicizzati da 0 in avanti. L'indirizzo `addr` allineato sempre a un limite naturale sul computer di destinazione.  
  
 Per le procedure che accettano un elenco di argomenti a lunghezza variabile, il `ldarga.s` istruzione può essere utilizzata solo per gli argomenti, non quelli nella parte variabile della firma iniziali fissato.  
  
 `ldarga.s` viene utilizzato per il passaggio di parametri per riferimento. Per gli altri casi, <xref:System.Reflection.Emit.OpCodes.Ldarg_S> e <xref:System.Reflection.Emit.OpCodes.Starg_S> deve essere utilizzato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldarga.s` opcode:  
  
-   ILGenerator (OpCode, byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce un valore fornito di tipo <see langword="int32" /> nello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|20 < `int32` >|ldc.i4 `num`|Inserisce il valore `num` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore `num` viene inserito nello stack.  
  
 Si noti che sono disponibili speciali codifiche brevi e pertanto più efficiente, per i numeri interi da -128 a 127 e specialmente codifiche brevi per -1 e 8. Tutte le codifiche short push interi a 4 byte nello stack. Codifiche più vengono utilizzate per i valori integer a 8 byte e 4 e 8 numeri a virgola mobile in byte, nonché i valori a 4 byte che non rientrano nei form di breve. Esistono tre modi per inserire una costante integer a 8 byte nello stack  
  
 1. Utilizzare il <xref:System.Reflection.Emit.OpCodes.Ldc_I8> istruzione per le costanti che devono essere espressi in più di 32 bit.  
  
 2. Utilizzare il <xref:System.Reflection.Emit.OpCodes.Ldc_I4> istruzione seguita da un <xref:System.Reflection.Emit.OpCodes.Conv_I8> per le costanti che richiedono da 9 a 32 bit.  
  
 3. Utilizzare un'istruzione abbreviata seguita da un <xref:System.Reflection.Emit.OpCodes.Conv_I8> per le costanti che possono essere espressi con un massimo di 8 bit.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldc.i4` opcode:  
  
-   ILGenerator (OpCode, int)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce il valore intero 0 nello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|16|ldc.i4.0|Inserisce 0 nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore 0 viene inserito nello stack.  
  
 Si tratta di una speciale codifica breve per il push dell'integer 0. Tutte le codifiche short speciali push interi a 4 byte nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldc.i4.0` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce il valore intero 1 nello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|17|ldc.i4.1|Inserisce 1 nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore 1 viene inserito nello stack.  
  
 Si tratta di una speciale codifica breve per il push dell'integer 0. Tutte le codifiche short speciali push interi a 4 byte nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldc.i4.1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce il valore intero 2 nello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|18|ldc.i4.2|Inserisce 2 nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore 2 viene inserito nello stack.  
  
 Si tratta di una speciale codifica breve per il push dell'integer 0. Tutte le codifiche short speciali push interi a 4 byte nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldc.i4.2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_3;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce il valore intero 3 nello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|19|ldc.i4.3|Inserisce 3 nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore 3 viene inserito nello stack.  
  
 Si tratta di una speciale codifica breve per il push dell'integer 0. Tutte le codifiche short speciali push interi a 4 byte nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldc.i4.3` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce il valore intero 4 nello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|1A|ldc.i4.4|Inserisce 4 nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore 4 viene inserito nello stack.  
  
 Si tratta di una speciale codifica breve per il push dell'integer 0. Tutte le codifiche short speciali push interi a 4 byte nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldc.i4.4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_5;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce il valore intero 5 nello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|1B|ldc.i4.5|Inserisce 5 nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore 5 viene inserito nello stack.  
  
 Si tratta di una speciale codifica breve per il push dell'integer 0. Tutte le codifiche short speciali push interi a 4 byte nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldc.i4.5` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_6;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce il valore intero 6 nello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|1C|ldc.i4.6|Inserisce 6 nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore 6 viene inserito nello stack.  
  
 Si tratta di una speciale codifica breve per il push dell'integer 0. Tutte le codifiche short speciali push interi a 4 byte nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldc.i4.6` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_7;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce il valore intero 7 nello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|1D|ldc.i4.7|Inserisce 7 nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore 7 viene inserito nello stack.  
  
 Si tratta di una speciale codifica breve per il push dell'integer 0. Tutte le codifiche short speciali push interi a 4 byte nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldc.i4.7` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce il valore intero 8 nello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|1E|ldc.i4.8|Inserisce 8 nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore 8 viene inserito nello stack.  
  
 Si tratta di una speciale codifica breve per il push dell'integer 0. Tutte le codifiche short speciali push interi a 4 byte nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldc.i4.8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_M1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_M1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_M1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_M1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_M1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce il valore intero -1 nello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|15|ldc.i4.m1|Inserisce -1 nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore -1 viene inserito nello stack.  
  
 Si tratta di una speciale codifica breve per il push dell'integer 0. Tutte le codifiche short speciali push interi a 4 byte nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldc.i4.m1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce il valore fornito <see langword="int8" /> nello stack di valutazione come <see langword="int32" /> (forma breve).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|1F < `int8` >|ldc.i4.s `num`|Inserisce `num` nello stack come `int32`, forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore `num` viene inserito nello stack.  
  
 `ldc.i4.s` è una codifica più efficiente per l'inserimento di numeri interi compresi tra -128 a 127 nello stack di valutazione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldc.i4.s` opcode:  
  
-   ILGenerator (OpCode, byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce un valore fornito di tipo <see langword="int64" /> nello stack di valutazione come <see langword="int64" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|21 < `int64` >|ldc.i8 `num`|Inserisce `num` nello stack come `int64`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore `num` viene inserito nello stack.  
  
 Questa codifica inserisce un `int64` valore nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldc.i8` opcode:  
  
-   ILGenerator (OpCode, long)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce un valore fornito di tipo <see langword="float32" /> nello stack di valutazione come tipo <see langword="F" /> (float).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|22 < `float32` >|ldc.r4 `num`|Inserisce `num` nello stack come `F`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore `num` viene inserito nello stack.  
  
 Questa codifica inserisce un `float32` valore nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldc.r4` opcode:  
  
-   ILGenerator (OpCode, singolo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce un valore fornito di tipo <see langword="float64" /> nello stack di valutazione come tipo <see langword="F" /> (float).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|23 < `float64` >|ldc.r8 `num`|Inserisce `num` nello stack come `F`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore `num` viene inserito nello stack.  
  
 Questa codifica inserisce un `float64` valore nello stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldc.r8` opcode:  
  
-   ILGenerator (OpCode, double)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'elemento in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come tipo specificato nell'istruzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La tabella seguente elenca l'istruzione esadecimale e formato assembly di Microsoft intermediate language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|A3 < `T` >|ldelem `typeTok`|Carica l'elemento in `index` all'inizio dello stack come tipo `typeTok`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto `array` viene inserito nello stack.  
  
2.  Un valore di indice `index` viene inserito nello stack.  
  
3.  `index` e `array` vengono estratti dallo stack; il valore archiviato nella posizione `index` in `array` viene cercata.  
  
4.  Il valore viene inserito nello stack.  
  
 Il `ldelem` istruzione carica il valore dell'elemento con indice `index` (tipo `native int`) nella matrice unidimensionale in base zero `array` e lo inserisce nella parte superiore dello stack. Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`.  
  
 Il tipo del valore restituito è specificato il token `typeTok` nell'istruzione.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite superiore di `array`.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldelem` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'elemento con tipo <see langword="native int" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="native int" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|97|ldelem.i|Carica l'elemento con il tipo `native int` in `index` all'inizio dello stack come un `native int`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto `array` viene inserito nello stack.  
  
2.  Un valore di indice `index` viene inserito nello stack.  
  
3.  `index` e `array` vengono estratti dallo stack; il valore archiviato nella posizione `index` in `array` viene cercata.  
  
4.  Il valore viene inserito nello stack.  
  
 Il `ldelem.i` istruzione carica il valore dell'elemento con indice `index` (tipo `native int`) nella matrice unidimensionale in base zero `array` e lo inserisce nella parte superiore dello stack. Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`.  
  
 Il valore restituito per `ldelem.i` è `native int`.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldelem.i` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'elemento con tipo <see langword="int8" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|90|ldelem.i1|Carica l'elemento con il tipo `int8` in `index` all'inizio dello stack come un `int32`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto `array` viene inserito nello stack.  
  
2.  Un valore di indice `index` viene inserito nello stack.  
  
3.  `index` e `array` vengono estratti dallo stack; il valore archiviato nella posizione `index` in `array` viene cercata.  
  
4.  Il valore viene inserito nello stack.  
  
 Il `ldelem.i1` istruzione carica il valore dell'elemento con indice `index` (tipo `native int`) nella matrice unidimensionale in base zero `array` e lo inserisce nella parte superiore dello stack. Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`.  
  
 Il valore restituito per `ldelem.i1` è `int8`.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldelem.i1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'elemento con tipo <see langword="int16" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|92|ldelem.i2|Carica l'elemento con il tipo `int16` in `index` all'inizio dello stack come un `int32`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto `array` viene inserito nello stack.  
  
2.  Un valore di indice `index` viene inserito nello stack.  
  
3.  `index` e `array` vengono estratti dallo stack; il valore archiviato nella posizione `index` in `array` viene cercata.  
  
4.  Il valore viene inserito nello stack.  
  
 Il `ldelem.i2` istruzione carica il valore dell'elemento con indice `index` (tipo `native int`) nella matrice unidimensionale in base zero `array` e lo inserisce nella parte superiore dello stack. Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`.  
  
 Il valore restituito per `ldelem.i2` è `int16`.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldelem.i2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'elemento con tipo <see langword="int32" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|94|ldelem.i4|Carica l'elemento con il tipo `int32` in `index` all'inizio dello stack come un `int32`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto `array` viene inserito nello stack.  
  
2.  Un valore di indice `index` viene inserito nello stack.  
  
3.  `index` e `array` vengono estratti dallo stack; il valore archiviato nella posizione `index` in `array` viene cercata.  
  
4.  Il valore viene inserito nello stack.  
  
 Il `ldelem.i4` istruzione carica il valore dell'elemento con indice `index` (tipo `native int`) nella matrice unidimensionale in base zero `array` e lo inserisce nella parte superiore dello stack. Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`.  
  
 Il valore restituito per `ldelem.i4` è `int32`.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldelem.i4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'elemento con tipo <see langword="int64" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="int64" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|96|ldelem.i8|Carica l'elemento con il tipo `int64` in `index` all'inizio dello stack come un `int64`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto `array` viene inserito nello stack.  
  
2.  Un valore di indice `index` viene inserito nello stack.  
  
3.  `index` e `array` vengono estratti dallo stack; il valore archiviato nella posizione `index` in `array` viene cercata.  
  
4.  Il valore viene inserito nello stack.  
  
 Il `ldelem.i8` istruzione carica il valore dell'elemento con indice `index` (tipo `native int`) nella matrice unidimensionale in base zero `array` e lo inserisce nella parte superiore dello stack. Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`.  
  
 Il valore restituito per `ldelem.i8` è `int64`.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldelem.i8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'elemento con tipo <see langword="float32" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come tipo <see langword="F" /> (float).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|98|ldelem.r4|Carica l'elemento con il tipo `float32` in `index` all'inizio dello stack come un tipo `F`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto `array` viene inserito nello stack.  
  
2.  Un valore di indice `index` viene inserito nello stack.  
  
3.  `index` e `array` vengono estratti dallo stack; il valore archiviato nella posizione `index` in `array` viene cercata.  
  
4.  Il valore viene inserito nello stack.  
  
 Il `ldelem.r4` istruzione carica il valore dell'elemento con indice `index` (tipo `native int`) nella matrice unidimensionale in base zero `array` e lo inserisce nella parte superiore dello stack. Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`.  
  
 Il valore restituito per `ldelem.r4` è `float32`.  
  
 Valori a virgola mobile vengono convertiti nel tipo `F` quando vengono caricati nello stack di valutazione.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldelem.r4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'elemento con tipo <see langword="float64" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come tipo <see langword="F" /> (float).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|99|ldelem.r8|Carica l'elemento con il tipo `float64` in `index` all'inizio dello stack come tipo `F`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto `array` viene inserito nello stack.  
  
2.  Un valore di indice `index` viene inserito nello stack.  
  
3.  `index` e `array` vengono estratti dallo stack; il valore archiviato nella posizione `index` in `array` viene cercata.  
  
4.  Il valore viene inserito nello stack.  
  
 Il `ldelem.r8` istruzione carica il valore dell'elemento con indice `index` (tipo `native int`) nella matrice unidimensionale in base zero `array` e lo inserisce nella parte superiore dello stack. Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`.  
  
 Il valore restituito per `ldelem.r8` è `float64`.  
  
 Valori a virgola mobile vengono convertiti nel tipo `F` quando vengono caricati nello stack di valutazione.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldelem.r8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_Ref;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'elemento contenente un riferimento a un oggetto in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come tipo <see langword="O" /> (riferimento a un oggetto).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|9A|ldelem.ref|Carica l'elemento con un riferimento all'oggetto in `index` all'inizio dello stack come tipo `O`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto `array` viene inserito nello stack.  
  
2.  Un valore di indice `index` viene inserito nello stack.  
  
3.  `index` e `array` vengono estratti dallo stack; il valore archiviato nella posizione `index` in `array` viene cercata.  
  
4.  Il valore viene inserito nello stack.  
  
 Il `ldelem.ref` istruzione carica il valore dell'elemento con indice `index` (tipo `native int`) nella matrice unidimensionale in base zero `array` e lo inserisce nella parte superiore dello stack. Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`.  
  
 Il valore restituito per `ldelem.ref` è di tipo `O` (riferimento all'oggetto).  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldelem.ref` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'elemento con tipo <see langword="unsigned int8" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|91|ldelem.u1|Carica l'elemento con il tipo `unsigned int8` in `index` all'inizio dello stack come un `int32`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto `array` viene inserito nello stack.  
  
2.  Un valore di indice `index` viene inserito nello stack.  
  
3.  `index` e `array` vengono estratti dallo stack; il valore archiviato nella posizione `index` in `array` viene cercata.  
  
4.  Il valore viene inserito nello stack.  
  
 Il `ldelem.u1` istruzione carica il valore dell'elemento con indice `index` (tipo `native int`) nella matrice unidimensionale in base zero `array` e lo inserisce nella parte superiore dello stack. Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`.  
  
 Il valore restituito per `ldelem.u1` è `int8`.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldelem.u1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'elemento con tipo <see langword="unsigned int16" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|93|ldelem.u2|Carica l'elemento con il tipo `unsigned int16` in corrispondenza dell'indice di inizio dello stack come un `int32`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto `array` viene inserito nello stack.  
  
2.  Un valore di indice `index` viene inserito nello stack.  
  
3.  `index` e `array` vengono estratti dallo stack; il valore archiviato nella posizione `index` in `array` viene cercata.  
  
4.  Il valore viene inserito nello stack.  
  
 Il `ldelem.u2` istruzione carica il valore dell'elemento con indice `index` (tipo `native int`) nella matrice unidimensionale in base zero `array` e lo inserisce nella parte superiore dello stack. Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`.  
  
 Il valore restituito per `ldelem.u2` è `int16`.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldelem.u2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'elemento con tipo <see langword="unsigned int32" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|95|ldelem.u4|Carica l'elemento con il tipo `unsigned int32` in corrispondenza dell'indice di inizio dello stack come un `int32`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto `array` viene inserito nello stack.  
  
2.  Un valore di indice `index` viene inserito nello stack.  
  
3.  `index` e `array` vengono estratti dallo stack; il valore archiviato nella posizione `index` in `array` viene cercata.  
  
4.  Il valore viene inserito nello stack.  
  
 Il `ldelem.u4` istruzione carica il valore dell'elemento con indice `index` (tipo `native int`) nella matrice unidimensionale in base zero `array` e lo inserisce nella parte superiore dello stack. Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`.  
  
 Il valore restituito per `ldelem.u4` è `int32`.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se matrice non contiene elementi del tipo richiesto.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldelem.u4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelema">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelema;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelema" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelema As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelema;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'indirizzo dell'elemento di matrice in corrispondenza di un indice di matrice specificato all'inizio dello stack di valutazione come tipo <see langword="&amp;" /> (puntatore gestito).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|8F < `T` >|ldelema `class`|Carica l'indirizzo dell'elemento di matrice in `index` all'inizio dello stack di valutazione come tipo `&` (puntatore gestito).|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto `array` viene inserito nello stack.  
  
2.  Un valore di indice `index` viene inserito nello stack.  
  
3.  `index` e `array` vengono estratti dallo stack; l'indirizzo archiviato nella posizione `index` in `array` viene cercata.  
  
4.  L'indirizzo viene inserito nello stack.  
  
 Il `ldelema` viene utilizzato per recuperare l'indirizzo di un oggetto in un particolare indice in una matrice di oggetti (di tipo `class`). Il `ldelema` istruzione carica l'indirizzo del valore in corrispondenza dell'indice `index` (tipo `native int`) nella matrice unidimensionale in base zero `array` e lo inserisce nella parte superiore dello stack. Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`. Il valore deve essere di tipo `class` passato con l'istruzione.  
  
 Il valore restituito per `ldelema` è un puntatore gestito (tipo `&`).  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldelema` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldfld;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trova il valore di un campo nell'oggetto il cui riferimento si trova attualmente nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|7B < `T` >|ldfld `field`|Inserisce il valore di un campo in un oggetto specificato nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto (o un puntatore) viene inserito nello stack.  
  
2.  Il riferimento all'oggetto (o un puntatore) viene estratto dallo stack; il valore del campo specificato nell'oggetto viene trovato.  
  
3.  Il valore archiviato nel campo viene inserito nello stack.  
  
 Il `ldfld` istruzione inserisce il valore di un campo a cui si trova in un oggetto di nello stack. L'oggetto deve essere sullo stack come un riferimento all'oggetto (tipo `O`), un puntatore gestito (tipo `&`), un puntatore non gestito (tipo `native int`), un puntatore temporaneo (tipo `*`), o un'istanza di un tipo di valore. L'utilizzo di un puntatore non gestito non è consentito in codice verificabile. Il campo dell'oggetto è specificato da un token di metadati che deve fare riferimento a un membro di campo. Il tipo restituito è lo stesso di quello associato al campo. Il campo può essere un campo di istanza (nel qual caso l'oggetto non deve essere un riferimento null) o un campo statico.  
  
 Il `ldfld` istruzione può essere preceduta da una o entrambe le <xref:System.Reflection.Emit.OpCodes.Unaligned> e <xref:System.Reflection.Emit.OpCodes.Volatile> prefissi.  
  
 <xref:System.NullReferenceException> viene generata se l'oggetto è null e il campo non è statico.  
  
 <xref:System.MissingFieldException> viene generata se il campo specificato non viene trovato nei metadati. In genere, questo viene verificato quando le istruzioni Microsoft Intermediate Language (MSIL) vengono convertite in codice nativo, non in fase di esecuzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldfld` opcode:  
  
-   ILGenerator.Emit(OpCode, FieldInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldflda;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trova l'indirizzo di un campo nell'oggetto il cui riferimento si trova attualmente nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|7C < `T` >|ldflda `field`|Inserisce l'indirizzo di `field` in un oggetto specificato nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto (o un puntatore) viene inserito nello stack.  
  
2.  Il riferimento all'oggetto (o un puntatore) viene estratto dallo stack; l'indirizzo del campo specificato nell'oggetto è stato trovato.  
  
3.  L'indirizzo del campo specificato è inserito nello stack.  
  
 Il `ldflda` istruzione inserisce l'indirizzo di un campo a cui si trova in un oggetto di nello stack. L'oggetto deve essere sullo stack come un riferimento all'oggetto (tipo `O`), un puntatore gestito (tipo `&`), un puntatore non gestito (tipo `native int`), un puntatore temporaneo (tipo `*`), o un'istanza di un tipo di valore. L'utilizzo di un puntatore non gestito non è consentito in codice verificabile. Il campo dell'oggetto è specificato da un token di metadati che deve fare riferimento a un membro di campo.  
  
 Il valore restituito da `ldflda` è un puntatore gestito (tipo `&`), a meno che l'oggetto viene inserito nello stack come un puntatore non gestito, nel qual caso l'indirizzo del mittente è anche un puntatore non gestito (tipo `native int`).  
  
 Il `ldflda` istruzione può essere preceduta da una o entrambe le <xref:System.Reflection.Emit.OpCodes.Unaligned> e <xref:System.Reflection.Emit.OpCodes.Volatile> prefissi.  
  
 <xref:System.InvalidOperationException> viene generata se l'oggetto non è presente all'interno del dominio applicazione da cui si accede. Impossibile caricare l'indirizzo di un campo che non è all'interno di accesso al dominio applicazione.  
  
 <xref:System.NullReferenceException> viene generata se l'oggetto è null e il campo non è statico.  
  
 <xref:System.MissingFieldException> viene generata se il campo specificato non viene trovato nei metadati. In genere, questo viene verificato quando le istruzioni Microsoft Intermediate Language (MSIL) vengono convertite in codice nativo, non in fase di esecuzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldflda` opcode:  
  
-   ILGenerator.Emit(OpCode, FieldInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldftn;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce un puntatore non gestito di tipo <see langword="native int" /> al codice nativo che implementa un metodo specifico nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 06 &LT; `T` >|ldftn `method`|Inserisce un puntatore a un metodo a cui fa riferimento `method` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il puntatore non gestito a un metodo specifico viene inserito nello stack.  
  
 Il metodo specifico (`method`) può essere chiamato utilizzando il <xref:System.Reflection.Emit.OpCodes.Calli> istruzione se fa riferimento a un metodo gestito (o uno stub che esegue la transizione da gestito a codice non gestito).  
  
 Il valore restituito punta al codice nativo usando il convenzione di chiamata del CLR. L'indicatore di misura del metodo non deve essere passato al codice nativo non gestito come una routine di callback.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldftn` opcode:  
  
-   ILGenerator (OpCode, MethodInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica indirettamente un valore di tipo <see langword="native int" /> come <see langword="native int" /> nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|4D|ldind.i|Carica il `native int` valore all'indirizzo `addr` nello stack come un `native int`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  L'indirizzo viene estratto dallo stack; viene recuperato il valore che si trova in corrispondenza dell'indirizzo.  
  
3.  Il valore recuperato viene inserito nello stack.  
  
 Il `ldind.i` istruzione carica indirettamente un `native int` valore dall'indirizzo specificato (di tipo `native int`, `&`, o *) nello stack come un `native int`.  
  
 Tutti i `ldind` istruzioni sono collegamenti a un <xref:System.Reflection.Emit.OpCodes.Ldobj> istruzione che specifica la classe di valore incorporato corrispondente.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione. I valori a virgola mobile vengono convertiti in `F` tipo quando vengono caricati nello stack di valutazione.  
  
 Impostato sul formato corretto Microsoft Intermediate Language (MSIL) garantisce che il `ldind` vengono utilizzate le istruzioni in modo coerente con il tipo del puntatore.  
  
 L'indirizzo inizialmente inserito nello stack deve essere allineato alla dimensione standard di oggetti nel computer o un <xref:System.NullReferenceException> può verificarsi (vedere il <xref:System.Reflection.Emit.OpCodes.Unaligned> istruzione per misure preventive di prefisso). I risultati di tutte le istruzioni MSIL che restituiscono indirizzi (ad esempio, <xref:System.Reflection.Emit.OpCodes.Ldloca> e <xref:System.Reflection.Emit.OpCodes.Ldarga>) sono allineati in modo sicuro. Per i tipi di dati maggiori di 1 byte, l'ordinamento dei byte è dipendente dalla CPU di destinazione. Il codice che dipende l'ordine dei byte potrebbe non funzionare in tutte le piattaforme.  
  
 <xref:System.NullReferenceException> può essere generata se viene rilevato un indirizzo non valido.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldind.i` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica indirettamente un valore di tipo <see langword="int8" /> come <see langword="int32" /> nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|46|ldind.i1|Carica il `int8` valore all'indirizzo `addr` nello stack come un `int32`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  L'indirizzo viene estratto dallo stack; viene recuperato il valore che si trova in corrispondenza dell'indirizzo.  
  
3.  Il valore recuperato viene inserito nello stack...  
  
 Il `ldind.i1` istruzione carica indirettamente un `int8` valore dall'indirizzo specificato (di tipo `native int`, `&`, o *) nello stack come un `int32`.  
  
 Tutti i `ldind` istruzioni sono collegamenti a un <xref:System.Reflection.Emit.OpCodes.Ldobj> istruzione che specifica la classe di valore incorporato corrispondente.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione. I valori a virgola mobile vengono convertiti in `F` tipo quando vengono caricati nello stack di valutazione.  
  
 Impostato sul formato corretto Microsoft Intermediate Language (MSIL) garantisce che il `ldind` vengono utilizzate le istruzioni in modo coerente con il tipo del puntatore.  
  
 L'indirizzo inizialmente inserito nello stack deve essere allineato alla dimensione standard di oggetti nel computer o un <xref:System.NullReferenceException> può verificarsi (vedere il <xref:System.Reflection.Emit.OpCodes.Unaligned> istruzione per misure preventive di prefisso). I risultati di tutte le istruzioni MSIL che restituiscono indirizzi (ad esempio, <xref:System.Reflection.Emit.OpCodes.Ldloca> e <xref:System.Reflection.Emit.OpCodes.Ldarga>) sono allineati in modo sicuro. Per i tipi di dati maggiori di 1 byte, l'ordinamento dei byte è dipendente dalla CPU di destinazione. Il codice che dipende l'ordine dei byte potrebbe non funzionare in tutte le piattaforme.  
  
 <xref:System.NullReferenceException> può essere generata se viene rilevato un indirizzo non valido.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldind.i1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica indirettamente un valore di tipo <see langword="int16" /> come <see langword="int32" /> nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|48|ldind.i2|Carica il `int16` valore all'indirizzo `addr` nello stack come un `int32`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  L'indirizzo viene estratto dallo stack; viene recuperato il valore che si trova in corrispondenza dell'indirizzo.  
  
3.  Il valore recuperato viene inserito nello stack.  
  
 Il `ldind.i2` istruzione carica indirettamente un `int16` valore dall'indirizzo specificato (di tipo `native int`, `&`, o *) nello stack come un `int32`.  
  
 Tutti i `ldind` istruzioni sono collegamenti a un <xref:System.Reflection.Emit.OpCodes.Ldobj> istruzione che specifica la classe di valore incorporato corrispondente.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione. I valori a virgola mobile vengono convertiti in `F` tipo quando vengono caricati nello stack di valutazione.  
  
 Impostato sul formato corretto Microsoft Intermediate Language (MSIL) garantisce che il `ldind` vengono utilizzate le istruzioni in modo coerente con il tipo del puntatore.  
  
 L'indirizzo inizialmente inserito nello stack deve essere allineato alla dimensione standard di oggetti nel computer o un <xref:System.NullReferenceException> può verificarsi (vedere il <xref:System.Reflection.Emit.OpCodes.Unaligned> istruzione per misure preventive di prefisso). I risultati di tutte le istruzioni MSIL che restituiscono indirizzi (ad esempio, <xref:System.Reflection.Emit.OpCodes.Ldloca> e <xref:System.Reflection.Emit.OpCodes.Ldarga>) sono allineati in modo sicuro. Per i tipi di dati maggiori di 1 byte, l'ordinamento dei byte è dipendente dalla CPU di destinazione. Il codice che dipende l'ordine dei byte potrebbe non funzionare in tutte le piattaforme.  
  
 <xref:System.NullReferenceException> può essere generata se viene rilevato un indirizzo non valido.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldind.i2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica indirettamente un valore di tipo <see langword="int32" /> come <see langword="int32" /> nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|4A|ldind.i4|Carica il `int32` valore all'indirizzo `addr` nello stack come un `int32`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  L'indirizzo viene estratto dallo stack; viene recuperato il valore che si trova in corrispondenza dell'indirizzo.  
  
3.  Il valore recuperato viene inserito nello stack.  
  
 Il `ldind.i4` istruzione carica indirettamente un `int32` valore dall'indirizzo specificato (di tipo `native int`, `&`, o *) nello stack come un `int32`.  
  
 Tutti i `ldind` istruzioni sono collegamenti a un <xref:System.Reflection.Emit.OpCodes.Ldobj> istruzione che specifica la classe di valore incorporato corrispondente.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione. I valori a virgola mobile vengono convertiti in `F` tipo quando vengono caricati nello stack di valutazione.  
  
 Impostato sul formato corretto Microsoft Intermediate Language (MSIL) garantisce che il `ldind` vengono utilizzate le istruzioni in modo coerente con il tipo del puntatore.  
  
 L'indirizzo inizialmente inserito nello stack deve essere allineato alla dimensione standard di oggetti nel computer o un <xref:System.NullReferenceException> può verificarsi (vedere il <xref:System.Reflection.Emit.OpCodes.Unaligned> istruzione per misure preventive di prefisso). I risultati di tutte le istruzioni MSIL che restituiscono indirizzi (ad esempio, <xref:System.Reflection.Emit.OpCodes.Ldloca> e <xref:System.Reflection.Emit.OpCodes.Ldarga>) sono allineati in modo sicuro. Per i tipi di dati maggiori di 1 byte, l'ordinamento dei byte è dipendente dalla CPU di destinazione. Il codice che dipende l'ordine dei byte potrebbe non funzionare in tutte le piattaforme.  
  
 <xref:System.NullReferenceException> può essere generata se viene rilevato un indirizzo non valido.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldind.i4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica indirettamente un valore di tipo <see langword="int64" /> come <see langword="int64" /> nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|4C|ldind.i8|Carica il `int64` valore all'indirizzo `addr` nello stack come un `int64`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  L'indirizzo viene estratto dallo stack; viene recuperato il valore che si trova in corrispondenza dell'indirizzo.  
  
3.  Il valore recuperato viene inserito nello stack.  
  
 Il `ldind.i8` istruzione carica indirettamente un `int64` valore dall'indirizzo specificato (di tipo `native int`, `&`, o *) nello stack come un `int64`.  
  
 Tutti i `ldind` istruzioni sono collegamenti a un <xref:System.Reflection.Emit.OpCodes.Ldobj> istruzione che specifica la classe di valore incorporato corrispondente.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione. I valori a virgola mobile vengono convertiti in `F` tipo quando vengono caricati nello stack di valutazione.  
  
 Impostato sul formato corretto Microsoft Intermediate Language (MSIL) garantisce che il `ldind` vengono utilizzate le istruzioni in modo coerente con il tipo del puntatore.  
  
 L'indirizzo inizialmente inserito nello stack deve essere allineato alla dimensione standard di oggetti nel computer o un <xref:System.NullReferenceException> può verificarsi (vedere il <xref:System.Reflection.Emit.OpCodes.Unaligned> istruzione per misure preventive di prefisso). I risultati di tutte le istruzioni MSIL che restituiscono indirizzi (ad esempio, <xref:System.Reflection.Emit.OpCodes.Ldloca> e <xref:System.Reflection.Emit.OpCodes.Ldarga>) sono allineati in modo sicuro. Per i tipi di dati maggiori di 1 byte, l'ordinamento dei byte è dipendente dalla CPU di destinazione. Il codice che dipende l'ordine dei byte potrebbe non funzionare in tutte le piattaforme.  
  
 <xref:System.NullReferenceException> può essere generata se viene rilevato un indirizzo non valido.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldind.i8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica indirettamente un valore di tipo <see langword="float32" /> come un tipo <see langword="F" /> (float) nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|4E|ldind.r4|Carica il `float32` valore all'indirizzo `addr` nello stack come un tipo `F`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  L'indirizzo viene estratto dallo stack; viene recuperato il valore che si trova in corrispondenza dell'indirizzo.  
  
3.  Il valore recuperato viene inserito nello stack.  
  
 Il `ldind.r4` istruzione carica indirettamente un `float32` valore dall'indirizzo specificato (di tipo `native int`, `&`, o *) nello stack come un tipo `F`.  
  
 Tutti i `ldind` istruzioni sono collegamenti a un <xref:System.Reflection.Emit.OpCodes.Ldobj> istruzione che specifica la classe di valore incorporato corrispondente.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione. I valori a virgola mobile vengono convertiti in `F` tipo quando vengono caricati nello stack di valutazione.  
  
 Impostato sul formato corretto Microsoft Intermediate Language (MSIL) garantisce che il `ldind` vengono utilizzate le istruzioni in modo coerente con il tipo del puntatore.  
  
 L'indirizzo inizialmente inserito nello stack deve essere allineato alla dimensione standard di oggetti nel computer o un <xref:System.NullReferenceException> può verificarsi (vedere il <xref:System.Reflection.Emit.OpCodes.Unaligned> istruzione per misure preventive di prefisso). I risultati di tutte le istruzioni MSIL che restituiscono indirizzi (ad esempio, <xref:System.Reflection.Emit.OpCodes.Ldloca> e <xref:System.Reflection.Emit.OpCodes.Ldarga>) sono allineati in modo sicuro. Per i tipi di dati maggiori di 1 byte, l'ordinamento dei byte è dipendente dalla CPU di destinazione. Il codice che dipende l'ordine dei byte potrebbe non funzionare in tutte le piattaforme.  
  
 <xref:System.NullReferenceException> può essere generata se viene rilevato un indirizzo non valido.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldind.r4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica indirettamente un valore di tipo <see langword="float64" /> come un tipo <see langword="F" /> (float) nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|4F|ldind.r8|Carica il `float64` valore all'indirizzo `addr` nello stack come un tipo `F`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  L'indirizzo viene estratto dallo stack; viene recuperato il valore che si trova in corrispondenza dell'indirizzo.  
  
3.  Il valore recuperato viene inserito nello stack.  
  
 Il `ldind.r8` istruzione carica indirettamente un `float64` valore dall'indirizzo specificato (di tipo `native int`, `&`, o *) nello stack come un `float64`.  
  
 Tutti i `ldind` istruzioni sono collegamenti a un <xref:System.Reflection.Emit.OpCodes.Ldobj> istruzione che specifica la classe di valore incorporato corrispondente.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione. I valori a virgola mobile vengono convertiti in `F` tipo quando vengono caricati nello stack di valutazione.  
  
 Impostato sul formato corretto Microsoft Intermediate Language (MSIL) garantisce che il `ldind` vengono utilizzate le istruzioni in modo coerente con il tipo del puntatore.  
  
 L'indirizzo inizialmente inserito nello stack deve essere allineato alla dimensione standard di oggetti nel computer o un <xref:System.NullReferenceException> può verificarsi (vedere il <xref:System.Reflection.Emit.OpCodes.Unaligned> istruzione per misure preventive di prefisso). I risultati di tutte le istruzioni MSIL che restituiscono indirizzi (ad esempio, <xref:System.Reflection.Emit.OpCodes.Ldloca> e <xref:System.Reflection.Emit.OpCodes.Ldarga>) sono allineati in modo sicuro. Per i tipi di dati maggiori di 1 byte, l'ordinamento dei byte è dipendente dalla CPU di destinazione. Il codice che dipende l'ordine dei byte potrebbe non funzionare in tutte le piattaforme.  
  
 <xref:System.NullReferenceException> può essere generata se viene rilevato un indirizzo non valido.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldind.r8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_Ref;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica indirettamente un riferimento a un oggetto come un tipo <see langword="O" /> (riferimento a un oggetto) nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|50|ldind.ref|Carica il riferimento all'oggetto all'indirizzo `addr` nello stack come un tipo `O`|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  L'indirizzo viene estratto dallo stack; il riferimento all'oggetto si trova in corrispondenza dell'indirizzo viene recuperato.  
  
3.  Il riferimento recuperato viene inserito nello stack.  
  
 Il `ldind.ref` istruzione carica indirettamente il riferimento all'oggetto l'indirizzo specificato (di tipo `native int`, `&`, o *) nello stack come tipo `O`.  
  
 Tutti i `ldind` istruzioni sono collegamenti a un <xref:System.Reflection.Emit.OpCodes.Ldobj> istruzione che specifica la classe di valore incorporato corrispondente.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione. I valori a virgola mobile vengono convertiti in `F` tipo quando vengono caricati nello stack di valutazione.  
  
 Impostato sul formato corretto Microsoft Intermediate Language (MSIL) garantisce che il `ldind` vengono utilizzate le istruzioni in modo coerente con il tipo del puntatore.  
  
 L'indirizzo inizialmente inserito nello stack deve essere allineato alla dimensione standard di oggetti nel computer o un <xref:System.NullReferenceException> può verificarsi (vedere il <xref:System.Reflection.Emit.OpCodes.Unaligned> istruzione per misure preventive di prefisso). I risultati di tutte le istruzioni MSIL che restituiscono indirizzi (ad esempio, <xref:System.Reflection.Emit.OpCodes.Ldloca> e <xref:System.Reflection.Emit.OpCodes.Ldarga>) sono allineati in modo sicuro. Per i tipi di dati maggiori di 1 byte, l'ordinamento dei byte è dipendente dalla CPU di destinazione. Il codice che dipende l'ordine dei byte potrebbe non funzionare in tutte le piattaforme.  
  
 <xref:System.NullReferenceException> può essere generata se viene rilevato un indirizzo non valido.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldind.ref` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica indirettamente un valore di tipo <see langword="unsigned int8" /> come <see langword="int32" /> nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|47|ldind.u1|Carica il `unsigned int8` valore all'indirizzo `addr` nello stack come un `int32`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  L'indirizzo viene estratto dallo stack; viene recuperato il valore che si trova in corrispondenza dell'indirizzo.  
  
3.  Il valore recuperato viene inserito nello stack.  
  
 Il `ldind.u1` istruzione carica indirettamente un `unsigned int8` valore dall'indirizzo specificato (di tipo`native int`, `&`, o *) nello stack come un `int32`.  
  
 Tutti i `ldind` istruzioni sono collegamenti a un <xref:System.Reflection.Emit.OpCodes.Ldobj> istruzione che specifica la classe di valore incorporato corrispondente.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione. I valori a virgola mobile vengono convertiti in `F` tipo quando vengono caricati nello stack di valutazione.  
  
 Impostato sul formato corretto Microsoft Intermediate Language (MSIL) garantisce che il `ldind` vengono utilizzate le istruzioni in modo coerente con il tipo del puntatore.  
  
 L'indirizzo inizialmente inserito nello stack deve essere allineato alla dimensione standard di oggetti nel computer o un <xref:System.NullReferenceException> può verificarsi (vedere il <xref:System.Reflection.Emit.OpCodes.Unaligned> istruzione per misure preventive di prefisso). I risultati di tutte le istruzioni MSIL che restituiscono indirizzi (ad esempio, <xref:System.Reflection.Emit.OpCodes.Ldloca> e <xref:System.Reflection.Emit.OpCodes.Ldarga>) sono allineati in modo sicuro. Per i tipi di dati maggiori di 1 byte, l'ordinamento dei byte è dipendente dalla CPU di destinazione. Il codice che dipende l'ordine dei byte potrebbe non funzionare in tutte le piattaforme.  
  
 <xref:System.NullReferenceException> può essere generata se viene rilevato un indirizzo non valido.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldind.u1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica indirettamente un valore di tipo <see langword="unsigned int16" /> come <see langword="int32" /> nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|49|ldind.u2|Carica il `unsigned int16` valore all'indirizzo `addr` nello stack come un `int32`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  L'indirizzo viene estratto dallo stack; viene recuperato il valore che si trova in corrispondenza dell'indirizzo.  
  
3.  Il valore recuperato viene inserito nello stack.  
  
 Il `ldind.u2` istruzione carica indirettamente un `unsigned int16` valore dall'indirizzo specificato (di tipo `native int`, `&`, o *) nello stack come un `int32`.  
  
 Tutti i `ldind` istruzioni sono collegamenti a un <xref:System.Reflection.Emit.OpCodes.Ldobj> istruzione che specifica la classe di valore incorporato corrispondente.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione. I valori a virgola mobile vengono convertiti in `F` tipo quando vengono caricati nello stack di valutazione.  
  
 Impostato sul formato corretto Microsoft Intermediate Language (MSIL) garantisce che il `ldind` vengono utilizzate le istruzioni in modo coerente con il tipo del puntatore.  
  
 L'indirizzo inizialmente inserito nello stack deve essere allineato alla dimensione standard di oggetti nel computer o un <xref:System.NullReferenceException> può verificarsi (vedere il <xref:System.Reflection.Emit.OpCodes.Unaligned> istruzione per misure preventive di prefisso). I risultati di tutte le istruzioni MSIL che restituiscono indirizzi (ad esempio, <xref:System.Reflection.Emit.OpCodes.Ldloca> e <xref:System.Reflection.Emit.OpCodes.Ldarga>) sono allineati in modo sicuro. Per i tipi di dati maggiori di 1 byte, l'ordinamento dei byte è dipendente dalla CPU di destinazione. Il codice che dipende l'ordine dei byte potrebbe non funzionare in tutte le piattaforme.  
  
 <xref:System.NullReferenceException> può essere generata se viene rilevato un indirizzo non valido.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldind.u2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica indirettamente un valore di tipo <see langword="unsigned int32" /> come <see langword="int32" /> nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|4B|ldind.u4|Carica il `unsigned int32` valore all'indirizzo `addr` nello stack come un `int32`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  L'indirizzo viene estratto dallo stack; viene recuperato il valore che si trova in corrispondenza dell'indirizzo.  
  
3.  Il valore recuperato viene inserito nello stack.  
  
 Il `ldind.u4` istruzione carica indirettamente un `unsigned int32` valore dall'indirizzo specificato (di tipo `native int`, `&`, o *) nello stack come un `int32`.  
  
 Tutti i `ldind` istruzioni sono collegamenti a un <xref:System.Reflection.Emit.OpCodes.Ldobj> istruzione che specifica la classe di valore incorporato corrispondente.  
  
 Si noti che i valori integer con meno di 4 byte sono estesi a `int32` (non `native int`) quando vengono caricati nello stack di valutazione. I valori a virgola mobile vengono convertiti in `F` tipo quando vengono caricati nello stack di valutazione.  
  
 Impostato sul formato corretto Microsoft Intermediate Language (MSIL) garantisce che il `ldind` vengono utilizzate le istruzioni in modo coerente con il tipo del puntatore.  
  
 L'indirizzo inizialmente inserito nello stack deve essere allineato alla dimensione standard di oggetti nel computer o un <xref:System.NullReferenceException> può verificarsi (vedere il <xref:System.Reflection.Emit.OpCodes.Unaligned> istruzione per misure preventive di prefisso). I risultati di tutte le istruzioni MSIL che restituiscono indirizzi (ad esempio, <xref:System.Reflection.Emit.OpCodes.Ldloca> e <xref:System.Reflection.Emit.OpCodes.Ldarga>) sono allineati in modo sicuro. Per i tipi di dati maggiori di 1 byte, l'ordinamento dei byte è dipendente dalla CPU di destinazione. Il codice che dipende l'ordine dei byte potrebbe non funzionare in tutte le piattaforme.  
  
 <xref:System.NullReferenceException> può essere generata se viene rilevato un indirizzo non valido.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldind.u4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldlen">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldlen;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldlen" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldlen As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldlen;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce il numero di elementi di una matrice unidimensionale in base zero nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|8E|ldlen|Inserisce la lunghezza (di tipo `natural unsigned int`) di una matrice nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Riferimento a un oggetto in una matrice viene inserito nello stack.  
  
2.  Il riferimento alla matrice viene estratto dallo stack e la lunghezza viene calcolata.  
  
3.  La lunghezza viene inserita nello stack.  
  
 Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`. La lunghezza viene restituita come un `natural unsigned int`.  
  
 <xref:System.NullReferenceException> viene generata se il riferimento alla matrice è un riferimento null.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldlen` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica la variabile locale in corrispondenza di un indice specifico nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 0C &LT; `unsigned int16` >|ldloc `index`|Carica la variabile locale in corrispondenza dell'indice `index` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore della variabile locale in corrispondenza dell'indice specificato viene inserito nello stack.  
  
 Il `ldloc` istruzione inserisce il contenuto del numero della variabile locale in corrispondenza dell'indice passato nello stack di valutazione, in cui le variabili locali vengono numerate a partire da 0. Le variabili locali vengono inizializzate su 0 prima del metodo solo se il flag di inizializzazione nel metodo è true. Sono disponibili 65.535 (2 ^ 16 - 1) le variabili locali possibili (0-65.534). Indice 65.535 non è valido in quanto implementazioni simili utilizzeranno un integer a 2 byte per tenere traccia sia un indice locale, insieme al numero totale di variabili locali per un metodo specificato. Se un indice di 65535 è stato reso valido, sarebbe necessario un valore integer più ampio tenere traccia del numero di variabili locali in tale metodo.  
  
 Il `ldloc.0`, `ldloc.1`, `ldloc.2`, e `ldloc.3` istruzioni forniscono una codifica efficiente per l'accesso alle prime quattro variabili locali.  
  
 Il tipo del valore è uguale al tipo della variabile locale, viene specificato nell'intestazione del metodo. Vedere le variabili partizione i locali che sono minori di 4 byte vengono espanse per digitare `int32` quando vengono caricati nello stack. I valori a virgola mobile vengono espansi fino alle dimensioni native (tipo `F`).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload è possibile utilizzare il `ldloc` opcode:  
  
-   ILGenerator (OpCode, LocalBuilder)  
  
-   ILGenerator (OpCode, short)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica la variabile locale in corrispondenza dell'indice 0 nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|06|ldloc.0|Carica la variabile locale in corrispondenza dell'indice 0 nello stack di valutazione.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore della variabile locale in corrispondenza dell'indice 0 viene inserito nello stack.  
  
 `ldloc.0` rappresenta una codifica particolarmente efficace per <xref:System.Reflection.Emit.OpCodes.Ldloc>, che consente l'accesso alla variabile locale in corrispondenza dell'indice 0.  
  
 Il tipo del valore è uguale al tipo della variabile locale, viene specificato nell'intestazione del metodo. Le variabili locali che sono inferiori a 4 byte vengono espanse per digitare `int32` quando vengono caricati nello stack. I valori a virgola mobile vengono espansi fino alle dimensioni native (tipo `F`).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldloc.0` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica la variabile locale in corrispondenza dell'indice 1 nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|07|ldloc.1|Carica la variabile locale in corrispondenza dell'indice 1 nello stack di valutazione.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore della variabile locale in corrispondenza dell'indice 1 viene inserito nello stack.  
  
 `ldloc.1` rappresenta una codifica particolarmente efficace per <xref:System.Reflection.Emit.OpCodes.Ldloc>, che consente l'accesso alla variabile locale in corrispondenza dell'indice 1.  
  
 Il tipo del valore è uguale al tipo della variabile locale, viene specificato nell'intestazione del metodo. Le variabili locali che sono inferiori a 4 byte vengono espanse per digitare `int32` quando vengono caricati nello stack. I valori a virgola mobile vengono espansi fino alle dimensioni native (tipo `F`).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldloc.1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica la variabile locale in corrispondenza dell'indice 2 nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|08|ldloc.2|Carica la variabile locale in corrispondenza dell'indice 2 nello stack di valutazione.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore della variabile locale in corrispondenza dell'indice 2 viene inserito nello stack.  
  
 `ldloc.2` rappresenta una codifica particolarmente efficace per <xref:System.Reflection.Emit.OpCodes.Ldloc>, che consente l'accesso alla variabile locale in corrispondenza dell'indice 2.  
  
 Il tipo del valore è uguale al tipo della variabile locale, viene specificato nell'intestazione del metodo. Le variabili locali che sono inferiori a 4 byte vengono espanse per digitare `int32` quando vengono caricati nello stack. I valori a virgola mobile vengono espansi fino alle dimensioni native (tipo `F`).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldloc.2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_3;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica la variabile locale in corrispondenza dell'indice 3 nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|09|ldloc.3|Carica la variabile locale in corrispondenza dell'indice 3 nello stack di valutazione.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore della variabile locale in corrispondenza dell'indice 3 viene inserito nello stack.  
  
 `ldloc.3` rappresenta una codifica particolarmente efficace per <xref:System.Reflection.Emit.OpCodes.Ldloc>, che consente di accedere alla variabile locale in corrispondenza dell'indice 3.  
  
 Il tipo del valore è uguale al tipo della variabile locale, viene specificato nell'intestazione del metodo. Le variabili locali che sono inferiori a 4 byte vengono espanse per digitare `int32` quando vengono caricati nello stack. I valori a virgola mobile vengono espansi fino alle dimensioni native (tipo `F`).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldloc.3` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica la variabile locale in corrispondenza di un indice specifico nello stack di valutazione, forma breve.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|11 < `unsigned int8` >|ldloc.s `index`|Carica la variabile locale in corrispondenza dell'indice `index` nello stack, forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore della variabile locale in corrispondenza dell'indice specificato viene inserito nello stack.  
  
 Il `ldloc.s` istruzione inserisce il contenuto del numero della variabile locale in corrispondenza dell'indice passato nello stack di valutazione, in cui le variabili locali vengono numerate a partire da 0. Prima di inserire il metodo se il flag di inizializzazione nel metodo è true, le variabili locali vengono inizializzate a 0. Sono disponibili 256 (2 ^ 8) variabili locali (0-255) in forma breve, ovvero una codifica più efficiente `ldloc`.  
  
 Il tipo del valore è uguale al tipo della variabile locale, viene specificato nell'intestazione del metodo. Vedere le variabili partizione i locali che sono minori di 4 byte vengono espanse per digitare `int32` quando vengono caricati nello stack. I valori a virgola mobile vengono espansi fino alle dimensioni native (tipo `F`).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload è possibile utilizzare il `ldloc.s` opcode:  
  
-   ILGenerator (OpCode, LocalBuilder)  
  
-   ILGenerator (OpCode, byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'indirizzo della variabile locale in corrispondenza di un indice specifico nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE OD &LT; `unsigned int16` >|ldloca `index`|Carica l'indirizzo della variabile locale in `index` nello stack di valutazione.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  L'indirizzo archiviato nella variabile locale in corrispondenza dell'indice specificato viene inserito nello stack.  
  
 Il `ldloca` istruzione inserisce l'indirizzo del numero della variabile locale in corrispondenza dell'indice passato nello stack, in cui le variabili locali sono numerate a partire da 0. Il valore inserito nello stack è già allineato correttamente per l'utilizzo con istruzioni come <xref:System.Reflection.Emit.OpCodes.Ldind_I> e <xref:System.Reflection.Emit.OpCodes.Stind_I>. Il risultato è un puntatore temporaneo (tipo `*`).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldloca` opcode:  
  
-   ILGenerator (OpCode, short)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Carica l'indirizzo della variabile locale in corrispondenza di un indice specifico nello stack di valutazione, forma breve.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|12 < `unsigned int8` >|ldloca.s `index`|Carica l'indirizzo della variabile locale in `index` nello stack di valutazione, forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  L'indirizzo archiviato nella variabile locale in corrispondenza dell'indice specificato viene inserito nello stack.  
  
 Il `ldloca.s` istruzione inserisce l'indirizzo del numero della variabile locale in corrispondenza dell'indice passato nello stack, in cui le variabili locali sono numerate a partire da 0. Il valore inserito nello stack è già allineato correttamente per l'utilizzo con istruzioni come <xref:System.Reflection.Emit.OpCodes.Ldind_I> e <xref:System.Reflection.Emit.OpCodes.Stind_I>. Il risultato è un puntatore temporaneo (tipo `*`).  
  
 Il `ldloca.s` istruzione fornisce una codifica efficiente per l'utilizzo con le variabili locali, tra 0 e 255.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldloca.s` opcode:  
  
-   ILGenerator (OpCode, byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldnull">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldnull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldnull" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldnull As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldnull;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce un riferimento null di tipo <see langword="O" /> nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|14|ldnull|Inserisce un riferimento null nello stack|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Riferimento a un oggetto null viene inserito nello stack.  
  
 `ldnull` Inserisce un riferimento null (tipo `O`) nello stack. Viene utilizzato per inizializzare i percorsi prima che siano compilati con i dati oppure quando è obsoleto.  
  
 `ldnull` fornisce un riferimento null indipendente dalle dimensioni.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldnull` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldobj;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Copia l'oggetto tipo di valore a cui punta un indirizzo all'inizio dello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|71 < `T` >|ldobj `class`|Copia un'istanza del tipo di valore `class` allo stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  L'indirizzo di un oggetto di tipo valore viene inserito nello stack.  
  
2.  L'indirizzo viene estratto dallo stack e l'istanza a quell'indirizzo specifico viene cercata.  
  
3.  Il valore dell'oggetto archiviato in corrispondenza dell'indirizzo viene inserito nello stack.  
  
 Il `ldobj` istruzione consente di passare un tipo di valore come parametro.  
  
 Il `ldobj` istruzione copia il valore a cui puntato `addrOfValObj` (di tipo `&`, `*`, o `native int`) all'inizio dello stack. Il numero di byte copiati dipende dalle dimensioni della classe (come specificato da di `class` parametro). Il `class` parametro è un token di metadati che rappresenta il tipo di valore.  
  
 L'operazione del `ldobj` istruzione può essere modificato da un immediatamente precedente <xref:System.Reflection.Emit.OpCodes.Volatile> o <xref:System.Reflection.Emit.OpCodes.Unaligned> immediatamente precedente.  
  
 <xref:System.TypeLoadException> viene generata se non è possibile trovare la classe. In genere, questo viene rilevato quando l'istruzione di Microsoft Intermediate Language (MSIL) viene convertito in codice nativo piuttosto che in fase di esecuzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldobj` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsfld;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce il valore di un campo statico nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|7E < `T` >|ldsfld `field`|Inserire il valore di `field` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore del campo specifico viene inserito nello stack.  
  
 Il `ldsfld` istruzione inserisce il valore di un valore statico (condiviso tra tutte le istanze di una classe) campo nello stack. Il tipo restituito è quello associato al token di metadati passato `field`.  
  
 Il `ldsfld` istruzione può disporre di un <xref:System.Reflection.Emit.OpCodes.Volatile> prefisso.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldsfld` opcode:  
  
-   ILGenerator.Emit(OpCode, FieldInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsflda;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce l'indirizzo di un campo statico nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|7F < `T` >|ldsflda `field`|Inserisce l'indirizzo di `field` nello stack|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  L'indirizzo di un campo specifico viene inserito nello stack.  
  
 Il `ldsflda` istruzione inserisce l'indirizzo di un valore statico (condiviso tra tutte le istanze di una classe) campo nello stack. L'indirizzo può essere rappresentato come un puntatore temporaneo (tipo `*`) se il token di metadati `field` fa riferimento a un tipo la cui memoria è gestita. In caso contrario, corrisponde a un puntatore non gestito (tipo `native int`). Si noti che `field` può essere un valore statico globale con un indirizzo virtuale relativo assegnato (l'offset del campo dall'indirizzo di base in cui il file PE contiene viene caricato in memoria) in cui la memoria è gestita.  
  
 Il `ldsflda` istruzione può disporre di un <xref:System.Reflection.Emit.OpCodes.Volatile> prefisso.  
  
 <xref:System.MissingFieldException> viene generata se il campo non viene trovato nei metadati. In genere, questo viene verificato quando le istruzioni Microsoft Intermediate Language (MSIL) vengono convertite in codice nativo, non in fase di esecuzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldsflda` opcode:  
  
-   ILGenerator.Emit(OpCode, FieldInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldstr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldstr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldstr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldstr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldstr;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce un nuovo riferimento a un oggetto in un valore letterale stringa archiviato nei metadati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|72 < `T` >|ldstr `mdToken`|Inserisce un oggetto stringa per il token di stringa di metadati `mdToken`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Riferimento a una stringa di un oggetto viene inserito nello stack.  
  
 Il `ldstr` istruzione inserisce un riferimento all'oggetto (tipo `O`) a un nuovo oggetto stringa che rappresenta la stringa letterale archiviata nei metadati. Il `ldstr` istruzione alloca la quantità di memoria necessaria ed esegue qualsiasi conversione di formato è necessario convertire il valore letterale stringa dal formato utilizzato nel file di formato di stringa richiesto in fase di esecuzione.  
  
 Common Language Infrastructure (CLI) garantisce che il risultato di due `ldstr` istruzioni che fanno riferimento a due token di metadati che hanno la stessa sequenza di caratteri restituiscano esattamente lo stesso oggetto di stringa (un processo noto come "inserimento di stringa").  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldstr` opcode:  
  
-   ILGenerator (OpCode, stringa)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldtoken">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldtoken;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldtoken" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldtoken As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldtoken;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte un token di metadati nella relativa rappresentazione di runtime, inserendolo nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|D0 < `T` >|ldtoken `token`|Converte un token di metadati nella relativa rappresentazione di runtime.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il token passato viene convertito in un `RuntimeHandle` e inserito nello stack.  
  
 Il `ldtoken` istruzione inserisce un `RuntimeHandle` per il token di metadati specificato. Oggetto `RuntimeHandle` può essere un `fieldref/fielddef`, `methodref/methoddef`, o un `typeref/typedef`.  
  
 Il valore inserito nello stack può essere utilizzato nelle chiamate a `Reflection` metodi nella libreria di classi di sistema.  
  
 Per informazioni sugli handle di runtime, vedere le seguenti classi: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, e <xref:System.RuntimeMethodHandle>.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload è possibile utilizzare il `ldtoken` opcode:  
  
-   ILGenerator (OpCode, MethodInfo)  
  
-   ILGenerator.Emit(OpCode, FieldInfo)  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldvirtftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldvirtftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldvirtftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldvirtftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldvirtftn;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce un puntatore non gestito di tipo (<see langword="native int" />) al codice nativo che implementa un particolare metodo virtual con un oggetto specificato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 07 &LT; `T` >|ldvirtftn `method`|Inserisce il puntatore a un metodo virtual `method` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Riferimento a un oggetto viene inserito nello stack.  
  
2.  Il riferimento all'oggetto viene estratto dallo stack e l'indirizzo del punto di ingresso al metodo (come specificato dal token di metadati `method`) viene cercata.  
  
3.  Puntatore a `method` viene inserito nello stack.  
  
 Il puntatore non gestito risulta inserito nello stack dal `ldvirtftn` istruzione può essere chiamato utilizzando il <xref:System.Reflection.Emit.OpCodes.Calli> istruzione se fa riferimento a un metodo gestito (o uno stub che esegue la transizione da gestito a codice non gestito).  
  
 Il puntatore non gestito fa riferimento al codice nativo usando il convenzione di chiamata del CLR. L'indicatore di misura del metodo non deve essere passato al codice nativo non gestito come una routine di callback.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ldvirtftn` opcode:  
  
-   ILGenerator (OpCode, MethodInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Esce da un'area protetta di codice, trasferendo il controllo in modo incondizionato a un'istruzione di destinazione specifica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|DD < `int32` >|lasciare `target`|Esce da un'area protetta di codice.|  
  
 Non vi è alcun comportamento di transizione dello stack specificato per questa istruzione.  
  
 Il `leave` istruzione trasferisce il controllo all'istruzione di destinazione specifica, rappresentata come offset con segno a 4 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Il `leave` è simile all'istruzione il `br` (istruzione), ma consente di uscire da un `try`, `filter`, o `catch` blocco mentre le normali istruzioni branch possono essere utilizzate solo in tale blocco per trasferire il controllo all'interno di . Il `leave` istruzione svuota lo stack di valutazione e assicura che circostanti appropriati `finally` i blocchi vengono eseguiti.  
  
 Non è possibile utilizzare un `leave` per uscire dall'istruzione di un `finally` blocco. Per facilitare la generazione di codice per i gestori di eccezioni è valida all'interno di un blocco catch per utilizzare un `leave` istruzione per trasferire il controllo a qualsiasi istruzione all'interno associato `try` blocco.  
  
 Se un'istruzione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload è possibile utilizzare il `leave` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Esce da un'area protetta di codice, trasferendo il controllo in modo incondizionato a un'istruzione di destinazione (forma breve).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|GERMANIA &LT; `int8` >|leave. s `target`|Uscire da un'area protetta di codice, la forma breve.|  
  
 Non vi è alcun comportamento di transizione dello stack specificato per questa istruzione.  
  
 Il `leave.s` istruzione trasferisce il controllo all'istruzione di destinazione passata, rappresentata come offset con segno a 1 byte dall'inizio dell'istruzione successiva all'istruzione corrente.  
  
 Il `leave.s` è simile all'istruzione il `br` (istruzione), ma consente di uscire da un `try`, `filter`, o `catch` blocco mentre le normali istruzioni branch possono essere utilizzate solo in tale blocco per trasferire il controllo all'interno di . Il `leave.s` istruzione svuota lo stack di valutazione e assicura che circostanti appropriati `finally` i blocchi vengono eseguiti.  
  
 Non è possibile utilizzare un `leave.s` per uscire dall'istruzione di un `finally` blocco. Per facilitare la generazione di codice per i gestori di eccezioni è valida all'interno di un blocco catch per utilizzare un `leave.s` istruzione per trasferire il controllo a qualsiasi istruzione all'interno associato `try` blocco.  
  
 Se un'istruzione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `leave.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Localloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Localloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Localloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Localloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Localloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Localloc;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Esegue l'allocazione di un numero di byte dal pool di memoria dinamica locale e inserisce l'indirizzo (un puntatore transitorio di tipo <see langword="*" />) del primo byte allocato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 0F|localloc|Allocare spazio dall'heap locale.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il numero di byte da allocare viene inserito nello stack.  
  
2.  Il numero di byte viene estratto dallo stack; una quantità di memoria corrispondente alla dimensione viene allocata dall'heap locale.  
  
3.  Un puntatore al primo byte della memoria allocata viene inserito nello stack.  
  
 Il `localloc` istruzione alloca `size` (tipo `natural unsigned int`) pool e restituisce l'indirizzo di byte da memoria dinamica locale (un puntatore temporaneo, il tipo `*`) del primo byte allocato. Il blocco di memoria restituito viene inizializzato su 0 solo se il flag di inizializzazione nel metodo `true`. Quando il metodo corrente esegue un <xref:System.Reflection.Emit.OpCodes.Ret>, il pool di memoria locale è reso disponibile per il riutilizzo.  
  
 L'indirizzo risulta è allineato in modo che qualsiasi tipo di dati primitivi possa essere archiviata utilizzando il `stind` istruzioni (ad esempio <xref:System.Reflection.Emit.OpCodes.Stind_I4>) e caricati utilizzando il `ldind` istruzioni (ad esempio <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).  
  
 Il `localloc` istruzione non può verificarsi all'interno di un `filter`, `catch`, `finally`, o `fault` blocco.  
  
 <xref:System.StackOverflowException> viene generata se la memoria è insufficiente per soddisfare la richiesta.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `localloc` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mkrefany">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mkrefany;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mkrefany" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mkrefany As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mkrefany;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce un riferimento tipizzato a un'istanza di un tipo specifico nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|C6 < `T` >|mkrefany `class`|Inserisce un riferimento tipizzato di tipo `class` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Puntatore alla porzione di dati viene inserito nello stack.  
  
2.  Il puntatore viene estratto e convertito in un riferimento tipizzato di tipo `class`.  
  
3.  Il riferimento tipizzato viene inserito nello stack.  
  
 Il `mkrefany` istruzione supporta il passaggio dei riferimenti tipizzati in modo dinamico. Il puntatore deve essere di tipo `&`, `*`, o `native int`e contiene l'indirizzo di una porzione di dati valido. `Class` è il token di classe che descrive il tipo di dati a cui fa riferimento il puntatore del mouse. `Mkrefany` Inserisce un riferimento tipizzato nello stack, fornendo un descrittore opaco del puntatore e il tipo `class`.  
  
 L'operazione è valida solo consentita su un riferimento tipizzato consiste nel passarlo a un metodo che richiede un riferimento tipizzato come parametro. Il chiamato può quindi utilizzare il <xref:System.Reflection.Emit.OpCodes.Refanytype> e <xref:System.Reflection.Emit.OpCodes.Refanyval> istruzioni per recuperare rispettivamente il tipo (classe) e l'indirizzo.  
  
 <xref:System.TypeLoadException> viene generata se `class` non è stato trovato. In genere, questo viene rilevato quando le istruzioni Microsoft Intermediate Language (MSIL) vengono convertite in codice nativo piuttosto che in fase di esecuzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `mkrefany` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Moltiplica due valori e inserisce il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|5A|mul|Moltiplica due valori nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; `value1` viene moltiplicato per `value2`.  
  
4.  Il risultato viene inserito nello stack.  
  
 Il `mul` istruzione moltiplica `value1` da `value2` e inserisce il risultato nello stack. Operazioni su numeri interi troncano automaticamente i bit superiori in caso di overflow.  
  
 Vedere <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> per un numero intero specifica operazione con la gestione dell'overflow di moltiplicazione.  
  
 Per i tipi a virgola mobile, 0 * infinito = NaN.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `mul` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Moltiplica due valori interi, esegue un controllo dell'overflow e inserisce il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|D8|mul.ovf|Moltiplica due valori integer nello stack con un controllo dell'overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; `value1` viene moltiplicato per `value2`, con un controllo dell'overflow.  
  
4.  Il risultato viene inserito nello stack.  
  
 Il `mul.ovf` istruzione moltiplica l'intero `value1` da integer `value2` e inserisce il risultato nello stack. Se il risultato non rientra nel tipo del risultato, viene generata un'eccezione.  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `mul.ovf` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Moltiplica due valori interi senza segno, esegue un controllo dell'overflow e inserisce il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|D9|mul.ovf.un|Moltiplica due valori senza segno nello stack con un controllo dell'overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; `value1` viene moltiplicato per `value2`, con un controllo dell'overflow.  
  
4.  Il risultato viene inserito nello stack.  
  
 Il `mul.ovf.un` istruzione moltiplica l'intero senza segno `value1` dall'intero senza segno `value2` e inserisce il risultato nello stack. Se il risultato non rientra nel tipo del risultato, viene generata un'eccezione.  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `mul.ovf.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Neg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Neg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Neg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Neg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Neg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Neg;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nega un valore e inserisce il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|65|neg|Nega il valore attualmente all'inizio dello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un valore viene inserito nello stack.  
  
2.  Un valore è estratto dallo stack e negazione.  
  
3.  Il risultato viene inserito nello stack.  
  
 Il `neg` istruzione Nega il valore e inserisce il risultato all'inizio dello stack. Il tipo restituito è lo stesso tipo dell'operando.  
  
 Negazione di valori integrali è standard in complemento a due negazione. In particolare, la negazione del numero più negativo (che non ha una controparte positiva) produce il numero più negativo. Per rilevare l'utilizzo di overflow di <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> istruzione invece (sottrazione da 0).  
  
 La negazione di un numero a virgola mobile non è possibile overflow e la negazione di NaN restituisce NaN.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `neg` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newarr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newarr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newarr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newarr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newarr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newarr;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce un riferimento a un oggetto in una matrice unidimensionale in base zero i cui elementi sono di un tipo specifico nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|8D < `T` >|newarr `etype`|Crea una nuova matrice con gli elementi di tipo `etype`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il numero di elementi nella matrice viene inserito nello stack.  
  
2.  Il numero di elementi viene estratto dallo stack e la matrice viene creata.  
  
3.  Riferimento a un oggetto nella nuova matrice viene inserito nello stack.  
  
 Il `newarr` istruzione inserisce un riferimento all'oggetto (tipo `O`) in una nuova matrice unidimensionale in base zero i cui elementi sono di tipo `etype` (un token di metadati che descrive il tipo). Il numero di elementi nella nuova matrice deve essere specificato come un `native int`. Intervallo di indici di matrice valido compreso tra zero e il numero massimo di elementi meno uno.  
  
 Gli elementi della matrice possono essere qualsiasi tipo, inclusi i tipi di valore.  
  
 Le matrici unidimensionali in base zero di numeri vengono create utilizzando un token di metadati di riferimento al tipo di valore appropriato (<xref:System.Int32>e così via). Elementi della matrice vengono inizializzati a 0 del tipo appropriato.  
  
 Matrici unidimensionali a base e le matrici multidimensionali vengono create utilizzando <xref:System.Reflection.Emit.OpCodes.Newobj> anziché `newarr`. Più comunemente, vengono creati utilizzando i metodi della <xref:System.Array> classe .NET Framework.  
  
 <xref:System.OutOfMemoryException> viene generata se la memoria è insufficiente per soddisfare la richiesta.  
  
 <xref:System.OverflowException> viene generata se `numElems` è minore di 0.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `newarr` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newobj;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Crea un nuovo oggetto o una nuova istanza di un tipo di valore, inserendo un riferimento a un oggetto (di tipo <see langword="O" />) nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|73 < `T` >|newobj `ctor`|Alloca un oggetto o valore di tipo non inizializzato e chiama il metodo costruttore `ctor`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Argomenti `arg1` tramite `argn` vengono inseriti nello stack in sequenza.  
  
2.  Argomenti `argn` tramite `arg1` vengono estratti dallo stack e passati a `ctor` per la creazione dell'oggetto.  
  
3.  Un riferimento al nuovo oggetto viene inserito nello stack.  
  
 Il `newobj` istruzione crea un nuovo oggetto o una nuova istanza di un tipo valore. `Ctor` è un token di metadati (un `methodref` o `methoddef` che deve essere contrassegnato come costruttore) che indica il nome, una classe e firma del costruttore da chiamare.  
  
 Il `newobj` istruzione consente di allocare una nuova istanza della classe associata a `ctor` e inizializza tutti i campi nella nuova istanza su 0 (del tipo appropriato) o riferimenti null come appropriato. Viene quindi chiamato il costruttore `ctor` con gli argomenti specificati insieme all'istanza appena creata. Dopo la chiamata al costruttore, l'ora inizializzato riferimento all'oggetto (tipo `O`) viene inserito nello stack.  
  
 Dal punto di vista del costruttore, l'oggetto non inizializzato è l'argomento 0 e gli altri argomenti passati a newobj seguono in ordine.  
  
 Tutte le matrici unidimensionali in base zero vengono create utilizzando <xref:System.Reflection.Emit.OpCodes.Newarr>, non `newobj`. D'altra parte, tutte le altre matrici (più di una dimensione oppure unidimensionali, ma non in base zero) vengono create utilizzando `newobj`.  
  
 Tipi di valore non vengono in genere creati utilizzando `newobj`. In genere vengono allocati come argomenti o variabili locali, utilizzando `newarr` (per matrici unidimensionali in base zero), o come campi di oggetti. Dopo aver allocato, vengono inizializzati utilizzando <xref:System.Reflection.Emit.OpCodes.Initobj>. Tuttavia, il `newobj` istruzione può essere utilizzata per creare una nuova istanza di un tipo di valore nello stack, che può quindi essere passato come argomento, archiviato in un ambiente locale e così via.  
  
 <xref:System.OutOfMemoryException> viene generata se la memoria è insufficiente per soddisfare la richiesta.  
  
 <xref:System.MissingMethodException> viene generata se un metodo del costruttore `ctor` con il nome indicato, classe e la firma non è state trovate. In genere, questo viene rilevato quando le istruzioni Microsoft Intermediate Language (MSIL) vengono convertite in codice nativo, anziché in fase di esecuzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `newobj` opcode:  
  
-   ILGenerator.Emit(OpCode, ConstructorInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Nop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Nop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Nop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Nop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Nop;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Riempie lo spazio se i codici operativi sono corretti. Non viene eseguita alcuna operazione significativa sebbene possa essere usato un ciclo di elaborazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|00|NOP|Esegue un'operazione senza comportamento.|  
  
 Non vi è alcun comportamento di transizione dello stack definito per questa istruzione.  
  
 Il `nop` non esegue alcuna operazione. È progettato per riempire lo spazio se i codici operativi sono corretti.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `nop` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Not;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Not" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Not" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Not As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Not;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Calcola il complemento bit per bit del valore intero all'inizio dello stack e inserisce il risultato nello stack di valutazione come lo stesso tipo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|66|not|Calcola il complemento bit per bit di un valore.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value` viene inserito nello stack.  
  
2.  `value` viene estratto dallo stack e il bit per bit complemento calcolata.  
  
3.  Il risultato viene inserito nello stack.  
  
 Il `not` istruzione calcola il complemento bit per bit di un valore integer e inserisce il risultato nello stack. Il tipo restituito è lo stesso tipo dell'operando.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `not` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Or;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Or" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Or" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Or As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Or;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Calcola il complemento bit per bit dei due valori interi all'inizio dello stack e inserisce il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|60|oppure|Calcola il bit per bit o due valori integer, restituisce un valore integer.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack e relativo OR calcolata.  
  
4.  Il risultato viene inserito nello stack.  
  
 Il `or` istruzione calcola l'OR bit per bit dei due valori sopra lo stack, inserendo il risultato nello stack.  
  
 `Or` è un'operazione specifica del numero intero.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `or` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Pop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Pop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Pop;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rimuove il valore attualmente all'inizio dello stack.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|26|pop|Estrae il valore dallo stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il primo valore viene estratto dallo stack.  
  
 Il `pop` istruzione rimuove il primo elemento dallo stack.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `pop` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si tratta di un'istruzione riservata.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si tratta di un'istruzione riservata.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix3;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si tratta di un'istruzione riservata.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si tratta di un'istruzione riservata.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix5;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si tratta di un'istruzione riservata.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix6;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si tratta di un'istruzione riservata.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix7;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si tratta di un'istruzione riservata.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefixref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefixref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefixref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefixref;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si tratta di un'istruzione riservata.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Readonly">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Readonly;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Readonly" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Readonly" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Readonly As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Readonly;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifica che la successiva operazione sull'indirizzo di matrice non comporta l'esecuzione di alcun controllo del tipo in fase di esecuzione e che viene restituito un puntatore gestito la cui modificabilità è limitata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La tabella seguente elenca l'istruzione esadecimale e formato assembly di Microsoft intermediate language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 1E|sola lettura.|Specificare che l'operazione di indirizzo matrice successivi non esegue alcun controllo di tipo in fase di esecuzione e che restituisce un puntatore gestito mutabilità è limitata.|  
  
 Questo prefisso può trovarsi solo immediatamente precedente il `ldelema` di istruzioni e le chiamate a speciale `Address` metodo sulle matrici. Il relativo effetto sulle operazioni successive ha un duplice:  
  
1.  In fase di esecuzione, viene eseguita alcuna operazione di controllo di tipo. Si noti che è in genere un controllo di tipo implicito per il `ldelema` e `stelem` matrici di tipi di istruzioni quando vengono utilizzate nel riferimento. Non è mai un controllo del tipo in fase di esecuzione per le classi di valore, in modo `readonly` viene eseguita alcuna operazione in questo caso.  
  
2.  Il verificatore considera il risultato dell'operazione di indirizzo come un puntatore gestito mutabilità è limitata.  
  
 Il puntatore ha mutabilità limitata poiché il tipo di definizione controlla se il valore può essere modificato. Per le classi di valore che non espongono campi pubblici o i metodi di aggiornamento del valore, il puntatore è di sola lettura (da qui il nome del prefisso). In particolare, le classi che rappresentano i tipi primitivi (ad esempio, System. Int32) espongono modificatori e pertanto sono di sola lettura.  
  
 Un puntatore gestito limitato in questo modo può essere utilizzato solo nei modi seguenti:  
  
-   Come il `object` parametro per il `ldfld`, `ldflda`, `stfld`, `call`, o`constrained callvirt` istruzioni.  
  
-   Come il `pointer` parametro per il `ldobj` istruzione o a uno del `ldind` istruzioni.  
  
-   Come il `source` parametro per il `cpobj` istruzione.  
  
 Tutte le altre operazioni non consentite, incluse la `stobj`, `initobj`, o `mkrefany` operazioni o uno qualsiasi del `stind` istruzioni.  
  
 Lo scopo del `readonly` prefisso consiste nell'evitare di un controllo del tipo durante il recupero di un elemento da una matrice in codice generico. Ad esempio, l'espressione `arr[i].m()`, in cui il tipo di elemento della matrice `arr` è un tipo generico che può disporre di un'interfaccia con metodo `m`, può essere compilata nel seguente codice MSIL.  
  
```  
ldloc arr  
ldloc i  
readonly.  
ldelema !0    // Loads the pointer to the object.  
…             // Load the arguments to the call.  
constrained. !0  
callvirt m  
```  
  
 Senza il `readonly` prefisso, il `ldelema` istruzione eseguirebbe un controllo del tipo nel caso in cui! 0 è un tipo di riferimento. Non solo è inefficiente questo controllo di tipo, ma non è semanticamente corretto. Il controllo dei tipi per `ldelema` è una corrispondenza esatta, che è troppo complessa. Se nella matrice sono sottoclassi di tipo! 0, il codice precedente avrà esito negativo il controllo dei tipi.  
  
 L'indirizzo dell'elemento della matrice verrà recuperato, invece dell'elemento stesso, per disporre di un handle per `arr[i]` che utilizzi entrambi i tipi di valore e tipi di riferimento e pertanto può essere passati al `constrained callvirt` istruzione.  
  
 In generale sarebbe unsafe ignora il controllo in fase di esecuzione se la matrice sono presenti elementi di un tipo riferimento. Per maggiore sicurezza, è necessario assicurarsi che nessuna modifica nella matrice viene effettuata tramite l'indicatore di misura. Le regole di sistema di verifica garantiscono tale requisito. Il puntatore gestito con restrizioni può essere passato come l'oggetto di chiamate di metodo di istanza, pertanto non è in senso stretto sola lettura per i tipi di valore, ma nessun problema di sicurezza di tipo per tipi di valore.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `readonly` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanytype">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanytype;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanytype" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanytype As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanytype;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera il token di tipo incorporato in un riferimento tipizzato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 1D|refanytype|Inserisce il token di tipo archiviato in un riferimento tipizzato.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Riferimento a un tipo valore viene inserito nello stack.  
  
2.  Il riferimento tipizzato viene estratto dallo stack e recuperare il relativo token di tipo corrispondente.  
  
3.  Il token di tipo viene inserito nello stack.  
  
 Un riferimento tipizzato contiene un token di tipo e un indirizzo per un'istanza dell'oggetto.  
  
 Il `refanytype` istruzione recupera il token di tipo incorporato nel riferimento tipizzato. Vedere il <xref:System.Reflection.Emit.OpCodes.Mkrefany> istruzione per informazioni sulla creazione di riferimenti tipizzati.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `refanytype` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanyval">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanyval;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanyval" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanyval As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanyval;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera l'indirizzo (di tipo <see langword="&amp;" />) incorporato in un riferimento tipizzato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|C2 < `T` >|refanyval `type`|Inserisce l'indirizzo archiviato in un riferimento tipizzato.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Riferimento a un tipo valore viene inserito nello stack.  
  
2.  Il riferimento tipizzato viene estratto dallo stack e recuperare l'indirizzo del corrispondente.  
  
3.  L'indirizzo viene inserito nello stack.  
  
 Un riferimento tipizzato contiene un token di tipo e un indirizzo per un'istanza dell'oggetto.  
  
 Il `refanyval` istruzione recupera l'indirizzo incorporato di un riferimento tipizzato. Il tipo incorporato nel riferimento tipizzato fornito nello stack deve corrispondere al tipo specificato da `type` (un token di metadati, ovvero un `typedef` o `typeref`). Vedere il <xref:System.Reflection.Emit.OpCodes.Mkrefany> istruzione per il contenuto correlato.  
  
 <xref:System.InvalidCastException> viene generata se `type` non è identico al tipo memorizzato nel riferimento del tipo (in questo caso, `type` specificata per la classe di <xref:System.Reflection.Emit.OpCodes.Mkrefany> istruzione di costruzione ha un riferimento tipizzato).  
  
 <xref:System.TypeLoadException> viene generata se `type` non è stato trovato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `refanyval` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Divide due valori e inserisce il resto nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|5D|REM|Inserisce il resto della divisione `value1` da `value2` nello stack.|  
  
> [!NOTE]
>  ReplaceThisText  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Oggetto `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack e il resto della `value1` `div` `value2` calcolato.  
  
4.  Il risultato viene inserito nello stack.  
  
 `result` = `value1` `rem` `value2` soddisfa le condizioni seguenti:  
  
 `result` = `value1` - `value2` `×` (`value1` `div` `value2`), e:  
  
 0 = &#124; `result` &#124; < &#124; `value2` &#124;, sign (`result`) = segno (`value1`), dove `div` è l'istruzione di divisione che troncata a zero.  
  
 Se `value2` è uguale a zero o `value1` è infinito, il risultato è NaN. Se `value2` è infinito, il risultato è `value1` (negato per `-infinity`).  
  
 Le operazioni integrali generano <xref:System.DivideByZeroException> se `value2` è zero.  
  
 Si noti che nelle piattaforme basate su Intel un <xref:System.OverflowException> viene generata un'eccezione durante il calcolo (minint `rem` -1).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `rem` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Divide due valori senza segno e inserisce il resto nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|5E|rem.un|Inserisce il resto della divisione senza segno `value1` da unsigned `value2` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack e il resto della `value1` `div` `value2` calcolato.  
  
4.  Il risultato viene inserito nello stack.  
  
 `result` = `value1` `rem.un` `value2` soddisfa le condizioni seguenti:  
  
 `result` = `value1` - `value2` x (`value1` `div.un` `value2`), e:  
  
 0 = `result`  <  `value2`, dove `div.un` è l'istruzione di divisione senza segno.  
  
 Il `rem.un` istruzione calcola `result` e lo inserisce nello stack. `Rem.un` considera i propri argomenti come interi senza segno, mentre <xref:System.Reflection.Emit.OpCodes.Rem> li considera come interi con segno.  
  
 `Rem.un` non è specificato per i numeri a virgola mobile.  
  
 Le operazioni integrali generano <xref:System.DivideByZeroException> se `value2` è zero.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `rem.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ret">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ret;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ret" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ret" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ret As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ret;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce il risultato del metodo corrente, inserendo il valore restituito (se presente) dallo stack di valutazione del chiamato nello stack di valutazione del chiamante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|2A|RET|Restituisce dal metodo, eventualmente restituendo un valore.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore restituito viene estratto dallo stack di valutazione del chiamato.  
  
2.  Il valore restituito ottenuto nel passaggio 1 viene inserito nello stack di valutazione chiamante.  
  
 Se il valore restituito non è presente nello stack di valutazione chiamato, viene restituito alcun valore (Nessuna transizione sullo stack per il metodo chiamato o chiamante).  
  
 Il tipo del valore restituito, se presente, il metodo corrente determina il tipo di valore da recuperare dalla parte superiore dello stack e copiare nello stack del metodo che ha chiamato il metodo corrente. Lo stack di valutazione per il metodo corrente deve essere vuoto tranne per il valore da restituire.  
  
 Il `ret` istruzione non può essere utilizzata per trasferire il controllo di un`try`, `filter`, `catch`, o `finally` blocco. Dall'interno un `try` o `catch`, utilizzare il <xref:System.Reflection.Emit.OpCodes.Leave> istruzione con una destinazione di un `ret` istruzione all'esterno di tutti i blocchi di eccezioni. Poiché il `filter` e `finally` blocchi sono logicamente parte della gestione delle eccezioni e non il metodo in cui è incorporato il proprio codice, correttamente generate istruzioni Microsoft Intermediate Language (MSIL) non eseguono un metodo viene restituito all'interno di un `filter` o `finally`.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `ret` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rethrow;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rethrow" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rethrow As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rethrow;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Genera nuovamente l'eccezione corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 1A|rethrow|Genera nuovamente l'eccezione corrente|  
  
 Nessun comportamento di transizione dello stack è definito per questa istruzione.  
  
 Il `rethrow` istruzione è consentita solo all'interno del corpo di un `catch` gestore. Genera la stessa eccezione che è stata intercettata da questo gestore.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `rethrow` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shl">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shl;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shl As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shl;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sposta un valore intero verso sinistra (spostando gli zeri) di un numero specificato di bit, inserendo il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|62|shl|Sposta un valore integer a sinistra (spostando gli zeri).|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un valore viene inserito nello stack.  
  
2.  La quantità di bit da spostare viene inserita nello stack.  
  
3.  Il numero di bit da spostare e il valore viene estratto dallo stack; il valore viene spostato a sinistra del numero specificato di bit.  
  
4.  Il risultato viene inserito nello stack.  
  
 Il `shl` istruzione sposta il valore (tipo `int32`, `int64` o `native int`) a sinistra del numero specificato di bit. Il numero di bit è un valore di tipo `int32` o `native int`. Se il numero di bit da spostare è maggiore o uguale alla larghezza (in bit) del valore fornito non è specificato il valore restituito.  
  
 `Shl` Inserisce un bit zero nella posizione più bassa su ogni turno.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `shl` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sposta un valore intero verso destra (spostando il segno) di un numero specificato di bit, inserendo il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|63|shr|Sposta un valore integer a destra (spostando il segno).|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un valore viene inserito nello stack.  
  
2.  La quantità di bit da spostare viene inserita nello stack.  
  
3.  Il numero di bit da spostare e il valore viene estratto dallo stack; il valore viene spostato a destra del numero specificato di bit.  
  
4.  Il risultato viene inserito nello stack.  
  
 Il `shr.un` istruzione sposta il valore (tipo `int32`, `int64` o `native int`) a destra del numero specificato di bit. Il numero di bit è un valore di tipo `int32` o `native int`. Se il numero di bit da spostare è maggiore o uguale alla larghezza (in bit) del valore fornito non è specificato il valore restituito.  
  
 `Shr` Consente di replicare il bit più significativo per ogni turno, mantenendo il segno del valore originale di `result`.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `shr` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sposta un valore intero senza segno verso destra (spostando gli zeri) di un numero specificato di bit, inserendo il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|64|shr.un|Sposta un valore integer a destra (spostando gli zeri).|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un valore viene inserito nello stack.  
  
2.  La quantità di bit da spostare viene inserita nello stack.  
  
3.  Il numero di bit da spostare e il valore viene estratto dallo stack; il valore viene spostato a destra del numero specificato di bit.  
  
4.  Il risultato viene inserito nello stack.  
  
 Il `shr.un` istruzione sposta il valore (tipo `int32`, `int64` o `native int`) a destra del numero specificato di bit. Il numero di bit è un valore di tipo `int32`, `int64` o `native int`. Se il numero di bit da spostare è maggiore o uguale alla larghezza (in bit) del valore fornito non è specificato il valore restituito.  
  
 `Shr.un` Inserisce un bit zero nella posizione più alta in ogni turno.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `shr.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sizeof">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sizeof;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sizeof" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sizeof As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sizeof;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Inserisce la dimensione in byte del tipo di valore fornito nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 1C &LT; `T` >|sizeof `valType`|Inserisce la dimensione in byte, di un tipo di valore come un `unsigned int32`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Le dimensioni (in byte) del tipo di valore fornito (`valType`) viene inserito nello stack.  
  
 `valType` deve essere un token di metadati (un `typeref` o `typedef`) che specifica un tipo di valore, un tipo di riferimento o un parametro di tipo generico.  
  
 Per un tipo riferimento, la dimensione restituita è la dimensione di un valore di riferimento del corrispondente tipo (4 byte in sistemi a 32 bit), non alle dimensioni dei dati archiviati negli oggetti a cui fa riferimento il valore di riferimento. Un parametro di tipo generico può essere utilizzato solo nel corpo del tipo o metodo che lo definisce. Quando viene creata un'istanza di tipo o metodo, il parametro di tipo generico viene sostituito da un tipo di valore o tipo di riferimento.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `sizeof` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Starg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Archivia il valore all'inizio dello stack di valutazione nello slot di argomento in corrispondenza di un indice specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 0B &LT; `unsigned int16` >|starg `num`|Estrae il valore dallo stack e lo archivia in uno slot di argomento `num`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore attualmente all'inizio dello stack viene estratto e inserito in uno slot di argomento `num`.  
  
 Il `starg` istruzione estrae un valore dallo stack e lo inserisce nello slot di argomento `num`. Il tipo del valore deve corrispondere al tipo dell'argomento, come specificato nella firma del metodo corrente.  
  
 Per le procedure che accettano un elenco di argomenti variabili, il `starg` istruzione può essere utilizzata solo per gli argomenti, non quelli nella parte variabile della firma iniziali fissato.  
  
 Esecuzione di un archivio in argomenti che contengono un valore integer minore di 4 byte tronca il valore quando passa dallo stack all'argomento. I valori a virgola mobile vengono arrotondati dalla dimensione nativa (tipo `F`) per la dimensione associata con l'argomento.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `starg` opcode:  
  
-   ILGenerator (OpCode, short)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Starg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Archivia il valore all'inizio dello stack di valutazione nello slot di argomento in corrispondenza di un indice specificato, forma breve.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|10 < `unsigned int8` >|starg.s `num`|Estrae il valore dallo stack e lo archivia in uno slot di argomento `num`, forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Il valore attualmente all'inizio dello stack viene estratto e inserito in uno slot di argomento `num`.  
  
 Il `starg.s` istruzione estrae un valore dallo stack e lo inserisce nello slot di argomento `num`. Il tipo del valore deve corrispondere al tipo dell'argomento, come specificato nella firma del metodo corrente.  
  
 Il `starg.s` istruzione fornisce una codifica efficiente per l'utilizzo con i primi 256 argomenti.  
  
 Per le procedure che accettano un elenco di argomenti variabili, il `starg.s` istruzione può essere utilizzata solo per gli argomenti, non quelli nella parte variabile della firma iniziali fissato.  
  
 Esecuzione di un archivio in argomenti che contengono un valore integer minore di 4 byte tronca il valore quando passa dallo stack all'argomento. I valori a virgola mobile vengono arrotondati dalla dimensione nativa (tipo `F`) per la dimensione associata con l'argomento.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `starg.s` opcode:  
  
-   ILGenerator (OpCode, byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore presente nello stack di valutazione, il cui tipo è specificato nell'istruzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La tabella seguente elenca l'istruzione esadecimale e formato assembly di Microsoft intermediate language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|A4 < `T` >|st elem `typeTok`|Sostituisce l'elemento di matrice in corrispondenza dell'indice specificato con un valore di tipo `typeTok` nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento a una matrice, oggetto `array`, viene inserito nello stack.  
  
2.  Un valore di indice, `index`, a un elemento in `array` viene inserito nello stack.  
  
3.  Un valore del tipo specificato nell'istruzione viene inserito nello stack.  
  
4.  Il valore dell'indice e il riferimento della matrice vengono estratti dallo stack; il valore viene inserito nell'elemento di matrice in corrispondenza dell'indice specificato.  
  
 Il `stelem` istruzione sostituisce il valore dell'elemento in corrispondenza dell'indice specificato in base zero nella matrice unidimensionale `array` con il valore. Il valore è il tipo specificato dal token `typeTok` nell'istruzione.  
  
 Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`. L'indice è di tipo `native int`.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stelem` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore <see langword="native int" /> sullo stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|9B|stelem.i|Sostituisce un elemento di matrice in corrispondenza dell'indice specificato con il `native int` valore nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento a una matrice, oggetto `array`, viene inserito nello stack.  
  
2.  Un indice valido per un elemento in `array` viene inserito nello stack.  
  
3.  Un valore viene inserito nello stack.  
  
4.  Il valore dell'indice e il riferimento della matrice vengono estratti dallo stack; il valore viene inserito nell'elemento di matrice in corrispondenza dell'indice specificato.  
  
 Il `stelem.i` istruzione sostituisce il valore dell'elemento `index` nella matrice unidimensionale `array` con il `native int` valore inserito nello stack.  
  
 Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`. L'indice è di tipo `native int`.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stelem.i` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore <see langword="int8" /> sullo stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|9C|stelem.i1|Sostituisce un elemento di matrice in corrispondenza dell'indice specificato con il `int8` valore nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento a una matrice, oggetto `array`, viene inserito nello stack.  
  
2.  Un indice valido per un elemento in `array` viene inserito nello stack.  
  
3.  Un valore viene inserito nello stack.  
  
4.  Il valore dell'indice e il riferimento della matrice vengono estratti dallo stack; il valore viene inserito nell'elemento di matrice in corrispondenza dell'indice specificato.  
  
 Il `stelem.i1` istruzione sostituisce il valore dell'elemento `index` nella matrice unidimensionale `array` con il `int8` valore inserito nello stack.  
  
 Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`. L'indice è di tipo `native int`.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stelem.i1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore <see langword="int16" /> sullo stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|9D|stelem.i2|Sostituisce un elemento di matrice in corrispondenza dell'indice specificato con il `int16` valore nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento a una matrice, oggetto `array`, viene inserito nello stack.  
  
2.  Un indice valido per un elemento in `array` viene inserito nello stack.  
  
3.  Un valore viene inserito nello stack.  
  
4.  Il valore dell'indice e il riferimento della matrice vengono estratti dallo stack; il valore viene inserito nell'elemento di matrice in corrispondenza dell'indice specificato.  
  
 Il `stelem.i2` istruzione sostituisce il valore dell'elemento `index` nella matrice unidimensionale `array` con il `int16` valore inserito nello stack.  
  
 Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`. L'indice è di tipo `native int`.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stelem.i2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore <see langword="int32" /> sullo stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|9E|stelem.i4|Sostituisce un elemento di matrice in corrispondenza dell'indice specificato con il `int32` valore nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento a una matrice, oggetto `array`, viene inserito nello stack.  
  
2.  Un indice valido per un elemento in `array` viene inserito nello stack.  
  
3.  Un valore viene inserito nello stack.  
  
4.  Il valore dell'indice e il riferimento della matrice vengono estratti dallo stack; il valore viene inserito nell'elemento di matrice in corrispondenza dell'indice specificato.  
  
 Il `stelem.i4` istruzione sostituisce il valore dell'elemento `index` nella matrice unidimensionale `array` con il `int32` valore inserito nello stack.  
  
 Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`. L'indice è di tipo `native int`.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stelem.i4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore <see langword="int64" /> sullo stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|9F|stelem.i8|Sostituisce un elemento di matrice in corrispondenza dell'indice specificato con il `int64` valore nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento a una matrice, oggetto `array`, viene inserito nello stack.  
  
2.  Un indice valido per un elemento in `array` viene inserito nello stack.  
  
3.  Un valore viene inserito nello stack.  
  
4.  Il valore dell'indice e il riferimento della matrice vengono estratti dallo stack; il valore viene inserito nell'elemento di matrice in corrispondenza dell'indice specificato.  
  
 Il `stelem.i8` istruzione sostituisce il valore dell'elemento `index` nella matrice unidimensionale `array` con il `int64` valore inserito nello stack.  
  
 Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`. L'indice è di tipo `native int`.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stelem.i8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore <see langword="float32" /> sullo stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|A0|stelem.r4|Sostituisce un elemento di matrice in corrispondenza dell'indice specificato con il `float32` valore nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento a una matrice, oggetto `array`, viene inserito nello stack.  
  
2.  Un indice valido per un elemento in `array` viene inserito nello stack.  
  
3.  Un valore viene inserito nello stack.  
  
4.  Il valore dell'indice e il riferimento della matrice vengono estratti dallo stack; il valore viene inserito nell'elemento di matrice in corrispondenza dell'indice specificato.  
  
 Il `stelem.r4` istruzione sostituisce il valore dell'elemento `index` nella matrice unidimensionale `array` con il `float32` valore inserito nello stack.  
  
 Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`. L'indice è di tipo `native int`.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stelem.r4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore <see langword="float64" /> sullo stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|A1|stelem.r8|Sostituisce un elemento di matrice in corrispondenza dell'indice specificato con il `float64` valore nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento a una matrice, oggetto `array`, viene inserito nello stack.  
  
2.  Un indice valido per un elemento in `array` viene inserito nello stack.  
  
3.  Un valore viene inserito nello stack.  
  
4.  Il valore dell'indice e il riferimento della matrice vengono estratti dallo stack; il valore viene inserito nell'elemento di matrice in corrispondenza dell'indice specificato.  
  
 Il `stelem.r8` istruzione sostituisce il valore dell'elemento `index` nella matrice unidimensionale `array` con il `float64` valore inserito nello stack.  
  
 Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`. L'indice è di tipo `native int`.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stelem.r8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_Ref;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore di un riferimento a un oggetto (di tipo <see langword="O" />) sullo stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|A2|stelem.ref|Sostituisce un elemento di matrice in corrispondenza dell'indice specificato con il `ref` valore (tipo `O`) nello stack.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento a una matrice, oggetto `array`, viene inserito nello stack.  
  
2.  Un indice valido per un elemento in `array` viene inserito nello stack.  
  
3.  Un valore viene inserito nello stack.  
  
4.  Il valore dell'indice e il riferimento della matrice vengono estratti dallo stack; il valore viene inserito nell'elemento di matrice in corrispondenza dell'indice specificato.  
  
 Il `stelem.ref` istruzione sostituisce il valore dell'elemento in corrispondenza dell'indice specificato nella matrice unidimensionale `array` con il `ref` (tipo `O`) valore inserito nello stack.  
  
 Le matrici sono oggetti e sono pertanto rappresentate da un valore di tipo `O`. L'indice è di tipo `native int`.  
  
 Si noti che `stelem.ref` esegue il cast in modo implicito il valore fornito per il tipo di elemento di `array` prima di assegnare il valore all'elemento della matrice. Questa operazione può non riuscire, anche per il codice di verifica. In questo modo il `stelem.ref` istruzione può generare <xref:System.InvalidCastException>. Per le matrici unidimensionali che non sono in base zero e per le matrici multidimensionali, di <xref:System.Array> classe fornisce un <xref:System.Array.SetValue%2A> metodo.  
  
 <xref:System.NullReferenceException> viene generata se `array` è un riferimento null.  
  
 <xref:System.IndexOutOfRangeException> viene generata se `index` è negativo o maggiore del limite di `array`.  
  
 <xref:System.ArrayTypeMismatchException> viene generata se `array` non contiene elementi del tipo richiesto.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stelem.ref` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stfld;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sostituisce il valore archiviato nel campo di un riferimento a un oggetto o puntatore con un nuovo valore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|7D < `T` >|stfld `field`|Sostituisce il valore di `field` dell'oggetto con un nuovo valore.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento a un oggetto o puntatore viene inserito nello stack.  
  
2.  Un valore viene inserito nello stack.  
  
3.  Il valore e il riferimento o puntatore all'oggetto vengono estratti dallo stack; il valore di `field` viene sostituito con il valore fornito nell'oggetto.  
  
 Il `stfld` istruzione sostituisce il valore di un campo di un oggetto (tipo `O`) o tramite un puntatore (tipo `native int`, `&`, o `*`) con un valore specifico. `Field` è un token di metadati che fa riferimento a un riferimento al membro di campo. Il `stfld` istruzione può disporre di un prefisso di uno o entrambi <xref:System.Reflection.Emit.OpCodes.Unaligned> e <xref:System.Reflection.Emit.OpCodes.Volatile>.  
  
 <xref:System.NullReferenceException> viene generata se il riferimento all'oggetto o il puntatore è un riferimento null e il campo non statico.  
  
 <xref:System.MissingFieldException> viene generata se `field` non viene trovato nei metadati. Questo viene controllato in genere quando l'istruzione di Microsoft Intermediate Language (MSIL) viene convertita in codice nativo, non in fase di esecuzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stfld` opcode:  
  
-   ILGenerator.Emit(OpCode, FieldInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Memorizza un valore di tipo <see langword="native int" /> in corrispondenza di un indirizzo fornito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|DF|stind.i|Archivia un `native int` valore in corrispondenza di un determinato indirizzo.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  Un valore viene inserito nello stack.  
  
3.  Il valore e l'indirizzo vengono estratti dallo stack; il valore viene archiviato in corrispondenza dell'indirizzo.  
  
 Il `stind.i` istruzione archivi un `native int` valore in corrispondenza dell'indirizzo fornito (tipo `native int`, `*`, o `&`).  
  
 Tipo di operazione provvisoria richiede che il `stind.i` istruzione sia utilizzata in modo coerente con il tipo del puntatore. L'operazione del `stind.i` istruzione può essere modificato da un immediatamente precedente <xref:System.Reflection.Emit.OpCodes.Volatile> o <xref:System.Reflection.Emit.OpCodes.Unaligned> immediatamente precedente.  
  
 <xref:System.NullReferenceException> viene generata se `addr` non è allineato naturalmente per il tipo di argomento implicito dal suffisso dell'istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stind.i` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Memorizza un valore di tipo <see langword="int8" /> in corrispondenza di un indirizzo fornito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|52|stind.i1|Archivia un `int8` valore in corrispondenza di un determinato indirizzo.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  Un valore viene inserito nello stack.  
  
3.  Il valore e l'indirizzo vengono estratti dallo stack; il valore viene archiviato in corrispondenza dell'indirizzo.  
  
 Il `stind.i1` istruzione archivi un `int8` valore in corrispondenza dell'indirizzo fornito (tipo `native int`, `*`, o `&`).  
  
 Tipo di operazione provvisoria richiede che il `stind.i1` istruzione sia utilizzata in modo coerente con il tipo del puntatore. L'operazione del `stind.i1` istruzione può essere modificato da un immediatamente precedente <xref:System.Reflection.Emit.OpCodes.Volatile> o <xref:System.Reflection.Emit.OpCodes.Unaligned> immediatamente precedente.  
  
 <xref:System.NullReferenceException> viene generata se `addr` non è allineato naturalmente per il tipo di argomento implicito dal suffisso dell'istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stind.i1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Memorizza un valore di tipo <see langword="int16" /> in corrispondenza di un indirizzo fornito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|53|stind.i2|Archivia un `int16` valore in corrispondenza di un determinato indirizzo.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  Un valore viene inserito nello stack.  
  
3.  Il valore e l'indirizzo vengono estratti dallo stack; il valore viene archiviato in corrispondenza dell'indirizzo.  
  
 Il `stind.i2` istruzione archivi un `int16` valore in corrispondenza dell'indirizzo fornito (tipo `native int`, `*`, o `&`).  
  
 Tipo di operazione provvisoria richiede che il `stind.2i` istruzione sia utilizzata in modo coerente con il tipo del puntatore. L'operazione del `stind.i2` istruzione può essere modificato da un immediatamente precedente <xref:System.Reflection.Emit.OpCodes.Volatile> o <xref:System.Reflection.Emit.OpCodes.Unaligned> immediatamente precedente.  
  
 <xref:System.NullReferenceException> viene generata se `addr` non è allineato naturalmente per il tipo di argomento implicito dal suffisso dell'istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stind.i2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Memorizza un valore di tipo <see langword="int32" /> in corrispondenza di un indirizzo fornito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|54|stind.i4|Archivia un `int32` valore in corrispondenza di un determinato indirizzo.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  Un valore viene inserito nello stack.  
  
3.  Il valore e l'indirizzo vengono estratti dallo stack; il valore viene archiviato in corrispondenza dell'indirizzo.  
  
 Il `stind.i4` istruzione archivi un `int32` valore in corrispondenza dell'indirizzo fornito (tipo `native int`, `*`, o `&`).  
  
 Tipo di operazione provvisoria richiede che il `stind.i4` istruzione sia utilizzata in modo coerente con il tipo del puntatore. L'operazione del `stind.i4` istruzione può essere modificato da un immediatamente precedente <xref:System.Reflection.Emit.OpCodes.Volatile> o <xref:System.Reflection.Emit.OpCodes.Unaligned> immediatamente precedente.  
  
 <xref:System.NullReferenceException> viene generata se `addr` non è allineato naturalmente per il tipo di argomento implicito dal suffisso dell'istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stind.i4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Memorizza un valore di tipo <see langword="int64" /> in corrispondenza di un indirizzo fornito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|55|stind.i8|Archivia un `int64` valore in corrispondenza di un determinato indirizzo.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  Un valore viene inserito nello stack.  
  
3.  Il valore e l'indirizzo vengono estratti dallo stack; il valore viene archiviato in corrispondenza dell'indirizzo.  
  
 Il `stind.i8` istruzione archivi un `int64` valore in corrispondenza dell'indirizzo fornito (tipo `native int`, `*`, o `&`).  
  
 Tipo di operazione provvisoria richiede che il `stind.i8` istruzione sia utilizzata in modo coerente con il tipo del puntatore. L'operazione del `stind.i` istruzione può essere modificato da un immediatamente precedente <xref:System.Reflection.Emit.OpCodes.Volatile> o <xref:System.Reflection.Emit.OpCodes.Unaligned> immediatamente precedente.  
  
 <xref:System.NullReferenceException> viene generata se `addr` non è allineato naturalmente per il tipo di argomento implicito dal suffisso dell'istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stind.i8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R4;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Memorizza un valore di tipo <see langword="float32" /> in corrispondenza di un indirizzo fornito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|56|stind.r4|Archivia un `float32` valore in corrispondenza di un determinato indirizzo.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  Un valore viene inserito nello stack.  
  
3.  Il valore e l'indirizzo vengono estratti dallo stack; il valore viene archiviato in corrispondenza dell'indirizzo.  
  
 Il `stind.r4` istruzione archivi un `float32` valore in corrispondenza dell'indirizzo fornito (tipo `native int`, `*`, o `&`).  
  
 Tipo di operazione provvisoria richiede che il `stind.r4` istruzione sia utilizzata in modo coerente con il tipo del puntatore. L'operazione del `stind.r4` istruzione può essere modificato da un immediatamente precedente <xref:System.Reflection.Emit.OpCodes.Volatile> o <xref:System.Reflection.Emit.OpCodes.Unaligned> immediatamente precedente.  
  
 <xref:System.NullReferenceException> viene generata se `addr` non è allineato naturalmente per il tipo di argomento implicito dal suffisso dell'istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stind.r4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R8;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Memorizza un valore di tipo <see langword="float64" /> in corrispondenza di un indirizzo fornito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|57|stind.r8|Archivia un `float64` valore in corrispondenza di un determinato indirizzo.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  Un valore viene inserito nello stack.  
  
3.  Il valore e l'indirizzo vengono estratti dallo stack; il valore viene archiviato in corrispondenza dell'indirizzo.  
  
 Il `stind.r8` istruzione archivi un `float64` valore in corrispondenza dell'indirizzo fornito (tipo `native int`, `*`, o `&`).  
  
 Tipo di operazione provvisoria richiede che il `stind.r8` istruzione sia utilizzata in modo coerente con il tipo del puntatore. L'operazione del `stind.r8` istruzione può essere modificato da un immediatamente precedente <xref:System.Reflection.Emit.OpCodes.Volatile> o <xref:System.Reflection.Emit.OpCodes.Unaligned> immediatamente precedente.  
  
 <xref:System.NullReferenceException> viene generata se `addr` non è allineato naturalmente per il tipo di argomento implicito dal suffisso dell'istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stind.r8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_Ref;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Archivia il valore di un riferimento a un oggetto in corrispondenza di un indirizzo fornito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|51|stind.ref|Archivia un riferimento all'oggetto (tipo `O`) valore in corrispondenza di un determinato indirizzo.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  Un valore viene inserito nello stack.  
  
3.  Il valore e l'indirizzo vengono estratti dallo stack; il valore viene archiviato in corrispondenza dell'indirizzo.  
  
 Il `stind.ref` istruzione memorizza un valore di riferimento di oggetto in corrispondenza dell'indirizzo specificato (tipo `native int`, `*`, o `&`).  
  
 Tipo di operazione provvisoria richiede che il `stind.ref` istruzione sia utilizzata in modo coerente con il tipo del puntatore. L'operazione del `stind.ref` istruzione può essere modificato da un immediatamente precedente <xref:System.Reflection.Emit.OpCodes.Volatile> o <xref:System.Reflection.Emit.OpCodes.Unaligned> immediatamente precedente.  
  
 <xref:System.NullReferenceException> viene generata se `addr` non è allineato naturalmente per il tipo di argomento implicito dal suffisso dell'istruzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stind.ref` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Estrae il valore corrente dall'inizio dello stack di valutazione e lo archivia nell'elenco delle variabili locali in corrispondenza di un indice specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 0E &LT; `unsigned int16` >|stloc `index`|Estrae un valore dallo stack e la archivia nella variabile locale `index`.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un valore viene estratto dallo stack e inserito nella variabile locale `index`.  
  
 Il `stloc` istruzione estrae il valore dallo stack di valutazione e lo sposta in numero di variabile locale `index`, in cui le variabili locali sono numerate a partire da 0. Il tipo del valore deve corrispondere al tipo di variabile locale, come specificato nella firma locale del metodo corrente.  
  
 Archiviare in variabili locali che contengono un valore integer minore di 4 byte tronca il valore quando passa dallo stack alla variabile locale. I valori a virgola mobile vengono arrotondati dalla dimensione nativa (tipo `F`) per la dimensione associata con l'argomento.  
  
 Le istruzioni Microsoft Intermediate Language (MSIL) corrette richiedono che `index` sia un indice locale valido. Per il `stloc` (istruzione), `index` deve essere compreso nell'intervallo tra 0 e 65.534 compreso (in particolare, 65535 non è valido). Il motivo di 65.535 non è valido: implementazioni simili utilizzeranno un integer a 2 byte per tenere traccia sia un indice locale, nonché il numero totale di variabili locali per un metodo specificato. Se un indice di 65535 è stato reso valido, sarebbe necessario un valore integer più ampio tenere traccia del numero di variabili locali in tale metodo.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload è possibile utilizzare il `stloc` opcode:  
  
-   ILGenerator (OpCode, LocalBuilder)  
  
-   ILGenerator (OpCode, short)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Estrae il valore corrente dall'inizio dello stack di valutazione e lo archivia nell'elenco delle variabili locali in corrispondenza dell'indice 0.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|0A|stloc.0|Estrae un valore dallo stack nella variabile locale 0.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un valore viene estratto dallo stack e inserito nella variabile locale indicizzata da 0.  
  
 Il `stloc.0` istruzione estrae il valore dallo stack di valutazione e lo sposta nella variabile locale indicizzata da 0. Il tipo del valore deve corrispondere al tipo di variabile locale, come specificato nella firma locale del metodo corrente.  
  
 `stloc.0` è una codifica particolarmente efficace per archiviare i valori nella variabile locale 0.  
  
 Archiviare in variabili locali che contengono un valore integer minore di 4 byte tronca il valore quando passa dallo stack alla variabile locale. I valori a virgola mobile vengono arrotondati dalla dimensione nativa (tipo `F`) per la dimensione associata con l'argomento.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stloc.0` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Estrae il valore corrente dall'inizio dello stack di valutazione e lo archivia nell'elenco delle variabili locali in corrispondenza dell'indice 1.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|0B|stloc.1|Estrae un valore dallo stack nella variabile locale 1.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un valore viene estratto dallo stack e inserito nella variabile locale indicizzata in base 1.  
  
 Il `stloc.1` istruzione estrae il valore dallo stack di valutazione e lo sposta nella variabile locale indicizzata in base 1. Il tipo del valore deve corrispondere al tipo di variabile locale, come specificato nella firma locale del metodo corrente.  
  
 `stloc.1` è una codifica particolarmente efficace per archiviare i valori nella variabile locale 1.  
  
 Archiviare in variabili locali che contengono un valore integer minore di 4 byte tronca il valore quando passa dallo stack alla variabile locale. I valori a virgola mobile vengono arrotondati dalla dimensione nativa (tipo `F`) per la dimensione associata con l'argomento.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stloc.1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Estrae il valore corrente dall'inizio dello stack di valutazione e lo archivia nell'elenco delle variabili locali in corrispondenza dell'indice 2.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|0C|stloc.2|Estrae un valore dallo stack nella variabile locale 2|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un valore viene estratto dallo stack e inserito nella variabile locale indicizzata per 2.  
  
 Il `stloc.2` istruzione estrae il valore dallo stack di valutazione e lo sposta nella variabile locale indicizzata per 2. Il tipo del valore deve corrispondere al tipo di variabile locale, come specificato nella firma locale del metodo corrente.  
  
 `stloc.2` è una codifica particolarmente efficace per archiviare i valori nella variabile locale 2.  
  
 Archiviare in variabili locali che contengono un valore integer minore di 4 byte tronca il valore quando passa dallo stack alla variabile locale. I valori a virgola mobile vengono arrotondati dalla dimensione nativa (tipo `F`) per la dimensione associata con l'argomento.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stloc.2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_3;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Estrae il valore corrente dall'inizio dello stack di valutazione e lo archivia nell'elenco delle variabili locali in corrispondenza dell'indice 3.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|0D|stloc.3|Estrae un valore dallo stack nella variabile locale 3|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un valore viene estratto dallo stack e inserito nella variabile locale indicizzata per 3.  
  
 Il `stloc.3` istruzione estrae il valore dallo stack di valutazione e lo sposta nella variabile locale indicizzata per 3. Il tipo del valore deve corrispondere al tipo di variabile locale, come specificato nella firma locale del metodo corrente.  
  
 `stloc.3` è una codifica particolarmente efficace per archiviare i valori nella variabile locale 3.  
  
 Archiviare in variabili locali che contengono un valore integer minore di 4 byte tronca il valore quando passa dallo stack alla variabile locale. I valori a virgola mobile vengono arrotondati dalla dimensione nativa (tipo `F`) per la dimensione associata con l'argomento.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stloc.3` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_S;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Estrae il valore corrente dall'inizio dello stack di valutazione e lo memorizza nell'elenco delle variabili in corrispondenza di <paramref name="index" /> (forma breve).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|13 < `unsigned int8` >|stloc.s `index`|Estrae un valore dallo stack e la archivia nella variabile locale `index`, forma breve.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un valore viene estratto dallo stack e inserito nella variabile locale `index`.  
  
 Il `stloc.s` istruzione estrae il valore dallo stack di valutazione e lo sposta in numero di variabile locale `index`, in cui le variabili locali sono numerate a partire da 0. Il tipo del valore deve corrispondere al tipo di variabile locale, come specificato nella firma locale del metodo corrente.  
  
 Il `stloc.s` istruzione fornisce una codifica efficiente per le variabili locali 0 e 255.  
  
 Archiviare in variabili locali che contengono un valore integer minore di 4 byte tronca il valore quando passa dallo stack alla variabile locale. I valori a virgola mobile vengono arrotondati dalla dimensione nativa (tipo `F`) per la dimensione associata con l'argomento.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload è possibile utilizzare il `stloc.s` opcode:  
  
-   ILGenerator (OpCode, LocalBuilder)  
  
-   ILGenerator (OpCode, byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stobj;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Copia un valore di un tipo specificato dallo stack di valutazione in un indirizzo di memoria fornito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|81 < `T` >|stobj `class`|Archivia un valore di tipo `class` dallo stack nella memoria.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
2.  Un oggetto di tipo di valore di tipo `class` viene inserito nello stack.  
  
3.  L'oggetto e l'indirizzo vengono estratti dallo stack; l'oggetto di tipo valore viene archiviato in corrispondenza dell'indirizzo.  
  
 Il `stobj` istruzione copia l'oggetto di tipo di valore nell'indirizzo specificato dall'indirizzo (un puntatore di tipo `native int`, `*`, o `&`). Il numero di byte copiati dipende dalle dimensioni della classe rappresentata dal `class`, un token di metadati che rappresenta un tipo di valore.  
  
 L'operazione del `stobj` istruzione può essere modificato da un immediatamente precedente <xref:System.Reflection.Emit.OpCodes.Volatile> o <xref:System.Reflection.Emit.OpCodes.Unaligned> immediatamente precedente.  
  
 <xref:System.TypeLoadException> viene generata se non è possibile trovare la classe. In genere, questo viene rilevato quando le istruzioni Microsoft Intermediate Language (MSIL) vengono convertite in codice nativo piuttosto che in fase di esecuzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stobj` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stsfld;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sostituisce il valore di un campo statico con un valore dallo stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|80 < `T` >|stsfld `field`|Sostituisce il valore in `field` con un valore fornito.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un valore viene inserito nello stack.  
  
2.  Un valore è estratto dallo stack e archiviato in `field`.  
  
 Il `stsfld` istruzione sostituisce il valore di un campo statico con un valore dallo stack. `field` è un token di metadati che deve fare riferimento a un membro del campo statico.  
  
 Il `stsfld` istruzione può essere preceduto da <xref:System.Reflection.Emit.OpCodes.Volatile>.  
  
 <xref:System.MissingFieldException> viene generata se il campo non viene trovato nei metadati. In genere, questo viene verificato quando le istruzioni Microsoft Intermediate Language (MSIL) vengono convertite in codice nativo, non in fase di esecuzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `stsfld` opcode:  
  
-   ILGenerator.Emit(OpCode, FieldInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sottrae un valore da un altro e inserisce il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|59|sub|Sottrae un valore da un altro, ottenendo un nuovo valore numerico.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; `value2` viene sottratto `value1`.  
  
4.  Il risultato viene inserito nello stack.  
  
 Overflow non viene rilevato per operazioni su numeri interi (per gestire l'overflow appropriato, vedere <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).  
  
 Sottrazione di integer determina il passaggio al valore iniziale, anziché una saturazione. Ad esempio: interi a 8 bit, in cui `value1` è impostato su 0 e `value2` è impostato su 1, il risultato di "wrapping" è 255.  
  
 Restituisce un overflow a virgola mobile `+inf` (`PositiveInfinity`) o `-inf` (`NegativeInfinity`).  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `sub` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sottrae un valore intero da un altro, esegue un controllo dell'overflow e inserisce il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|DA|sub.ovf|Sottrae un valore integer da un altro con un controllo dell'overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; `value2` viene sottratto `value1` con un controllo dell'overflow.  
  
4.  Il risultato viene inserito nello stack.  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Questa operazione viene eseguita su numeri interi con segno. per i valori a virgola mobile, usare <xref:System.Reflection.Emit.OpCodes.Sub>.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `sub.ovf` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf_Un;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sottrae un valore intero senza segno da un altro, esegue un controllo dell'overflow e inserisce il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|DB|sub.ovf.un|Sottrae un valore intero senza segno da un altro con un controllo dell'overflow.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack; `value2` viene sottratto `value1` con un controllo dell'overflow.  
  
4.  Il risultato viene inserito nello stack.  
  
 <xref:System.OverflowException> viene generata se il risultato non può essere rappresentato nel tipo di risultato.  
  
 Questa operazione viene eseguita su numeri interi con segno. per i valori a virgola mobile, usare <xref:System.Reflection.Emit.OpCodes.Sub>.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `sub.ovf.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Switch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Switch" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Switch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Switch As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Switch;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Implementa una tabella di collegamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|45 < `unsigned int32` > < `int32` >... < `int32` >|switch (`N`, `t1`, `t2`... `tN`)|Passa a uno dei `N` valori.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un valore viene inserito nello stack.  
  
2.  Il valore viene estratto dallo stack e l'esecuzione viene trasferita all'istruzione in corrispondenza dell'offset indicizzato per valore, il cui valore è minore di `N`.  
  
 Il `switch` istruzione implementa una tabella di collegamento. Il formato dell'istruzione è un `unsigned int32` che rappresenta il numero di destinazioni `N`, seguito da `N` int32 valori che specificano gli obiettivi di passaggio. Queste destinazioni vengono rappresentate come offset (positivo o negativo) dall'inizio dell'istruzione che segue tale `switch` istruzione.  
  
 Il `switch` istruzione estrae un valore dallo stack e lo confronta con, come un intero senza segno a `N`. Se il valore è minore di `N`, l'esecuzione viene trasferita all'obiettivo indicizzato per valore, in cui le destinazioni sono numerate da 0 (ad esempio, un valore pari a 0 corrisponde alla prima destinazione, un valore di 1 accetta destinazione secondo e così via). Se il valore è maggiore o uguale a `N`, l'esecuzione continua con l'istruzione successiva (passaggio).  
  
 Se l'istruzione di destinazione dispone di uno o più codici di prefisso, il controllo può essere trasferito solo al primo di tali prefissi.  
  
 Controllare i trasferimenti in e da `try`, `catch`, `filter`, e `finally` blocchi non possono essere eseguiti da questa istruzione. Tali trasferimenti sono limitati gravi e devono invece utilizzare l'istruzione leave.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `switch` opcode. Il `Label[]` argomento è una matrice di etichette che rappresentano gli offset a 32 bit.  
  
-   ILGenerator.Emit(OpCode, Label[])  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del `Switch` opcode per generare una tabella di collegamento, usare una matrice di <xref:System.Reflection.Emit.Label>.  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tailcall">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Tailcall;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Tailcall" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Tailcall As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Tailcall;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Esegue un'istruzione di chiamata al metodo con suffisso tale da rimuovere lo stack frame del metodo corrente prima dell'esecuzione dell'istruzione di chiamata effettiva.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 14|tail.|La chiamata successiva termina metodi correnti|  
  
 Non è definito per questa istruzione Nessun comportamento di transizione dello stack.  
  
 Il `tail` deve trovarsi immediatamente prima istruzione di prefisso una <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, o <xref:System.Reflection.Emit.OpCodes.Callvirt> (istruzione). Indica che stack frame del metodo corrente deve essere rimosso prima che venga eseguita l'istruzione di chiamata. Implica inoltre che il valore restituito dalla chiamata seguente è anche il valore restituito dal metodo corrente e di conseguenza, la chiamata può essere convertita in un collegamento tra metodi.  
  
 Lo stack deve essere vuoto tranne per gli argomenti vengono trasferiti mediante la chiamata seguente. Istruzione che segue l'istruzione di chiamata deve essere un'istruzione ret. È pertanto la sequenza di codice valido solo `tail. call` (o `calli` o `callvirt`). Le istruzioni Microsoft Intermediate Language (MSIL) corrette non devono creare rami per il `call` (istruzione), ma può creare un ramo alla successiva <xref:System.Reflection.Emit.OpCodes.Ret>.  
  
 Il frame corrente non può essere eliminato quando il controllo viene trasferito da codice non attendibile a codice attendibile, in quanto questo comprometterebbe la protezione dell'identità del codice. Controlli di sicurezza di .NET Framework è pertanto possibile che il `tail` venga ignorato, lasciando standard <xref:System.Reflection.Emit.OpCodes.Call> istruzione. Analogamente, in ordine per consentire l'uscita da un'area a cui si verificano dopo la chiamata restituisce sincronizzata, la `tail` prefisso viene ignorato se utilizzata per terminare un metodo contrassegnato come sincronizzato.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `tail` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TakesSingleByteArgument">
      <MemberSignature Language="C#" Value="public static bool TakesSingleByteArgument (System.Reflection.Emit.OpCode inst);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TakesSingleByteArgument(valuetype System.Reflection.Emit.OpCode inst) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakesSingleByteArgument (inst As OpCode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TakesSingleByteArgument(System::Reflection::Emit::OpCode inst);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inst" Type="System.Reflection.Emit.OpCode" />
      </Parameters>
      <Docs>
        <param name="inst">Istanza di un oggetto Opcode.</param>
        <summary>Restituisce true o false se il codice operativo fornito accetta un argomento a byte singolo.</summary>
        <returns>
          <see langword="True" /> o <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo può essere utilizzato per trovare codici MSIL in "forma breve", per l'utilizzo nel codice ottimizzato.  
  
 `TakesSingleByteArgument` Restituisce `true` se il <xref:System.Reflection.Emit.OpCode> istanza accetta un argomento a byte singolo nei casi seguenti:  
  
-   Il codice operativo esegue un'istruzione branch a un indirizzo dimensioni byte (ad esempio, <xref:System.Reflection.Emit.OpCodes.Br_S> e <xref:System.Reflection.Emit.OpCodes.Bgt_S>).  
  
-   Il codice operativo inserisce un valore byte nello stack (ad esempio, <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).  
  
-   Il codice operativo fa riferimento a una variabile o argomento tramite il byte "forma breve" (ad esempio, <xref:System.Reflection.Emit.OpCodes.Ldloc_S> e <xref:System.Reflection.Emit.OpCodes.Stloc_S>).  
  
 In caso contrario restituirà `false`.  
  
 Nell'esempio seguente viene illustrato l'utilizzo di `TakesSingleByteArgument` tramite reflection sul `OpCodes` classe e la verifica per vedere se ogni `OpCode` campo accetta un argomento a byte singolo.  
  
 [!code-cpp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Throw;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Throw" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Throw" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Throw As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Throw;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Genera l'oggetto eccezione attualmente nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|7A|throw|Genera un'eccezione.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento (eccezione) viene inserito nello stack.  
  
2.  Il riferimento all'oggetto viene estratto dallo stack e l'eccezione generata.  
  
 Il `throw` istruzione genera l'oggetto eccezione (tipo `O`) attualmente nello stack.  
  
 <xref:System.NullReferenceException> viene generata se il riferimento all'oggetto è un riferimento null.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `throw` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unaligned">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unaligned;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unaligned" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unaligned As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unaligned;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica che un indirizzo attualmente all'inizio dello stack di valutazione potrebbe non essere allineato rispetto alla dimensione standard dell'istruzione <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" /> o <see langword="cpblk" /> immediatamente successiva.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 12 < `unsigned int8` >|non è allineato. `alignment`|Indica che l'istruzione di puntatore successiva potrebbe essere non allineato.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
 `Unaligned` Specifica che l'indirizzo (un puntatore non gestito, `native int`) nello stack potrebbe non essere allineato rispetto alla dimensione standard dell'istruzione immediatamente successiva `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, o `cpblk` (istruzione). Ovvero, per un <xref:System.Reflection.Emit.OpCodes.Ldind_I4> istruzione l'allineamento dell'indirizzo non può essere di un limite di 4 byte. Per `initblk` e `cpblk` l'allineamento predefinito è dipendente dall'architettura (a 4 byte su processori a 32 bit, 8 byte su processori a 64 bit). I generatori di codice il cui output non è limitato a una dimensione di word a 32 bit è necessario utilizzare `unaligned` se l'allineamento non è noto in fase di compilazione a 8 byte.  
  
 Il valore di allineamento deve essere 1, 2 o 4 e indica che il codice generato deve presupporre che l'indirizzo dei byte, a byte doppio o quadruplo, rispettivamente. Si noti che temporaneo puntatori (tipo `*`) sono sempre allineati.  
  
 Mentre l'allineamento per un `cpblk` istruzione logicamente richiedono due numeri, uno per l'origine e uno per la destinazione, non ha alcun impatto notevole sulle prestazioni se viene specificato il numero più basso solo.  
  
 Il `unaligned` e `volatile` possono essere combinati in qualsiasi ordine. Devono precedere immediatamente un `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, o `cpblk` (istruzione). Solo il <xref:System.Reflection.Emit.OpCodes.Volatile> è consentito un prefisso per il <xref:System.Reflection.Emit.OpCodes.Ldsfld> e <xref:System.Reflection.Emit.OpCodes.Stsfld> istruzioni.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload è possibile utilizzare il `unaligned` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
-   ILGenerator.Emit(Opcode, Byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte la rappresentazione boxed di un tipo di valore nel relativo formato unboxed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|79 < `T` >|eseguire la conversione unboxing `valType`|Estrae i dati di tipo di valore da `obj`, la rappresentazione boxed.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Riferimento a un oggetto viene inserito nello stack.  
  
2.  Il riferimento all'oggetto viene estratto dallo stack e unboxed e a un puntatore di tipo valore.  
  
3.  Il puntatore di tipo valore viene inserito nello stack.  
  
 Un tipo di valore dispone di due rappresentazioni separate all'interno di Common Language Infrastructure (CLI):  
  
-   'Non elaborato' modulo quando un tipo di valore incorporato all'interno di un altro oggetto.  
  
-   Un modulo 'boxed', in cui i dati nel tipo di valore viene inseriti (boxed) in un oggetto affinché possano esistere come entità indipendenti.  
  
 Il `unbox` istruzione consente di convertire il riferimento all'oggetto (tipo `O`), la rappresentazione boxed di un tipo valore, in un puntatore di tipo valore (un puntatore gestito di tipo `&`), la forma unboxed. Tipo di valore fornito (`valType`) è un token di metadati che indica il tipo del tipo di valore contenuto all'interno dell'oggetto boxed.  
  
 A differenza di <xref:System.Reflection.Emit.OpCodes.Box>, che è necessario creare una copia di un tipo di valore per l'utilizzo dell'oggetto, `unbox` non è necessario copiare il tipo di valore dall'oggetto. In genere semplicemente calcola l'indirizzo del tipo di valore che è già presente all'interno dell'oggetto boxed.  
  
 <xref:System.InvalidCastException> viene generata se l'oggetto non viene sottoposto a boxing come `valType`.  
  
 <xref:System.NullReferenceException> viene generata se il riferimento all'oggetto è un riferimento null.  
  
 <xref:System.TypeLoadException> viene generata se il valore di tipo `valType` non è stato trovato. In genere, questo viene rilevato quando le istruzioni Microsoft Intermediate Language (MSIL) vengono convertite in codice nativo, anziché in fase di esecuzione.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `unbox` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox_Any">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox_Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox_Any" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox_Any As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox_Any;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converte la rappresentazione boxed di un tipo specificato nell'istruzione nel relativo formato unboxed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La tabella seguente elenca l'istruzione esadecimale e formato assembly di Microsoft intermediate language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|A5 < `T` >|unbox. Any `typeTok`|Estrarre i dati da `obj`, la rappresentazione boxed.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un riferimento all'oggetto `obj` viene inserito nello stack.  
  
2.  Il riferimento all'oggetto viene estratto dallo stack e unboxed e al tipo specificato nell'istruzione.  
  
3.  Il tipo di valore o riferimento oggetto risultante viene inserito nello stack.  
  
 Quando applicato a formato boxed del tipo di valore, il `unbox.any` istruzione estrae il valore contenuto in `obj` (di tipo `O`) ed è pertanto equivalente a `unbox` seguito da `ldobj`.  
  
 Quando applicato a un tipo riferimento, il `unbox.any` istruzione ha lo stesso effetto `castclass` `typeTok`.  
  
 Se l'operando `typeTok` è un parametro di tipo generico, il comportamento di runtime è determinato dal tipo specificato per tale parametro di tipo generico.  
  
 <xref:System.InvalidCastException> viene generata se `obj` non è un tipo boxed.  
  
 <xref:System.NullReferenceException> viene generata se `obj` è un riferimento null.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `unbox.any` opcode:  
  
-   ILGenerator (OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volatile">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Volatile;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Volatile" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Volatile" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Volatile As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Volatile;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifica che un indirizzo attualmente all'inizio dello stack di valutazione potrebbe essere volatile e che i risultati della lettura del percorso non possono essere memorizzati nella cache o che non è possibile eliminare archivi multipli in tale percorso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|FE 13|volatile.|Indica che il riferimento al puntatore successivo è volatile.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  Un indirizzo viene inserito nello stack.  
  
 `volatile`. Specifica che l'indirizzo è un indirizzo volatile (vale a dire possono farvi riferimento esternamente al thread corrente di esecuzione) e i risultati della lettura che non può essere memorizzato nella cache di percorso o che non è possibile eliminare archivi multipli in tale percorso. Uso di `volatile` interessa solo accesso in questione; gli altri accessi nello stesso percorso devono essere contrassegnati separatamente. Accesso a percorsi volatili non è necessario eseguire in modo atomico.  
  
 Il <xref:System.Reflection.Emit.OpCodes.Unaligned> e `volatile` possono essere combinati in qualsiasi ordine. Devono precedere immediatamente un `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, o `cpblk` (istruzione). Solo il `volatile` è consentito un prefisso per il <xref:System.Reflection.Emit.OpCodes.Ldsfld> e <xref:System.Reflection.Emit.OpCodes.Stsfld> istruzioni.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `volatile` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Xor;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Xor" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Xor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Xor As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Xor;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Calcola l'operazione XOR bit per bit dei primi due valori dello stack di valutazione, inserendo il risultato nello stack di valutazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente sono elencate esadecimale dell'istruzione e il formato di assembly di Microsoft Intermediate Language (MSIL), insieme a un breve riepilogo di riferimento:  
  
|Formato|Formato dell'assembly|Descrizione|  
|------------|---------------------|-----------------|  
|61|xor|Calcola il XOR bit per bit su due valori integer e restituisce un valore integer.|  
  
 Il comportamento di transizione dello stack, in ordine sequenziale, è:  
  
1.  `value1` viene inserito nello stack.  
  
2.  `value2` viene inserito nello stack.  
  
3.  `value2` e `value1` vengono estratti dallo stack e i relativi bit per bit XOR calcolata.  
  
4.  L'operazione XOR di `value2` e `value1` viene inserito nello stack.  
  
 Il `xor` istruzione calcola il XOR bit per bit dei primi due valori nello stack e lascia il risultato nello stack.  
  
 `Xor` è un'operazione specifica del numero intero.  
  
 Nell'esempio <xref:System.Reflection.Emit.ILGenerator.Emit%2A> overload del metodo è possibile utilizzare il `xor` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>