<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PropertyBuilder.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57558fd1a9b8dabee95c7e64c0dbc78bdadc11475.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7558fd1a9b8dabee95c7e64c0dbc78bdadc11475</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>Defines the properties for a type.</source>
          <target state="translated">Definisce le proprietà per un tipo.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>A <ph id="ph1">`PropertyBuilder`</ph> is always associated with a <ph id="ph2">`TypeBuilder`</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">`PropertyBuilder`</ph> è sempre associato un <ph id="ph2">`TypeBuilder`</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>The <ph id="ph1">`TypeBuilder`</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">`TypeBuilder`</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source><ph id="ph1">`DefineProperty`</ph> method will return a new <ph id="ph2">`PropertyBuilder`</ph> to a client.</source>
          <target state="translated"><ph id="ph1">`DefineProperty`</ph> Restituisce un nuovo metodo <ph id="ph2">`PropertyBuilder`</ph> a un client.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>The following code sample demonstrates how to implement properties in a dynamic type using a <ph id="ph1">`PropertyBuilder`</ph> obtained via <ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A?displayProperty=nameWithType&gt;</ph> to create the property framework and an associated <ph id="ph3">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> to implement the IL logic within the property.</source>
          <target state="translated">Esempio di codice riportato di seguito viene illustrato come implementare le proprietà in un tipo dinamico utilizzando un <ph id="ph1">`PropertyBuilder`</ph> ottenuto tramite <ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A?displayProperty=nameWithType&gt;</ph> per creare una struttura di proprietà e un oggetto associato <ph id="ph3">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> per implementare la logica IL all'interno della proprietà.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
          <source>A <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> object that represents the other method.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> che rappresenta l'altro metodo.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
          <source>Adds one of the other methods associated with this property.</source>
          <target state="translated">Aggiunge uno degli altri metodi associati a questa proprietà.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
          <source><ph id="ph1">&lt;paramref name="mdBuilder" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mdBuilder" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
          <source><ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> has been called on the enclosing type.</source>
          <target state="translated">Il metodo <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> è stato chiamato sul tipo di inclusione.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.Attributes">
          <source>Gets the attributes for this property.</source>
          <target state="translated">Ottiene gli attributi per questa proprietà.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.Attributes">
          <source>Attributes of this property.</source>
          <target state="translated">Attributi di questa proprietà.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.CanRead">
          <source>Gets a value indicating whether the property can be read.</source>
          <target state="translated">Ottiene un valore che indica se è possibile leggere la proprietà.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property can be read; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se è possibile leggere la proprietà; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.CanRead">
          <source>Boolean property indicating if the property can be read.</source>
          <target state="translated">Proprietà booleana che indica se la proprietà può essere letto.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.CanRead">
          <source>If the property does not have a get accessor, it cannot be read.</source>
          <target state="translated">Se la proprietà non dispone di una funzione di accesso get, non può essere letto.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
          <source>Gets a value indicating whether the property can be written to.</source>
          <target state="translated">Ottiene un valore che indica se è possibile scrivere nella proprietà.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property can be written to; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se è possibile scrivere nella proprietà; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
          <source>Boolean property indicating if the property can be written to.</source>
          <target state="translated">Proprietà booleana che indica se la proprietà può essere scritto.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
          <source>If the property does not have a set accessor, it cannot be written to.</source>
          <target state="translated">Se la proprietà non dispone di una funzione di accesso set, non può essere scritto per.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
          <source>Gets the class that declares this member.</source>
          <target state="translated">Ottiene la classe che dichiara questo membro.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object for the class that declares this member.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="Type" /&gt;</ph> per la classe che dichiara questo membro.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
          <source>Indicates whether non-public methods should be returned in the <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> array.</source>
          <target state="translated">Indica se nella matrice <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> devono essere restituiti metodi non pubblici.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods are to be included; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se devono essere inclusi i metodi non pubblici; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
          <source>Returns an array of the public and non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors on this property.</source>
          <target state="translated">Restituisce una matrice delle funzioni di accesso <ph id="ph1">&lt;see langword="get" /&gt;</ph> e <ph id="ph2">&lt;see langword="set" /&gt;</ph> pubbliche e non pubbliche su questa proprietà.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
          <source>An array of type <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.</source>
          <target state="translated">Matrice di tipo <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> contenente le funzioni di accesso pubbliche o non pubbliche corrispondenti oppure una matrice vuota se le funzioni di accesso corrispondenti non sono disponibili in questa proprietà.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
          <source>To get the accessors of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetAccessors.</source>
          <target state="translated">Per ottenere le funzioni di accesso di una proprietà, la reflection sul tipo padre della proprietà utilizzando Type. GetType o assembly. GetType, recuperare l'oggetto di proprietà di Reflection dal tipo e chiamare GetAccessors.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
          <source>This method is not supported.</source>
          <target state="translated">Questo metodo non è supportato.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>Returns all the custom attributes defined on this property.</source>
          <target state="translated">Restituisce tutti gli attributi personalizzati definiti su questa proprietà.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, walks up this property's inheritance chain to find the custom attributes</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="true" /&gt;</ph>, esplora la catena di ereditarietà di questa proprietà per trovare gli attributi personalizzati.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
          <source>Returns an array of all the custom attributes for this property.</source>
          <target state="translated">Restituisce una matrice di tutti gli attributi personalizzati per questa proprietà.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
          <source>An array of all the custom attributes.</source>
          <target state="translated">Matrice di tutti gli attributi personalizzati.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
          <source>Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.</source>
          <target state="translated">Reflection sul tipo di elemento padre della proprietà utilizzando Type. GetType o assembly. GetType, recuperare l'oggetto di proprietà di Reflection dal tipo e chiamare GetCustomAttributes.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
          <source>This method is not supported.</source>
          <target state="translated">Questo metodo non è supportato.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array of custom attributes identified by type.</source>
          <target state="translated">Matrice di attributi personalizzati identificati per tipo.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, walks up this property's inheritance chain to find the custom attributes.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="true" /&gt;</ph>, esplora la catena di ereditarietà di questa proprietà per trovare gli attributi personalizzati.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Returns an array of custom attributes identified by <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>.</source>
          <target state="translated">Restituisce una matrice di attributi personalizzati identificati dall'oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array of custom attributes defined on this reflected member, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no attributes are defined on this member.</source>
          <target state="translated">Matrice di attributi personalizzati definiti su questo membro di cui si è eseguita la reflection oppure <ph id="ph1">&lt;see langword="null" /&gt;</ph> se nessun attributo è stato definito su questo membro.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.</source>
          <target state="translated">Reflection sul tipo di elemento padre della proprietà utilizzando Type. GetType o assembly. GetType, recuperare l'oggetto di proprietà di Reflection dal tipo e chiamare GetCustomAttributes.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method is not supported.</source>
          <target state="translated">Questo metodo non è supportato.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
          <source>Indicates whether non-public get accessors should be returned.</source>
          <target state="translated">Indica se deve essere restituita una funzione di accesso get non pubblica.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods are to be included; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se devono essere inclusi i metodi non pubblici; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
          <source>Returns the public and non-public get accessor for this property.</source>
          <target state="translated">Restituisce la funzione di accesso get pubblica e non pubblica per questa proprietà.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the get accessor for this property, if <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> che rappresenta la funzione di accesso get per questa proprietà, se <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> è <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph3">&lt;see langword="false" /&gt;</ph> and the get accessor is non-public, or if <ph id="ph4">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph5">&lt;see langword="true" /&gt;</ph> but no get accessors exist.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see langword="null" /&gt;</ph> se <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> è <ph id="ph3">&lt;see langword="false" /&gt;</ph> e la funzione di accesso get non è pubblica oppure se <ph id="ph4">&lt;paramref name="nonPublic" /&gt;</ph> è <ph id="ph5">&lt;see langword="true" /&gt;</ph> ma non è disponibile alcuna funzione di accesso get.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
          <source>To get the getter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetGetMethod.</source>
          <target state="translated">Per ottenere il metodo di richiamo di una proprietà, la reflection sul tipo padre della proprietà utilizzando Type. GetType o assembly. GetType, recuperare l'oggetto di proprietà di Reflection dal tipo e chiamare GetGetMethod.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
          <source>Returns an array of all the index parameters for the property.</source>
          <target state="translated">Restituisce una matrice di tutti i parametri degli indici per la proprietà.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
          <source>An array of type <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> containing the parameters for the indexes.</source>
          <target state="translated">Matrice di tipo <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> contenente i parametri per gli indici.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
          <source>To get the index parameters of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetIndexParameters.</source>
          <target state="translated">Per ottenere i parametri di indice di una proprietà, la reflection sul tipo padre della proprietà utilizzando Type. GetType o assembly. GetType, recuperare l'oggetto di proprietà di Reflection dal tipo e chiamare GetIndexParameters.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
          <source>This method is not supported.</source>
          <target state="translated">Questo metodo non è supportato.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source>Indicates whether the accessor should be returned if it is non-public.</source>
          <target state="translated">Indica se la funzione di accesso deve essere restituita se non è pubblica.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods are to be included; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se devono essere inclusi i metodi non pubblici; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source>Returns the set accessor for this property.</source>
          <target state="translated">Restituisce la funzione di accesso set per questa proprietà.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source>The property's <ph id="ph1">&lt;see langword="Set" /&gt;</ph> method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>, as shown in the following table.</source>
          <target state="translated">Metodo <ph id="ph1">&lt;see langword="Set" /&gt;</ph> della proprietà oppure <ph id="ph2">&lt;see langword="null" /&gt;</ph>, come illustrato nella tabella seguente.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Valore</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condizione</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A <ph id="ph5">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the Set method for this property.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Oggetto <ph id="ph5">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> che rappresenta il metodo Set per questa proprietà.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The set accessor is public.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> La funzione di accesso set è pubblica.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is true and non-public methods can be returned.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> è true e possono essere restituiti metodi non pubblici.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> null</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Null</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="nonPublic" /&gt;</ph> is true, but the property is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="nonPublic" /&gt;</ph> è true, ma la proprietà è di sola lettura.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is false and the set accessor is non-public.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> è false e la funzione di accesso set non è pubblica.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
          <source>To get the setter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetSetMethod.</source>
          <target state="translated">Per ottenere il setter di una proprietà, la reflection sul tipo padre della proprietà utilizzando Type. GetType o assembly. GetType, recuperare l'oggetto di proprietà di Reflection dal tipo e chiamare GetSetMethod.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>Gets the value of the property by calling the getter.</source>
          <target state="translated">Ottiene il valore della proprietà chiamando il metodo per il richiamo.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
          <source>The object whose property value will be returned.</source>
          <target state="translated">Oggetto di cui verrà restituito il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valori di indice facoltativi per le proprietà indicizzate.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Il valore deve essere <ph id="ph1">&lt;see langword="null" /&gt;</ph> per le proprietà non indicizzate.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
          <source>Gets the value of the indexed property by calling the property's getter method.</source>
          <target state="translated">Ottiene il valore della proprietà indicizzata chiamando il metodo per il richiamo della proprietà.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
          <source>The value of the specified indexed property.</source>
          <target state="translated">Valore della proprietà indicizzata specificata.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
          <source>To get the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the <ph id="ph1">`Reflection`</ph> property object from the type, and call <ph id="ph2">`PropertyInfo.GetValue`</ph>.</source>
          <target state="translated">Per ottenere il valore di una proprietà, la reflection sul tipo di elemento padre della proprietà utilizzando Type. GetType o assembly. GetType, recuperare il <ph id="ph1">`Reflection`</ph> oggetto proprietà dal tipo e chiamare <ph id="ph2">`PropertyInfo.GetValue`</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
          <source>This method is not supported.</source>
          <target state="translated">Questo metodo non è supportato.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object whose property value will be returned.</source>
          <target state="translated">Oggetto di cui verrà restituito il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The invocation attribute.</source>
          <target state="translated">Attributo di chiamata.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see langword="BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph4">&lt;see langword="Static" /&gt;</ph>, <ph id="ph5">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph7">&lt;see langword="GetProperty" /&gt;</ph>, or <ph id="ph8">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">È necessario che si tratti di un flag di bit da <ph id="ph1">&lt;see langword="BindingFlags" /&gt;</ph>: <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph4">&lt;see langword="Static" /&gt;</ph>, <ph id="ph5">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph7">&lt;see langword="GetProperty" /&gt;</ph> o <ph id="ph8">&lt;see langword="SetProperty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A suitable invocation attribute must be specified.</source>
          <target state="translated">È necessario specificare un attributo di chiamata appropriato.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If a static member is to be invoked, the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag of <ph id="ph2">&lt;see langword="BindingFlags" /&gt;</ph> must be set.</source>
          <target state="translated">Se occorre richiamare un membro statico, è necessario impostare il flag <ph id="ph1">&lt;see langword="Static" /&gt;</ph> di <ph id="ph2">&lt;see langword="BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> objects using reflection.</source>
          <target state="translated">Oggetto che consente l'associazione, la coercizione dei tipi di argomento, la chiamata dei membri e il recupero di oggetti <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> tramite reflection.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> è <ph id="ph1">&lt;see langword="null" /&gt;</ph>, verrà usato il binder predefinito.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valori di indice facoltativi per le proprietà indicizzate.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Il valore deve essere <ph id="ph1">&lt;see langword="null" /&gt;</ph> per le proprietà non indicizzate.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> object that represents the culture for which the resource is to be localized.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> che rappresenta le impostazioni cultura con le quali deve essere localizzata la risorsa.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Note that if the resource is not localized for this culture, the <ph id="ph1">&lt;see langword="CultureInfo.Parent" /&gt;</ph> method will be called successively in search of a match.</source>
          <target state="translated">Se una risorsa non viene localizzata con queste impostazioni cultura, il metodo <ph id="ph1">&lt;see langword="CultureInfo.Parent" /&gt;</ph> sarà successivamente chiamato in cerca di una corrispondenza.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph> is obtained from the <ph id="ph3">&lt;see langword="CultureInfo.CurrentUICulture" /&gt;</ph> property.</source>
          <target state="translated">Se questo valore è <ph id="ph1">&lt;see langword="null" /&gt;</ph>, l'oggetto <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph> è ottenuto dalla proprietà <ph id="ph3">&lt;see langword="CultureInfo.CurrentUICulture" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Gets the value of a property having the specified binding, index, and <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph>.</source>
          <target state="translated">Ottiene il valore di una proprietà con l'associazione, l'indice e l'oggetto <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> specificati.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property value for <ph id="ph1">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated">Valore della proprietà per <ph id="ph1">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To get the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetValue.</source>
          <target state="translated">Per ottenere il valore di una proprietà, la reflection sul tipo padre della proprietà utilizzando Type. GetType o assembly. GetType, recuperare l'oggetto di proprietà di Reflection dal tipo e chiamare PropertyInfo.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This method is not supported.</source>
          <target state="translated">Questo metodo non è supportato.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object to which the custom attributes are applied.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="Type" /&gt;</ph> a cui vengono applicati gli attributi personalizzati.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Specifies whether to walk up this property's inheritance chain to find the custom attributes.</source>
          <target state="translated">Specifica se esplorare la catena di ereditarietà di questa proprietà per trovare gli attributi personalizzati.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Indicates whether one or more instance of <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is defined on this property.</source>
          <target state="translated">Indica se una o più istanze di <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> sono definite su questa proprietà.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if one or more instance of <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> is defined on this property; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se una o più istanze di <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> sono definite su questa proprietà; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
          <source>Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.IsDefined.</source>
          <target state="translated">Reflection sul tipo di elemento padre della proprietà utilizzando Type. GetType o assembly. GetType, recuperare l'oggetto di proprietà di Reflection dal tipo e chiamare IsDefined.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
          <source>This method is not supported.</source>
          <target state="translated">Questo metodo non è supportato.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.Module">
          <source>Gets the module in which the type that declares the current property is being defined.</source>
          <target state="translated">Ottiene il modulo in cui viene definito il tipo che dichiara la proprietà corrente.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.Module">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> in which the type that declares the current property is defined.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> in cui viene definito il tipo che dichiara la proprietà corrente.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.Module">
          <source>This property is provided as a convenience for the user.</source>
          <target state="translated">Questa proprietà viene fornita per praticità per l'utente.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.Module">
          <source>It is equivalent to using the <ph id="ph1">&lt;xref:System.Reflection.Emit.PropertyBuilder.DeclaringType%2A&gt;</ph> property to get the type in which the property is declared, and then calling the <ph id="ph2">&lt;xref:System.Type.Module%2A&gt;</ph> property of the resulting <ph id="ph3">&lt;xref:System.Type&gt;</ph> object.</source>
          <target state="translated">Equivale all'utilizzo di <ph id="ph1">&lt;xref:System.Reflection.Emit.PropertyBuilder.DeclaringType%2A&gt;</ph> proprietà per ottenere il tipo in cui viene dichiarata la proprietà e quindi chiamando il <ph id="ph2">&lt;xref:System.Type.Module%2A&gt;</ph> proprietà dell'oggetto risultante <ph id="ph3">&lt;xref:System.Type&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.Name">
          <source>Gets the name of this member.</source>
          <target state="translated">Ottiene il nome del membro.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.Name">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the name of this member.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> che contiene il nome di questo membro.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.PropertyToken">
          <source>Retrieves the token for this property.</source>
          <target state="translated">Recupera il token per questa proprietà.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.PropertyToken">
          <source>Read-only.</source>
          <target state="translated">Sola lettura.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.PropertyToken">
          <source>Retrieves the token for this property.</source>
          <target state="translated">Recupera il token per questa proprietà.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
          <source>Gets the type of the field of this property.</source>
          <target state="translated">Ottiene il tipo del campo di questa proprietà.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
          <source>The type of this property.</source>
          <target state="translated">Tipo della proprietà.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
          <source>Gets the class object that was used to obtain this instance of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph>.</source>
          <target state="translated">Ottiene l'oggetto classe utilizzato per ottenere questa istanza di <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object through which this <ph id="ph2">&lt;see langword="MemberInfo" /&gt;</ph> object was obtained.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="Type" /&gt;</ph> tramite il quale è stato ottenuto questo oggetto <ph id="ph2">&lt;see langword="MemberInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>The default value of this property.</source>
          <target state="translated">Valore predefinito di questa proprietà.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>Sets the default value of this property.</source>
          <target state="translated">Imposta il valore predefinito di questa proprietà.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source><ph id="ph1">`defaultValue`</ph> is restricted to the following types: <ph id="ph2">`Boolean`</ph>, <ph id="ph3">`SByte`</ph>, <ph id="ph4">`Int16`</ph>, <ph id="ph5">`Int32`</ph>, <ph id="ph6">`Int64`</ph>, <ph id="ph7">`Byte`</ph>, <ph id="ph8">`UInt16`</ph>, <ph id="ph9">`UInt32`</ph>, <ph id="ph10">`UInt64`</ph>, <ph id="ph11">`Single`</ph>, <ph id="ph12">`Double`</ph>, <ph id="ph13">`DateTime`</ph>, <ph id="ph14">`Char`</ph>, <ph id="ph15">`String`</ph>, and <ph id="ph16">`Enum`</ph>.</source>
          <target state="translated"><ph id="ph1">`defaultValue`</ph> è limitato ai seguenti tipi: <ph id="ph2">`Boolean`</ph>, <ph id="ph3">`SByte`</ph>, <ph id="ph4">`Int16`</ph>, <ph id="ph5">`Int32`</ph>, <ph id="ph6">`Int64`</ph>, <ph id="ph7">`Byte`</ph>, <ph id="ph8">`UInt16`</ph>, <ph id="ph9">`UInt32`</ph>, <ph id="ph10">`UInt64`</ph>, <ph id="ph11">`Single`</ph>, <ph id="ph12">`Double`</ph>, <ph id="ph13">`DateTime`</ph> , <ph id="ph14">`Char`</ph>, <ph id="ph15">`String`</ph>, e <ph id="ph16">`Enum`</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>If the property type is a reference type, CLS compliance requires <ph id="ph1">`defaultValue`</ph> to be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se il tipo della proprietà è un tipo riferimento, richiede la conformità a CLS <ph id="ph1">`defaultValue`</ph> da <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>However, starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">`defaultValue`</ph> can be non-null for reference types as long as the value can be assigned to that reference type.</source>
          <target state="translated">Tuttavia, a partire dal <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">`defaultValue`</ph> può essere non null per i tipi di riferimento, purché il valore può essere assegnato a tale tipo di riferimento.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>For example, an <ph id="ph1">`Int32`</ph> value can be assigned to a property of type <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Ad esempio, un <ph id="ph1">`Int32`</ph> valore può essere assegnato a una proprietà di tipo <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>This is not CLS-compliant, but it can be useful in interop scenarios.</source>
          <target state="translated">Non è conforme a CLS, ma può essere utile negli scenari di interoperabilità.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> has been called on the enclosing type.</source>
          <target state="translated">Il metodo <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> è stato chiamato sul tipo di inclusione.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>The property is not one of the supported types.</source>
          <target state="translated">La proprietà non è tra i tipi supportati.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>The type of <ph id="ph1">&lt;paramref name="defaultValue" /&gt;</ph> does not match the type of the property.</source>
          <target state="translated">Il tipo dell'oggetto <ph id="ph1">&lt;paramref name="defaultValue" /&gt;</ph> non corrisponde al tipo della proprietà.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
          <source>The property is of type <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> or other reference type, <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> is not <ph id="ph3">&lt;see langword="null" /&gt;</ph>, and the value cannot be assigned to the reference type.</source>
          <target state="translated">Il tipo della proprietà è <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> o un altro tipo di riferimento, <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> non è <ph id="ph3">&lt;see langword="null" /&gt;</ph> e il valore non può essere assegnato al tipo di riferimento.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>Sets a custom attribute.</source>
          <target state="translated">Imposta un attributo personalizzato.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>An instance of a helper class to define the custom attribute.</source>
          <target state="translated">Un'istanza di una classe helper per definire l'attributo personalizzato.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>Set a custom attribute using a custom attribute builder.</source>
          <target state="translated">Impostare un attributo personalizzato usando un generatore di attributi personalizzati.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source><ph id="ph1">&lt;paramref name="customBuilder" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="customBuilder" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
          <source>if <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> has been called on the enclosing type.</source>
          <target state="translated">se <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> è stato chiamato sul tipo di inclusione.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The constructor for the custom attribute.</source>
          <target state="translated">Costruttore dell'attributo personalizzato.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>A byte blob representing the attributes.</source>
          <target state="translated">BLOB di byte che rappresenta gli attributi.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>Set a custom attribute using a specified custom attribute blob.</source>
          <target state="translated">Imposta un attributo personalizzato usando un BLOB di attributi personalizzati specificato.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>See the metadata specification in the ECMA Partition II documentation for details on how to format <ph id="ph1">`binaryAttribute`</ph>.</source>
          <target state="translated">Vedere le specifiche dei metadati nella documentazione di specifiche ECMA Partition II per informazioni dettagliate su come formattare <ph id="ph1">`binaryAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source>The Partition II documentation is available online on MSDN (<bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=65555)</ept> Web page) and on the ECMA Web site (<bpt id="p2">[</bpt>Standard ECMA-335 Common Language Infrastructure<ept id="p2">](http://go.microsoft.com/fwlink/?linkid=65552)</ept> document).</source>
          <target state="translated">La documentazione Partition II è disponibile online in MSDN (<bpt id="p1">[</bpt>ECMA c# e Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=65555)</ept> pagina Web) e nel sito Web di ECMA (<bpt id="p2">[</bpt>Standard ECMA-335: Common Language Infrastructure<ept id="p2">](http://go.microsoft.com/fwlink/?linkid=65552)</ept> documento).</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="con" /&gt;</ph> or <ph id="ph2">&lt;paramref name="binaryAttribute" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="con" /&gt;</ph> o <ph id="ph2">&lt;paramref name="binaryAttribute" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
          <source><ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> has been called on the enclosing type.</source>
          <target state="translated">Il metodo <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> è stato chiamato sul tipo di inclusione.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
          <source>A <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> object that represents the method that gets the property value.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> che rappresenta il metodo che ottiene il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
          <source>Sets the method that gets the property value.</source>
          <target state="translated">Imposta il metodo che ottiene il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
          <source>The following code sample demonstrates how to attach a dynamic method to a <ph id="ph1">`get`</ph> property created with <ph id="ph2">`PropertyBuilder`</ph> using <ph id="ph3">`SetGetMethod`</ph>.</source>
          <target state="translated">Esempio di codice riportato di seguito viene illustrato come associare un metodo dinamico a un <ph id="ph1">`get`</ph> proprietà creata con <ph id="ph2">`PropertyBuilder`</ph> utilizzando <ph id="ph3">`SetGetMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
          <source><ph id="ph1">&lt;paramref name="mdBuilder" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mdBuilder" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
          <source><ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> has been called on the enclosing type.</source>
          <target state="translated">Il metodo <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> è stato chiamato sul tipo di inclusione.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
          <source>A <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> object that represents the method that sets the property value.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="MethodBuilder" /&gt;</ph> che rappresenta il metodo che imposta il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
          <source>Sets the method that sets the property value.</source>
          <target state="translated">Imposta il metodo che imposta il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
          <source>The following code sample demonstrates how to attach a dynamic method to a <ph id="ph1">`set`</ph> property created with <ph id="ph2">`PropertyBuilder`</ph> using <ph id="ph3">`SetSetMethod`</ph>.</source>
          <target state="translated">Esempio di codice riportato di seguito viene illustrato come associare un metodo dinamico a un <ph id="ph1">`set`</ph> proprietà creata con <ph id="ph2">`PropertyBuilder`</ph> utilizzando <ph id="ph3">`SetSetMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
          <source><ph id="ph1">&lt;paramref name="mdBuilder" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mdBuilder" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
          <source><ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> has been called on the enclosing type.</source>
          <target state="translated">Il metodo <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> è stato chiamato sul tipo di inclusione.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.PropertyBuilder">
          <source>Sets the property value for the given object to the given value.</source>
          <target state="translated">Imposta il valore della proprietà per l'oggetto dato sul valore dato.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
          <source>The object whose property value will be set.</source>
          <target state="translated">Oggetto di cui verrà impostato il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
          <source>The new value for this property.</source>
          <target state="translated">Nuovo valore della proprietà.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valori di indice facoltativi per le proprietà indicizzate.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Il valore deve essere <ph id="ph1">&lt;see langword="null" /&gt;</ph> per le proprietà non indicizzate.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
          <source>Sets the value of the property with optional index values for index properties.</source>
          <target state="translated">Imposta il valore della proprietà con valori di indice facoltativi per le proprietà dell'indice.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
          <source>To set the value of a property, reflect on the property's parent type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>, retrieve the <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object from the type, and call <ph id="ph4">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Per impostare il valore di una proprietà, la reflection sul padre della proprietà del tipo utilizzando <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> o <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>, recuperare il <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> oggetto dal tipo e chiamare <ph id="ph4">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
          <source>This method is not supported.</source>
          <target state="translated">Questo metodo non è supportato.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object whose property value will be returned.</source>
          <target state="translated">Oggetto di cui verrà restituito il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The new value for this property.</source>
          <target state="translated">Nuovo valore della proprietà.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The invocation attribute.</source>
          <target state="translated">Attributo di chiamata.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This must be a bit flag from <ph id="ph1">&lt;see langword="BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph4">&lt;see langword="Static" /&gt;</ph>, <ph id="ph5">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph7">&lt;see langword="GetProperty" /&gt;</ph>, or <ph id="ph8">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">È necessario che si tratti di un flag di bit da <ph id="ph1">&lt;see langword="BindingFlags" /&gt;</ph>: <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph4">&lt;see langword="Static" /&gt;</ph>, <ph id="ph5">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph7">&lt;see langword="GetProperty" /&gt;</ph> o <ph id="ph8">&lt;see langword="SetProperty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A suitable invocation attribute must be specified.</source>
          <target state="translated">È necessario specificare un attributo di chiamata appropriato.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If a static member is to be invoked, the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag of <ph id="ph2">&lt;see langword="BindingFlags" /&gt;</ph> must be set.</source>
          <target state="translated">Se occorre richiamare un membro statico, è necessario impostare il flag <ph id="ph1">&lt;see langword="Static" /&gt;</ph> di <ph id="ph2">&lt;see langword="BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> objects using reflection.</source>
          <target state="translated">Oggetto che consente l'associazione, la coercizione dei tipi di argomento, la chiamata dei membri e il recupero di oggetti <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> tramite reflection.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> è <ph id="ph1">&lt;see langword="null" /&gt;</ph>, verrà usato il binder predefinito.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valori di indice facoltativi per le proprietà indicizzate.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Il valore deve essere <ph id="ph1">&lt;see langword="null" /&gt;</ph> per le proprietà non indicizzate.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> object that represents the culture for which the resource is to be localized.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> che rappresenta le impostazioni cultura con le quali deve essere localizzata la risorsa.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Note that if the resource is not localized for this culture, the <ph id="ph1">&lt;see langword="CultureInfo.Parent" /&gt;</ph> method will be called successively in search of a match.</source>
          <target state="translated">Se una risorsa non viene localizzata con queste impostazioni cultura, il metodo <ph id="ph1">&lt;see langword="CultureInfo.Parent" /&gt;</ph> sarà successivamente chiamato in cerca di una corrispondenza.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph> is obtained from the <ph id="ph3">&lt;see langword="CultureInfo.CurrentUICulture" /&gt;</ph> property.</source>
          <target state="translated">Se questo valore è <ph id="ph1">&lt;see langword="null" /&gt;</ph>, l'oggetto <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph> è ottenuto dalla proprietà <ph id="ph3">&lt;see langword="CultureInfo.CurrentUICulture" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Sets the property value for the given object to the given value.</source>
          <target state="translated">Imposta il valore della proprietà per l'oggetto dato sul valore dato.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To set the value of a property, reflect on the property's parent type using <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>, retrieve the <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object from the type, and call <ph id="ph4">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Per impostare il valore di una proprietà, la reflection sul padre della proprietà del tipo utilizzando <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> o <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph>, recuperare il <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> oggetto dal tipo e chiamare <ph id="ph4">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This method is not supported.</source>
          <target state="translated">Questo metodo non è supportato.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Riservato per utilizzi futuri.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve essere IID_NULL.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Matrice di nomi passata di cui eseguire il mapping.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Conteggio dei nomi di cui eseguire il mapping.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Contesto delle impostazioni locali in cui interpretare i nomi.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Matrice allocata dal chiamante che riceve gli ID corrispondenti ai nomi.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Esegue il mapping di un set di nomi a un set corrispondente di ID dispatch.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">Il metodo viene chiamato ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Informazioni sul tipo da restituire.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Identificatore delle impostazioni locali per le informazioni sul tipo.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Riceve un puntatore all'oggetto relativo alle informazioni sul tipo richiesto.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Recupera le informazioni sul tipo relative a un oggetto che può quindi essere usato per ottenere informazioni sul tipo relative a un'interfaccia.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">Il metodo viene chiamato ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Punta a una posizione che riceve il numero di interfacce di informazioni sul tipo fornite dall'oggetto.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Recupera il numero delle interfacce di informazioni sul tipo fornite da un oggetto (0 o 1).</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">Il metodo viene chiamato ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Identifica il membro.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Riservato per utilizzi futuri.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve essere IID_NULL.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Contesto di impostazioni locali all'interno del quale devono essere interpretati gli argomenti.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Flag che descrivono il contesto della chiamata.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Puntatore a una struttura contenente una matrice di argomenti, una matrice di DISPID per argomenti denominati e i conteggi del numero di elementi nelle matrici.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Puntatore alla posizione in cui deve essere archiviato il risultato.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Puntatore a una struttura contenente informazioni sull'eccezione.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Indice del primo argomento che contiene un errore.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Fornisce l'accesso a proprietà e metodi esposti da un oggetto.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::Invoke`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">Il metodo viene chiamato ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>