<Type Name="DynamicMethod" FullName="System.Reflection.Emit.DynamicMethod">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="862a235668e7e4b96457329cbd2f33598707245d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DynamicMethod : System.Reflection.MethodInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DynamicMethod extends System.Reflection.MethodInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicMethod" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DynamicMethod&#xA;Inherits MethodInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicMethod sealed : System::Reflection::MethodInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodInfo</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="4b60a-101">Definisce e rappresenta un metodo dinamico che può essere compilato, eseguito e annullato.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4b60a-101">Defines and represents a dynamic method that can be compiled, executed, and discarded.</span>
      </span>
      <span data-ttu-id="4b60a-102">I metodi annullati possono essere sottoposti a Garbage Collection.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4b60a-102">Discarded methods are available for garbage collection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-103">È possibile utilizzare la <xref:System.Reflection.Emit.DynamicMethod> classe per generare ed eseguire un metodo in fase di esecuzione senza la necessità di generare un assembly dinamico e un tipo dinamico per contenere il metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-103">You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method.</span></span> <span data-ttu-id="4b60a-104">Il codice eseguibile creato dal compilatore just-in-time (JIT) viene recuperato quando la <xref:System.Reflection.Emit.DynamicMethod> oggetto venga recuperato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-104">The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed.</span></span> <span data-ttu-id="4b60a-105">I metodi dinamici sono il modo più efficiente per generare ed eseguire piccole quantità di codice.</span><span class="sxs-lookup"><span data-stu-id="4b60a-105">Dynamic methods are the most efficient way to generate and execute small amounts of code.</span></span>  
  
 <span data-ttu-id="4b60a-106">Un metodo dinamico può essere ospitato in modo anonimo, o può belogically associato un modulo o un tipo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-106">A dynamic method can be anonymously hosted, or it can belogically associated with a module or with a type.</span></span>  
  
-   <span data-ttu-id="4b60a-107">Se il metodo dinamico è ospitato in modo anonimo, si trova in un assembly fornito dal sistema e pertanto è isolata da altro codice.</span><span class="sxs-lookup"><span data-stu-id="4b60a-107">If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code.</span></span> <span data-ttu-id="4b60a-108">Per impostazione predefinita, non ha accesso a tutti i dati non pubblici.</span><span class="sxs-lookup"><span data-stu-id="4b60a-108">By default, it does not have access to any non-public data.</span></span> <span data-ttu-id="4b60a-109">Un metodo dinamico ospitato anonimamente può avere una limitata capacità di ignorare i controlli di visibilità del compilatore JIT, se è stata concessa <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span><span class="sxs-lookup"><span data-stu-id="4b60a-109">An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="4b60a-110">Il livello di attendibilità dell'assembly i cui membri non pubblici sono accessibili dal metodo dinamico deve essere uguale o è un subset del livello di attendibilità dello stack di chiamate che ha generato il metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-110">The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method.</span></span> <span data-ttu-id="4b60a-111">Per ulteriori informazioni sui metodi dinamici ospitati anonimamente, vedere [procedura dettagliata: creazione di codice in scenari di attendibilità parziale](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span><span class="sxs-lookup"><span data-stu-id="4b60a-111">For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span></span>  
  
-   <span data-ttu-id="4b60a-112">Se il metodo dinamico è associato a un modulo specificato, il metodo dinamico è globale per tale modulo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-112">If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module.</span></span> <span data-ttu-id="4b60a-113">Può accedere a tutti i tipi nel modulo e tutte `internal` (`Friend` in Visual Basic) membri dei tipi.</span><span class="sxs-lookup"><span data-stu-id="4b60a-113">It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types.</span></span> <span data-ttu-id="4b60a-114">È possibile associare un dinamico (metodo) con qualsiasi modulo, indipendentemente dal fatto è stato creato il modulo, a condizione che la richiesta di <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag possono essere soddisfatte tramite lo stack di chiamate che include il codice.</span><span class="sxs-lookup"><span data-stu-id="4b60a-114">You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code.</span></span> <span data-ttu-id="4b60a-115">Se il <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag è incluso nell'autorizzazione, il metodo dinamico è possibile ignorare i controlli di visibilità del compilatore JIT e accedere ai dati di tutti i tipi dichiarati nel modulo o in qualsiasi altro modulo in qualsiasi assembly privati.</span><span class="sxs-lookup"><span data-stu-id="4b60a-115">If the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4b60a-116">Quando si specifica il modulo a cui è associato un metodo dinamico, è possibile che tale modulo non deve essere nell'assembly fornito dal sistema che viene utilizzato per l'hosting anonimo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-116">When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.</span></span>  
  
-   <span data-ttu-id="4b60a-117">Se il metodo dinamico è associato un tipo specificato, ha accesso a tutti i membri del tipo, indipendentemente dal livello di accesso.</span><span class="sxs-lookup"><span data-stu-id="4b60a-117">If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level.</span></span> <span data-ttu-id="4b60a-118">Inoltre, i controlli di visibilità JIT possono essere ignorati.</span><span class="sxs-lookup"><span data-stu-id="4b60a-118">In addition, JIT visibility checks can be skipped.</span></span> <span data-ttu-id="4b60a-119">In questo modo il metodo dinamico può accedere ai dati privati di altri tipi dichiarati nel modulo stesso o in qualsiasi altro modulo in qualsiasi assembly.</span><span class="sxs-lookup"><span data-stu-id="4b60a-119">This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly.</span></span> <span data-ttu-id="4b60a-120">È possibile associare un metodo dinamico con qualsiasi tipo, ma debba essere concesse al codice <xref:System.Security.Permissions.ReflectionPermission> con entrambi i <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> e <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.</span><span class="sxs-lookup"><span data-stu-id="4b60a-120">You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.</span></span>  
  
 <span data-ttu-id="4b60a-121">Nella tabella seguente vengono descritti tipi e membri sono accessibili da un metodo dinamico ospitato anonimamente, con e senza controlli di visibilità JIT, a seconda che <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag viene concessa.</span><span class="sxs-lookup"><span data-stu-id="4b60a-121">The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted.</span></span>  
  
||<span data-ttu-id="4b60a-122">Senza <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="4b60a-122">Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|<span data-ttu-id="4b60a-123">Con <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="4b60a-123">With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|  
|-|-|-|  
|<span data-ttu-id="4b60a-124">Senza ignorare i controlli di visibilità JIT</span><span class="sxs-lookup"><span data-stu-id="4b60a-124">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="4b60a-125">Membri pubblici di tipi pubblici in qualsiasi assembly.</span><span class="sxs-lookup"><span data-stu-id="4b60a-125">Public members of public types in any assembly.</span></span>|<span data-ttu-id="4b60a-126">Membri pubblici di tipi pubblici in qualsiasi assembly.</span><span class="sxs-lookup"><span data-stu-id="4b60a-126">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="4b60a-127">JIT di ignorare i controlli di visibilità, con restrizioni</span><span class="sxs-lookup"><span data-stu-id="4b60a-127">Skipping JIT visibility checks, with restrictions</span></span>|<span data-ttu-id="4b60a-128">Membri pubblici di tipi pubblici in qualsiasi assembly.</span><span class="sxs-lookup"><span data-stu-id="4b60a-128">Public members of public types in any assembly.</span></span>|<span data-ttu-id="4b60a-129">Tutti i membri di tutti i tipi, solo in assembly i cui livelli di attendibilità sono uguale o inferiore a livello di attendibilità dell'assembly che ha generato il metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-129">All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-130">Nelle versioni precedenti al [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], la creazione di codice necessario <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span><span class="sxs-lookup"><span data-stu-id="4b60a-130">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="4b60a-131">Questa autorizzazione è inclusa per impostazione predefinita in FullTrust e LocalIntranet set di autorizzazioni denominati, ma non nel set di autorizzazioni Internet.</span><span class="sxs-lookup"><span data-stu-id="4b60a-131">This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set.</span></span> <span data-ttu-id="4b60a-132">Pertanto, nelle versioni precedenti del [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] una libreria può essere utilizzata con autorizzazioni Internet solo se è stato il <xref:System.Security.SecurityCriticalAttribute> attributo ed esegue un <xref:System.Security.PermissionSet.Assert%2A> per <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-132">Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span></span> <span data-ttu-id="4b60a-133">Tali librerie richiedono un'attenta revisione della sicurezza perché eventuali errori nel codice potrebbe produrre delle vulnerabilità.</span><span class="sxs-lookup"><span data-stu-id="4b60a-133">Such libraries require careful security review because coding errors could result in security holes.</span></span> <span data-ttu-id="4b60a-134">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] consente di generare codice in scenari con attendibilità parziale senza creare alcuna richiesta di sicurezza, poiché la generazione di codice non è implicitamente un'operazione con privilegi.</span><span class="sxs-lookup"><span data-stu-id="4b60a-134">The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation.</span></span> <span data-ttu-id="4b60a-135">Ovvero, il codice generato non dispone di ulteriori autorizzazioni rispetto all'assembly che lo genera.</span><span class="sxs-lookup"><span data-stu-id="4b60a-135">That is, the generated code has no more permissions than the assembly that emits it.</span></span> <span data-ttu-id="4b60a-136">Questo consente alle librerie che generano il codice di essere SecurityTransparent ed elimina la necessità di asserire <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, che semplifica l'attività di scrittura di una libreria protetta.</span><span class="sxs-lookup"><span data-stu-id="4b60a-136">This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library.</span></span> <span data-ttu-id="4b60a-137">Per utilizzare questa funzionalità, l'applicazione deve essere destinata la [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="4b60a-137">To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 <span data-ttu-id="4b60a-138">Nella tabella seguente vengono descritti tipi e membri sono accessibili a un metodo dinamico è associato a un modulo o a un tipo in un modulo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-138">The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.</span></span>  
  
||<span data-ttu-id="4b60a-139">Associato al modulo</span><span class="sxs-lookup"><span data-stu-id="4b60a-139">Associated with module</span></span>|<span data-ttu-id="4b60a-140">Associata al tipo</span><span class="sxs-lookup"><span data-stu-id="4b60a-140">Associated with type</span></span>|  
|-|-|-|  
|<span data-ttu-id="4b60a-141">Senza ignorare i controlli di visibilità JIT</span><span class="sxs-lookup"><span data-stu-id="4b60a-141">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="4b60a-142">Membri pubblici e interni dei tipi pubblici, interni e privati nel modulo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-142">Public and internal members of public, internal, and private types in the module.</span></span><br /><br /> <span data-ttu-id="4b60a-143">Membri pubblici di tipi pubblici in qualsiasi assembly.</span><span class="sxs-lookup"><span data-stu-id="4b60a-143">Public members of public types in any assembly.</span></span>|<span data-ttu-id="4b60a-144">Tutti i membri del tipo associato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-144">All members of the associated type.</span></span> <span data-ttu-id="4b60a-145">Membri pubblici e interni di tutti gli altri tipi nel modulo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-145">Public and internal members of all the other types in the module.</span></span><br /><br /> <span data-ttu-id="4b60a-146">Membri pubblici di tipi pubblici in qualsiasi assembly.</span><span class="sxs-lookup"><span data-stu-id="4b60a-146">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="4b60a-147">Ignorare i controlli di visibilità JIT</span><span class="sxs-lookup"><span data-stu-id="4b60a-147">Skipping JIT visibility checks</span></span>|<span data-ttu-id="4b60a-148">Tutti i membri di tutti i tipi in qualsiasi assembly.</span><span class="sxs-lookup"><span data-stu-id="4b60a-148">All members of all types in any assembly.</span></span>|<span data-ttu-id="4b60a-149">Tutti i membri di tutti i tipi in qualsiasi assembly.</span><span class="sxs-lookup"><span data-stu-id="4b60a-149">All members of all types in any assembly.</span></span>|  
  
 <span data-ttu-id="4b60a-150">Un metodo dinamico è associato un modulo dispone delle autorizzazioni di tale modulo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-150">A dynamic method that is associated with a module has the permissions of that module.</span></span> <span data-ttu-id="4b60a-151">Un metodo dinamico è associato un tipo dispone delle autorizzazioni del modulo contenente il tipo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-151">A dynamic method that is associated with a type has the permissions of the module containing that type.</span></span>  
  
 <span data-ttu-id="4b60a-152">Metodi dinamici e i relativi parametri non deve essere denominato, ma è possibile specificare nomi per facilitare il debug.</span><span class="sxs-lookup"><span data-stu-id="4b60a-152">Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging.</span></span> <span data-ttu-id="4b60a-153">Attributi personalizzati non sono supportati i metodi dinamici o i relativi parametri.</span><span class="sxs-lookup"><span data-stu-id="4b60a-153">Custom attributes are not supported on dynamic methods or their parameters.</span></span>  
  
 <span data-ttu-id="4b60a-154">Sebbene i metodi dinamici sono `static` metodi (`Shared` metodi in Visual Basic), le regole relaxed per associazione di delegati introdotte nel [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] consentono un metodo dinamico associato a un oggetto, in modo che agisca come un metodo di istanza quando chiamato utilizzando l'istanza del delegato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-154">Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance.</span></span> <span data-ttu-id="4b60a-155">Un esempio che illustra questa operazione è disponibile per il <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-155">An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-156">Nel [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], i metodi dinamici non supportano informazioni sui simboli, ovvero, i nomi delle variabili locali e mapping del numero di riga.</span><span class="sxs-lookup"><span data-stu-id="4b60a-156">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping.</span></span> <span data-ttu-id="4b60a-157">Questa limitazione potrebbe venire rimosso in una versione futura.</span><span class="sxs-lookup"><span data-stu-id="4b60a-157">This limitation might be removed in a future version.</span></span> <span data-ttu-id="4b60a-158">È possibile utilizzare <xref:System.Reflection.Emit.AssemblyBuilder> durante lo sviluppo per semplificare il debug generato Microsoft intermedio language (MSIL) e quindi passare ai metodi dinamici durante la distribuzione finale, perché il <xref:System.Reflection.Emit.ILGenerator> chiamate sono gli stessi in entrambi i casi.</span><span class="sxs-lookup"><span data-stu-id="4b60a-158">You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.</span></span>  
  
## <a name="verification"></a><span data-ttu-id="4b60a-159">Verifica</span><span class="sxs-lookup"><span data-stu-id="4b60a-159">Verification</span></span>  
 <span data-ttu-id="4b60a-160">Nell'elenco seguente vengono riepilogate le condizioni in cui i metodi dinamici possono contenere codice non verificabile.</span><span class="sxs-lookup"><span data-stu-id="4b60a-160">The following list summarizes the conditions under which dynamic methods can contain unverifiable code.</span></span> <span data-ttu-id="4b60a-161">(Ad esempio, un metodo dinamico non è verificabile se relativo <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> è impostata su `false`.)</span><span class="sxs-lookup"><span data-stu-id="4b60a-161">(For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)</span></span>  
  
-   <span data-ttu-id="4b60a-162">Un metodo dinamico è associato a un assembly critico per la sicurezza è critico per la sicurezza e può ignorare la verifica.</span><span class="sxs-lookup"><span data-stu-id="4b60a-162">A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification.</span></span> <span data-ttu-id="4b60a-163">Ad esempio, un assembly senza gli attributi di sicurezza che viene eseguito come un'applicazione desktop viene trattato come SecurityCritical dal runtime.</span><span class="sxs-lookup"><span data-stu-id="4b60a-163">For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime.</span></span> <span data-ttu-id="4b60a-164">Se si associa un metodo dinamico con l'assembly, il metodo dinamico può contenere codice non verificabile.</span><span class="sxs-lookup"><span data-stu-id="4b60a-164">If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.</span></span>  
  
-   <span data-ttu-id="4b60a-165">Se un metodo dinamico che contiene codice non verificabile è associato a un assembly con la trasparenza di livello 1, il compilatore di just-in-time (JIT) inserisce una richiesta di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="4b60a-165">If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand.</span></span> <span data-ttu-id="4b60a-166">La richiesta ha esito positivo solo se il metodo dinamico viene eseguito da codice completamente attendibile.</span><span class="sxs-lookup"><span data-stu-id="4b60a-166">The demand succeeds only if the dynamic method is executed by fully trusted code.</span></span> <span data-ttu-id="4b60a-167">Vedere [codice SecurityTransparent, livello 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span><span class="sxs-lookup"><span data-stu-id="4b60a-167">See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span></span>  
  
-   <span data-ttu-id="4b60a-168">Se un metodo dinamico che contiene codice non verificabile è associato a un assembly con la trasparenza di livello 2 (ad esempio mscorlib. dll), genera un'eccezione (inserita dal compilatore JIT) anziché eseguire una richiesta di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="4b60a-168">If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand.</span></span> <span data-ttu-id="4b60a-169">Vedere [codice SecurityTransparent, livello 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="4b60a-169">See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
-   <span data-ttu-id="4b60a-170">Un metodo dinamico ospitato anonimamente che contiene sempre il codice non verificabile genera un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="4b60a-170">An anonymously hosted dynamic method that contains unverifiable code always throws an exception.</span></span> <span data-ttu-id="4b60a-171">Non è possibile ignorare la verifica, anche se viene creato ed eseguito da codice completamente attendibile.</span><span class="sxs-lookup"><span data-stu-id="4b60a-171">It can never skip verification, even if it is created and executed by fully trusted code.</span></span>  
  
 <span data-ttu-id="4b60a-172">Eccezione generata per il codice non verificabile varia a seconda della modalità in cui che viene richiamato il metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-172">The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked.</span></span> <span data-ttu-id="4b60a-173">Se si richiama un metodo dinamico tramite un delegato restituito dal <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> (metodo), un <xref:System.Security.VerificationException> viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="4b60a-173">If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown.</span></span> <span data-ttu-id="4b60a-174">Se si richiama il metodo dinamico usando il <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> (metodo), un <xref:System.Reflection.TargetInvocationException> viene generata un'eccezione con un inner <xref:System.Security.VerificationException>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-174">If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-175">Esempio di codice seguente crea un metodo dinamico che accetta due parametri.</span><span class="sxs-lookup"><span data-stu-id="4b60a-175">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="4b60a-176">Nell'esempio viene generato il corpo di una funzione semplice che stampa il primo parametro nella console e verrà utilizzato il secondo parametro come valore restituito del metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-176">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="4b60a-177">Nell'esempio viene completato il metodo tramite la creazione di un delegato, richiama il delegato con parametri diversi e infine viene chiamato il metodo dinamico usando il <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-177">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.All#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.All#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-178">Crea un metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-178">Creates a dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4b60a-179">Nome del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-179">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="4b60a-180">Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-180">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="4b60a-181">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-181">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="4b60a-182">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-182">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-183">Inizializza un metodo dinamico ospitato anonimamente, specificando il nome del metodo, il tipo restituito e i tipi di parametro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-183">Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-184">Il metodo dinamico che viene creato da questo costruttore è associato a un assembly anonimo anziché un tipo esistente o un modulo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-184">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="4b60a-185">L'assembly anonimo esiste solo per fornire un ambiente sandbox per i metodi dinamici, vale a dire, per isolarli da altro codice.</span><span class="sxs-lookup"><span data-stu-id="4b60a-185">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="4b60a-186">Questo ambiente rende sicuro per il metodo dinamico a essere generato ed eseguito da codice parzialmente attendibile.</span><span class="sxs-lookup"><span data-stu-id="4b60a-186">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="4b60a-187">Questo costruttore viene specificato che just-in-time (JIT) i controlli di visibilità saranno imposte per Microsoft intermedio language (MSIL) del metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-187">This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method.</span></span> <span data-ttu-id="4b60a-188">Ovvero, il codice del metodo dinamico ha accesso a metodi pubblici delle classi pubbliche.</span><span class="sxs-lookup"><span data-stu-id="4b60a-188">That is, the code in the dynamic method has access to public methods of public classes.</span></span> <span data-ttu-id="4b60a-189">Vengono generate eccezioni se il metodo tenta di accedere a tipi o membri che sono `private`, `protected`, o `internal` (`Friend` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4b60a-189">Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="4b60a-190">Per creare un metodo dinamico con possibilità di ignorare i controlli di visibilità JIT limitate, usare il <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> costruttore.</span><span class="sxs-lookup"><span data-stu-id="4b60a-190">To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.</span></span>  
  
 <span data-ttu-id="4b60a-191">Quando viene creato un metodo dinamico ospitato anonimamente, lo stack di chiamate di concessioni dell'assembly è incluso.</span><span class="sxs-lookup"><span data-stu-id="4b60a-191">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="4b60a-192">Quando viene richiamato il metodo, vengono utilizzate le autorizzazioni di concessioni dell'assembly anziché le autorizzazioni del chiamante effettivo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-192">When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="4b60a-193">Di conseguenza, il metodo dinamico non è possibile eseguire a un livello di privilegio superiore rispetto a quello dell'assembly che ha generato, anche se viene passato a ed eseguita da un assembly con un livello di attendibilità superiore.</span><span class="sxs-lookup"><span data-stu-id="4b60a-193">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="4b60a-194">Questo costruttore consente di specificare gli attributi del metodo <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> e <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>e la convenzione di chiamata <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-194">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-195">Questo costruttore è stato introdotto nel [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="4b60a-195">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b60a-196">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-196">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4b60a-197">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-197">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4b60a-198">
            <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-198">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, bool restrictedSkipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), restrictedSkipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, bool restrictedSkipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="restrictedSkipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4b60a-199">Nome del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-199">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="4b60a-200">Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-200">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="4b60a-201">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-201">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="4b60a-202">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-202">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="restrictedSkipVisibility">
          <span data-ttu-id="4b60a-203">
            <see langword="true" /> per ignorare i controlli di visibilità JIT sui tipi e i membri a cui accede il linguaggio MSIL del metodo dinamico, con questa restrizione: il livello di attendibilità degli assembly che contengono questi tipi e membri deve essere uguale o minore di quello dello stack di chiamata che genera il metodo dinamico; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-203">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-204">Inizializza un metodo dinamico ospitato anonimamente, specificando il nome del metodo, il tipo restituito, i tipi di parametro e se i controlli di visibilità JIT possono essere ignorati per i tipi e i membri cui accede il linguaggio MSIL (Microsoft Intermediate Language) del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-204">Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-205">Il metodo dinamico che viene creato da questo costruttore è associato a un assembly anonimo anziché un tipo esistente o un modulo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-205">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="4b60a-206">L'assembly anonimo esiste solo per fornire un ambiente sandbox per i metodi dinamici, vale a dire, per isolarli da altro codice.</span><span class="sxs-lookup"><span data-stu-id="4b60a-206">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="4b60a-207">Questo ambiente rende sicuro per il metodo dinamico a essere generato ed eseguito da codice parzialmente attendibile.</span><span class="sxs-lookup"><span data-stu-id="4b60a-207">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="4b60a-208">Metodi dinamici ospitati anonimamente non dispone dell'accesso automatico per i tipi o membri che sono `private`, `protected`, o `internal` (`Friend` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4b60a-208">Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="4b60a-209">Questa è diversa dai metodi dinamici associati a un tipo esistente o un modulo, che dispongono dell'accesso ai membri nascosti nel proprio ambito associato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-209">This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.</span></span>  
  
 <span data-ttu-id="4b60a-210">Specificare `true` per `restrictedSkipVisibility` se il metodo dinamico deve accedere a tipi o membri che sono `private`, `protected`, o `internal`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-210">Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`.</span></span> <span data-ttu-id="4b60a-211">In questo modo il metodo dinamico con restrizioni di accedere a questi membri.</span><span class="sxs-lookup"><span data-stu-id="4b60a-211">This gives the dynamic method restricted access to these members.</span></span> <span data-ttu-id="4b60a-212">Ovvero, i membri accessibili solo se vengono soddisfatte le condizioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="4b60a-212">That is, the members can be accessed only if the following conditions are met:</span></span>  
  
-   <span data-ttu-id="4b60a-213">I membri di destinazione appartengono a un assembly con un livello di attendibilità uguale o inferiore a stack di chiamate che genera il metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-213">The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.</span></span>  
  
-   <span data-ttu-id="4b60a-214">Lo stack di chiamate che genera il metodo dinamico è concesso <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span><span class="sxs-lookup"><span data-stu-id="4b60a-214">The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="4b60a-215">Questo è sempre vero quando viene eseguito il codice con attendibilità totale.</span><span class="sxs-lookup"><span data-stu-id="4b60a-215">This is always true when the code is executed with full trust.</span></span> <span data-ttu-id="4b60a-216">Per codice parzialmente attendibile, è true solo se l'host in modo esplicito concede l'autorizzazione.</span><span class="sxs-lookup"><span data-stu-id="4b60a-216">For partially trusted code, it is true only if the host explicitly grants the permission.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4b60a-217">Se non è stato concesso l'autorizzazione, viene generata un'eccezione di sicurezza quando <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> viene chiamato o quando viene richiamato il metodo dinamico, non quando viene chiamato questo costruttore.</span><span class="sxs-lookup"><span data-stu-id="4b60a-217">If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called.</span></span> <span data-ttu-id="4b60a-218">Non speciali sono necessarie autorizzazioni per generare il metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-218">No special permissions are required to emit the dynamic method.</span></span>  
  
 <span data-ttu-id="4b60a-219">Ad esempio, un metodo dinamico creato con `restrictedSkipVisibility` impostato su `true` può accedere a un membro privato di qualsiasi assembly nello stack di chiamate se lo stack di chiamate è stato concesso l'accesso al membro.</span><span class="sxs-lookup"><span data-stu-id="4b60a-219">For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access.</span></span> <span data-ttu-id="4b60a-220">Se il metodo dinamico è stato creato con codice parzialmente attendibile nello stack di chiamate, non può accedere a un membro privato di un tipo in un [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, poiché tali assembly sono completamente attendibili.</span><span class="sxs-lookup"><span data-stu-id="4b60a-220">If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.</span></span>  
  
 <span data-ttu-id="4b60a-221">Se `restrictedSkipVisibility` è `false`, vengono applicati i controlli di visibilità JIT.</span><span class="sxs-lookup"><span data-stu-id="4b60a-221">If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced.</span></span> <span data-ttu-id="4b60a-222">Il codice del metodo dinamico ha accesso a metodi pubblici delle classi pubbliche e le eccezioni vengono generate se tenta di accedere a tipi o membri che sono `private`, `protected`, o `internal`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-222">The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.</span></span>  
  
 <span data-ttu-id="4b60a-223">Quando viene creato un metodo dinamico ospitato anonimamente, lo stack di chiamate di concessioni dell'assembly è incluso.</span><span class="sxs-lookup"><span data-stu-id="4b60a-223">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="4b60a-224">Quando viene richiamato il metodo, vengono utilizzate le autorizzazioni dello stack di chiamate che genera anziché le autorizzazioni del chiamante effettivo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-224">When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="4b60a-225">Di conseguenza, il metodo dinamico non è possibile eseguire a un livello di privilegio superiore rispetto a quello dell'assembly che ha generato, anche se viene passato a ed eseguita da un assembly con un livello di attendibilità superiore.</span><span class="sxs-lookup"><span data-stu-id="4b60a-225">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="4b60a-226">Questo costruttore consente di specificare gli attributi del metodo <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> e <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>e la convenzione di chiamata <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-226">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-227">Questo costruttore è stato introdotto nel [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="4b60a-227">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b60a-228">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-228">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4b60a-229">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-229">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4b60a-230">
            <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-230">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4b60a-231">Nome del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-231">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="4b60a-232">Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-232">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="4b60a-233">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-233">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="4b60a-234">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-234">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">
          <span data-ttu-id="4b60a-235">Oggetto <see cref="T:System.Reflection.Module" /> che rappresenta il modulo a cui il metodo dinamico deve essere associato in modo logico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-235">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-236">Crea un metodo dinamico che è globale per un modulo, specificando il nome del metodo, il tipo restituito, i tipi di parametro e il modulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-236">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-237">Questo costruttore consente di specificare gli attributi del metodo <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> e <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, la convenzione di chiamata <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>e non ignora i controlli di visibilità just-in-time (JIT).</span><span class="sxs-lookup"><span data-stu-id="4b60a-237">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
 <span data-ttu-id="4b60a-238">Il metodo dinamico creato con questo costruttore ha accesso al ruolo public e `internal` (`Friend` in Visual Basic) membri di tutti i tipi di contenuto nel modulo `m`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-238">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module `m`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-239">Per garantire la compatibilità con le versioni precedenti, questo costruttore richiede <xref:System.Security.Permissions.SecurityPermission> con il <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag se le condizioni seguenti sono entrambi true: `m` è un modulo diverso dal modulo chiamante e la richiesta di <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag non è riuscita.</span><span class="sxs-lookup"><span data-stu-id="4b60a-239">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="4b60a-240">Se la richiesta di <xref:System.Security.Permissions.SecurityPermission> ha esito positivo, l'operazione è consentita.</span><span class="sxs-lookup"><span data-stu-id="4b60a-240">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-241">A partire dal [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo membro non è più necessario <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span><span class="sxs-lookup"><span data-stu-id="4b60a-241">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="4b60a-242">(Vedere [problemi di sicurezza nella Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="4b60a-242">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-243">Esempio di codice seguente crea un metodo dinamico che accetta due parametri.</span><span class="sxs-lookup"><span data-stu-id="4b60a-243">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="4b60a-244">Nell'esempio viene generato il corpo di una funzione semplice che stampa il primo parametro nella console e verrà utilizzato il secondo parametro come valore restituito del metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-244">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="4b60a-245">Nell'esempio viene completato il metodo tramite la creazione di un delegato, richiama il delegato con parametri diversi e infine viene chiamato il metodo dinamico usando il <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-245">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b60a-246">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-246">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="4b60a-247">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-247">-or-</span>
          </span>
          <span data-ttu-id="4b60a-248">
            <paramref name="m" /> è un modulo che fornisce hosting anonimo per i metodi dinamici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-248">
              <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4b60a-249">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-249">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4b60a-250">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-250">-or-</span>
          </span>
          <span data-ttu-id="4b60a-251">
            <paramref name="m" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-251">
              <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4b60a-252">
            <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-252">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="4b60a-253">Per associare il metodo dinamico a un modulo diverso dal modulo chiamante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-253">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="4b60a-254">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-254">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4b60a-255">Nome del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-255">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="4b60a-256">Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-256">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="4b60a-257">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-257">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="4b60a-258">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-258">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="4b60a-259">Oggetto <see cref="T:System.Type" /> a cui il metodo dinamico è associato in modo logico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-259">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="4b60a-260">Il metodo dinamico ha accesso a tutti i membri del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-260">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-261">Crea un metodo dinamico, specificando il nome del metodo, il tipo restituito, i parametri di tipo e il tipo a cui il metodo dinamico è associato dal punto di vista logico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-261">Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-262">Il metodo dinamico creato con questo costruttore ha accesso a tutti i membri del tipo `owner`e al ruolo public e `internal` (`Friend` in Visual Basic) di tutti gli altri tipi nel modulo che contiene i membri `owner`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-262">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span>  
  
 <span data-ttu-id="4b60a-263">Questo costruttore consente di specificare gli attributi del metodo <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> e <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, la convenzione di chiamata <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>e non ignora i controlli di visibilità just-in-time (JIT).</span><span class="sxs-lookup"><span data-stu-id="4b60a-263">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-264">Per garantire la compatibilità con le versioni precedenti, questo costruttore richiede <xref:System.Security.Permissions.SecurityPermission> con il <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag se le condizioni seguenti sono entrambi true: `owner` in un modulo diverso dal modulo chiamante e la richiesta di <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag non è riuscita.</span><span class="sxs-lookup"><span data-stu-id="4b60a-264">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="4b60a-265">Se la richiesta di <xref:System.Security.Permissions.SecurityPermission> ha esito positivo, l'operazione è consentita.</span><span class="sxs-lookup"><span data-stu-id="4b60a-265">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-266">A partire dal [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo membro non è più necessario <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span><span class="sxs-lookup"><span data-stu-id="4b60a-266">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="4b60a-267">(Vedere [problemi di sicurezza nella Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="4b60a-267">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-268">L'esempio di codice seguente crea un <xref:System.Reflection.Emit.DynamicMethod> logicamente associato a un tipo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-268">The following code example creates a <xref:System.Reflection.Emit.DynamicMethod> that is logically associated with a type.</span></span> <span data-ttu-id="4b60a-269">Questa associazione fornisce accesso ai membri privati di quel tipo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-269">This association gives it access to the private members of that type.</span></span>  
  
 <span data-ttu-id="4b60a-270">L'esempio di codice definisce una classe denominata `Example` con un campo privato, una classe denominata `DerivedFromxample` che deriva dalla prima classe, un tipo delegato denominato `UseLikeStatic` che restituisce <xref:System.Int32> e dispone di parametri di tipo `Example` e <xref:System.Int32>e un tipo delegato denominato `UseLikeInstance` che restituisce <xref:System.Int32> e ha un parametro di tipo <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-270">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="4b60a-271">Nell'esempio di codice crea quindi un <xref:System.Reflection.Emit.DynamicMethod> che modifica il campo privato di un'istanza di `Example` e restituisce il valore precedente.</span><span class="sxs-lookup"><span data-stu-id="4b60a-271">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-272">In generale, la modifica dei campi interni delle classi non è valida orientata agli oggetti scrittura di codice.</span><span class="sxs-lookup"><span data-stu-id="4b60a-272">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="4b60a-273">Nell'esempio di codice crea un'istanza di `Example` e crea quindi due delegati.</span><span class="sxs-lookup"><span data-stu-id="4b60a-273">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="4b60a-274">Il primo è di tipo `UseLikeStatic`, che ha gli stessi parametri del metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-274">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="4b60a-275">Il secondo è di tipo `UseLikeInstance`, che non è presente il primo parametro (di tipo `Example`).</span><span class="sxs-lookup"><span data-stu-id="4b60a-275">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="4b60a-276">Questo delegato viene creato utilizzando il <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload del metodo; il secondo parametro di questo overload è un'istanza di `Example`in questo caso, l'istanza appena creata, che è associato al delegato appena creato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-276">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="4b60a-277">Ogni volta che il delegato viene chiamato, il metodo dinamico agisce sull'istanza associata di `Example`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-277">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-278">Questo è un esempio di regole relaxed per associazione di delegati introdotte nel [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], insieme ai nuovi overload di <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-278">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="4b60a-279">Per altre informazioni, vedere la classe <xref:System.Delegate>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-279">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="4b60a-280">Il `UseLikeStatic` delegato viene richiamato, passando l'istanza di `Example` associato per il `UseLikeInstance` delegato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-280">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="4b60a-281">Il `UseLikeInstance` delegato viene richiamato in modo che entrambi i delegati possano agiscono sulla stessa istanza di `Example`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-281">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="4b60a-282">Le modifiche nei valori del campo interno vengono visualizzate dopo ogni chiamata.</span><span class="sxs-lookup"><span data-stu-id="4b60a-282">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="4b60a-283">Infine, un `UseLikeInstance` delegato è associato a un'istanza di `DerivedFromxample`, e vengono ripetute le chiamate al delegato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-283">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b60a-284">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-284">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="4b60a-285">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-285">-or-</span>
          </span>
          <span data-ttu-id="4b60a-286">
            <paramref name="owner" /> è un'interfaccia, una matrice, un tipo generico aperto o un parametro di tipo di un tipo o un metodo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-286">
              <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4b60a-287">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-287">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4b60a-288">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-288">-or-</span>
          </span>
          <span data-ttu-id="4b60a-289">
            <paramref name="owner" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-289">
              <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4b60a-290">
            <paramref name="returnType" /> è <see langword="null" /> o è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-290">
              <paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="4b60a-291">Per associare il metodo dinamico a un tipo in un modulo diverso dal modulo chiamante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-291">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="4b60a-292">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-292">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4b60a-293">Nome del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-293">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="4b60a-294">Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-294">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="4b60a-295">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-295">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="4b60a-296">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-296">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">
          <span data-ttu-id="4b60a-297">Oggetto <see cref="T:System.Reflection.Module" /> che rappresenta il modulo a cui il metodo dinamico deve essere associato in modo logico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-297">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="4b60a-298">
            <see langword="true" /> per ignorare i controlli di visibilità JIT su tipi e membri a cui accede il linguaggio MSIL del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-298">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-299">Crea un metodo dinamico globale per un modulo, specificando il nome del metodo, il tipo restituito, i tipi di parametri e il modulo e indicando se deve essere ignorato il controllo di visibilità JIT per i tipi e i membri del metodo dinamico a cui accede MSIL (Microsoft Intermediate Language).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-299">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-300">Questo costruttore consente di specificare gli attributi del metodo <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> e <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>e la convenzione di chiamata <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-300">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4b60a-301">Il metodo dinamico creato con questo costruttore ha accesso al ruolo public e `internal` (`Friend` in Visual Basic) membri di tutti i tipi contenuti nel modulo `m`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-301">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`.</span></span> <span data-ttu-id="4b60a-302">JIT di ignorare i controlli di visibilità del compilatore consente il metodo dinamico accedere ai membri privati e protetti di tutti gli altri tipi.</span><span class="sxs-lookup"><span data-stu-id="4b60a-302">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="4b60a-303">Questo è utile, ad esempio, quando si scrive codice per la serializzazione di oggetti.</span><span class="sxs-lookup"><span data-stu-id="4b60a-303">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-304">Per garantire la compatibilità con le versioni precedenti, questo costruttore richiede <xref:System.Security.Permissions.SecurityPermission> con il <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag se le condizioni seguenti sono entrambi true: `m` è un modulo diverso dal modulo chiamante e la richiesta di <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag non è riuscita.</span><span class="sxs-lookup"><span data-stu-id="4b60a-304">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="4b60a-305">Se la richiesta di <xref:System.Security.Permissions.SecurityPermission> ha esito positivo, l'operazione è consentita.</span><span class="sxs-lookup"><span data-stu-id="4b60a-305">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-306">A partire dal [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo membro non è più necessario <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span><span class="sxs-lookup"><span data-stu-id="4b60a-306">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="4b60a-307">(Vedere [problemi di sicurezza nella Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="4b60a-307">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b60a-308">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-308">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="4b60a-309">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-309">-or-</span>
          </span>
          <span data-ttu-id="4b60a-310">
            <paramref name="m" /> è un modulo che fornisce hosting anonimo per i metodi dinamici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-310">
              <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4b60a-311">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-311">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4b60a-312">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-312">-or-</span>
          </span>
          <span data-ttu-id="4b60a-313">
            <paramref name="m" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-313">
              <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4b60a-314">
            <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-314">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="4b60a-315">Per associare il metodo dinamico a un modulo diverso dal modulo chiamante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-315">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="4b60a-316">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-316">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4b60a-317">Nome del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-317">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="4b60a-318">Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-318">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="4b60a-319">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-319">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="4b60a-320">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-320">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="4b60a-321">Oggetto <see cref="T:System.Type" /> a cui il metodo dinamico è associato in modo logico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-321">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="4b60a-322">Il metodo dinamico ha accesso a tutti i membri del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-322">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="4b60a-323">
            <see langword="true" /> per ignorare i controlli di visibilità JIT sui tipi e i membri cui accede il linguaggio MSIL del metodo dinamico; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-323">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-324">Crea un metodo dinamico, specificando il nome del metodo, il tipo restituito, i tipi di parametro, il tipo a cui il metodo dinamico è associato in modo logico e se i controlli di visibilità JIT possono essere ignorati per i tipi e i membri cui accede il linguaggio MSIL (Microsoft Intermediate Language) del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-324">Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-325">Il metodo dinamico creato con questo costruttore ha accesso a tutti i membri del tipo `owner`e al ruolo public e `internal` (`Friend` in Visual Basic) di tutti gli altri tipi nel modulo che contiene i membri `owner`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-325">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span> <span data-ttu-id="4b60a-326">JIT di ignorare i controlli di visibilità del compilatore consente il metodo dinamico accedere ai membri privati e protetti di tutti gli altri tipi.</span><span class="sxs-lookup"><span data-stu-id="4b60a-326">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="4b60a-327">Questo è utile, ad esempio, quando si scrive codice per la serializzazione di oggetti.</span><span class="sxs-lookup"><span data-stu-id="4b60a-327">This is useful, for example, when writing code to serialize objects.</span></span>  
  
 <span data-ttu-id="4b60a-328">Questo costruttore consente di specificare gli attributi del metodo <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> e <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>e la convenzione di chiamata <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-328">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-329">Per garantire la compatibilità con le versioni precedenti, questo costruttore richiede <xref:System.Security.Permissions.SecurityPermission> con il <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag se le condizioni seguenti sono entrambi true: `owner` in un modulo diverso dal modulo chiamante e la richiesta di <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag non è riuscita.</span><span class="sxs-lookup"><span data-stu-id="4b60a-329">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="4b60a-330">Se la richiesta di <xref:System.Security.Permissions.SecurityPermission> ha esito positivo, l'operazione è consentita.</span><span class="sxs-lookup"><span data-stu-id="4b60a-330">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-331">A partire dal [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo membro non è più necessario <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span><span class="sxs-lookup"><span data-stu-id="4b60a-331">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="4b60a-332">(Vedere [problemi di sicurezza nella Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="4b60a-332">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b60a-333">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-333">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="4b60a-334">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-334">-or-</span>
          </span>
          <span data-ttu-id="4b60a-335">
            <paramref name="owner" /> è un'interfaccia, una matrice, un tipo generico aperto o un parametro di tipo di un tipo o un metodo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-335">
              <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4b60a-336">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-336">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4b60a-337">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-337">-or-</span>
          </span>
          <span data-ttu-id="4b60a-338">
            <paramref name="owner" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-338">
              <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4b60a-339">
            <paramref name="returnType" /> è <see langword="null" /> o è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-339">
              <paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="4b60a-340">Per associare il metodo dinamico a un tipo in un modulo diverso dal modulo chiamante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-340">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="4b60a-341">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-341">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4b60a-342">Nome del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-342">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="4b60a-343">Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-343">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="4b60a-344">Combinazione bit per bit di valori di <see cref="T:System.Reflection.MethodAttributes" /> che specifica gli attributi del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-344">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span>
          </span>
          <span data-ttu-id="4b60a-345">L'unica combinazione consentita è <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-345">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="4b60a-346">Convenzione di chiamata per il metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-346">The calling convention for the dynamic method.</span>
          </span>
          <span data-ttu-id="4b60a-347">Deve essere <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-347">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="4b60a-348">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-348">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="4b60a-349">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-349">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">To be added.</param>
        <param name="skipVisibility">
          <span data-ttu-id="4b60a-350">
            <see langword="true" /> per ignorare i controlli di visibilità JIT sui tipi e i membri cui accede il linguaggio MSIL del metodo dinamico; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-350">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-351">Crea un metodo dinamico globale per un metodo, specificando il nome del metodo, gli attributi, la convenzione di chiamata, il tipo restituito, i tipi di parametro, il modulo e se i controlli di visibilità JIT possono essere ignorati per i tipi e i membri cui accede il linguaggio MSIL (Microsoft Intermediate Language) del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-351">Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-352">Il metodo dinamico creato con questo costruttore ha accesso al ruolo public e `internal` (`Friend` in Visual Basic) membri di tutti i tipi pubblici e interni contenuti nel modulo `m`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-352">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module `m`.</span></span>  
  
 <span data-ttu-id="4b60a-353">JIT di ignorare i controlli di visibilità del compilatore consente il metodo dinamico accedere ai membri privati e protetti di tutti gli altri tipi nel modulo e in tutti gli altri assembly.</span><span class="sxs-lookup"><span data-stu-id="4b60a-353">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well.</span></span> <span data-ttu-id="4b60a-354">Questo è utile, ad esempio, quando si scrive codice per la serializzazione di oggetti.</span><span class="sxs-lookup"><span data-stu-id="4b60a-354">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-355">Per garantire la compatibilità con le versioni precedenti, questo costruttore richiede <xref:System.Security.Permissions.SecurityPermission> con il <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag se le condizioni seguenti sono entrambi true: `m` è un modulo diverso dal modulo chiamante e la richiesta di <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag non è riuscita.</span><span class="sxs-lookup"><span data-stu-id="4b60a-355">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="4b60a-356">Se la richiesta di <xref:System.Security.Permissions.SecurityPermission> ha esito positivo, l'operazione è consentita.</span><span class="sxs-lookup"><span data-stu-id="4b60a-356">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-357">A partire dal [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo membro non è più necessario <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span><span class="sxs-lookup"><span data-stu-id="4b60a-357">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="4b60a-358">(Vedere [problemi di sicurezza nella Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="4b60a-358">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b60a-359">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-359">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="4b60a-360">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-360">-or-</span>
          </span>
          <span data-ttu-id="4b60a-361">
            <paramref name="m" /> è un modulo che fornisce hosting anonimo per i metodi dinamici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-361">
              <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4b60a-362">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-362">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4b60a-363">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-363">-or-</span>
          </span>
          <span data-ttu-id="4b60a-364">
            <paramref name="m" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-364">
              <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4b60a-365">
            <paramref name="attributes" /> è una combinazione di flag diversa da <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-365">
              <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
          <span data-ttu-id="4b60a-366">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-366">-or-</span>
          </span>
          <span data-ttu-id="4b60a-367">
            <paramref name="callingConvention" /> non è <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-367">
              <paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
          <span data-ttu-id="4b60a-368">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-368">-or-</span>
          </span>
          <span data-ttu-id="4b60a-369">
            <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-369">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="4b60a-370">Per associare il metodo dinamico a un modulo diverso dal modulo chiamante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-370">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="4b60a-371">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-371">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4b60a-372">Nome del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-372">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="4b60a-373">Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-373">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="4b60a-374">Combinazione bit per bit di valori di <see cref="T:System.Reflection.MethodAttributes" /> che specifica gli attributi del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-374">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span>
          </span>
          <span data-ttu-id="4b60a-375">L'unica combinazione consentita è <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-375">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="4b60a-376">Convenzione di chiamata per il metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-376">The calling convention for the dynamic method.</span>
          </span>
          <span data-ttu-id="4b60a-377">Deve essere <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-377">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="4b60a-378">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-378">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="4b60a-379">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-379">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="4b60a-380">Oggetto <see cref="T:System.Type" /> a cui il metodo dinamico è associato in modo logico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-380">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="4b60a-381">Il metodo dinamico ha accesso a tutti i membri del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-381">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="4b60a-382">
            <see langword="true" /> per ignorare i controlli di visibilità JIT sui tipi e i membri cui accede il linguaggio MSIL del metodo dinamico; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-382">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-383">Crea un metodo dinamico, specificando il nome del metodo, gli attributi, la convenzione di chiamata, il tipo restituito, i tipi di parametro, il tipo a cui il metodo dinamico è associato in modo logico e se i controlli di visibilità JIT possono essere ignorati per i tipi e i membri cui accede il linguaggio MSIL (Microsoft Intermediate Language) del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-383">Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-384">Il metodo dinamico è globale per il modulo che contiene il tipo `owner`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-384">The dynamic method is global to the module that contains the type `owner`.</span></span> <span data-ttu-id="4b60a-385">Dispone dell'accesso a tutti i membri del tipo `owner`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-385">It has access to all members of the type `owner`.</span></span>  
  
 <span data-ttu-id="4b60a-386">Il metodo dinamico creato con questo costruttore ha accesso a tutti i membri del tipo `owner`e al ruolo public e `internal` (`Friend` in Visual Basic) di tutti i tipi contenuti nel modulo che contiene i membri `owner`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-386">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`.</span></span> <span data-ttu-id="4b60a-387">JIT di ignorare i controlli di visibilità del compilatore consente il metodo dinamico accedere ai membri privati e protetti di tutti gli altri tipi.</span><span class="sxs-lookup"><span data-stu-id="4b60a-387">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="4b60a-388">Questo è utile, ad esempio, quando si scrive codice per la serializzazione di oggetti.</span><span class="sxs-lookup"><span data-stu-id="4b60a-388">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-389">Per garantire la compatibilità con le versioni precedenti, questo costruttore richiede <xref:System.Security.Permissions.SecurityPermission> con il <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag se le condizioni seguenti sono entrambi true: `owner` in un modulo diverso dal modulo chiamante e la richiesta di <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag non è riuscita.</span><span class="sxs-lookup"><span data-stu-id="4b60a-389">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="4b60a-390">Se la richiesta di <xref:System.Security.Permissions.SecurityPermission> ha esito positivo, l'operazione è consentita.</span><span class="sxs-lookup"><span data-stu-id="4b60a-390">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-391">A partire dal [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo membro non è più necessario <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span><span class="sxs-lookup"><span data-stu-id="4b60a-391">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="4b60a-392">(Vedere [problemi di sicurezza nella Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="4b60a-392">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b60a-393">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-393">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="4b60a-394">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-394">-or-</span>
          </span>
          <span data-ttu-id="4b60a-395">
            <paramref name="owner" /> è un'interfaccia, una matrice, un tipo generico aperto o un parametro di tipo di un tipo o un metodo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-395">
              <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4b60a-396">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-396">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4b60a-397">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-397">-or-</span>
          </span>
          <span data-ttu-id="4b60a-398">
            <paramref name="owner" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-398">
              <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4b60a-399">
            <paramref name="attributes" /> è una combinazione di flag diversa da <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-399">
              <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
          <span data-ttu-id="4b60a-400">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-400">-or-</span>
          </span>
          <span data-ttu-id="4b60a-401">
            <paramref name="callingConvention" /> non è <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-401">
              <paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
          <span data-ttu-id="4b60a-402">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-402">-or-</span>
          </span>
          <span data-ttu-id="4b60a-403">
            <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-403">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="4b60a-404">Per associare il metodo dinamico a un tipo in un modulo diverso dal modulo chiamante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-404">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="4b60a-405">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-405">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-406">Ottiene gli attributi specificati quando il metodo dinamico è stato creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-406">Gets the attributes specified when the dynamic method was created.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b60a-407">Combinazione bit per bit dei valori <see cref="T:System.Reflection.MethodAttributes" /> che rappresentano gli attributi relativi al metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-407">A bitwise combination of the <see cref="T:System.Reflection.MethodAttributes" /> values representing the attributes for the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-408">Attualmente, gli attributi per un metodo dinamico sono sempre <xref:System.Reflection.MethodAttributes.Public> e <xref:System.Reflection.MethodAttributes.Static>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-408">Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-409">Esempio di codice seguente consente di visualizzare gli attributi di un metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-409">The following code example displays the method attributes of a dynamic method.</span></span> <span data-ttu-id="4b60a-410">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="4b60a-410">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#21](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#21)]
 [!code-csharp[Reflection.DynamicMethod.All#21](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#21)]
 [!code-vb[Reflection.DynamicMethod.All#21](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public override System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-411">Ottiene la convenzione di chiamata specificata durante la creazione del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-411">Gets the calling convention specified when the dynamic method was created.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b60a-412">Uno dei valori di <see cref="T:System.Reflection.CallingConventions" /> che indica la convenzione di chiamata del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-412">One of the <see cref="T:System.Reflection.CallingConventions" /> values that indicates the calling convention of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-413">Attualmente, la convenzione di chiamata per un metodo dinamico è sempre <xref:System.Reflection.CallingConventions.Standard>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-413">Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-414">Esempio di codice seguente consente di visualizzare la convenzione di chiamata di un metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-414">The following code example displays the calling convention of a dynamic method.</span></span> <span data-ttu-id="4b60a-415">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="4b60a-415">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#22](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#22)]
 [!code-csharp[Reflection.DynamicMethod.All#22](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#22)]
 [!code-vb[Reflection.DynamicMethod.All#22](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-416">Completa il metodo dinamico e crea un delegato che può essere usato per eseguirlo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-416">Completes the dynamic method and creates a delegate that can be used to execute it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="4b60a-417">Tipo delegato la cui firma corrisponde a quella del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-417">A delegate type whose signature matches that of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-418">Completa il metodo dinamico e crea un delegato che può essere usato per eseguirlo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-418">Completes the dynamic method and creates a delegate that can be used to execute it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b60a-419">Delegato del tipo specificato, che può essere usato per eseguire il metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-419">A delegate of the specified type, which can be used to execute the dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-420">La chiamata di <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metodo o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metodo completa il metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-420">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="4b60a-421">Qualsiasi ulteriore tenta di modificare il metodo dinamico, ad esempio modifica di definizioni di parametro o la creazione di ulteriori Microsoft intermediate language (MSIL), viene ignorato. viene generata alcuna eccezione.</span><span class="sxs-lookup"><span data-stu-id="4b60a-421">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="4b60a-422">Per creare il corpo di un metodo per un metodo dinamico quando si dispone di un generatore MSIL, chiamare il <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> per ottenere un <xref:System.Reflection.Emit.DynamicILInfo> oggetto.</span><span class="sxs-lookup"><span data-stu-id="4b60a-422">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="4b60a-423">Se non si dispone di un generatore MSIL, chiamare il <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> per ottenere un <xref:System.Reflection.Emit.ILGenerator> oggetto che può essere usato per generare il corpo del metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-423">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-424">Esempio di codice seguente crea un metodo dinamico che accetta due parametri.</span><span class="sxs-lookup"><span data-stu-id="4b60a-424">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="4b60a-425">Nell'esempio viene generato il corpo di una funzione semplice che stampa il primo parametro nella console e verrà utilizzato il secondo parametro come valore restituito del metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-425">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="4b60a-426">Nell'esempio viene completato il metodo tramite la creazione di un delegato, richiama il delegato con parametri diversi e infine viene chiamato il metodo dinamico usando il <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-426">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4b60a-427">Il metodo dinamico non contiene alcun corpo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-427">The dynamic method has no method body.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b60a-428">
            <paramref name="delegateType" /> contiene un numero errato di parametri o tipi di parametro non validi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-428">
              <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType, object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type, target As Object) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType, System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="4b60a-429">Tipo delegato la cui firma corrisponde a quella del metodo dinamico, meno il primo parametro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-429">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="4b60a-430">Oggetto a cui il delegato è associato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-430">An object the delegate is bound to.</span>
          </span>
          <span data-ttu-id="4b60a-431">Deve essere dello stesso tipo del primo parametro del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-431">Must be of the same type as the first parameter of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-432">Completa il metodo dinamico e crea un delegato che può essere usato per eseguirlo, specificando il tipo di delegato e l'oggetto a cui il delegato è associato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-432">Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b60a-433">Delegato del tipo specificato, che si può usare per eseguire il metodo dinamico con l'oggetto di destinazione specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-433">A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-434">Overload di questo metodo crea un delegato associato a un oggetto specifico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-434">This method overload creates a delegate bound to a particular object.</span></span> <span data-ttu-id="4b60a-435">Questo tipo un delegato per essere chiuso al primo argomento.</span><span class="sxs-lookup"><span data-stu-id="4b60a-435">Such a delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="4b60a-436">Anche se il metodo è statico, agisce come se fosse un metodo di istanza. l'istanza è `target`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-436">Although the method is static, it acts as if it were an instance method; the instance is `target`.</span></span>  
  
 <span data-ttu-id="4b60a-437">Overload di questo metodo richiede `target` per essere dello stesso tipo del primo parametro del metodo dinamico oppure per essere assegnabile al tipo (ad esempio, una classe derivata).</span><span class="sxs-lookup"><span data-stu-id="4b60a-437">This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).</span></span>  <span data-ttu-id="4b60a-438">La firma di `delegateType` dispone di tutti i parametri del metodo dinamico, ad eccezione del primo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-438">The signature of `delegateType` has all the parameters of the dynamic method except the first.</span></span> <span data-ttu-id="4b60a-439">Ad esempio, se il metodo dinamico ha i parametri <xref:System.String>, <xref:System.Int32>, e <xref:System.Byte>, quindi `delegateType` contenente i parametri <xref:System.Int32> e <xref:System.Byte>; `target` è di tipo <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-439">For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>.</span></span>  
  
 <span data-ttu-id="4b60a-440">La chiamata di <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metodo o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metodo completa il metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-440">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="4b60a-441">Qualsiasi ulteriore tenta di modificare il metodo dinamico, ad esempio modifica di definizioni di parametro o la creazione di ulteriori Microsoft intermediate language (MSIL), viene ignorato. viene generata alcuna eccezione.</span><span class="sxs-lookup"><span data-stu-id="4b60a-441">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="4b60a-442">Per creare il corpo di un metodo per un metodo dinamico quando si dispone di un generatore MSIL, chiamare il <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> per ottenere un <xref:System.Reflection.Emit.DynamicILInfo> oggetto.</span><span class="sxs-lookup"><span data-stu-id="4b60a-442">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="4b60a-443">Se non si dispone di un generatore MSIL, chiamare il <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> per ottenere un <xref:System.Reflection.Emit.ILGenerator> oggetto che può essere usato per generare il corpo del metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-443">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-444">Esempio di codice seguente crea delegato che associa un <xref:System.Reflection.Emit.DynamicMethod> a un'istanza di un tipo, in modo che il metodo di agire sulla stessa istanza ogni volta che viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-444">The following code example creates delegate that binds a <xref:System.Reflection.Emit.DynamicMethod> to an instance of a type, so that the method acts on the same instance each time it is invoked.</span></span>  
  
 <span data-ttu-id="4b60a-445">L'esempio di codice definisce una classe denominata `Example` con un campo privato, una classe denominata `DerivedFromxample` che deriva dalla prima classe, un tipo delegato denominato `UseLikeStatic` che restituisce <xref:System.Int32> e dispone di parametri di tipo `Example` e <xref:System.Int32>e un tipo delegato denominato `UseLikeInstance` che restituisce <xref:System.Int32> e ha un parametro di tipo <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-445">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="4b60a-446">Nell'esempio di codice crea quindi un <xref:System.Reflection.Emit.DynamicMethod> che modifica il campo privato di un'istanza di `Example` e restituisce il valore precedente.</span><span class="sxs-lookup"><span data-stu-id="4b60a-446">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-447">In generale, la modifica dei campi interni delle classi non è valida orientata agli oggetti scrittura di codice.</span><span class="sxs-lookup"><span data-stu-id="4b60a-447">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="4b60a-448">Nell'esempio di codice crea un'istanza di `Example` e crea quindi due delegati.</span><span class="sxs-lookup"><span data-stu-id="4b60a-448">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="4b60a-449">Il primo è di tipo `UseLikeStatic`, che ha gli stessi parametri del metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-449">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="4b60a-450">Il secondo è di tipo `UseLikeInstance`, che non è presente il primo parametro (di tipo `Example`).</span><span class="sxs-lookup"><span data-stu-id="4b60a-450">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="4b60a-451">Questo delegato viene creato utilizzando il <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload del metodo; il secondo parametro di questo overload è un'istanza di `Example`in questo caso, l'istanza appena creata, che è associato al delegato appena creato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-451">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="4b60a-452">Ogni volta che il delegato viene chiamato, il metodo dinamico agisce sull'istanza associata di `Example`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-452">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-453">Questo è un esempio di regole relaxed per associazione di delegati introdotte nel [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], insieme ai nuovi overload di <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-453">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="4b60a-454">Per altre informazioni, vedere la classe <xref:System.Delegate>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-454">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="4b60a-455">Il `UseLikeStatic` delegato viene richiamato, passando l'istanza di `Example` associato per il `UseLikeInstance` delegato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-455">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="4b60a-456">Il `UseLikeInstance` delegato viene richiamato in modo che entrambi i delegati possano agiscono sulla stessa istanza di `Example`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-456">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="4b60a-457">Le modifiche nei valori del campo interno vengono visualizzate dopo ogni chiamata.</span><span class="sxs-lookup"><span data-stu-id="4b60a-457">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="4b60a-458">Infine, un `UseLikeInstance` delegato è associato a un'istanza di `DerivedFromxample`, e vengono ripetute le chiamate al delegato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-458">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4b60a-459">Il metodo dinamico non contiene alcun corpo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-459">The dynamic method has no method body.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b60a-460">
            <paramref name="target" /> non è dello stesso tipo del primo parametro del metodo dinamico e non è assegnabile al tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-460">
              <paramref name="target" /> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.</span>
          </span>
          <span data-ttu-id="4b60a-461">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-461">-or-</span>
          </span>
          <span data-ttu-id="4b60a-462">
            <paramref name="delegateType" /> contiene un numero errato di parametri o tipi di parametro non validi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-462">
              <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-463">Ottiene il tipo che dichiara il metodo, che è sempre <see langword="null" /> per i metodi dinamici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-463">Gets the type that declares the method, which is always <see langword="null" /> for dynamic methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b60a-464">Sempre <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-464">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-465">Questa proprietà restituisce sempre `null` per i metodi dinamici.</span><span class="sxs-lookup"><span data-stu-id="4b60a-465">This property always returns `null` for dynamic methods.</span></span> <span data-ttu-id="4b60a-466">Anche quando un metodo dinamico è associato in modo logico con un tipo, non è dichiarato dal tipo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-466">Even when a dynamic method is logically associated with a type, it is not declared by the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-467">Esempio di codice seguente consente di visualizzare il tipo dichiarante di un metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-467">The following code example displays the declaring type of a dynamic method.</span></span> <span data-ttu-id="4b60a-468">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="4b60a-468">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#23](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#23)]
 [!code-csharp[Reflection.DynamicMethod.All#23](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#23)]
 [!code-vb[Reflection.DynamicMethod.All#23](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineParameter (position As Integer, attributes As ParameterAttributes, parameterName As String) As ParameterBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ParameterBuilder ^ DefineParameter(int position, System::Reflection::ParameterAttributes attributes, System::String ^ parameterName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="position">
          <span data-ttu-id="4b60a-469">Posizione del parametro nell'elenco dei parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-469">The position of the parameter in the parameter list.</span>
          </span>
          <span data-ttu-id="4b60a-470">I parametri sono indicizzati a partire da 1 per il primo parametro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-470">Parameters are indexed beginning with the number 1 for the first parameter.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="4b60a-471">Combinazione bit per bit di valori di <see cref="T:System.Reflection.ParameterAttributes" /> che specifica gli attributi del parametro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-471">A bitwise combination of <see cref="T:System.Reflection.ParameterAttributes" /> values that specifies the attributes of the parameter.</span>
          </span>
        </param>
        <param name="parameterName">
          <span data-ttu-id="4b60a-472">Nome del parametro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-472">The name of the parameter.</span>
          </span>
          <span data-ttu-id="4b60a-473">Il nome può essere una stringa di lunghezza zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-473">The name can be a zero-length string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-474">Definisce un parametro del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-474">Defines a parameter of the dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b60a-475">Restituisce sempre <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-475">Always returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-476">Se `position` è 0, il <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> metodo fa riferimento al valore restituito.</span><span class="sxs-lookup"><span data-stu-id="4b60a-476">If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value.</span></span> <span data-ttu-id="4b60a-477">Impostazione delle informazioni sul parametro ha effetto sul valore restituito.</span><span class="sxs-lookup"><span data-stu-id="4b60a-477">Setting parameter information has no effect on the return value.</span></span>  
  
 <span data-ttu-id="4b60a-478">Se il metodo dinamico è già stato completato, chiamando la <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> (metodo), il <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> metodo non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="4b60a-478">If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect.</span></span> <span data-ttu-id="4b60a-479">Non viene generata alcuna eccezione.</span><span class="sxs-lookup"><span data-stu-id="4b60a-479">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-480">Esempio di codice seguente viene illustrato come definire le informazioni sui parametri per un metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-480">The following code example shows how to define parameter information for a dynamic method.</span></span> <span data-ttu-id="4b60a-481">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="4b60a-481">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#33](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#33)]
 [!code-csharp[Reflection.DynamicMethod.All#33](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#33)]
 [!code-vb[Reflection.DynamicMethod.All#33](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4b60a-482">Il metodo non ha parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-482">The method has no parameters.</span>
          </span>
          <span data-ttu-id="4b60a-483">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-483">-or-</span>
          </span>
          <span data-ttu-id="4b60a-484">
            <paramref name="position" /> è minore di 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-484">
              <paramref name="position" /> is less than 0.</span>
          </span>
          <span data-ttu-id="4b60a-485">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-485">-or-</span>
          </span>
          <span data-ttu-id="4b60a-486">
            <paramref name="position" /> è maggiore del numero dei parametri del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-486">
              <paramref name="position" /> is greater than the number of the method's parameters.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-487">Restituisce l'implementazione di base per il metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-487">Returns the base implementation for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b60a-488">Implementazione di base del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-488">The base implementation of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-489">Questo metodo restituisce sempre l'attuale `DynamicMethod` oggetto.</span><span class="sxs-lookup"><span data-stu-id="4b60a-489">This method always returns the current `DynamicMethod` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-490">Restituisce gli attributi personalizzati applicati al metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-490">Returns the custom attributes applied to the method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="4b60a-491">
            <see langword="true" /> per ricercare gli attributi personalizzati nella catena di ereditarietà del metodo; <see langword="false" /> per verificare solo il metodo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-491">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-492">Restituisce tutti gli attributi personalizzati definiti per il metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-492">Returns all the custom attributes defined for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b60a-493">Matrice di oggetti che rappresentano tutti gli attributi personalizzati del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-493">An array of objects representing all the custom attributes of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-494">Per i metodi dinamici, specificando `true` per `inherit` perché il metodo non è dichiarato in un tipo non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="4b60a-494">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-495">Attributi personalizzati non sono attualmente supportati sui metodi dinamici.</span><span class="sxs-lookup"><span data-stu-id="4b60a-495">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="4b60a-496">L'unico attributo restituito è <xref:System.Runtime.CompilerServices.MethodImplAttribute>; è possibile ottenere i flag di implementazione più facilmente utilizzando il <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-496">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="4b60a-497">Classe <see cref="T:System.Type" /> che rappresenta il tipo di attributo personalizzato da restituire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-497">A <see cref="T:System.Type" /> representing the type of custom attribute to return.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="4b60a-498">
            <see langword="true" /> per ricercare gli attributi personalizzati nella catena di ereditarietà del metodo; <see langword="false" /> per verificare solo il metodo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-498">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-499">Restituisce gli attributi personalizzati del tipo specificato che sono stati applicati al metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-499">Returns the custom attributes of the specified type that have been applied to the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b60a-500">Matrice di oggetti che rappresentano gli attributi del metodo di tipo <paramref name="attributeType" /> o derivano dal tipo <paramref name="attributeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-500">An array of objects representing the attributes of the method that are of type <paramref name="attributeType" /> or derive from type <paramref name="attributeType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-501">Per i metodi dinamici, specificando `true` per `inherit` perché il metodo non è dichiarato in un tipo non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="4b60a-501">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-502">Attributi personalizzati non sono attualmente supportati sui metodi dinamici.</span><span class="sxs-lookup"><span data-stu-id="4b60a-502">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="4b60a-503">L'unico attributo restituito è <xref:System.Runtime.CompilerServices.MethodImplAttribute>; è possibile ottenere i flag di implementazione più facilmente utilizzando il <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-503">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4b60a-504">
            <paramref name="attributeType" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-504">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetDynamicILInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.DynamicILInfo GetDynamicILInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDynamicILInfo () As DynamicILInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::DynamicILInfo ^ GetDynamicILInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicILInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-505">Restituisce un oggetto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> che è possibile utilizzare per generare il corpo di un metodo da token di metadati, ambiti e flussi MSIL (Microsoft Intermediate Language).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-505">Returns a <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b60a-506">Oggetto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> che è possibile utilizzare per generare il corpo di un metodo da token di metadati, ambiti e flussi MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-506">A <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-507">La <xref:System.Reflection.Emit.DynamicILInfo> classe viene fornita per supportare la generazione di codice non gestito.</span><span class="sxs-lookup"><span data-stu-id="4b60a-507">The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="4b60a-508">Per eseguire codice non gestito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-508">to execute unmanaged code.</span>
          </span>
          <span data-ttu-id="4b60a-509">Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-509">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.Emit.DynamicILInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetILGenerator">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-510">Restituisce un generatore MSIL che è possibile usare per generare un corpo per il metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-510">Returns an MSIL generator that can be used to emit a body for the dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator () As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-511">Restituisce un generatore di Microsoft Intermediate Language (MSIL) per il metodo con una dimensione di flusso MSIL predefinita di 64 byte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-511">Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b60a-512">Oggetto <see cref="T:System.Reflection.Emit.ILGenerator" /> per il metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-512">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-513">Dopo un metodo dinamico è stato completato, chiamando la <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> (metodo), eventuali ulteriori tentativi di aggiungere codice MSIL viene ignorato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-513">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="4b60a-514">Non viene generata alcuna eccezione.</span><span class="sxs-lookup"><span data-stu-id="4b60a-514">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-515">Esistono restrizioni sul codice non verificabile in metodi dinamici, anche in alcuni scenari di attendibilità totale.</span><span class="sxs-lookup"><span data-stu-id="4b60a-515">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="4b60a-516">Vedere la sezione "Verifica" nelle note per <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-516">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-517">Esempio di codice seguente crea un metodo dinamico che accetta due parametri.</span><span class="sxs-lookup"><span data-stu-id="4b60a-517">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="4b60a-518">Nell'esempio viene generato il corpo di una funzione semplice che stampa il primo parametro nella console e verrà utilizzato il secondo parametro come valore restituito del metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-518">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="4b60a-519">Nell'esempio viene completato il metodo tramite la creazione di un delegato, richiama il delegato con parametri diversi e infine viene chiamato il metodo dinamico usando il <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-519">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 streamSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator (streamSize As Integer) As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator(int streamSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamSize">
          <span data-ttu-id="4b60a-520">Dimensioni del flusso MSIL in byte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-520">The size of the MSIL stream, in bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-521">Restituisce un generatore di Microsoft Intermediate Language (MSIL) per il metodo con le dimensioni del flusso MSIL specificate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-521">Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b60a-522">Oggetto <see cref="T:System.Reflection.Emit.ILGenerator" /> per il metodo, con le dimensioni del flusso MSIL specificate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-522">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method, with the specified MSIL stream size.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-523">Dopo un metodo dinamico è stato completato, chiamando la <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> (metodo), eventuali ulteriori tentativi di aggiungere codice MSIL viene ignorato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-523">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="4b60a-524">Non viene generata alcuna eccezione.</span><span class="sxs-lookup"><span data-stu-id="4b60a-524">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-525">Esistono restrizioni sul codice non verificabile in metodi dinamici, anche in alcuni scenari di attendibilità totale.</span><span class="sxs-lookup"><span data-stu-id="4b60a-525">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="4b60a-526">Vedere la sezione "Verifica" nelle note per <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-526">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-527">Esempio di codice seguente viene illustrato questo overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-527">The following code example demonstrates this method overload.</span></span> <span data-ttu-id="4b60a-528">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="4b60a-528">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#2](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#2)]
 [!code-csharp[Reflection.DynamicMethod.All#2](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#2)]
 [!code-vb[Reflection.DynamicMethod.All#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-529">Restituisce i flag di implementazione per il metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-529">Returns the implementation flags for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b60a-530">Combinazione bit per bit dei valori <see cref="T:System.Reflection.MethodImplAttributes" /> che rappresentano i flag di implementazione relativi al metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-530">A bitwise combination of <see cref="T:System.Reflection.MethodImplAttributes" /> values representing the implementation flags for the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-531">Attualmente, gli attributi di implementazione di metodo per i metodi dinamici sono sempre <xref:System.Reflection.MethodImplAttributes.IL> e <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-531">Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-532">Restituisce i parametri del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-532">Returns the parameters of the dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b60a-533">Matrice di oggetti <see cref="T:System.Reflection.ParameterInfo" /> che rappresentano i parametri del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-533">An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that represent the parameters of the dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-534">Il <xref:System.Reflection.ParameterInfo> gli oggetti restituiti da questo metodo sono solo a scopo informativo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-534">The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only.</span></span> <span data-ttu-id="4b60a-535">Utilizzare il <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> metodo per impostare o modificare le caratteristiche dei parametri.</span><span class="sxs-lookup"><span data-stu-id="4b60a-535">Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-536">Esempio di codice seguente mostra i parametri di un metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-536">The following code example displays the parameters of a dynamic method.</span></span> <span data-ttu-id="4b60a-537">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="4b60a-537">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#34](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#34)]
 [!code-csharp[Reflection.DynamicMethod.All#34](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#34)]
 [!code-vb[Reflection.DynamicMethod.All#34](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public bool InitLocals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InitLocals { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-538">Ottiene o imposta un valore che indica se le variabili locali nel metodo sono inizializzate su zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-538">Gets or sets a value indicating whether the local variables in the method are zero-initialized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b60a-539">
            <see langword="true" /> se le variabili locali nel metodo vengono inizializzate su zero; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-539">
              <see langword="true" /> if the local variables in the method are zero-initialized; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="4b60a-540">Il valore predefinito è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-540">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-541">Se questa proprietà è impostata su `true`, generato Microsoft intermedio language (MSIL) include l'inizializzazione delle variabili locali.</span><span class="sxs-lookup"><span data-stu-id="4b60a-541">If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables.</span></span> <span data-ttu-id="4b60a-542">Se è impostato su `false`, variabili locali non inizializzate e il codice generato non è verificabile.</span><span class="sxs-lookup"><span data-stu-id="4b60a-542">If it is set to `false`, local variables are not initialized and the generated code is unverifiable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-543">Nell'esempio di codice riportato di seguito viene visualizza la <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> proprietà di un metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-543">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property of a dynamic method.</span></span> <span data-ttu-id="4b60a-544">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="4b60a-544">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#24](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#24)]
 [!code-csharp[Reflection.DynamicMethod.All#24](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#24)]
 [!code-vb[Reflection.DynamicMethod.All#24](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="4b60a-545">Questo parametro viene ignorato per i metodi dinamici, in quanto sono statici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-545">This parameter is ignored for dynamic methods, because they are static.</span>
          </span>
          <span data-ttu-id="4b60a-546">Specificare <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-546">Specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="4b60a-547">Combinazione bit per bit di valori di <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-547">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="4b60a-548">Oggetto <see cref="T:System.Reflection.Binder" /> che consente l'associazione, la coercizione di tipi di argomento, la chiamata di membri e il recupero di oggetti <see cref="T:System.Reflection.MemberInfo" /> tramite la reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-548">A <see cref="T:System.Reflection.Binder" /> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span>
          </span>
          <span data-ttu-id="4b60a-549">Se <c>binder</c> è <see langword="null" />, verrà usato il binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-549">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="4b60a-550">Per informazioni dettagliate, vedere <see cref="T:System.Reflection.Binder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-550">For more details, see <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="4b60a-551">Elenco di argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-551">An argument list.</span>
          </span>
          <span data-ttu-id="4b60a-552">Matrice di argomenti con lo stesso numero, ordine e tipo dei parametri del metodo da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-552">This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</span>
          </span>
          <span data-ttu-id="4b60a-553">In assenza di parametri, questo parametro deve essere <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-553">If there are no parameters this parameter should be <see langword="null" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="4b60a-554">Istanza di <see cref="T:System.Globalization.CultureInfo" /> usata per regolare la coercizione dei tipi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-554">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="4b60a-555">Se è <see langword="null" />, per il thread corrente verrà usato l'oggetto <see cref="T:System.Globalization.CultureInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-555">If this is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span>
          </span>
          <span data-ttu-id="4b60a-556">Queste informazioni sono necessarie, ad esempio, per convertire in modo corretto un valore <see cref="T:System.String" /> che rappresenta 1000 in un valore <see cref="T:System.Double" />, in quanto 1000 viene rappresentato in modo diverso dalle diverse impostazioni cultura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-556">For example, this information is needed to correctly convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, because 1000 is represented differently by different cultures.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-557">Richiama il metodo dinamico usando i parametri specificati, con i vincoli del binder specificato e le informazioni sulle impostazioni cultura specificate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-557">Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b60a-558">Un valore <see cref="T:System.Object" /> che contiene il valore restituito del metodo richiamato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-558">A <see cref="T:System.Object" /> containing the return value of the invoked method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-559">Oltre alle eccezioni elencate, il codice chiamante deve essere preparato per intercettare le eccezioni generate dal metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-559">In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.</span></span>  
  
 <span data-ttu-id="4b60a-560">L'esecuzione di un metodo dinamico con un delegato creato dal <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metodo è più efficiente rispetto all'esecuzione con il <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-560">Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 <span data-ttu-id="4b60a-561">La chiamata di <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> metodo o <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> metodo completa il metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-561">Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method.</span></span> <span data-ttu-id="4b60a-562">Qualsiasi ulteriore tenta di modificare il metodo dinamico, ad esempio modifica di definizioni di parametro o la creazione di ulteriori Microsoft intermediate language (MSIL), viene ignorato. viene generata alcuna eccezione.</span><span class="sxs-lookup"><span data-stu-id="4b60a-562">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="4b60a-563">Tutti i metodi dinamici sono statici, pertanto la `obj` parametro viene sempre ignorato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-563">All dynamic methods are static, so the `obj` parameter is always ignored.</span></span> <span data-ttu-id="4b60a-564">Per considerare un metodo dinamico, come se fosse un metodo di istanza, utilizzare il <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload che accetta un'istanza dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="4b60a-564">To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.</span></span>  
  
 <span data-ttu-id="4b60a-565">Se il metodo dinamico ha alcun parametro, il valore di `parameters` deve essere `null`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-565">If the dynamic method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="4b60a-566">In caso contrario, il numero, tipo e l'ordine degli elementi nella matrice di parametri deve essere identici a numero, tipo e ordine dei parametri del metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-566">Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-567">Overload di questo metodo viene chiamato dal <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> overload del metodo ereditato dalla <xref:System.Reflection.MethodBase> classe, per le note precedenti si applicano a entrambi gli overload.</span><span class="sxs-lookup"><span data-stu-id="4b60a-567">This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.</span></span>  
  
 <span data-ttu-id="4b60a-568">Questo metodo non richiedere autorizzazioni direttamente, ma il richiamo del metodo dinamico può causare richieste di sicurezza, a seconda del metodo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-568">This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method.</span></span> <span data-ttu-id="4b60a-569">Ad esempio, non viene effettuata per metodi dinamici ospitati anonimamente vengono creati con il `restrictedSkipVisibility` parametro impostato su `false`.</span><span class="sxs-lookup"><span data-stu-id="4b60a-569">For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`.</span></span> <span data-ttu-id="4b60a-570">D'altra parte, se si crea un metodo con `restrictedSkipVisibility` impostato su `true` in modo che possa accedere a un membro nascosto di un assembly di destinazione, il metodo provocherà una richiesta per le autorizzazioni dell'assembly di destinazione più <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span><span class="sxs-lookup"><span data-stu-id="4b60a-570">On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-571">Nelle versioni precedenti al [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo metodo richiesto <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.</span><span class="sxs-lookup"><span data-stu-id="4b60a-571">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-572">Esempio di codice seguente richiama un metodo dinamico con associazione esatta, utilizzando le impostazioni cultura inglese Stati Uniti.</span><span class="sxs-lookup"><span data-stu-id="4b60a-572">The following code example invokes a dynamic method with exact binding, using the US-English culture.</span></span> <span data-ttu-id="4b60a-573">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="4b60a-573">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#4](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#4)]
 [!code-csharp[Reflection.DynamicMethod.All#4](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#4)]
 [!code-vb[Reflection.DynamicMethod.All#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="4b60a-574">La convenzione di chiamata <see cref="F:System.Reflection.CallingConventions.VarArgs" /> non è supportata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-574">The <see cref="F:System.Reflection.CallingConventions.VarArgs" /> calling convention is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetParameterCountException">
          <span data-ttu-id="4b60a-575">Il numero di elementi in <paramref name="parameters" /> non corrisponde al numero dei parametri del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-575">The number of elements in <paramref name="parameters" /> does not match the number of parameters in the dynamic method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4b60a-576">Il tipo di uno o più elementi di <paramref name="parameters" /> non corrisponde al tipo del parametro corrispondente del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-576">The type of one or more elements of <paramref name="parameters" /> does not match the type of the corresponding parameter of the dynamic method.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="4b60a-577">Il metodo dinamico è associato a un modulo, non è contenuto anonimamente ed è costruito con <paramref name="skipVisibility" /> impostato su <see langword="false" />, ma il metodo dinamico accede a membri che non sono <see langword="public" /> o <see langword="internal" /> (<see langword="Friend" /> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-577">The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but the dynamic method accesses members that are not <see langword="public" /> or <see langword="internal" /> (<see langword="Friend" /> in Visual Basic).</span>
          </span>
          <span data-ttu-id="4b60a-578">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-578">-or-</span>
          </span>
          <span data-ttu-id="4b60a-579">Il metodo dinamico è contenuto anonimamente ed è costruito con <paramref name="skipVisibility" /> impostato su <see langword="false" />, ma accede a membri che non sono <see langword="public" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-579">The dynamic method is anonymously hosted and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but it accesses members that are not <see langword="public" />.</span>
          </span>
          <span data-ttu-id="4b60a-580">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-580">-or-</span>
          </span>
          <span data-ttu-id="4b60a-581">Il metodo dinamico contiene codice non verificabile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-581">The dynamic method contains unverifiable code.</span>
          </span>
          <span data-ttu-id="4b60a-582">Vedere la sezione "Verifica" nelle note per <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-582">See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="4b60a-583">Classe <see cref="T:System.Type" /> che rappresenta il tipo di attributo personalizzato da ricercare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-583">A <see cref="T:System.Type" /> representing the type of custom attribute to search for.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="4b60a-584">
            <see langword="true" /> per ricercare gli attributi personalizzati nella catena di ereditarietà del metodo; <see langword="false" /> per verificare solo il metodo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-584">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b60a-585">Indica se il tipo di attributo personalizzato specificato è definito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-585">Indicates whether the specified custom attribute type is defined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b60a-586">
            <see langword="true" /> se è definito il tipo di attributo personalizzato specificato; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-586">
              <see langword="true" /> if the specified custom attribute type is defined; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-587">Per i metodi dinamici, specificando `true` per `inherit` non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="4b60a-587">For dynamic methods, specifying `true` for `inherit` has no effect.</span></span> <span data-ttu-id="4b60a-588">Metodi dinamici non hanno alcuna catena di ereditarietà.</span><span class="sxs-lookup"><span data-stu-id="4b60a-588">Dynamic methods have no inheritance chain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-589">Attributi personalizzati non sono attualmente supportati sui metodi dinamici.</span><span class="sxs-lookup"><span data-stu-id="4b60a-589">Custom attributes are not currently supported on dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-590">Ottiene un valore che indica se il metodo dinamico corrente è critico per la sicurezza o critico per la sicurezza e richiamabile da codice trasparente e può pertanto eseguire operazioni critiche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-590">Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b60a-591">
            <see langword="true" /> se il metodo dinamico corrente è critico per la sicurezza o security-safe-critical; <see langword="false" /> se è trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-591">
              <see langword="true" /> if the current dynamic method is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-592">Il <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, e <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> riportano il livello di trasparenza del metodo dinamico, come determinato da common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="4b60a-592">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="4b60a-593">Le combinazioni di queste proprietà vengono visualizzate nella tabella seguente:</span><span class="sxs-lookup"><span data-stu-id="4b60a-593">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="4b60a-594">Livello di sicurezza</span><span class="sxs-lookup"><span data-stu-id="4b60a-594">Security level</span></span>|<span data-ttu-id="4b60a-595">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="4b60a-595">IsSecurityCritical</span></span>|<span data-ttu-id="4b60a-596">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="4b60a-596">IsSecuritySafeCritical</span></span>|<span data-ttu-id="4b60a-597">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="4b60a-597">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="4b60a-598">Critico</span><span class="sxs-lookup"><span data-stu-id="4b60a-598">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="4b60a-599">Critico per la sicurezza</span><span class="sxs-lookup"><span data-stu-id="4b60a-599">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="4b60a-600">Trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-600">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="4b60a-601">Usare queste proprietà è molto più semplice che non esaminare le annotazioni di sicurezza di un assembly e dei suoi tipi, controllare il livello di attendibilità corrente e tentare di duplicare le regole del runtime.</span><span class="sxs-lookup"><span data-stu-id="4b60a-601">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="4b60a-602">La trasparenza di un metodo dinamico dipende dal modulo che è associato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-602">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="4b60a-603">Se il metodo dinamico è associato un tipo anziché un modulo, la trasparenza dipende dal modulo che contiene il tipo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-603">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="4b60a-604">Metodi dinamici dispone di annotazioni di sicurezza, pertanto vengono assegnate la trasparenza predefinita per il modulo associato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-604">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="4b60a-605">Metodi dinamici ospitati anonimamente sono sempre trasparenti, perché il modulo fornita dal sistema che li contiene è trasparente.</span><span class="sxs-lookup"><span data-stu-id="4b60a-605">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="4b60a-606">La trasparenza di un metodo dinamico è associato a un assembly attendibile (vale a dire un assembly con nome sicuro che viene installato nella global assembly cache) descritto nella tabella seguente.</span><span class="sxs-lookup"><span data-stu-id="4b60a-606">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="4b60a-607">Annotazione di assembly</span><span class="sxs-lookup"><span data-stu-id="4b60a-607">Assembly annotation</span></span>|<span data-ttu-id="4b60a-608">Trasparenza di livello 1</span><span class="sxs-lookup"><span data-stu-id="4b60a-608">Level 1 transparency</span></span>|<span data-ttu-id="4b60a-609">Trasparenza di livello 2</span><span class="sxs-lookup"><span data-stu-id="4b60a-609">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="4b60a-610">Completamente trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-610">Fully transparent</span></span>|<span data-ttu-id="4b60a-611">Trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-611">Transparent</span></span>|<span data-ttu-id="4b60a-612">Trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-612">Transparent</span></span>|  
    |<span data-ttu-id="4b60a-613">Completamente critico</span><span class="sxs-lookup"><span data-stu-id="4b60a-613">Fully critical</span></span>|<span data-ttu-id="4b60a-614">Critico</span><span class="sxs-lookup"><span data-stu-id="4b60a-614">Critical</span></span>|<span data-ttu-id="4b60a-615">Critico</span><span class="sxs-lookup"><span data-stu-id="4b60a-615">Critical</span></span>|  
    |<span data-ttu-id="4b60a-616">Trasparenza mista</span><span class="sxs-lookup"><span data-stu-id="4b60a-616">Mixed transparency</span></span>|<span data-ttu-id="4b60a-617">Trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-617">Transparent</span></span>|<span data-ttu-id="4b60a-618">Trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-618">Transparent</span></span>|  
    |<span data-ttu-id="4b60a-619">Security-agnostic</span><span class="sxs-lookup"><span data-stu-id="4b60a-619">Security-agnostic</span></span>|<span data-ttu-id="4b60a-620">Critico per la sicurezza</span><span class="sxs-lookup"><span data-stu-id="4b60a-620">Safe-critical</span></span>|<span data-ttu-id="4b60a-621">Critico</span><span class="sxs-lookup"><span data-stu-id="4b60a-621">Critical</span></span>|  
  
     <span data-ttu-id="4b60a-622">Ad esempio, se si associa un metodo dinamico a un tipo presente in mscorlib.dll, che dispone di trasparenza di livello 2 misto, il metodo dinamico è trasparente e non è possibile eseguire il codice critico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-622">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="4b60a-623">Per informazioni sui livelli di trasparenza, vedere [codice SecurityTransparent, livello 1](~/docs/framework/misc/security-transparent-code-level-1.md) e [codice SecurityTransparent, livello 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="4b60a-623">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4b60a-624">Associazione di un metodo dinamico a un modulo in un assembly attendibile di livello 1 che è indipendente dalla sicurezza, ad esempio System.dll, non supporta l'elevazione dei privilegi di attendibilità.</span><span class="sxs-lookup"><span data-stu-id="4b60a-624">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="4b60a-625">Se il set di concessioni del codice che chiama il metodo dinamico non include il set di concessioni di System. dll (ovvero, l'attendibilità totale), <xref:System.Security.SecurityException> viene generata quando viene chiamato il metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-625">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="4b60a-626">La trasparenza di un metodo dinamico è associato a un assembly parzialmente attendibile dipende da come l'assembly viene caricato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-626">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="4b60a-627">Se l'assembly viene caricato con attendibilità parziale (ad esempio, in un dominio applicazione creato mediante sandbox), il runtime ignora le annotazioni di sicurezza dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="4b60a-627">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="4b60a-628">L'assembly e tutti i relativi tipi e membri, inclusi i metodi dinamici, vengono considerati come trasparente.</span><span class="sxs-lookup"><span data-stu-id="4b60a-628">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="4b60a-629">Il runtime presta attenzione a annotazioni di sicurezza solo se l'assembly con attendibilità parziale viene caricato con attendibilità completa (ad esempio, nel dominio applicazione predefinito di un'applicazione desktop).</span><span class="sxs-lookup"><span data-stu-id="4b60a-629">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="4b60a-630">In tal caso, il runtime assegna il metodo dinamico la trasparenza predefinita per i metodi in base alle annotazioni dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="4b60a-630">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="4b60a-631">Per ulteriori informazioni sulla reflection emit e la trasparenza, vedere [problemi di sicurezza nella Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="4b60a-631">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="4b60a-632">Per informazioni su trasparenza, vedere [modifiche della sicurezza](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="4b60a-632">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4b60a-633">Il metodo dinamico non dispone di un corpo del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-633">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-634">Ottiene un valore che indica se il metodo dinamico corrente è critico per la sicurezza al livello di attendibilità corrente, vale a dire se può eseguire operazioni critiche e se è possibile accedervi tramite codice trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-634">Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b60a-635">
            <see langword="true" /> se il metodo dinamico è security-safe-critical al livello di attendibilità corrente; <see langword="false" /> se è critico per la sicurezza o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-635">
              <see langword="true" /> if the dynamic method is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-636">Il <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, e <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> riportano il livello di trasparenza del metodo dinamico, come determinato da common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="4b60a-636">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="4b60a-637">Le combinazioni di queste proprietà vengono visualizzate nella tabella seguente:</span><span class="sxs-lookup"><span data-stu-id="4b60a-637">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="4b60a-638">Livello di sicurezza</span><span class="sxs-lookup"><span data-stu-id="4b60a-638">Security level</span></span>|<span data-ttu-id="4b60a-639">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="4b60a-639">IsSecurityCritical</span></span>|<span data-ttu-id="4b60a-640">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="4b60a-640">IsSecuritySafeCritical</span></span>|<span data-ttu-id="4b60a-641">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="4b60a-641">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="4b60a-642">Critico</span><span class="sxs-lookup"><span data-stu-id="4b60a-642">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="4b60a-643">Critico per la sicurezza</span><span class="sxs-lookup"><span data-stu-id="4b60a-643">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="4b60a-644">Trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-644">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="4b60a-645">Usare queste proprietà è molto più semplice che non esaminare le annotazioni di sicurezza di un assembly e dei suoi tipi, controllare il livello di attendibilità corrente e tentare di duplicare le regole del runtime.</span><span class="sxs-lookup"><span data-stu-id="4b60a-645">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="4b60a-646">La trasparenza di un metodo dinamico dipende dal modulo che è associato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-646">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="4b60a-647">Se il metodo dinamico è associato un tipo anziché un modulo, la trasparenza dipende dal modulo che contiene il tipo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-647">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="4b60a-648">Metodi dinamici dispone di annotazioni di sicurezza, pertanto vengono assegnate la trasparenza predefinita per il modulo associato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-648">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="4b60a-649">Metodi dinamici ospitati anonimamente sono sempre trasparenti, perché il modulo fornita dal sistema che li contiene è trasparente.</span><span class="sxs-lookup"><span data-stu-id="4b60a-649">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="4b60a-650">La trasparenza di un metodo dinamico è associato a un assembly attendibile (vale a dire un assembly con nome sicuro che viene installato nella global assembly cache) descritto nella tabella seguente.</span><span class="sxs-lookup"><span data-stu-id="4b60a-650">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="4b60a-651">Annotazione di assembly</span><span class="sxs-lookup"><span data-stu-id="4b60a-651">Assembly annotation</span></span>|<span data-ttu-id="4b60a-652">Trasparenza di livello 1</span><span class="sxs-lookup"><span data-stu-id="4b60a-652">Level 1 transparency</span></span>|<span data-ttu-id="4b60a-653">Trasparenza di livello 2</span><span class="sxs-lookup"><span data-stu-id="4b60a-653">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="4b60a-654">Completamente trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-654">Fully transparent</span></span>|<span data-ttu-id="4b60a-655">Trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-655">Transparent</span></span>|<span data-ttu-id="4b60a-656">Trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-656">Transparent</span></span>|  
    |<span data-ttu-id="4b60a-657">Completamente critico</span><span class="sxs-lookup"><span data-stu-id="4b60a-657">Fully critical</span></span>|<span data-ttu-id="4b60a-658">Critico</span><span class="sxs-lookup"><span data-stu-id="4b60a-658">Critical</span></span>|<span data-ttu-id="4b60a-659">Critico</span><span class="sxs-lookup"><span data-stu-id="4b60a-659">Critical</span></span>|  
    |<span data-ttu-id="4b60a-660">Trasparenza mista</span><span class="sxs-lookup"><span data-stu-id="4b60a-660">Mixed transparency</span></span>|<span data-ttu-id="4b60a-661">Trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-661">Transparent</span></span>|<span data-ttu-id="4b60a-662">Trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-662">Transparent</span></span>|  
    |<span data-ttu-id="4b60a-663">Security-agnostic</span><span class="sxs-lookup"><span data-stu-id="4b60a-663">Security-agnostic</span></span>|<span data-ttu-id="4b60a-664">Critico per la sicurezza</span><span class="sxs-lookup"><span data-stu-id="4b60a-664">Safe-critical</span></span>|<span data-ttu-id="4b60a-665">Critico</span><span class="sxs-lookup"><span data-stu-id="4b60a-665">Critical</span></span>|  
  
     <span data-ttu-id="4b60a-666">Ad esempio, se si associa un metodo dinamico a un tipo presente in mscorlib.dll, che dispone di trasparenza di livello 2 misto, il metodo dinamico è trasparente e non è possibile eseguire il codice critico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-666">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="4b60a-667">Per informazioni sui livelli di trasparenza, vedere [codice SecurityTransparent, livello 1](~/docs/framework/misc/security-transparent-code-level-1.md) e [codice SecurityTransparent, livello 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="4b60a-667">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4b60a-668">Associazione di un metodo dinamico a un modulo in un assembly attendibile di livello 1 che è indipendente dalla sicurezza, ad esempio System.dll, non supporta l'elevazione dei privilegi di attendibilità.</span><span class="sxs-lookup"><span data-stu-id="4b60a-668">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="4b60a-669">Se il set di concessioni del codice che chiama il metodo dinamico non include il set di concessioni di System. dll (ovvero, l'attendibilità totale), <xref:System.Security.SecurityException> viene generata quando viene chiamato il metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-669">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="4b60a-670">La trasparenza di un metodo dinamico è associato a un assembly parzialmente attendibile dipende da come l'assembly viene caricato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-670">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="4b60a-671">Se l'assembly viene caricato con attendibilità parziale (ad esempio, in un dominio applicazione creato mediante sandbox), il runtime ignora le annotazioni di sicurezza dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="4b60a-671">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="4b60a-672">L'assembly e tutti i relativi tipi e membri, inclusi i metodi dinamici, vengono considerati come trasparente.</span><span class="sxs-lookup"><span data-stu-id="4b60a-672">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="4b60a-673">Il runtime presta attenzione a annotazioni di sicurezza solo se l'assembly con attendibilità parziale viene caricato con attendibilità completa (ad esempio, nel dominio applicazione predefinito di un'applicazione desktop).</span><span class="sxs-lookup"><span data-stu-id="4b60a-673">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="4b60a-674">In tal caso, il runtime assegna il metodo dinamico la trasparenza predefinita per i metodi in base alle annotazioni dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="4b60a-674">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="4b60a-675">Per ulteriori informazioni sulla reflection emit e la trasparenza, vedere [problemi di sicurezza nella Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="4b60a-675">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="4b60a-676">Per informazioni su trasparenza, vedere [modifiche della sicurezza](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="4b60a-676">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4b60a-677">Il metodo dinamico non dispone di un corpo del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-677">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-678">Ottiene un valore che indica se il metodo dinamico corrente è trasparente al livello di attendibilità corrente e pertanto non può eseguire operazioni critiche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-678">Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b60a-679">
            <see langword="true" /> se il metodo dinamico è SecurityTrasparent al livello di attendibilità corrente; in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-679">
              <see langword="true" /> if the dynamic method is security-transparent at the current trust level; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-680">Il <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, e <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> riportano il livello di trasparenza del metodo dinamico, come determinato da common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="4b60a-680">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="4b60a-681">Le combinazioni di queste proprietà vengono visualizzate nella tabella seguente:</span><span class="sxs-lookup"><span data-stu-id="4b60a-681">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="4b60a-682">Livello di sicurezza</span><span class="sxs-lookup"><span data-stu-id="4b60a-682">Security level</span></span>|<span data-ttu-id="4b60a-683">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="4b60a-683">IsSecurityCritical</span></span>|<span data-ttu-id="4b60a-684">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="4b60a-684">IsSecuritySafeCritical</span></span>|<span data-ttu-id="4b60a-685">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="4b60a-685">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="4b60a-686">Critico</span><span class="sxs-lookup"><span data-stu-id="4b60a-686">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="4b60a-687">Critico per la sicurezza</span><span class="sxs-lookup"><span data-stu-id="4b60a-687">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="4b60a-688">Trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-688">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="4b60a-689">Usare queste proprietà è molto più semplice che non esaminare le annotazioni di sicurezza di un assembly e dei suoi tipi, controllare il livello di attendibilità corrente e tentare di duplicare le regole del runtime.</span><span class="sxs-lookup"><span data-stu-id="4b60a-689">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="4b60a-690">La trasparenza di un metodo dinamico dipende dal modulo che è associato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-690">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="4b60a-691">Se il metodo dinamico è associato un tipo anziché un modulo, la trasparenza dipende dal modulo che contiene il tipo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-691">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="4b60a-692">Metodi dinamici dispone di annotazioni di sicurezza, pertanto vengono assegnate la trasparenza predefinita per il modulo associato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-692">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="4b60a-693">Metodi dinamici ospitati anonimamente sono sempre trasparenti, perché il modulo fornita dal sistema che li contiene è trasparente.</span><span class="sxs-lookup"><span data-stu-id="4b60a-693">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="4b60a-694">La trasparenza di un metodo dinamico è associato a un assembly attendibile (vale a dire un assembly con nome sicuro che viene installato nella global assembly cache) descritto nella tabella seguente.</span><span class="sxs-lookup"><span data-stu-id="4b60a-694">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="4b60a-695">Annotazione di assembly</span><span class="sxs-lookup"><span data-stu-id="4b60a-695">Assembly annotation</span></span>|<span data-ttu-id="4b60a-696">Trasparenza di livello 1</span><span class="sxs-lookup"><span data-stu-id="4b60a-696">Level 1 transparency</span></span>|<span data-ttu-id="4b60a-697">Trasparenza di livello 2</span><span class="sxs-lookup"><span data-stu-id="4b60a-697">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="4b60a-698">Completamente trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-698">Fully transparent</span></span>|<span data-ttu-id="4b60a-699">Trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-699">Transparent</span></span>|<span data-ttu-id="4b60a-700">Trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-700">Transparent</span></span>|  
    |<span data-ttu-id="4b60a-701">Completamente critico</span><span class="sxs-lookup"><span data-stu-id="4b60a-701">Fully critical</span></span>|<span data-ttu-id="4b60a-702">Critico</span><span class="sxs-lookup"><span data-stu-id="4b60a-702">Critical</span></span>|<span data-ttu-id="4b60a-703">Critico</span><span class="sxs-lookup"><span data-stu-id="4b60a-703">Critical</span></span>|  
    |<span data-ttu-id="4b60a-704">Trasparenza mista</span><span class="sxs-lookup"><span data-stu-id="4b60a-704">Mixed transparency</span></span>|<span data-ttu-id="4b60a-705">Trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-705">Transparent</span></span>|<span data-ttu-id="4b60a-706">Trasparente</span><span class="sxs-lookup"><span data-stu-id="4b60a-706">Transparent</span></span>|  
    |<span data-ttu-id="4b60a-707">Security-agnostic</span><span class="sxs-lookup"><span data-stu-id="4b60a-707">Security-agnostic</span></span>|<span data-ttu-id="4b60a-708">Critico per la sicurezza</span><span class="sxs-lookup"><span data-stu-id="4b60a-708">Safe-critical</span></span>|<span data-ttu-id="4b60a-709">Critico</span><span class="sxs-lookup"><span data-stu-id="4b60a-709">Critical</span></span>|  
  
     <span data-ttu-id="4b60a-710">Ad esempio, se si associa un metodo dinamico a un tipo presente in mscorlib.dll, che dispone di trasparenza di livello 2 misto, il metodo dinamico è trasparente e non è possibile eseguire il codice critico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-710">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="4b60a-711">Per informazioni sui livelli di trasparenza, vedere [codice SecurityTransparent, livello 1](~/docs/framework/misc/security-transparent-code-level-1.md) e [codice SecurityTransparent, livello 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="4b60a-711">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4b60a-712">Associazione di un metodo dinamico a un modulo in un assembly attendibile di livello 1 che è indipendente dalla sicurezza, ad esempio System.dll, non supporta l'elevazione dei privilegi di attendibilità.</span><span class="sxs-lookup"><span data-stu-id="4b60a-712">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="4b60a-713">Se il set di concessioni del codice che chiama il metodo dinamico non include il set di concessioni di System. dll (ovvero, l'attendibilità totale), <xref:System.Security.SecurityException> viene generata quando viene chiamato il metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-713">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="4b60a-714">La trasparenza di un metodo dinamico è associato a un assembly parzialmente attendibile dipende da come l'assembly viene caricato.</span><span class="sxs-lookup"><span data-stu-id="4b60a-714">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="4b60a-715">Se l'assembly viene caricato con attendibilità parziale (ad esempio, in un dominio applicazione creato mediante sandbox), il runtime ignora le annotazioni di sicurezza dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="4b60a-715">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="4b60a-716">L'assembly e tutti i relativi tipi e membri, inclusi i metodi dinamici, vengono considerati come trasparente.</span><span class="sxs-lookup"><span data-stu-id="4b60a-716">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="4b60a-717">Il runtime presta attenzione a annotazioni di sicurezza solo se l'assembly con attendibilità parziale viene caricato con attendibilità completa (ad esempio, nel dominio applicazione predefinito di un'applicazione desktop).</span><span class="sxs-lookup"><span data-stu-id="4b60a-717">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="4b60a-718">In tal caso, il runtime assegna il metodo dinamico la trasparenza predefinita per i metodi in base alle annotazioni dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="4b60a-718">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="4b60a-719">Per ulteriori informazioni sulla reflection emit e la trasparenza, vedere [problemi di sicurezza nella Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="4b60a-719">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="4b60a-720">Per informazioni su trasparenza, vedere [modifiche della sicurezza](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="4b60a-720">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4b60a-721">Il metodo dinamico non dispone di un corpo del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-721">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public override RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-722">Non supportato per metodi dinamici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-722">Not supported for dynamic methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b60a-723">Non supportato per metodi dinamici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-723">Not supported for dynamic methods.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4b60a-724">Non consentito per metodi dinamici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-724">Not allowed for dynamic methods.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-725">Ottiene il modulo a cui il metodo dinamico è associato in modo logico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-725">Gets the module with which the dynamic method is logically associated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b60a-726">Classe <see cref="T:System.Reflection.Module" /> a cui è associato il metodo dinamico corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-726">The <see cref="T:System.Reflection.Module" /> with which the current dynamic method is associated.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-727">Se un modulo è stato specificato quando il metodo dinamico è stato creato, questa proprietà restituisce tale modulo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-727">If a module was specified when the dynamic method was created, this property returns that module.</span></span> <span data-ttu-id="4b60a-728">Se è stato specificato un tipo come proprietario quando il metodo dinamico è stato creato, questa proprietà restituisce il modulo che contiene tale tipo.</span><span class="sxs-lookup"><span data-stu-id="4b60a-728">If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-729">Nell'esempio di codice riportato di seguito viene visualizza la <xref:System.Reflection.Emit.DynamicMethod.Module%2A> proprietà di un metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-729">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.Module%2A> property of a dynamic method.</span></span> <span data-ttu-id="4b60a-730">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="4b60a-730">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#26](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#26)]
 [!code-csharp[Reflection.DynamicMethod.All#26](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#26)]
 [!code-vb[Reflection.DynamicMethod.All#26](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-731">Ottiene il nome del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-731">Gets the name of the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b60a-732">Nome semplice del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-732">The simple name of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="4b60a-733">Non è necessario per metodi dinamici di nome.</span><span class="sxs-lookup"><span data-stu-id="4b60a-733">It is not necessary to name dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-734">Esempio di codice seguente visualizza il nome di un metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-734">The following code example displays the name of a dynamic method.</span></span> <span data-ttu-id="4b60a-735">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="4b60a-735">This code example is part of a larger example provided for  the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#27](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#27)]
 [!code-csharp[Reflection.DynamicMethod.All#27](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#27)]
 [!code-vb[Reflection.DynamicMethod.All#27](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-736">Ottiene la classe usata nella reflection per ottenere il metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-736">Gets the class that was used in reflection to obtain the method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b60a-737">Sempre <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-737">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-738">Questa proprietà restituisce sempre `null` per i metodi dinamici.</span><span class="sxs-lookup"><span data-stu-id="4b60a-738">This property always returns `null` for dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-739">Esempio di codice seguente consente di visualizzare il tipo riflesso di un metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-739">The following code example displays the reflected type of a dynamic method.</span></span> <span data-ttu-id="4b60a-740">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="4b60a-740">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#28](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#28)]
 [!code-csharp[Reflection.DynamicMethod.All#28](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#28)]
 [!code-vb[Reflection.DynamicMethod.All#28](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-741">Ottiene il parametro restituito del metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-741">Gets the return parameter of the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b60a-742">Sempre <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-742">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-743">Questa proprietà restituisce sempre `null` per i metodi dinamici.</span><span class="sxs-lookup"><span data-stu-id="4b60a-743">This property always returns `null` for dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public override Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-744">Ottiene il tipo di valore restituito per il metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-744">Gets the type of return value for the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b60a-745">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di valore restituito del metodo corrente; <see cref="T:System.Void" /> se il metodo non contiene tipi restituiti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-745">A <see cref="T:System.Type" /> representing the type of the return value of the current method; <see cref="T:System.Void" /> if the method has no return type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-746">Se `null` è stato specificato per il tipo restituito quando il metodo dinamico è stato creato, questa proprietà restituisce <xref:System.Void?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4b60a-746">If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-747">Esempio di codice seguente consente di visualizzare il tipo restituito di un metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-747">The following code example displays the return type of a dynamic method.</span></span> <span data-ttu-id="4b60a-748">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="4b60a-748">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#30](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#30)]
 [!code-csharp[Reflection.DynamicMethod.All#30](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#30)]
 [!code-vb[Reflection.DynamicMethod.All#30](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-749">Ottiene gli attributi personalizzati del tipo restituito per il metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-749">Gets the custom attributes of the return type for the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b60a-750">Interfaccia <see cref="T:System.Reflection.ICustomAttributeProvider" /> che rappresenta gli attributi personalizzati del tipo restituito per il metodo dinamico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-750">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes of the return type for the dynamic method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-751">Attributi personalizzati non sono supportati sul tipo restituito di un metodo dinamico, pertanto ha restituito una matrice di attributi personalizzati di <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> metodo è sempre vuoto.</span><span class="sxs-lookup"><span data-stu-id="4b60a-751">Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-752">Esempio di codice seguente viene illustrato come visualizzare gli attributi personalizzati del tipo restituito di un metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-752">The following code example shows how to display the custom attributes of the return type of a dynamic method.</span></span> <span data-ttu-id="4b60a-753">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="4b60a-753">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#31](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#31)]
 [!code-csharp[Reflection.DynamicMethod.All#31](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#31)]
 [!code-vb[Reflection.DynamicMethod.All#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4b60a-754">Restituisce la firma del metodo, rappresentata come stringa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-754">Returns the signature of the method, represented as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b60a-755">Stringa che rappresenta la firma del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b60a-755">A string representing the method signature.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b60a-756">La firma include solo i tipi e il nome del metodo, se presente.</span><span class="sxs-lookup"><span data-stu-id="4b60a-756">The signature includes only types and the method name, if any.</span></span> <span data-ttu-id="4b60a-757">I nomi dei parametri non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="4b60a-757">Parameter names are not included.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b60a-758">Nell'esempio di codice riportato di seguito viene visualizza la <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> metodo di un metodo dinamico.</span><span class="sxs-lookup"><span data-stu-id="4b60a-758">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> method of a dynamic method.</span></span> <span data-ttu-id="4b60a-759">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="4b60a-759">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#32](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#32)]
 [!code-csharp[Reflection.DynamicMethod.All#32](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#32)]
 [!code-vb[Reflection.DynamicMethod.All#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>