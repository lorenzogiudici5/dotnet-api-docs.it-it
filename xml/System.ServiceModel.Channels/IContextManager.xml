<Type Name="IContextManager" FullName="System.ServiceModel.Channels.IContextManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0c35c07eedc1886846566754f08a8a1e1ca97d03" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37621621" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IContextManager" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContextManager" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IContextManager" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContextManager" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContextManager" />
  <TypeSignature Language="F#" Value="type IContextManager = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definisce un'interfaccia che consente di ottenere e impostare il contesto sul canale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per i canali che utilizzano <xref:System.ServiceModel.WSHttpContextBinding> con il valore di <xref:System.ServiceModel.SessionMode.NotAllowed> impostato, il contesto non può essere recuperato sul client utilizzando <xref:System.ServiceModel.Channels.IContextManager>, in quanto un nuovo canale che stabilisce una sessione viene creato ogni volta che il metodo <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> viene chiamato per applicare la semantica <xref:System.ServiceModel.SessionMode.NotAllowed> su un canale. Ciò significa che anche se in questo caso il contesto viene propagato correttamente al client, non può essere recuperato utilizzando <xref:System.ServiceModel.Channels.IContextManager>. È possibile recuperarlo utilizzando <xref:System.ServiceModel.Channels.ContextMessageProperty> come mostrato nel codice seguente.  
  
```csharp  
using (new OperationContextScope((IContextChannel)channel))  
{  
    channel.MyChannel("Test");  
    ContextMessageProperty context;  
    if (ContextMessageProperty.TryGet(OperationContext.Current.IncomingMessageProperties, out context))  
    {  
        Console.WriteLine(context.Count);  
    }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se la gestione del contesto è abilitata.</summary>
        <value>È <see langword="true" /> se il contesto è abilitato. In caso contrario è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando la gestione del contesto è abilitata, il canale del contesto memorizza nella cache il contesto all'interno della durata corrispondente. Il contesto può essere recuperato dal canale tramite la proprietà del canale `IContextManager` chiamando il metodo <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> su di essa. Il canale può inoltre essere preinizializzato con un contesto specifico prima di venire aperto chiamando il metodo <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> sulla proprietà del canale. Dopo essere stato inizializzato con il contesto, il canale non può essere reimpostato.  
  
 Di seguito vengono illustrate le invarianti in questa modalità:  
  
-   Qualsiasi chiamata a <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> dopo l'apertura del canale genera un'eccezione `InvalidOperationException`.  
  
-   Qualsiasi tentativo di inviare il contesto tramite `ContextMessageProperty` in un messaggio in uscita genera un'eccezione `InvalidOperationException`.  
  
-   Se un messaggio viene ricevuto dal server con il contesto, quando il canale è già stato inizializzato con un contesto, viene generata un'eccezione `ProtocolException`. Si noti che è possibile ricevere il contesto iniziale da un server se il canale viene aperto senza impostazione esplicita del contesto.  
  
-   `ContextMessageProperty` su un messaggio in arrivo è sempre `null`.  
  
 Quando la gestione del contesto non è abilitata, il canale del contesto non gestisce il contesto. È responsabilità dell'applicazione recuperare, gestire e applicare il contesto tramite `ContextMessageProperty`. Qualsiasi tentativo di chiamare <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> o <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> tramite la proprietà del canale `IContextManager` genera un'eccezione `InvalidOperationException`.  
  
 Tutti i cookie HTTP, ad eccezione dei cookie HTTP del contesto, sono gestiti a livello di canale. I cookie HTTP del contesto sono gestiti a livello di applicazione. Questo potrebbe determinare comportare conseguenze impreviste quando i canali sono condivisi per comunicare con istanze diverse indirizzate da <xref:System.ServiceModel.Channels.ContextMessageProperty>. Nella tabella seguente viene mostrato l'effetto sui cookie HTTP quando <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> è impostato su `true` o `false`.  
  
|Binding|Valore IContextManager.Enabled|Ambito dei cookie HTTP del contesto|Ambito di altri cookie HTTP|  
|-------------|-----------------------------------|-------------------------------|------------------------------|  
|BasicHttpBinding|N/D|ChannelFactory|ChannelFactory|  
|BasicHttpContextBinding|true|Canale|Canale|  
|BasicHttpContextBinding|False|Per ogni messaggio (gestito in modo esplicito dall'applicazione)|Canale|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetContext();" />
      <MemberSignature Language="F#" Value="abstract member GetContext : unit -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="iContextManager.GetContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene il contesto.</summary>
        <returns>Interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" /> di coppie chiave/valore con lo spazio dei nomi e il nome del contesto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nel codice seguente viene mostrato come è possibile ottenere il contesto da un'istanza del proxy tipizzata sul client.  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    context = cm.GetContext();  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public void SetContext (System.Collections.Generic.IDictionary&lt;string,string&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContext(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetContext (context As IDictionary(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetContext(System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ context);" />
      <MemberSignature Language="F#" Value="abstract member SetContext : System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="iContextManager.SetContext context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="context">Interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" /> di coppie chiave/valore con lo spazio dei nomi e il nome del contesto impostato.</param>
        <summary>Imposta il contesto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nel codice seguente viene mostrato come è possibile impostare il contesto sul client.  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    cm.SetContext(context);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>