<Type Name="IInputChannel" FullName="System.ServiceModel.Channels.IInputChannel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="be17233039c443b984375197d63600a6a97969ed" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51309325" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInputChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInputChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IInputChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInputChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInputChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IInputChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="5583d-101">Definisce l'interfaccia che un canale deve implementare per ricevere un messaggio.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5583d-101">Defines the interface that a channel must implement to receive a message.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-interface-note](~/includes/untrusted-data-interface-note.md)]

 <span data-ttu-id="5583d-102">Il contratto <xref:System.ServiceModel.Channels.IInputChannel> include varianti sincrone e asincrone della funzionalità di ricezione, tentativo di ricezione e attesa di un messaggio.</span><span class="sxs-lookup"><span data-stu-id="5583d-102">The <xref:System.ServiceModel.Channels.IInputChannel> contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="5583d-103">Il modello pull viene usato in genere con <xref:System.ServiceModel.Channels.IInputChannel> per ricevere messaggi: viene chiamato <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> (per "effettuare il pull" di un messaggio dal canale) e quindi si attende l'arrivo di un messaggio.</span><span class="sxs-lookup"><span data-stu-id="5583d-103">The pull model is used typically with an <xref:System.ServiceModel.Channels.IInputChannel> to receive messages: you call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> (to "pull" a message out of the channel) and then wait for a message to arrive.</span></span> <span data-ttu-id="5583d-104">Un modello di utilizzo alternativo consiste nel chiamare <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> o <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> e quindi <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>.</span><span class="sxs-lookup"><span data-stu-id="5583d-104">An alternative usage pattern is to call <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> or <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>, and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>.</span></span> <span data-ttu-id="5583d-105">Questo approccio è comune per gli utilizzi transazionali in cui viene avviata la transazione tra le chiamate a <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> e <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span><span class="sxs-lookup"><span data-stu-id="5583d-105">This approach is common for transactional usages where you start the transaction between the calls to <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> and <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="5583d-106">Un'interfaccia <xref:System.ServiceModel.Channels.IInputChannel> non è associata necessariamente a un solo mittente.</span><span class="sxs-lookup"><span data-stu-id="5583d-106">An <xref:System.ServiceModel.Channels.IInputChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="5583d-107">Altri canali e interfacce di canale possono fornire una correlazione tra specifici mittenti e <xref:System.ServiceModel.Channels.IInputChannel>, ma il contratto di base non implica tale restrizione.</span><span class="sxs-lookup"><span data-stu-id="5583d-107">Other channels and channel interfaces can provide a correlation between particular senders and an <xref:System.ServiceModel.Channels.IInputChannel>, but the base contract makes no such restriction.</span></span> <span data-ttu-id="5583d-108">Un'implementazione può creare un nuovo <xref:System.ServiceModel.Channels.IInputChannel> per ogni messaggio o può riutilizzare stesso <xref:System.ServiceModel.Channels.IInputChannel> per più messaggi e mittenti.</span><span class="sxs-lookup"><span data-stu-id="5583d-108">An implementation can create a new <xref:System.ServiceModel.Channels.IInputChannel> for each message or reuse the same <xref:System.ServiceModel.Channels.IInputChannel> for multiple messages and senders.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5583d-109">Inizia un'operazione di ricezione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-109">Begins an asynchronous receive operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5583d-110">Se si desidera che l'elaborazione dell'applicazione continui senza attendere la ricezione della richiesta, utilizzare il metodo asincrono <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="5583d-110">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="5583d-111">Nei casi in cui è ammissibile che il thread corrente resti bloccato fino alla ricezione del messaggio di richiesta o fino al termine dell'intervallo di tempo indicato nel parametro <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, usare il metodo `timeout` sincrono.</span><span class="sxs-lookup"><span data-stu-id="5583d-111">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="5583d-112">L'operazione asincrona è disponibile con o senza un timeout esplicito.</span><span class="sxs-lookup"><span data-stu-id="5583d-112">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="5583d-113">Delegato <see cref="T:System.AsyncCallback" /> che riceve la notifica del completamento dell'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-113">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="5583d-114">Oggetto, specificato dall'applicazione, che contiene le informazioni sullo stato associate all'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-114">An object, specified by the application, that contains state information associated with the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5583d-115">Inizia un'operazione asincrona per ricevere un messaggio al quale è associato un oggetto di stato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-115">Begins an asynchronous operation to receive a message that has a state object associated with it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5583d-116">
            <see cref="T:System.IAsyncResult" /> fa riferimento alla ricezione asincrona del messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-116">The <see cref="T:System.IAsyncResult" /> that references the asynchronous message reception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5583d-117">Se si desidera che l'elaborazione dell'applicazione continui senza attendere la ricezione della richiesta, utilizzare il metodo asincrono <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="5583d-117">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="5583d-118">Nei casi in cui è ammissibile che il thread corrente resti bloccato fino alla ricezione del messaggio di richiesta o fino al termine dell'intervallo di tempo indicato nel parametro <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, usare il metodo `timeout` sincrono.</span><span class="sxs-lookup"><span data-stu-id="5583d-118">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="5583d-119">L'operazione asincrona è disponibile con o senza un timeout esplicito.</span><span class="sxs-lookup"><span data-stu-id="5583d-119">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="5583d-120">Questo metodo riceve mediante un callback la notifica dell'identità del gestore eventi relativa all'operazione.</span><span class="sxs-lookup"><span data-stu-id="5583d-120">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="5583d-121">L'operazione non è completa fino a quando un messaggio non viene reso disponibile nel canale.</span><span class="sxs-lookup"><span data-stu-id="5583d-121">The operation is not complete until a message becomes available in the channel.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5583d-122">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="5583d-122">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#15](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="5583d-123">Oggetto della classe <see cref="T:System.TimeSpan" /> che indica il tempo di attesa necessario affinché un messaggio diventi disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-123">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="5583d-124">Delegato <see cref="T:System.AsyncCallback" /> che riceve la notifica del completamento dell'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-124">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="5583d-125">Oggetto, specificato dall'applicazione, che contiene le informazioni sullo stato associate all'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-125">An object, specified by the application, that contains state information associated with the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5583d-126">Avvia un'operazione asincrona per ricevere un messaggio al quale sono associati un timeout e un oggetto di stato specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-126">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5583d-127">
            <see cref="T:System.IAsyncResult" /> fa riferimento all'operazione di ricezione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-127">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5583d-128">Se si desidera che l'elaborazione dell'applicazione continui senza attendere la ricezione della richiesta, utilizzare il metodo asincrono <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="5583d-128">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="5583d-129">Nei casi in cui è ammissibile che il thread corrente resti bloccato fino alla ricezione del messaggio di richiesta o fino al termine dell'intervallo di tempo indicato nel parametro <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, usare il metodo `timeout` sincrono.</span><span class="sxs-lookup"><span data-stu-id="5583d-129">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="5583d-130">L'operazione asincrona è disponibile con o senza un timeout esplicito.</span><span class="sxs-lookup"><span data-stu-id="5583d-130">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="5583d-131">L'operazione non è completa fino a quando un messaggio non viene reso disponibile nel canale o non si verifica il timeout.</span><span class="sxs-lookup"><span data-stu-id="5583d-131">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5583d-132">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="5583d-132">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#16](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="5583d-133">Il <paramref name="timeout" /> specificato è stato superato prima del completamento dell'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-133">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5583d-134">Il timeout specificato è minore di zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-134">The timeout specified is less than zero.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="5583d-135">L'operazione genera una <see cref="T:System.TimeoutException" /> se il <paramref name="timeout" /> specificato viene superato prima del completamento.</span>
            <span class="sxs-lookup">
              <span data-stu-id="5583d-135">The operation throws a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before it completes.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginTryReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="5583d-136">Oggetto della classe <see cref="T:System.TimeSpan" /> che indica il tempo di attesa necessario affinché un messaggio diventi disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-136">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="5583d-137">Delegato <see cref="T:System.AsyncCallback" /> che riceve la notifica del completamento dell'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-137">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="5583d-138">Oggetto, specificato dall'applicazione, che contiene le informazioni sullo stato associate all'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-138">An object, specified by the application, that contains state information associated with the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5583d-139">Avvia un'operazione asincrona per ricevere un messaggio al quale sono associati un timeout e un oggetto di stato specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-139">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5583d-140">
            <see cref="T:System.IAsyncResult" /> fa riferimento all'operazione di ricezione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-140">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5583d-141">Se si desidera che l'elaborazione dell'applicazione continui senza attendere, utilizzare il metodo asincrono <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="5583d-141">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you want the application processing to continue without waiting.</span></span> <span data-ttu-id="5583d-142">Nei casi in cui è ammissibile che il thread corrente resti bloccato mentre risponde al messaggio di richiesta o fino al termine dell'intervallo di tempo indicato, utilizzare il metodo sincrono <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29></span><span class="sxs-lookup"><span data-stu-id="5583d-142">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> method when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="5583d-143">L'operazione non è completa fino a quando un messaggio non viene reso disponibile nel canale o non si verifica il timeout.</span><span class="sxs-lookup"><span data-stu-id="5583d-143">The operation is not complete until either a message becomes available in the channel or the timeout occurs.</span></span>  
  
 <span data-ttu-id="5583d-144">Se si prevede di gestire i timeout e non solo di generare di nuovo o eseguire il wrapping di <xref:System.TimeoutException>, è necessario chiamare <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> anziché <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="5583d-144">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="5583d-145">Se i timeout non verranno trattati in modo speciale, chiamare solo <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, in caso contrario le informazioni sull'errore andranno perdute.</span><span class="sxs-lookup"><span data-stu-id="5583d-145">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, otherwise you lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5583d-146">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="5583d-146">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#19](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="5583d-147">Il <paramref name="timeout" /> specificato è stato superato prima del completamento dell'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-147">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5583d-148">Il timeout specificato è minore di zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-148">The timeout specified is less than zero.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="5583d-149">L'operazione restituisce <see langword="false" /> da <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> se viene superato il <paramref name="timeout" /> specificato.</span>
            <span class="sxs-lookup">
              <span data-stu-id="5583d-149">The operation returns <see langword="false" /> from <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> if the specified <paramref name="timeout" /> is exceeded.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForMessage">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForMessage (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForMessage(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForMessage (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForMessage(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForMessage : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginWaitForMessage (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="5583d-150">Oggetto della classe <see cref="T:System.TimeSpan" /> che indica il tempo di attesa necessario affinché un messaggio diventi disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-150">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="5583d-151">Delegato <see cref="T:System.AsyncCallback" /> che riceve la notifica del completamento dell'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-151">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="5583d-152">Oggetto, specificato dall'applicazione, che contiene le informazioni sullo stato associate all'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-152">An object, specified by the application, that contains state information associated with the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5583d-153">Avvia un'operazione asincrona di attesa dell'arrivo di un messaggio al quale sono associati un timeout e un oggetto di stato specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-153">Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5583d-154">Interfaccia <see cref="T:System.IAsyncResult" /> che fa riferimento all'operazione asincrona per attendere l'arrivo di un messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-154">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a message to arrive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5583d-155">Se si desidera che l'elaborazione dell'applicazione continui senza attendere l'arrivo di un messaggio, utilizzare il metodo asincrono <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="5583d-155">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method if you need the application processing to continue without waiting for the message to arrive.</span></span> <span data-ttu-id="5583d-156">Utilizzare il metodo sincrono <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> quando è possibile bloccare il thread corrente durante l'attesa dell'arrivo di un messaggio nella coda.</span><span class="sxs-lookup"><span data-stu-id="5583d-156">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="5583d-157">Il thread è bloccato fino al `timeout` specificato.</span><span class="sxs-lookup"><span data-stu-id="5583d-157">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="5583d-158">Questo metodo riceve mediante un callback la notifica dell'identità del gestore eventi relativa all'operazione.</span><span class="sxs-lookup"><span data-stu-id="5583d-158">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="5583d-159">L'operazione non è completa fino a quando un messaggio non viene reso disponibile nel canale o non si verifica il timeout.</span><span class="sxs-lookup"><span data-stu-id="5583d-159">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5583d-160">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="5583d-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#22](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="5583d-161">Il <paramref name="timeout" /> specificato è stato superato prima del completamento dell'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-161">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5583d-162">Il timeout specificato è minore di zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-162">The timeout specified is less than zero.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="5583d-163">L'operazione restituisce <see langword="false" /> se viene superato il <paramref name="timeout" /> specificato, non un'eccezione di timeout.</span>
            <span class="sxs-lookup">
              <span data-stu-id="5583d-163">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message EndReceive (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message EndReceive(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (result As IAsyncResult) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ EndReceive(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReceive : IAsyncResult -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.EndReceive result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="5583d-164">Interfaccia <see cref="T:System.IAsyncResult" /> restituita da una chiamata a uno dei metodi <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-164">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5583d-165">Completa un'operazione asincrona per ricevere un messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-165">Completes an asynchronous operation to receive a message.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5583d-166">
            <see cref="T:System.ServiceModel.Channels.Message" /> ricevuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-166">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5583d-167">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="5583d-167">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#17](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceive">
      <MemberSignature Language="C#" Value="public bool EndTryReceive (IAsyncResult result, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceive(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceive (result As IAsyncResult, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceive(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member EndTryReceive : IAsyncResult *  -&gt; bool" Usage="iInputChannel.EndTryReceive (result, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="5583d-168">Interfaccia <see cref="T:System.IAsyncResult" /> restituita da una chiamata al metodo <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-168">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="5583d-169">
            <see cref="T:System.ServiceModel.Channels.Message" /> ricevuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-169">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5583d-170">Completa l'operazione asincrona specificata per ricevere un messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-170">Completes the specified asynchronous operation to receive a message.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5583d-171">
            <see langword="true" /> se il messaggio viene ricevuto prima della scadenza dell'intervallo di tempo specificato; in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-171">
              <see langword="true" /> if a message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5583d-172">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="5583d-172">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#20](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForMessage">
      <MemberSignature Language="C#" Value="public bool EndWaitForMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForMessage(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForMessage (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForMessage(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForMessage : IAsyncResult -&gt; bool" Usage="iInputChannel.EndWaitForMessage result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="5583d-173">Interfaccia <see cref="T:System.IAsyncResult" /> che identifica l'operazione <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> da completare e da cui recuperare un risultato finale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-173">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5583d-174">Completa l'operazione asincrona specificata di attesa di un messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-174">Completes the specified asynchronous wait-for-a-message operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5583d-175">
            <see langword="true" /> se un messaggio arriva prima che il <paramref name="timeout" /> sia scaduto. In caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-175">
              <see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5583d-176">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="5583d-176">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#23](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5583d-177">Ottiene l'indirizzo sul quale il canale di input riceve i messaggi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-177">Gets the address on which the input channel receives messages.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5583d-178">
            <see cref="T:System.ServiceModel.EndpointAddress" /> sul quale il canale di input riceve i messaggi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-178">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which the input channel receives messages.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5583d-179">Se il canale di input non ha un indirizzo autonomo (ad esempio, è il lato di input di un canale TCP iniziato dal client), la proprietà è `null`.</span><span class="sxs-lookup"><span data-stu-id="5583d-179">If this input channel does not have a standalone address (for example, it is the input-side of a client-initiated TCP channel), then this property is `null`.</span></span>  
  
 <span data-ttu-id="5583d-180">Questa proprietà può essere utilizzata dai canali di livello superiore a fini di correlazione.</span><span class="sxs-lookup"><span data-stu-id="5583d-180">This property can be used by higher-level channels for correlation purposes.</span></span> <span data-ttu-id="5583d-181">Se, ad esempio, un canale di livello superiore implementa request/reply in cima a un <xref:System.ServiceModel.Channels.IDuplexChannel>, può utilizzare la proprietà <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> nell'intestazione WS-Addressing ReplyTo.</span><span class="sxs-lookup"><span data-stu-id="5583d-181">For example, if a higher-level channel implements request-reply on top of a <xref:System.ServiceModel.Channels.IDuplexChannel>, it can use the <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> property in the WS-Addressing ReplyTo header.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5583d-182">Nell'esempio di codice seguente viene illustrato come implementare questa proprietà:</span><span class="sxs-lookup"><span data-stu-id="5583d-182">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#12](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Receive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.ServiceProcess.TimeoutException">
          <span data-ttu-id="5583d-183">L'operazione non è stata completata entro l'intervallo di timeout.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-183">The operation did not complete with the timeout interval.</span>
          </span>
        </exception>
        <exception cref="T:System.ServiceModel.CommunicationException">
          <span data-ttu-id="5583d-184">Il canale di input non è riuscito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-184">The input channel failed.</span>
          </span>
        </exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException">
          <span data-ttu-id="5583d-185">Il canale di input è stato interrotto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-185">The input channel has been aborted.</span>
          </span>
        </exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
          <span data-ttu-id="5583d-186">Il canale di input non è riuscito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-186">The input channel faulted.</span>
          </span>
        </exception>
        <summary>
          <span data-ttu-id="5583d-187">Restituisce un messaggio ricevuto dal canale di input, se ne è disponibile uno con un intervallo di tempo definito in modo esplicito o implicito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-187">Returns a message received by the input channel, if one is available with an interval of time that is explicitly or implicitly defined.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5583d-188">Nei casi in cui è ammissibile che il thread corrente resti bloccato fino alla ricezione del messaggio di richiesta o fino al termine dell'intervallo di tempo indicato nel parametro <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, usare il metodo `timeout` sincrono.</span><span class="sxs-lookup"><span data-stu-id="5583d-188">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="5583d-189">Se si desidera che l'elaborazione dell'applicazione continui senza attendere la ricezione della richiesta, utilizzare il metodo asincrono <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="5583d-189">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you need the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="5583d-190">L'operazione sincrona <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> è disponibile con o senza un timeout esplicito.</span><span class="sxs-lookup"><span data-stu-id="5583d-190">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="5583d-191">Se un messaggio non è disponibile, il thread si blocca fino a quando non ne viene trovato uno o non viene superato il timeout.</span><span class="sxs-lookup"><span data-stu-id="5583d-191">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive();" />
      <MemberSignature Language="F#" Value="abstract member Receive : unit -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5583d-192">Se disponibile, restituisce il messaggio ricevuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-192">Returns the message received, if one is available.</span>
          </span>
          <span data-ttu-id="5583d-193">Se un messaggio non è disponibile, il thread si blocca per un intervallo di tempo predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-193">If a message is not available, blocks for a default interval of time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5583d-194">
            <see cref="T:System.ServiceModel.Channels.Message" /> ricevuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-194">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5583d-195">Nei casi in cui è ammissibile che il thread corrente resti bloccato fino alla ricezione del messaggio di richiesta o fino al termine dell'intervallo di tempo indicato nel parametro <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, usare il metodo `timeout` sincrono.</span><span class="sxs-lookup"><span data-stu-id="5583d-195">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="5583d-196">Se si desidera che l'elaborazione dell'applicazione continui senza attendere la ricezione della richiesta, utilizzare il metodo asincrono <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="5583d-196">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="5583d-197">L'operazione sincrona <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> è disponibile con o senza un timeout esplicito.</span><span class="sxs-lookup"><span data-stu-id="5583d-197">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="5583d-198">Se un messaggio non è disponibile, il thread si blocca fino a quando non ne viene trovato uno o non viene superato il timeout.</span><span class="sxs-lookup"><span data-stu-id="5583d-198">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="5583d-199"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> può essere chiamato più volte o contemporaneamente.</span><span class="sxs-lookup"><span data-stu-id="5583d-199"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="5583d-200">Per ogni messaggio ricevuto può essere completata solo una chiamata <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span><span class="sxs-lookup"><span data-stu-id="5583d-200">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5583d-201">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="5583d-201">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#13](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Receive : TimeSpan -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="5583d-202">
            <see cref="T:System.TimeSpan" /> specifica il tempo entro il quale l'operazione di ricezione deve essere completata, prima di scadere e restituire <see cref="T:System.TimeoutException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-202">The <see cref="T:System.TimeSpan" /> that specifies how long the receive operation has to complete before timing out and throwing a <see cref="T:System.TimeoutException" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5583d-203">Se disponibile, restituisce il messaggio ricevuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-203">Returns the message received, if one is available.</span>
          </span>
          <span data-ttu-id="5583d-204">Se un messaggio non è disponibile, il thread si blocca per l'intervallo di tempo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-204">If a message is not available, blocks for a specified interval of time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5583d-205">
            <see cref="T:System.ServiceModel.Channels.Message" /> ricevuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-205">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5583d-206">Nei casi in cui è ammissibile che il thread corrente resti bloccato fino alla ricezione del messaggio di richiesta o fino al termine dell'intervallo di tempo indicato nel parametro <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, usare il metodo `timeout` sincrono.</span><span class="sxs-lookup"><span data-stu-id="5583d-206">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="5583d-207">Se si desidera che l'elaborazione dell'applicazione continui senza attendere la ricezione della richiesta, utilizzare il metodo asincrono <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="5583d-207">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="5583d-208">L'operazione sincrona <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> è disponibile con o senza un timeout esplicito.</span><span class="sxs-lookup"><span data-stu-id="5583d-208">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="5583d-209">Se un messaggio non è disponibile, il thread si blocca fino a quando non ne viene trovato uno o non viene superato il timeout.</span><span class="sxs-lookup"><span data-stu-id="5583d-209">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="5583d-210"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> può essere chiamato più volte o contemporaneamente.</span><span class="sxs-lookup"><span data-stu-id="5583d-210"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="5583d-211">Per ogni messaggio ricevuto può essere completata solo una chiamata <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span><span class="sxs-lookup"><span data-stu-id="5583d-211">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5583d-212">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="5583d-212">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#14](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="5583d-213">Il <paramref name="timeout" /> specificato è stato superato prima del completamento dell'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-213">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5583d-214">Il timeout specificato è minore di zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-214">The timeout specified is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (TimeSpan timeout, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (timeout As TimeSpan, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceive(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member TryReceive : TimeSpan *  -&gt; bool" Usage="iInputChannel.TryReceive (timeout, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="5583d-215">Interfaccia <see cref="T:System.IAsyncResult" /> restituita da una chiamata a uno dei metodi <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-215">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="5583d-216">
            <see cref="T:System.ServiceModel.Channels.Message" /> ricevuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-216">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5583d-217">Tenta di ricevere un messaggio entro l'intervallo di tempo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-217">Tries to receive a message within a specified interval of time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5583d-218">
            <see langword="true" /> se un messaggio viene ricevuto prima che il <paramref name="timeout" /> sia scaduto. In caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-218">
              <see langword="true" /> if a message is received before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5583d-219">Se si prevede di gestire i timeout e non solo di generare di nuovo o eseguire il wrapping di <xref:System.TimeoutException>, è necessario chiamare <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> anziché <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span><span class="sxs-lookup"><span data-stu-id="5583d-219">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="5583d-220">Se i timeout non verranno trattati in modo speciale, chiamare solo <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, in caso contrario le informazioni sull'errore andranno perdute.</span><span class="sxs-lookup"><span data-stu-id="5583d-220">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, otherwise you will lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5583d-221">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="5583d-221">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#18](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="5583d-222">Il <paramref name="timeout" /> specificato è stato superato prima del completamento dell'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-222">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5583d-223">Il timeout specificato è minore di zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-223">The timeout specified is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForMessage">
      <MemberSignature Language="C#" Value="public bool WaitForMessage (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForMessage(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForMessage (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForMessage(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForMessage : TimeSpan -&gt; bool" Usage="iInputChannel.WaitForMessage timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="5583d-224">
            <see cref="T:System.TimeSpan" /> specifica l'intervallo di tempo di attesa massimo per l'arrivo di un messaggio prima della scadenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-224">The <see cref="T:System.TimeSpan" /> specifies the maximum interval of time to wait for a message to arrive before timing out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5583d-225">Restituisce un valore che indica se un messaggio è arrivato entro l'intervallo di tempo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-225">Returns a value that indicates whether a message has arrived within a specified interval of time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5583d-226">
            <see langword="true" /> se un messaggio arriva prima che il <paramref name="timeout" /> sia scaduto. In caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-226">
              <see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5583d-227">La chiamata a <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> non comporta la ricezione o l'elaborazione di un messaggio in nessun'altra modalità.</span><span class="sxs-lookup"><span data-stu-id="5583d-227">Calling <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> does not result in a message being received or processed in any other way.</span></span>  
  
 <span data-ttu-id="5583d-228">Il metodo <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> esiste principalmente per gli scenari di transazione in cui l'utente desidera ricevere il messaggio utilizzando una transazione.</span><span class="sxs-lookup"><span data-stu-id="5583d-228">The <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="5583d-229">In caso del semplice utilizzo di <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, l'utente deve creare la transazione e quindi chiamare <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> e sperare che il messaggio arrivi prima del timeout della transazione, il che potrebbe non avvenire.</span><span class="sxs-lookup"><span data-stu-id="5583d-229">When using just <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> normally for this, the user must create the transaction and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="5583d-230">In alternativa, l'utente può chiamare <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> con il timeout desiderato (anche infinito), quindi all'arrivo di un messaggio, può aprire la transazione, chiamare <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> e avere la certezza di riavere il messaggio prima che la transazione scada.</span><span class="sxs-lookup"><span data-stu-id="5583d-230">Instead, the user can call <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> with whatever time out they want (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="5583d-231">Poiché il metodo è sincrono, blocca il thread corrente finché non viene reso disponibile un messaggio o non si verifica il timeout.</span><span class="sxs-lookup"><span data-stu-id="5583d-231">This method is synchronous, so it blocks the current thread until a message is available or the time out occurs.</span></span> <span data-ttu-id="5583d-232">Utilizzare il metodo <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> quando è possibile bloccare il thread corrente durante l'attesa dell'arrivo di un messaggio nella coda.</span><span class="sxs-lookup"><span data-stu-id="5583d-232">Use <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="5583d-233">Il thread è bloccato fino al `timeout` specificato.</span><span class="sxs-lookup"><span data-stu-id="5583d-233">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="5583d-234">Se si desidera che l'elaborazione dell'applicazione continui senza attendere, utilizzare il metodo asincrono <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="5583d-234">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5583d-235">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="5583d-235">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#21](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="5583d-236">Il <paramref name="timeout" /> specificato è stato superato prima del completamento dell'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-236">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5583d-237">Il timeout specificato è minore di zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5583d-237">The timeout specified is less than zero.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="5583d-238">L'operazione restituisce <see langword="false" /> se viene superato il <paramref name="timeout" /> specificato, non un'eccezione di timeout.</span>
            <span class="sxs-lookup">
              <span data-stu-id="5583d-238">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>