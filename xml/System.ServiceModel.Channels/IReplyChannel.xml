<Type Name="IReplyChannel" FullName="System.ServiceModel.Channels.IReplyChannel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="59a62b5af42b1a06346ccd412414096f0908aa4f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30506665" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IReplyChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReplyChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IReplyChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReplyChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IReplyChannel : System::ServiceModel::Channels::IChannel" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="89ea9-101">Definisce l'interfaccia che un canale deve implementare per essere sul lato ricevente di una comunicazione request/reply tra gli endpoint della messaggistica.</span>
      <span class="sxs-lookup">
        <span data-stu-id="89ea9-101">Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89ea9-102">L'interfaccia <xref:System.ServiceModel.Channels.IReplyChannel> include varianti sincrone e asincrone di un metodo <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> che restituiscono una classe <xref:System.ServiceModel.Channels.RequestContext> che può essere utilizzata per costruire risposte alle richieste ricevute.</span><span class="sxs-lookup"><span data-stu-id="89ea9-102">The <xref:System.ServiceModel.Channels.IReplyChannel> interface includes synchronous and asynchronous variants of a <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> method return an <xref:System.ServiceModel.Channels.RequestContext> that can be used to construct replies to received requests.</span></span>  
  
 <span data-ttu-id="89ea9-103">Il contratto include varianti sincrone e asincrone della funzionalità di ricezione, tentativo di ricezione e attesa di un messaggio.</span><span class="sxs-lookup"><span data-stu-id="89ea9-103">The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="89ea9-104">Un'interfaccia <xref:System.ServiceModel.Channels.IReplyChannel> non è associata necessariamente a un solo mittente.</span><span class="sxs-lookup"><span data-stu-id="89ea9-104">An <xref:System.ServiceModel.Channels.IReplyChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="89ea9-105">Altri canali e interfacce di canale forniscono la correlazione tra il mittente e il canale di risposta, ma il contratto di base non implica tale restrizione.</span><span class="sxs-lookup"><span data-stu-id="89ea9-105">Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction.</span></span>  
  
 <span data-ttu-id="89ea9-106">Il modello pull è utilizzato con un'interfaccia <xref:System.ServiceModel.Channels.IReplyChannel> per ricevere messaggi.</span><span class="sxs-lookup"><span data-stu-id="89ea9-106">The pull model is used with an <xref:System.ServiceModel.Channels.IReplyChannel> to receive messages.</span></span> <span data-ttu-id="89ea9-107">Questo modello è costituito dalla chiamata di <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (o una delle sue varianti) e dall'attesa dell'arrivo di un messaggio.</span><span class="sxs-lookup"><span data-stu-id="89ea9-107">This model consists of calling <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (or one of its variants) and then waiting for a message to arrive.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="89ea9-108">Inizia un'operazione asincrona per ricevere una richiesta disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-108">Begins an asynchronous operation to receive an available request.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="89ea9-109">Delegato <see cref="T:System.AsyncCallback" /> che riceve la notifica della ricezione asincrona riguardante il completamento di un'operazione di richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-109">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="89ea9-110">Oggetto, specificato dall'applicazione, che contiene le informazioni di stato associate alla ricezione asincrona di un’operazione di richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-110">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="89ea9-111">Inizia un'operazione asincrona per ricevere una richiesta disponibile con un timeout predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-111">Begins an asynchronous operation to receive an available request with a default timeout.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="89ea9-112">Interfaccia <see cref="T:System.IAsyncResult" /> che fa riferimento alla ricezione asincrona della richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-112">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89ea9-113">Il <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> metodo implementa il modello standard per richiamare <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> in modo asincrono.</span><span class="sxs-lookup"><span data-stu-id="89ea9-113">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> asynchronously.</span></span> <span data-ttu-id="89ea9-114">Il timeout predefinito è 1 minuto.</span><span class="sxs-lookup"><span data-stu-id="89ea9-114">The default timeout is 1 minute.</span></span> <span data-ttu-id="89ea9-115">Tale valore viene utilizzato se sull'associazione utilizzata per configurare la connessione è impostato un timeout di ricezione.</span><span class="sxs-lookup"><span data-stu-id="89ea9-115">If a receive timeout is set on the binding used to configure the connection, then that value is used.</span></span> <span data-ttu-id="89ea9-116">Utilizzare <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> se si desidera specificare un timeout esplicito con la chiamata che esegue l'override di questi altri valori.</span><span class="sxs-lookup"><span data-stu-id="89ea9-116">Use <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> if you want to specify an explicit timeout with the call that overrides these other values.</span></span>  
  
 <span data-ttu-id="89ea9-117">Se il messaggio di richiesta ricevuto è più grande rispetto alla dimensione massima del messaggio consentita dall'associazione in uso, viene generato <xref:System.ServiceModel.QuotaExceededException>.</span><span class="sxs-lookup"><span data-stu-id="89ea9-117">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="89ea9-118">La dimensione massima del messaggio viene impostata dalla proprietà <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="89ea9-118">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="89ea9-119">Il valore predefinito è 65536 byte.</span><span class="sxs-lookup"><span data-stu-id="89ea9-119">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="89ea9-120">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="89ea9-120">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="89ea9-121">
            <see cref="T:System.TimeSpan" /> indica il tempo di attesa necessario per la ricezione di una richiesta disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-121">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="89ea9-122">Delegato <see cref="T:System.AsyncCallback" /> che riceve la notifica della ricezione asincrona riguardante il completamento di un'operazione di richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-122">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="89ea9-123">Oggetto, specificato dall'applicazione, che contiene le informazioni di stato associate alla ricezione asincrona di un’operazione di richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-123">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="89ea9-124">Inizia un'operazione asincrona per ricevere una richiesta disponibile con un timeout specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-124">Begins an asynchronous operation to receive an available request with a specified timeout.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="89ea9-125">Interfaccia <see cref="T:System.IAsyncResult" /> che fa riferimento alla ricezione asincrona della richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-125">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89ea9-126">Il <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> metodo implementa il modello standard per richiamare <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> in modo asincrono.</span><span class="sxs-lookup"><span data-stu-id="89ea9-126">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> asynchronously.</span></span> <span data-ttu-id="89ea9-127">Il timeout impostato in questo metodo prevale sul timeout di ricezione impostato sull'associazione utilizzata per configurare la connessione.</span><span class="sxs-lookup"><span data-stu-id="89ea9-127">The timeout set on this method overrides a receive timeout set on the binding that is used to configure the connection.</span></span>  
  
 <span data-ttu-id="89ea9-128">Se il messaggio di richiesta ricevuto è più grande rispetto alla dimensione massima del messaggio consentita dall'associazione in uso, viene generato <xref:System.ServiceModel.QuotaExceededException>.</span><span class="sxs-lookup"><span data-stu-id="89ea9-128">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="89ea9-129">La dimensione massima del messaggio viene impostata dalla proprietà <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="89ea9-129">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="89ea9-130">Il valore predefinito è 65536 byte.</span><span class="sxs-lookup"><span data-stu-id="89ea9-130">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="89ea9-131">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="89ea9-131">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="89ea9-132">
            <see cref="T:System.TimeSpan" /> specifica il tempo entro il quale l'operazione di ricezione di una richiesta deve essere completata, prima di scadere e restituire <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-132">The <see cref="T:System.TimeSpan" /> that specifies how long the receive request operation has to complete before timing out and returning <see langword="false" />.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="89ea9-133">Delegato <see cref="T:System.AsyncCallback" /> che riceve la notifica della ricezione asincrona riguardante il completamento di un'operazione di richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-133">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="89ea9-134">Oggetto, specificato dall'applicazione, che contiene le informazioni di stato associate alla ricezione asincrona di un’operazione di richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-134">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="89ea9-135">Avvia un'operazione di ricezione asincrona per ricevere un messaggio di richiesta con un timeout e un oggetto di stato associato specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-135">Begins an asynchronous operation to receive a request message that has a specified time out and state object associated with it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="89ea9-136">Interfaccia <see cref="T:System.IAsyncResult" /> che fa riferimento all'operazione asincrona di richiesta di ricezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-136">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive request operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89ea9-137">Se si desidera che l'elaborazione dell'applicazione continui senza attendere, utilizzare il metodo asincrono <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="89ea9-137">Use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you need the application processing to continue without waiting.</span></span> <span data-ttu-id="89ea9-138">Nei casi in cui è ammissibile che il thread corrente resti bloccato mentre risponde al messaggio di richiesta o fino al termine dell'intervallo di tempo indicato, utilizzare uno dei metodi sincroni <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29></span><span class="sxs-lookup"><span data-stu-id="89ea9-138">Use one of the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="89ea9-139">Questo metodo riceve mediante un callback la notifica dell'identità del gestore eventi relativa all'operazione.</span><span class="sxs-lookup"><span data-stu-id="89ea9-139">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="89ea9-140">L'operazione non è completa fino a quando un messaggio non viene reso disponibile nel canale o non si verifica il timeout.</span><span class="sxs-lookup"><span data-stu-id="89ea9-140">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="89ea9-141">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="89ea9-141">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="89ea9-142">L'operazione restituisce <see langword="false" /> se viene superato il <paramref name="timeout" /> specificato.</span>
            <span class="sxs-lookup">
              <span data-stu-id="89ea9-142">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="89ea9-143">
            <see cref="T:System.TimeSpan" /> indica il tempo di attesa necessario per la ricezione di una richiesta disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-143">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="89ea9-144">Delegato <see cref="T:System.AsyncCallback" /> che riceve la notifica della ricezione asincrona riguardante il completamento di un'operazione di richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-144">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="89ea9-145">Oggetto, specificato dall'applicazione, che contiene le informazioni di stato associate alla ricezione asincrona di un’operazione di richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-145">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="89ea9-146">Avvia un'operazione di richiesta asincrona con un timeout e un oggetto di stato associato specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-146">Begins an asynchronous request operation that has a specified time out and state object associated with it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="89ea9-147">Interfaccia <see cref="T:System.IAsyncResult" /> che fa riferimento all'operazione asincrona per attendere l'arrivo di un messaggio di richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-147">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a request message to arrive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89ea9-148">Utilizzare un metodo asincrono <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> quando è possibile bloccare il thread corrente durante l'attesa dell'arrivo di un messaggio di richiesta nella coda.</span><span class="sxs-lookup"><span data-stu-id="89ea9-148">Use the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="89ea9-149">Il thread è bloccato fino al `timeout` specificato.</span><span class="sxs-lookup"><span data-stu-id="89ea9-149">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="89ea9-150">Questo metodo riceve mediante un callback la notifica dell'identità del gestore eventi relativa all'operazione.</span><span class="sxs-lookup"><span data-stu-id="89ea9-150">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="89ea9-151">L'operazione non è completa fino a quando un messaggio di richiesta non viene reso disponibile nel canale o non si verifica il timeout.</span><span class="sxs-lookup"><span data-stu-id="89ea9-151">The operation is not complete until either a request message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="89ea9-152">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="89ea9-152">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#10](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#10)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="89ea9-153">L'operazione restituisce <see langword="false" /> se viene superato il <paramref name="timeout" /> specificato.</span>
            <span class="sxs-lookup">
              <span data-stu-id="89ea9-153">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext EndReceiveRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext EndReceiveRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveRequest (result As IAsyncResult) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ EndReceiveRequest(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="89ea9-154">Interfaccia <see cref="T:System.IAsyncResult" /> restituita da una chiamata al metodo <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-154">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="89ea9-155">Completa un'operazione asincrona per ricevere una richiesta disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-155">Completes an asynchronous operation to receive an available request.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="89ea9-156">Classe <see cref="T:System.ServiceModel.Channels.RequestContext" /> utilizzata per creare una risposta alla richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-156">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct a reply to the request.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89ea9-157">Se il messaggio di richiesta ricevuto è più grande rispetto alla dimensione massima del messaggio consentita dall'associazione in uso, viene generato <xref:System.ServiceModel.QuotaExceededException>.</span><span class="sxs-lookup"><span data-stu-id="89ea9-157">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="89ea9-158">La dimensione massima del messaggio viene impostata dalla proprietà <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="89ea9-158">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="89ea9-159">Il valore predefinito è 65536 byte.</span><span class="sxs-lookup"><span data-stu-id="89ea9-159">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="89ea9-160">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="89ea9-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="89ea9-161">L'operazione deve generare un'eccezione <see cref="T:System.TimeoutException" /> se il parametro <paramref name="timeout" /> specificato viene superato prima del completamento dell'operazione.</span>
            <span class="sxs-lookup">
              <span data-stu-id="89ea9-161">The operation should throw a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before the operation is completed.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool EndTryReceiveRequest (IAsyncResult result, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceiveRequest(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceiveRequest (result As IAsyncResult, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceiveRequest(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="89ea9-162">Interfaccia <see cref="T:System.IAsyncResult" /> restituita da una chiamata al metodo <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-162">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="89ea9-163">
            <see cref="T:System.ServiceModel.Channels.RequestContext" /> ricevuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-163">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="89ea9-164">Completa l'operazione asincrona specificata per ricevere un messaggio di richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-164">Completes the specified asynchronous operation to receive a request message.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="89ea9-165">
            <see langword="true" /> se viene ricevuto un messaggio di richiesta prima della scadenza dell'intervallo di tempo specificato; in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-165">
              <see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="89ea9-166">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="89ea9-166">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForRequest">
      <MemberSignature Language="C#" Value="public bool EndWaitForRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForRequest (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForRequest(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="89ea9-167">Interfaccia <see cref="T:System.IAsyncResult" /> che identifica l'operazione <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> da completare e da cui recuperare un risultato finale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-167">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="89ea9-168">Completa l'operazione asincrona specificata di attesa di un messaggio di richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-168">Completes the specified asynchronous wait-for-a-request message operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="89ea9-169">
            <see langword="true" /> se viene ricevuta una richiesta prima della scadenza dell'intervallo di tempo specificato; in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-169">
              <see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="89ea9-170">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="89ea9-170">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#11](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IReplyChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="89ea9-171">Ottiene l'indirizzo sul quale questo canale di risposta riceve messaggi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-171">Gets the address on which this reply channel receives messages.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="89ea9-172">L'indirizzo <see cref="T:System.ServiceModel.EndpointAddress" /> al quale il canale di risposta riceve i messaggi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-172">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which this reply channel receives messages.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="89ea9-173">Nell'esempio di codice seguente viene illustrato come implementare questa proprietà:</span><span class="sxs-lookup"><span data-stu-id="89ea9-173">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="89ea9-174">Se disponibile, restituisce un contesto della richiesta ricevuta</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-174">Returns the context of the request received, if one is available</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest () As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="89ea9-175">Se disponibile, restituisce un contesto della richiesta ricevuta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-175">Returns the context of the request received, if one is available.</span>
          </span>
          <span data-ttu-id="89ea9-176">Se non è disponibile, attendere fino a che un contesto non è disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-176">If a context is not available, waits until there is one available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="89ea9-177">
            <see cref="T:System.ServiceModel.Channels.RequestContext" /> utilizzato per costruire risposte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-177">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89ea9-178"><xref:System.ServiceModel.Channels.RequestContext> incapsula il messaggio di richiesta e un meccanismo per la risposta al messaggio.</span><span class="sxs-lookup"><span data-stu-id="89ea9-178"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="89ea9-179"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> può essere chiamato più volte o contemporaneamente.</span><span class="sxs-lookup"><span data-stu-id="89ea9-179"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="89ea9-180">Viene completata solo una chiamata <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> per ogni richiesta ricevuta.</span><span class="sxs-lookup"><span data-stu-id="89ea9-180">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="89ea9-181">Se il messaggio di richiesta ricevuto è più grande rispetto alla dimensione massima del messaggio consentita dall'associazione in uso, viene generato <xref:System.ServiceModel.QuotaExceededException>.</span><span class="sxs-lookup"><span data-stu-id="89ea9-181">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="89ea9-182">La dimensione massima del messaggio viene impostata dalla proprietà <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="89ea9-182">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="89ea9-183">Il valore predefinito è 65536 byte.</span><span class="sxs-lookup"><span data-stu-id="89ea9-183">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="89ea9-184">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="89ea9-184">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#7](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest (timeout As TimeSpan) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="89ea9-185">
            <see cref="T:System.TimeSpan" /> specifica il tempo entro il quale l'operazione di ricezione di una richiesta deve essere completata, prima di scadere e restituire <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-185">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="89ea9-186">Se disponibile, restituisce un contesto della richiesta ricevuta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-186">Returns the context of the request received, if one is available.</span>
          </span>
          <span data-ttu-id="89ea9-187">Se non è disponibile, attendere fino a che un contesto non è disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-187">If a context is not available, waits until there is one available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="89ea9-188">
            <see cref="T:System.ServiceModel.Channels.RequestContext" /> utilizzato per costruire risposte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-188">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89ea9-189"><xref:System.ServiceModel.Channels.RequestContext> incapsula il messaggio di richiesta e un meccanismo per la risposta al messaggio.</span><span class="sxs-lookup"><span data-stu-id="89ea9-189"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="89ea9-190"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> può essere chiamato più volte o contemporaneamente.</span><span class="sxs-lookup"><span data-stu-id="89ea9-190"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="89ea9-191">Viene completata solo una chiamata <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> per ogni richiesta ricevuta.</span><span class="sxs-lookup"><span data-stu-id="89ea9-191">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="89ea9-192">Se il messaggio di richiesta ricevuto è più grande rispetto alla dimensione massima del messaggio consentita dall'associazione in uso, viene generato <xref:System.ServiceModel.QuotaExceededException>.</span><span class="sxs-lookup"><span data-stu-id="89ea9-192">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="89ea9-193">La dimensione massima del messaggio viene impostata dalla proprietà <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="89ea9-193">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="89ea9-194">Il valore predefinito è 65536 byte.</span><span class="sxs-lookup"><span data-stu-id="89ea9-194">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="89ea9-195">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="89ea9-195">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#8](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool TryReceiveRequest (TimeSpan timeout, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceiveRequest(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceiveRequest (timeout As TimeSpan, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceiveRequest(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="89ea9-196">
            <see cref="T:System.TimeSpan" /> specifica il tempo entro il quale l'operazione di ricezione di una richiesta deve essere completata, prima di scadere e restituire <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-196">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="89ea9-197">
            <see cref="T:System.ServiceModel.Channels.RequestContext" /> ricevuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-197">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="89ea9-198">Restituisce un valore che indica se una richiesta viene ricevuta prima della scadenza dell'intervallo di tempo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-198">Returns a value that indicates whether a request is received before a specified interval of time elapses.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="89ea9-199">
            <see langword="true" /> se viene ricevuto un messaggio di richiesta prima della scadenza dell'intervallo di tempo specificato; in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-199">
              <see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89ea9-200">Utilizzare un metodo <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> quando è possibile bloccare il thread corrente durante l'attesa dell'arrivo di un messaggio di richiesta nella coda.</span><span class="sxs-lookup"><span data-stu-id="89ea9-200">Use <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="89ea9-201">Il thread è bloccato fino al `timeout` specificato.</span><span class="sxs-lookup"><span data-stu-id="89ea9-201">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="89ea9-202">Se si desidera che l'elaborazione dell'applicazione continui senza attendere, utilizzare il metodo asincrono <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="89ea9-202">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="89ea9-203">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="89ea9-203">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="89ea9-204">L'operazione restituisce <see langword="false" /> se viene superato il <paramref name="timeout" /> specificato.</span>
            <span class="sxs-lookup">
              <span data-stu-id="89ea9-204">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="WaitForRequest">
      <MemberSignature Language="C#" Value="public bool WaitForRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForRequest (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForRequest(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="89ea9-205">
            <see cref="T:System.TimeSpan" /> specifica il tempo entro il quale un'operazione di richiesta deve essere completata, prima di scadere e restituire <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-205">The <see cref="T:System.TimeSpan" /> that specifies how long a request operation has to complete before timing out and returning <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="89ea9-206">Restituisce un valore che indica se un messaggio di richiesta viene ricevuto prima della scadenza dell'intervallo di tempo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-206">Returns a value that indicates whether a request message is received before a specified interval of time elapses.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="89ea9-207">
            <see langword="true" /> se viene ricevuta una richiesta prima della scadenza dell'intervallo di tempo specificato; in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="89ea9-207">
              <see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89ea9-208">La chiamata a <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> non genera un messaggio di richiesta ricevuto o elaborato in qualsiasi modalità.</span><span class="sxs-lookup"><span data-stu-id="89ea9-208">Calling <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> does not result in a request message being received or processed in any way.</span></span>  
  
 <span data-ttu-id="89ea9-209">Il metodo <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> esiste principalmente per gli scenari di transazione in cui l'utente desidera ricevere il messaggio utilizzando una transazione.</span><span class="sxs-lookup"><span data-stu-id="89ea9-209">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="89ea9-210">In caso del semplice utilizzo di <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>, l'utente deve creare la transazione e quindi chiamare <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> e sperare che il messaggio arrivi prima del timeout della transazione, il che potrebbe non avvenire.</span><span class="sxs-lookup"><span data-stu-id="89ea9-210">When using just <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> normally for this, the user must create the transaction, and then call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="89ea9-211">In alternativa, l'utente può chiamare <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> e specificare il timeout (anche infinito), quindi all'arrivo di un messaggio, può aprire la transazione, chiamare <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> e avere la certezza di riavere il messaggio prima che la transazione scada.</span><span class="sxs-lookup"><span data-stu-id="89ea9-211">Instead, the user can call <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> and specify the time out (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="89ea9-212">Utilizzare il metodo <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> quando è possibile bloccare il thread corrente durante l'attesa dell'arrivo di un messaggio nella coda.</span><span class="sxs-lookup"><span data-stu-id="89ea9-212">Use <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="89ea9-213">Il thread è bloccato fino al `timeout` specificato.</span><span class="sxs-lookup"><span data-stu-id="89ea9-213">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="89ea9-214">Se si desidera che l'elaborazione dell'applicazione continui senza attendere, utilizzare il metodo asincrono <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="89ea9-214">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="89ea9-215">Nell'esempio di codice seguente viene illustrato come implementare questo metodo:</span><span class="sxs-lookup"><span data-stu-id="89ea9-215">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#9](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="89ea9-216">L'operazione restituisce <see langword="false" /> se viene superato il <paramref name="timeout" /> specificato.</span>
            <span class="sxs-lookup">
              <span data-stu-id="89ea9-216">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>