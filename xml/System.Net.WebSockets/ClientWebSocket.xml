<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ClientWebSocket.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53fc95a132d4979a36e9969027ba45b2b304b7e93.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3fc95a132d4979a36e9969027ba45b2b304b7e93</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.WebSockets.ClientWebSocket">
          <source>Provides a client for connecting to WebSocket services.</source>
          <target state="translated">Fornisce un client per la connessione a servizi WebSocket.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.WebSockets.ClientWebSocket">
          <source>Some of the classes and class elements in the <ph id="ph1">&lt;xref:System.Net.WebSockets&gt;</ph> namespace are supported on Windows 7, Windows Vista SP2, and Windows Server 2008.</source>
          <target state="translated">Alcune classi e gli elementi di classe nel <ph id="ph1">&lt;xref:System.Net.WebSockets&gt;</ph> dello spazio dei nomi sono supportati in Windows 7, Windows Vista SP2 e Windows Server 2008.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.WebSockets.ClientWebSocket">
          <source>However, the only public implementations of client and server WebSockets are supported on Windows 8 and Windows Server 2012.</source>
          <target state="translated">Tuttavia, le implementazioni di client e server WebSocket solo pubbliche sono supportate in Windows 8 e Windows Server 2012.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.WebSockets.ClientWebSocket">
          <source>The class elements in the <ph id="ph1">&lt;xref:System.Net.WebSockets&gt;</ph> namespace that are supported on Windows 7, Windows Vista SP2, and Windows Server 2008 are abstract class elements.</source>
          <target state="translated">Gli elementi della classe nel <ph id="ph1">&lt;xref:System.Net.WebSockets&gt;</ph> dello spazio dei nomi che sono supportate in Windows 7, Windows Vista SP2 e Windows Server 2008 sono astratte gli elementi della classe.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.WebSockets.ClientWebSocket">
          <source>This allows an application developer to inherit and extend these abstract class classes and class elements with an actual implementation of client WebSockets.</source>
          <target state="translated">In questo modo uno sviluppatore di applicazioni ereditare ed estendere le classi di classe astratta e gli elementi di classe con un'implementazione effettiva del client WebSocket.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.#ctor">
          <source>Creates an instance of the <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> class.</source>
          <target state="translated">Crea un'istanza della classe <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.Abort">
          <source>Aborts the connection and cancels any pending IO operations.</source>
          <target state="translated">Interrompe la connessione e annulla le operazioni di I/O in sospeso.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.Abort">
          <source>The <ph id="ph1">`ClientWebSocket`</ph> cannot be reused once once it is aborted.</source>
          <target state="translated">Il <ph id="ph1">`ClientWebSocket`</ph> non possono essere riutilizzati una volta una volta che viene interrotto.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>The WebSocket close status.</source>
          <target state="translated">Stato di chiusura di WebSocket.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>A description of the close status.</source>
          <target state="translated">Descrizione dello stato di chiusura.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>A cancellation token used to propagate notification that this  operation should be canceled.</source>
          <target state="translated">Token di annullamento usato per propagare la notifica che indica che l'operazione deve essere annullata.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>Close the <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> instance as an asynchronous operation.</source>
          <target state="translated">Chiude l'istanza di <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> come operazione asincrona.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Oggetto dell'attività che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>This operation will not block.</source>
          <target state="translated">Questa operazione non verrà bloccata.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after the <ph id="ph2">&lt;xref:System.Net.WebSockets.ClientWebSocket&gt;</ph> instance is closed.</source>
          <target state="translated">L'oggetto restituito <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> oggetto verrà completata dopo il <ph id="ph2">&lt;xref:System.Net.WebSockets.ClientWebSocket&gt;</ph> istanza è chiusa.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>The WebSocket close status.</source>
          <target state="translated">Stato di chiusura di WebSocket.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>A description of the close status.</source>
          <target state="translated">Descrizione dello stato di chiusura.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>A cancellation token used to propagate notification that this  operation should be canceled.</source>
          <target state="translated">Token di annullamento usato per propagare la notifica che indica che l'operazione deve essere annullata.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>Close the output for the <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> instance as an asynchronous operation.</source>
          <target state="translated">Chiude l'output per l'istanza di <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> come operazione asincrona.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Oggetto dell'attività che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>This operation will not block.</source>
          <target state="translated">Questa operazione non verrà bloccata.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after the output on the <ph id="ph2">&lt;xref:System.Net.WebSockets.ClientWebSocket&gt;</ph> instance is closed.</source>
          <target state="translated">L'oggetto restituito <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> oggetto verrà completata dopo l'output nel <ph id="ph2">&lt;xref:System.Net.WebSockets.ClientWebSocket&gt;</ph> istanza è chiusa.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Net.WebSockets.ClientWebSocket.CloseStatus">
          <source>Gets the reason why the close handshake was initiated on <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> instance.</source>
          <target state="translated">Ottiene il motivo per cui è stato iniziato l'handshake di chiusura nell'istanza <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.WebSockets.ClientWebSocket.CloseStatus">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.WebSocketCloseStatus" /&gt;</ph>.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.WebSocketCloseStatus" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.WebSockets.ClientWebSocket.CloseStatus">
          <source>The reason why the close handshake was initiated.</source>
          <target state="translated">Motivo per cui è stato iniziato l'handshake di chiusura.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Net.WebSockets.ClientWebSocket.CloseStatusDescription">
          <source>Gets a description of the reason why the <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> instance was closed.</source>
          <target state="translated">Ottiene una descrizione del motivo per cui l'istanza <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> è stata chiusa.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.WebSockets.ClientWebSocket.CloseStatusDescription">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.WebSockets.ClientWebSocket.CloseStatusDescription">
          <source>The description of the reason why the <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> instance was closed.</source>
          <target state="translated">Descrizione del motivo per cui l'istanza <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> è stata chiusa.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
          <source>The URI of the WebSocket server to connect to.</source>
          <target state="translated">URI del server WebSocket con cui stabilire la connessione.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
          <source>A cancellation token used to propagate notification that the  operation should be canceled.</source>
          <target state="translated">Token di annullamento usato per propagare la notifica che l'operazione deve essere annullata.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
          <source>Connect to a WebSocket server as an asynchronous operation.</source>
          <target state="translated">Stabilisce una connessione a un server WebSocket come operazione asincrona.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Oggetto dell'attività che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebSockets.ClientWebSocket.ConnectAsync%2A&gt;</ph> method initiates the WebSocket handshake with a remote network destination, and then negotiates the sub-protocol.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.WebSockets.ClientWebSocket.ConnectAsync%2A&gt;</ph> metodo avvia l'handshake di WebSocket con una destinazione di rete remoto e quindi esegue la negoziazione del protocollo secondario.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
          <source>For plain WebSocket connections, use the <ph id="ph1">`ws://`</ph> scheme in the uri.</source>
          <target state="translated">Per le connessioni WebSocket normale, usare il <ph id="ph1">`ws://`</ph> schema nell'uri.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
          <source>For secure WebSocket connections over TLS/SSL, use the <ph id="ph1">`wss://`</ph> scheme.</source>
          <target state="translated">Per le connessioni WebSocket protette tramite TLS/SSL, utilizzare il <ph id="ph1">`wss://`</ph> schema.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
          <source>This operation will not block.</source>
          <target state="translated">Questa operazione non verrà bloccata.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after the connect request on the <ph id="ph2">&lt;xref:System.Net.WebSockets.ClientWebSocket&gt;</ph> instance has completed.</source>
          <target state="translated">L'oggetto restituito <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> oggetto verrà completata dopo la richiesta di connessione sul <ph id="ph2">&lt;xref:System.Net.WebSockets.ClientWebSocket&gt;</ph> istanza è stata completata.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.Dispose">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> instance.</source>
          <target state="translated">Rilascia le risorse non gestite usate dall'istanza di <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="P:System.Net.WebSockets.ClientWebSocket.Options">
          <source>Gets the WebSocket options for the <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> instance.</source>
          <target state="translated">Ottiene le opzioni WebSocket per l'istanza di <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.WebSockets.ClientWebSocket.Options">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocketOptions" /&gt;</ph>.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocketOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.WebSockets.ClientWebSocket.Options">
          <source>The WebSocket options for the <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> instance.</source>
          <target state="translated">Opzioni WebSocket per l'istanza di <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
          <source>The buffer to receive the response.</source>
          <target state="translated">Buffer per la ricezione della risposta.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
          <source>A cancellation token used to propagate notification that this  operation should be canceled.</source>
          <target state="translated">Token di annullamento usato per propagare la notifica che indica che l'operazione deve essere annullata.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
          <source>Receive data on <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> as an asynchronous operation.</source>
          <target state="translated">Ricevere i dati <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> come operazione asincrona.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Oggetto dell'attività che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
          <source>This operation will not block.</source>
          <target state="translated">Questa operazione non verrà bloccata.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the receive request on the <ph id="ph2">&lt;xref:System.Net.WebSockets.ClientWebSocket&gt;</ph> instance has completed.</source>
          <target state="translated">L'oggetto restituito <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> oggetto verrà completata dopo la richiesta di ricezione sul <ph id="ph2">&lt;xref:System.Net.WebSockets.ClientWebSocket&gt;</ph> istanza è stata completata.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
          <source>Exactly one send and one receive is supported on each <ph id="ph1">&lt;xref:System.Net.WebSockets.ClientWebSocket&gt;</ph> object in parallel.</source>
          <target state="translated">Uno Invia e uno di ricezione è supportato in ogni <ph id="ph1">&lt;xref:System.Net.WebSockets.ClientWebSocket&gt;</ph> oggetto in parallelo.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
          <source>The buffer containing the message to be sent.</source>
          <target state="translated">Buffer contenente il messaggio da inviare.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
          <source>Specifies whether the buffer is clear text or in a binary format.</source>
          <target state="translated">Specifica se il buffer è in testo non crittografato o in un formato binario.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
          <source>Specifies whether this is the final asynchronous send.</source>
          <target state="translated">Specifica se l'invio corrente è l'invio asincrono finale.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
          <source>Set to <ph id="ph1">&lt;see langword="true" /&gt;</ph> if this is the final send; <ph id="ph2">&lt;see langword="false" /&gt;</ph> otherwise.</source>
          <target state="translated">Impostare su <ph id="ph1">&lt;see langword="true" /&gt;</ph> nel caso di invio finale. In caso contrario, impostare su <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
          <source>A cancellation token used to propagate notification that this  operation should be canceled.</source>
          <target state="translated">Token di annullamento usato per propagare la notifica che indica che l'operazione deve essere annullata.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
          <source>Send data on <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> as an asynchronous operation.</source>
          <target state="translated">Inviare i dati <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> come operazione asincrona.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Oggetto dell'attività che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
          <source>This operation will not block.</source>
          <target state="translated">Questa operazione non verrà bloccata.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after the send request on the <ph id="ph2">&lt;xref:System.Net.WebSockets.ClientWebSocket&gt;</ph> instance has completed.</source>
          <target state="translated">L'oggetto restituito <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> oggetto verrà completata dopo la richiesta di invio sul <ph id="ph2">&lt;xref:System.Net.WebSockets.ClientWebSocket&gt;</ph> istanza è stata completata.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
          <source>Exactly one send and one receive is supported on each <ph id="ph1">&lt;xref:System.Net.WebSockets.ClientWebSocket&gt;</ph> object in parallel.</source>
          <target state="translated">Uno Invia e uno di ricezione è supportato in ogni <ph id="ph1">&lt;xref:System.Net.WebSockets.ClientWebSocket&gt;</ph> oggetto in parallelo.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Net.WebSockets.ClientWebSocket.State">
          <source>Get the WebSocket state of the <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> instance.</source>
          <target state="translated">Ottiene lo stato WebSocket dell'istanza di <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.WebSockets.ClientWebSocket.State">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.WebSocketState" /&gt;</ph>.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.WebSocketState" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.WebSockets.ClientWebSocket.State">
          <source>The WebSocket state of the <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> instance.</source>
          <target state="translated">Stato WebSocket dell'istanza di <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.Net.WebSockets.ClientWebSocket.SubProtocol">
          <source>Gets the supported WebSocket sub-protocol for the <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph> instance.</source>
          <target state="translated">Ottiene il protocollo secondario WebSocket supportato per l'istanza <ph id="ph1">&lt;see cref="T:System.Net.WebSockets.ClientWebSocket" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.WebSockets.ClientWebSocket.SubProtocol">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.WebSockets.ClientWebSocket.SubProtocol">
          <source>The supported WebSocket sub-protocol.</source>
          <target state="translated">Protocollo secondario WebSocket supportato.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>