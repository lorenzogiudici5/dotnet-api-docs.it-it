<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EncoderExceptionFallback.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5defbde3ce59a9e553fd10f370ac200349a8fbddb.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">defbde3ce59a9e553fd10f370ac200349a8fbddb</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Text.EncoderExceptionFallback">
          <source>Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence.</source>
          <target state="translated">Fornisce un meccanismo di gestione degli errori, denominato fallback, per un carattere di input che non può essere convertito in una sequenza di byte di output.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Text.EncoderExceptionFallback">
          <source>The fallback throws an exception if an input character cannot be converted to an output byte sequence.</source>
          <target state="translated">Il fallback genera un'eccezione se non è possibile convertire un carattere di input in una sequenza di byte di output.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Text.EncoderExceptionFallback">
          <source>This class cannot be inherited.</source>
          <target state="translated">Questa classe non può essere ereditata.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>An encoding maps a Unicode character to an encoded sequence of bytes, which can subsequently be transferred to a physical medium, such as a disk, or over a communications link.</source>
          <target state="translated">Una codifica, un carattere Unicode viene mappato a una sequenza di byte, che successivamente può essere trasferita a un supporto fisico, ad esempio un disco o su un collegamento di comunicazione codificata.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>Characters can be mapped in various ways, and a particular encoding is represented by a type derived from the <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> class.</source>
          <target state="translated">Caratteri possono essere mappati in vari modi e una particolare codifica è rappresentata da un tipo derivato dalla <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>Specifically, the encoding type's <ph id="ph1">`GetBytes`</ph> method encodes a character to a byte sequence, and the <ph id="ph2">`GetChars`</ph> method decodes a byte sequence to a character.</source>
          <target state="translated">In particolare, il tipo di codifica <ph id="ph1">`GetBytes`</ph> metodo consente di codificare un carattere in una sequenza di byte e <ph id="ph2">`GetChars`</ph> metodo decodifica una sequenza di byte in un carattere.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>An encoding operation can fail if the input character cannot be represented by the encoding.</source>
          <target state="translated">Un'operazione di codifica può non riuscire se il carattere di input non può essere rappresentato dalla codifica.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>For example, a <ph id="ph1">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> object cannot encode a character that yields a Unicode code point value that is outside the range U+0000 to U+007F.</source>
          <target state="translated">Ad esempio, un <ph id="ph1">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> oggetto non può codificare un carattere che restituisce un valore di punto di codice Unicode non compreso nell'intervallo tra U + 0000 a U + 007F.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>In cases where an encoding or decoding conversion cannot be performed, the .NET Framework provides a failure-handling mechanism called a fallback.</source>
          <target state="translated">Nei casi in cui è Impossibile eseguire una conversione di codifica o decodifica, .NET Framework fornisce un meccanismo di gestione degli errori, denominato fallback.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>Your application can use the predefined .NET Framework encoder fallback, or it can create a custom encoder fallback derived from the <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> classes.</source>
          <target state="translated">L'applicazione può utilizzare il fallback del codificatore di .NET Framework predefinito oppure è possibile creare un fallback del codificatore personalizzato derivato dal <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> classi.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>The .NET Framework provides two predefined classes that implement different fallback strategies for handling encoding conversion failures.</source>
          <target state="translated">.NET Framework fornisce due classi predefinite che implementano strategie di fallback diverse per la gestione degli errori di conversione codifica.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderReplacementFallback&gt;</ph> class substitutes a string provided for any input character that cannot be converted.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Text.EncoderReplacementFallback&gt;</ph> classe sostituisce con una stringa fornita per qualsiasi carattere di input che non può essere convertito.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>The substitute string is encoded in place of the invalid character, and then the encoding operation continues converting the remainder of the input.</source>
          <target state="translated">La stringa di sostituzione viene codificata al posto del carattere non valido e quindi l'operazione di codifica continua la conversione del resto dell'input.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> class throws a <ph id="ph2">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> when an invalid character is encountered.</source>
          <target state="translated">Al contrario, il <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> classe genera un <ph id="ph2">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> quando viene rilevato un carattere non valido.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>The following code example demonstrates the <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> classes.</source>
          <target state="translated">L'esempio di codice seguente illustra il <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> classi.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer">
          <source>Returns an encoder fallback buffer that throws an exception if it cannot convert a character sequence to a byte sequence.</source>
          <target state="translated">Restituisce un buffer di fallback del codificatore che genera un'eccezione se non può convertire una sequenza di caratteri in una sequenza di byte.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer">
          <source>An encoder fallback buffer that throws an exception when it cannot encode a character sequence.</source>
          <target state="translated">Buffer di fallback del codificatore che genera un'eccezione se non può codificare una sequenza di caratteri.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer">
          <source>An encoder fallback buffer is responsible for receiving and handling characters that an encoder cannot convert to a byte sequence.</source>
          <target state="translated">Un buffer di fallback del codificatore è responsabile per la ricezione e la gestione di caratteri che non è possibile convertire un codificatore in una sequenza di byte.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer">
          <source>This method returns an instance of the <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt;</ph> class, which is a subclass of  the <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> class.</source>
          <target state="translated">Questo metodo restituisce un'istanza di <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt;</ph> (classe), che è una sottoclasse del <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer">
          <source>An <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt;</ph> object throws an <ph id="ph2">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> exception whenever characters are passed to its <ph id="ph3">&lt;xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt;</ph> oggetto genera un <ph id="ph2">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> eccezione ogni volta che i caratteri vengono passati ai relativi <ph id="ph3">&lt;xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.Equals(System.Object)">
          <source>An object that derives from the <ph id="ph1">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> class.</source>
          <target state="translated">Oggetto derivato dalla classe <ph id="ph1">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.Equals(System.Object)">
          <source>Indicates whether the current <ph id="ph1">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> object and a specified object are equal.</source>
          <target state="translated">Indica se l'oggetto <ph id="ph1">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> corrente e un oggetto specificato sono uguali.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not <ph id="ph3">&lt;see langword="null" /&gt;</ph> (<ph id="ph4">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic .NET) and is a <ph id="ph5">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> object; otherwise, <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="value" /&gt;</ph> non è <ph id="ph3">&lt;see langword="null" /&gt;</ph> (<ph id="ph4">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic .NET) ed è un oggetto <ph id="ph5">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>; in caso contrario <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.GetHashCode">
          <source>Retrieves the hash code for this instance.</source>
          <target state="translated">Recupera il codice hash per questa istanza.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.GetHashCode">
          <source>The return value is always the same arbitrary value, and has no special significance.</source>
          <target state="translated">Il valore restituito è sempre lo stesso valore arbitrario, senza alcun significato speciale.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderExceptionFallback.GetHashCode">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback.GetHashCode%2A&gt;</ph> method always returns the same value, the application should not use this value to distinguish one instance of the <ph id="ph2">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> class from another.</source>
          <target state="translated">Poiché il <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback.GetHashCode%2A&gt;</ph> metodo restituisce sempre lo stesso valore, l'applicazione non deve utilizzare questo valore per distinguere un'istanza di <ph id="ph2">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> classe da un altro.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Text.EncoderExceptionFallback.MaxCharCount">
          <source>Gets the maximum number of characters this instance can return.</source>
          <target state="translated">Ottiene il numero massimo di caratteri che può essere restituito da questa istanza.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.EncoderExceptionFallback.MaxCharCount">
          <source>The return value is always zero.</source>
          <target state="translated">Il valore restituito è sempre zero.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>