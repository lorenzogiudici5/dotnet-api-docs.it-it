<Type Name="EncodingProvider" FullName="System.Text.EncodingProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3dd8164857fc0ee882ea5619b0174b55570de658" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407724" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EncodingProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncodingProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncodingProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncodingProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncodingProvider abstract" />
  <TypeSignature Language="F#" Value="type EncodingProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornisce la classe base per un provider di codifica, che fornisce le codifiche non disponibili in una particolare piattaforma.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un provider di codifica fornisce le codifiche che non sono altrimenti disponibili su una piattaforma di destinazione specifico.  
  
 .NET Framework sul desktop di Windows supporta un numero elevato di caratteri codifiche e tabelle codici. È possibile ottenere un elenco completo delle codifiche disponibili in .NET Framework sul desktop di Windows tramite una chiamata di <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType> metodo. .NET core, invece, per impostazione predefinita supporta solo le codifiche seguenti:  
  
-   ASCII (tabella codici 20127), che viene restituito dal <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType> proprietà.  
  
-   ISO-8859-1 (tabella codici 28591).  
  
-   UTF-7 (tabella codici 65000), che viene restituito dal <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType> proprietà.  
  
-   UTF-8 (tabella codici 65001), che viene restituito dal <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> proprietà.  
  
-   UTF-16 e UTF-16LE (tabella codici 1200), che viene restituito dal <xref:System.Text.Encoding.Unicode%2A> proprietà.  
  
-   UTF-16BE (tabella codici 1201), che viene creata un'istanza chiamando il <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> oppure <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> costruttore con un `bigEndian` valore `true`.  
  
-   UTF-32 e UTF-32LE (tabella codici 12000), che viene restituito dal <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> proprietà.  
  
-   UTF-32BE (tabella codici 12001), che viene creata un'istanza chiamando un <xref:System.Text.UTF32Encoding> costruttore con un `bigEndian` parametro e fornendo un valore di `true` nella chiamata al metodo.  
  
 A partire da .NET Framework 4.6, <xref:System.Text.EncodingProvider> è la classe base che in caso contrario rende disponibile le codifiche disponibili in .NET Framework. Questa operazione comporta i passaggi seguenti:  
  
1.  Definire una sottoclasse <xref:System.Text.EncodingProvider> che esegue l'override astratta due <xref:System.Text.EncodingProvider.GetEncoding%2A> overload <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> e <xref:System.Text.EncodingProvider.GetEncoding%28System.String%29>. Questi overload restituiscono che altrimenti non supportato dall'identificatore della tabella codici e al nome di codifica. Si noti che è anche possibile scegliere di restituire una codifica predefinita se il <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> metodo viene chiamato con l'argomento 0.  
  
2.  Facoltativamente, è possibile eseguire l'override virtual <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> e <xref:System.Text.EncodingProvider.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> metodi. Nella maggior parte dei casi, ciò non è necessario, poiché la classe di base fornisce un'implementazione predefinita.  
  
3.  Passare il <xref:System.Text.EncodingProvider> dell'istanza per il <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> metodo per rendere le codifiche fornite dal <xref:System.Text.EncodingProvider> oggetto disponibile per common language runtime.  
  
4.  Chiamare un <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> overload per recuperare la codifica. Il <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> metodo chiama il metodo corrispondente <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> per determinare se può fornire codifica richiesta.  
  
 Libreria di classi .NET Framework fornisce una proprietà statica, <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>, che restituisce un <xref:System.Text.EncodingProvider> oggetto che rende il set completo di codifiche disponibili per il desktop libreria di classi .NET Framework disponibili per [!INCLUDE[net_core](~/includes/net-core-md.md)] applicazioni. Inoltre, è possibile derivare il <xref:System.Text.EncodingProvider> (classe) per rendere disponibile la propria codifiche.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncodingProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncodingProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Text.EncodingProvider" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce una codifica.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage">Identificatore della tabella codici della codifica richiesta.</param>
        <summary>Restituisce la codifica associata all'identificatore della tabella codici specificata.</summary>
        <returns>Codifica associata alla tabella codici specificata oppure <see langword="null" /> se questo oggetto <see cref="T:System.Text.EncodingProvider" /> non è in grado di restituire una codifica valida che corrisponde a <paramref name="codepage" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 

## Remarks

### <a name="notes-to-inheritors"></a>Note per gli eredi

Si esegue l'override di [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) per restituire la codifica o le codifiche supportate dal <xref:System.Text.EncodingProvider> sottoclasse. Il codice utente quando tenta di recuperare una codifica chiamando il [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) metodo, il metodo passa il `codepage` identificatore per ogni provider di codifica registrati fino a quando non restituisce una codifica valida. Se nessuna restituisce una codifica valida, il [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) metodo tenta di recuperare una codifica memorizzati nella cache il cui identificatore della tabella codici è `codepage`. Per questo motivo, se `codepage` non è l'identificatore della tabella codici della codifica che supportano, il metodo deve restituire `null`; non deve mai generare un'eccezione.
        
Si noti che è anche possibile scegliere di restituire una tabella codici predefinita se il valore di `codepage` argomento è 0.

## <a name="notes-to-callers"></a>Note per i chiamanti
        
Questo metodo viene chiamato il [Encoding.GetEncoding(Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>) metodo. È necessario non chiamare direttamente dal codice utente.

        ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si esegue l'override di <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> per restituire la codifica o le codifiche supportate dal <see cref="T:System.Text.EncodingProvider" /> sottoclasse. Il codice utente quando tenta di recuperare una codifica chiamando il <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> metodo, il metodo passa il <paramref name="codepage" /> identificatore per ogni provider di codifica registrati fino a quando non restituisce una codifica valida. Se nessuna restituisce una codifica valida, il <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> metodo tenta di recuperare una codifica memorizzati nella cache il cui identificatore della tabella codici è <paramref name="codepage" />. Per questo motivo, se <paramref name="codepage" /> non è l'identificatore della tabella codici della codifica che supportano, il metodo deve restituire <see langword="null" />; non deve mai generare un'eccezione.</para>
        </block>
        <block subset="none" type="usage">
          <para>Questo metodo viene chiamato dal <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> metodo. È necessario non chiamare direttamente dal codice utente.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome della codifica richiesta.</param>
        <summary>Restituisce la codifica con il nome specificato.</summary>
        <returns>Codifica associata al nome specificato oppure <see langword="null" /> se questo oggetto <see cref="T:System.Text.EncodingProvider" /> non è in grado di restituire una codifica valida che corrisponde a <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 
      
## <a name="notes-to-inheritors"></a>Note per gli eredi 
                  
Si esegue l'override di [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) per restituire la codifica o le codifiche supportate dal <xref:System.Text.EncodingProvider> sottoclasse. Il codice utente quando tenta di recuperare una codifica chiamando il [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) metodo, il metodo passa il `name` argomento per ogni provider di codifica registrati fino a quando non restituisce una codifica valida. Se nessuna restituisce una codifica valida, il [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) metodo tenta di recuperare una codifica memorizzati nella cache il cui nome è `name`. Per questo motivo, se `name` non corrisponde al nome di una codifica che supportano, il metodo dovrebbe restituire `null`. È l'unico caso in cui il metodo deve generare un'eccezione se `name` è `null`.

## <a name="notes-to-callers"></a>Note per i chiamanti

Questo metodo viene chiamato il [Encoding.GetEncoding(String)](<xref:System.Text.Encoding.GetEncoding(System.String)>) metodo. È necessario non chiamare direttamente dal codice utente.
        ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si esegue l'override di <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> per restituire la codifica o le codifiche supportate dal <see cref="T:System.Text.EncodingProvider" /> sottoclasse. Il codice utente quando tenta di recuperare una codifica chiamando il <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> metodo, il metodo passa il <paramref name="name" /> argomento per ogni provider di codifica registrati fino a quando non restituisce una codifica valida. Se nessuna restituisce una codifica valida, il <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> metodo tenta di recuperare una codifica memorizzati nella cache il cui nome è <paramref name="name" />. Per questo motivo, se <paramref name="name" /> non corrisponde al nome di una codifica che supportano, il metodo dovrebbe restituire <see langword="null" />. È l'unico caso in cui il metodo deve generare un'eccezione se <paramref name="name" /> è <see langword="null" />.</para>
        </block>
        <block subset="none" type="usage">
          <para>Questo metodo viene chiamato dal <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> metodo. È necessario non chiamare direttamente dal codice utente.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (codepage, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage">Identificatore della tabella codici della codifica richiesta.</param>
        <param name="encoderFallback">Oggetto che fornisce una procedura di gestione degli errori quando un carattere non può essere codificato usando questa codifica.</param>
        <param name="decoderFallback">Oggetto che fornisce una procedura di gestione degli errori quando una sequenza di byte non può essere decodificata usando questa codifica.</param>
        <summary>Restituisce la codifica associata all'identificatore della tabella codici specificata. I parametri specificano un gestore errori per i caratteri che non possono essere codificati e per le sequenze di byte che non possono essere decodificate.</summary>
        <returns>Codifica associata alla tabella codici specificata oppure <see langword="null" /> se questo oggetto <see cref="T:System.Text.EncodingProvider" /> non è in grado di restituire una codifica valida che corrisponde a <paramref name="codepage" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `encoderFallback` e `decoderFallback` i parametri sono oggetti che definiscono la strategia di fallback usata nel caso in cui un codificatore non è possibile convertire un carattere in una sequenza di byte o un decodificatore non è possibile convertire una sequenza di byte in un carattere. .NET Framework fornisce i seguenti meccanismi di fallback:  
  
-   Fallback di eccezione. Se il `encoderFallback` argomento è un'istanza di <xref:System.Text.EncoderExceptionFallback>, o il `decoderExceptionFallback` argomento è un'istanza di <xref:System.Text.DecoderExceptionFallback>, il metodo di codifica genera un'eccezione se non è possibile codificare i caratteri e il metodo decodifica genera un'eccezione se un byte sequenza non può essere decodificata.  
  
-   Fallback di sostituzione. Se il `encoderFallback` argomento è un'istanza di <xref:System.Text.EncoderReplacementFallback>, o il `decoderExceptionFallback` argomento è un'istanza di <xref:System.Text.DecoderReplacementFallback>, la codifica e decodifica i metodi usano una stringa di sostituzione per i caratteri che non possono essere codificati e le sequenze di byte non possono essere decodificare. Se l'oggetto di fallback di sostituzione è creata chiamando il costruttore predefinito, il carattere di sostituzione è un "?". Se si chiama il <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> o <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> costruttore, è possibile specificare la stringa di sostituzione.  
  
-   Fallback con mapping più appropriato. È possibile derivare le <xref:System.Text.EncoderFallback> o <xref:System.Text.DecoderFallback> classe per implementare un meccanismo di fallback di sostituzione.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Poiché le chiamate a questo metodo usano l'implementazione del <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> metodo, non è necessario eseguirne l'override. Il codice utente quando tenta di recuperare una codifica chiamando il <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metodo, il metodo passa il <paramref name="codepage" /> identificatore per ogni provider di codifica registrati fino a quando non restituisce una codifica valida. Se nessuna restituisce una codifica valida, il <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> metodo tenta di recuperare una codifica memorizzati nella cache il cui identificatore della tabella codici è <paramref name="codepage" />. Per questo motivo, se si sceglie di eseguire l'override di <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metodo, la sostituzione deve restituire <see langword="null" /> se <paramref name="codepage" /> non è l'identificatore della tabella codici della codifica che si supportano; non deve mai generare un'eccezione.</para>
        </block>
        <block subset="none" type="usage">
          <para>Questo metodo viene chiamato dal <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metodo. È necessario non chiamare direttamente dal codice utente.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (name, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name">Nome della codifica preferita.</param>
        <param name="encoderFallback">Oggetto che fornisce una procedura di gestione degli errori quando un carattere non può essere codificato usando questa codifica.</param>
        <param name="decoderFallback">Oggetto che fornisce una procedura di gestione degli errori quando una sequenza di byte non può essere decodificata con la codifica corrente.</param>
        <summary>Restituisce la codifica associata al nome specificato. I parametri specificano un gestore errori per i caratteri che non possono essere codificati e per le sequenze di byte che non possono essere decodificate.</summary>
        <returns>Codifica associata al nome specificato oppure <see langword="null" /> se questo oggetto <see cref="T:System.Text.EncodingProvider" /> non è in grado di restituire una codifica valida che corrisponde a <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `encoderFallback` e `decoderFallback` i parametri sono oggetti che definiscono la strategia di fallback usata nel caso in cui un codificatore non è possibile convertire un carattere in una sequenza di byte o un decodificatore non è possibile convertire una sequenza di byte in un carattere. .NET Framework fornisce i seguenti meccanismi di fallback:  
  
-   Fallback di eccezione. Se il `encoderFallback` argomento è un'istanza di <xref:System.Text.EncoderExceptionFallback>, o il `decoderExceptionFallback` argomento è un'istanza di <xref:System.Text.DecoderExceptionFallback>, il metodo di codifica genera un'eccezione se non è possibile codificare i caratteri e il metodo decodifica genera un'eccezione se un byte sequenza non può essere decodificata.  
  
-   Fallback di sostituzione. Se il `encoderFallback` argomento è un'istanza di <xref:System.Text.EncoderReplacementFallback>, o il `decoderExceptionFallback` argomento è un'istanza di <xref:System.Text.DecoderReplacementFallback>, la codifica e decodifica i metodi usano una stringa di sostituzione per i caratteri che non possono essere codificati e le sequenze di byte non possono essere decodificare. Se l'oggetto di fallback di sostituzione è creata chiamando il costruttore predefinito, il carattere di sostituzione è un "?". Se si chiama il <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> o <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> costruttore, è possibile specificare la stringa di sostituzione.  
  
-   Fallback con mapping più appropriato. È possibile derivare le <xref:System.Text.EncoderFallback> o <xref:System.Text.DecoderFallback> classe per implementare un meccanismo di fallback di sostituzione.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Poiché le chiamate a questo metodo usano l'implementazione del <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> metodo, non è necessario eseguirne l'override. Il codice utente quando tenta di recuperare una codifica chiamando il <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metodo, il metodo passa il <paramref name="codepage" /> identificatore per ogni provider di codifica registrati fino a quando non restituisce una codifica valida. Se nessuna restituisce una codifica valida, il <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> metodo tenta di recuperare una codifica memorizzati nella cache il cui identificatore della tabella codici è <paramref name="codepage" />. Per questo motivo, se si sceglie di eseguire l'override di <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metodo, la sostituzione deve restituire <see langword="null" /> se <paramref name="codepage" /> non è l'identificatore della tabella codici della codifica che si supportano; non deve mai generare un'eccezione.</para>
        </block>
        <block subset="none" type="usage">
          <para>Questo metodo viene chiamato dal <see cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> metodo. È necessario non chiamare direttamente dal codice utente.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
  </Members>
</Type>